# !/usr/bin/env python3
"""
Test class generation functions for MegaLinter build system
"""
import logging
import os
import shutil

import megalinter

from build_constants import *


def generate_linter_test_classes():
    """
    Automatically generate a test class for each linter class
    This could be done dynamically at runtime, but having a physical class is easier for developers in IDEs
    """
    test_linters_root = f"{REPO_HOME}/megalinter/tests/test_megalinter/linters"

    if DELETE_TEST_CLASSES is True:
        # Remove all the contents of test_linters_root beforehand so that the result is deterministic
        shutil.rmtree(os.path.realpath(test_linters_root))
        os.makedirs(os.path.realpath(test_linters_root))

    linters = megalinter.linter_factory.list_all_linters(({"request_id": "build"}))
    for linter in linters:
        if linter.name is not None:
            linter_name = linter.name
        else:
            lang_lower = linter.descriptor_id.lower()
            linter_name = f"{lang_lower}_{linter.linter_name}"

        linter_name_lower = linter_name.lower().replace("-", "_")
        test_class_code = f"""# !/usr/bin/env python3
\"\"\"
Unit tests for {linter.descriptor_id} linter {linter.linter_name}
This class has been automatically {'@'}generated by .automation/build.py, please don't update it manually
\"\"\"

from unittest import TestCase

from megalinter.tests.test_megalinter.LinterTestRoot import LinterTestRoot


class {linter_name_lower}_test(TestCase, LinterTestRoot):
    descriptor_id = "{linter.descriptor_id}"
    linter_name = "{linter.linter_name}"
"""
        test_class_file_name = f"{test_linters_root}/{linter_name_lower}_test.py"
        if not os.path.isfile(test_class_file_name):
            file = open(
                test_class_file_name,
                "w",
                encoding="utf-8",
            )
            file.write(test_class_code)
            file.close()
            logging.info("Updated " + file.name)


def list_descriptors_for_build():
    """List descriptors and linters organized by type for build operations"""
    global DESCRIPTORS_FOR_BUILD_CACHE
    if DESCRIPTORS_FOR_BUILD_CACHE is not None:
        return DESCRIPTORS_FOR_BUILD_CACHE
    descriptor_files = megalinter.linter_factory.list_descriptor_files()
    linters_by_type = {"language": [], "format": [], "tooling_format": [], "other": []}
    descriptors = []
    for descriptor_file in descriptor_files:
        descriptor = megalinter.linter_factory.build_descriptor_info(descriptor_file)
        descriptors += [descriptor]
        descriptor_linters = megalinter.linter_factory.build_descriptor_linters(
            descriptor_file, {"request_id": "build"}
        )
        linters_by_type[descriptor_linters[0].descriptor_type] += descriptor_linters
    DESCRIPTORS_FOR_BUILD_CACHE = descriptors, linters_by_type
    return descriptors, linters_by_type
