descriptor_id: GO
descriptor_type: language
descriptor_flavors:
  - cupcake
  - go
file_extensions:
  - ".go"
install:
  apk:
    - go
test_folder: golang
linters:
  # GOLANG CI LINT
  - linter_name: golangci-lint
    linter_text: |
      **Golangci-lint** is a fast, comprehensive linters runner for Go that provides a unified interface to over 100 different Go linters. It's designed to be the ultimate Go code quality tool, combining multiple linters into a single, efficient, and highly configurable solution.

      **Key features:**

      - **‚ö° Extremely Fast**: Runs linters in parallel, reuses Go build cache, and caches analysis results for optimal performance
      - **üì¶ 100+ Linters Included**: Comprehensive collection of linters covering all aspects of Go code quality - no need to install them separately
      - **‚öôÔ∏è YAML Configuration**: Flexible configuration system with sensible defaults and extensive customization options
      - **ü•á Minimal False Positives**: Carefully tuned default settings to reduce noise and focus on real issues
      - **üî• Rich Output Formats**: Multiple output formats including text with colors, JSON, SARIF, HTML, JUnit-XML, and more

      **Comprehensive linting coverage:**

      - **Code Quality**: Detects bugs, performance issues, and maintainability problems
      - **Style Enforcement**: Ensures consistent formatting and coding conventions
      - **Security Analysis**: Identifies potential security vulnerabilities and unsafe patterns
      - **Performance Optimization**: Finds inefficient code patterns and suggests improvements
      - **Complexity Analysis**: Measures and controls code complexity and cognitive load
      - **Error Handling**: Validates proper error handling patterns in Go

      **Popular included linters:**

      - **staticcheck**: Advanced static analysis for Go
      - **govet**: Official Go static analyzer
      - **errcheck**: Checks for unchecked errors
      - **gosimple**: Suggests code simplifications  
      - **ineffassign**: Detects ineffectual assignments
      - **misspell**: Finds commonly misspelled words
      - **gocyclo**: Cyclomatic complexity analysis
      - **gosec**: Security-focused static analysis

      **Advanced capabilities:**

      - **Smart Caching**: Dramatically speeds up repeated runs by caching results
      - **Incremental Analysis**: Can analyze only changed files for faster analysis
      - **Custom Rules**: Support for custom linters and configuration
      - **Issue Filtering**: Sophisticated filtering and suppression of false positives
      - **Parallel Execution**: Concurrent linter execution for maximum speed

      Golangci-lint is the industry standard for Go code quality and is used by thousands of Go projects for maintaining high code standards and catching issues early in the development process.
    can_output_sarif: true
    linter_spdx_license: GPL-3.0
    linter_url: https://golangci-lint.run/
    linter_repo: https://github.com/golangci/golangci-lint
    linter_rules_url: https://golangci-lint.run/usage/linters/
    linter_banner_image_url: https://repository-images.githubusercontent.com/132145189/05239680-dfaf-11e9-9646-2c3ef2f5f8d4
    linter_rules_configuration_url: https://golangci-lint.run/usage/configuration/#config-file
    linter_rules_inline_disable_url: https://golangci-lint.run/usage/false-positives/#nolint
    config_file_name: .golangci.yml
    cli_lint_mode: project
    cli_lint_extra_args:
      - "run"
    cli_sarif_args:
      - --output.sarif.path
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_fix_arg_name: --fix
    cli_version_arg_name: "version"
    version_extract_regex: "((\\d+(\\.\\d+)+)|(master))"
    examples:
      - "golangci-lint run myfile.go"
      - "golangci-lint run -c .golangci.yml myfile.go"
    install:
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=golangci/golangci-lint
          ARG GO_GOLANGCI_LINT_VERSION=2.2.1
        - |
          RUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s "v${GO_GOLANGCI_LINT_VERSION}" \
              && golangci-lint --version
    ide:
      emacs:
        - name: flycheck-golandci-lint
          url: https://github.com/weijiangan/flycheck-golangci-lint
        - name: SpaceMacs
          url: https://github.com/syl20bnr/spacemacs/blob/develop/layers/+lang/go/README.org#pre-requisites
      goland:
        - name: goland
          url: https://www.jetbrains.com/help/go/settings-tools-file-watchers.html
      sublime:
        - name: SublimeLinter-contrib-golang-cilint
          url: https://github.com/alecthomas/SublimeLinter-contrib-golang-cilint
      vim:
        - name: vim-go
          url: https://github.com/fatih/vim-go
      vscode:
        - name: vscode.Go
          url: https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go
  # REVIVE
  - class: ReviveLinter
    linter_name: revive
    linter_text: |
      **Revive** is a fast, configurable, and extensible linter for Go that serves as a modern replacement for the deprecated golint tool. It provides comprehensive code quality analysis with superior performance and flexibility, making it an essential tool for maintaining high-quality Go codebases.

      **Key Features:**

      - **High Performance**: Significantly faster than golint with efficient parallel processing and optimized analysis algorithms
      - **Drop-in Replacement**: Seamless migration from golint with improved functionality and additional rule coverage
      - **Extensive Rule Set**: Comprehensive collection of rules covering style, complexity, naming conventions, and potential bugs
      - **Highly Configurable**: Flexible TOML-based configuration system allowing fine-tuned rule customization and project-specific settings
      - **SARIF Output**: Modern reporting format support for integration with security tools and development platforms
      - **Inline Rule Control**: Comment-based directives for disabling specific rules on particular lines or sections
      - **Beautiful Output**: Clean, readable error messages with helpful suggestions and context
      - **Extensible Architecture**: Plugin system for custom rules and project-specific requirements
    test_folder: golang_revive
    can_output_sarif: true
    linter_spdx_license: MIT
    linter_url: https://revive.run/
    linter_repo: https://github.com/mgechev/revive
    linter_rules_url: https://revive.run/r
    linter_image_url: https://github.com/mgechev/revive/raw/master/assets/logo.png
    linter_rules_configuration_url: https://revive.run/docs#custom-configuration
    linter_rules_inline_disable_url: https://revive.run/docs#comment-directives
    config_file_name: revive.toml
    cli_config_arg_name: "-config"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - -set_exit_status
    cli_sarif_args:
      - -formatter
      - sarif
    cli_help_arg_name: "-help"
    cli_version_arg_name: "-version"
    help_command_return_code: 0
    examples:
      - "revive myfile.go"
      - "revive -config myfile.go"
    install:
      dockerfile:
        ## Until "FROM ghcr.io/mgechev/revive:1.2.5 AS revive" is available, use
        # - FROM ghcr.io/mgechev/revive:1.2.5 AS revive
        # - COPY --link --from=revive /usr/bin/revive /usr/bin/revive
        - |-
          # renovate: datasource=github-tags depName=mgechev/revive
          ARG GO_REVIVE_VERSION=v1.10.0
        - |-
          FROM golang:1-alpine AS revive
          ## The golang image used as a builder is a temporary workaround (https://github.com/mgechev/revive/issues/787)
          ## for the released revive binaries not returning version numbers (devel).
          ## The install command should then be what is commented in the go.megalinter-descriptor.yml
          ARG GO_REVIVE_VERSION
          RUN GOBIN=/usr/bin go install github.com/mgechev/revive@$GO_REVIVE_VERSION
        - COPY --link --from=revive /usr/bin/revive /usr/bin/revive
    ide:
      vim:
        - name: ale
          url: https://github.com/dense-analysis/ale
      vscode:
        - name: vscode.Go
          url: https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go
