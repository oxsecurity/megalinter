descriptor_id: PYTHON
descriptor_type: language
descriptor_flavors:
  - cupcake
  - formatters
  - python
file_extensions:
  - ".py"
processing_order: -9
linters:
  # PYLINT
  - linter_name: pylint
    name: PYTHON_PYLINT
    linter_url: https://pylint.readthedocs.io
    linter_repo: https://github.com/pylint-dev/pylint
    linter_speed: 2
    linter_rules_url: https://pylint.readthedocs.io/en/stable/user_guide/messages/index.html
    linter_image_url: https://raw.githubusercontent.com/pylint-dev/pylint/main/doc/logo.svg
    linter_rules_configuration_url: https://pylint.readthedocs.io/en/stable/user_guide/configuration/index.html
    linter_rules_inline_disable_url: https://pylint.readthedocs.io/en/stable/user_guide/messages/message_control.html
    cli_lint_mode: list_of_files
    config_file_name: .pylintrc
    cli_config_arg_name: "--rcfile"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: ":([0-9]+):([0-9]+):"
    examples:
      - "pylint myfile.py"
      - "pylint --rcfile .python-lint myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=pylint
          ARG PIP_PYLINT_VERSION=3.3.4
        - |-
          # renovate: datasource=pypi depName=typing-extensions
          ARG PIP_TYPING_EXTENSIONS_VERSION=4.12.2
      pip:
        - pylint==${PIP_PYLINT_VERSION}
        - typing-extensions==${PIP_TYPING_EXTENSIONS_VERSION}
    ide:
      eclipse:
        - name: PyLint
          url: https://pydev.org/manual_adv_pylint.html
      idea:
        - name: PyCharm (Native Support)
          url: https://www.jetbrains.com/pycharm/
      visual_studio:
        - name: Native Support
          url: https://docs.microsoft.com/fr-fr/visualstudio/python/linting-python-code?view=vs-2019
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_pylint
  # BLACK
  - linter_name: black
    name: PYTHON_BLACK
    is_formatter: true
    activation_rules:
      - type: variable
        variable: PYTHON_DEFAULT_STYLE
        expected_value: black
        default_value: black
    linter_url: https://black.readthedocs.io/en/stable/
    linter_repo: https://github.com/psf/black
    linter_speed: 3
    linter_banner_image_url: https://raw.githubusercontent.com/psf/black/master/docs/_static/logo2-readme.png
    linter_rules_configuration_url: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-format
    config_file_name: pyproject.toml
    cli_config_arg_name: "--config"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--diff"
      - "--check"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    examples:
      - "black --diff --check myfile.py"
      - "black --config pyproject.toml --diff --check myfile.py"
      - "black --config pyproject.toml myfile.py" # format
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=black
          ARG PIP_BLACK_VERSION=25.1.0
      pip:
        - black==${PIP_BLACK_VERSION}
    ide:
      atom:
        - name: python-black
          url: https://atom.io/packages/python-black
      emacs:
        - name: blacken
          url: https://github.com/pythonic-emacs/blacken
        - name: reformatter.el
          url: https://github.com/purcell/reformatter.el
        - name: elpy
          url: https://github.com/jorgenschaefer/elpy
      idea:
        - name: black
          url: https://black.readthedocs.io/en/stable/integrations/editors.html#pycharm-intellij-idea
      sublime:
        - name: sublack
          url: https://github.com/jgirardet/sublack
      vscode:
        - name: VSCode Python Extension
          url: https://marketplace.visualstudio.com/items?itemName=ms-python.python
  # FLAKE8
  - linter_name: flake8
    name: PYTHON_FLAKE8
    linter_url: https://flake8.pycqa.org
    linter_repo: https://github.com/PyCQA/flake8
    linter_spdx_license: MIT
    linter_speed: 3
    linter_rules_url: https://flake8.pycqa.org/en/latest/user/error-codes.html
    linter_rules_configuration_url: https://flake8.pycqa.org/en/latest/user/configuration.html#project-configuration
    linter_rules_inline_disable_url: https://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html#in-line-ignoring-errors
    cli_lint_mode: list_of_files
    config_file_name: .flake8
    cli_config_arg_name: "--config"
    cli_lint_errors_count: total_lines
    examples:
      - "flake8 myfile.py"
      - "flake8 --config .flake8 myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=flake8
          ARG PIP_FLAKE8_VERSION=7.1.2
      pip:
        - flake8==${PIP_FLAKE8_VERSION}
    ide:
      atom:
        - name: linter-flake8
          url: https://atom.io/packages/linter-flake8
      idea:
        - name: flake8-support
          url: https://plugins.jetbrains.com/plugin/11563-flake8-support
          id: python-flake8
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_flake8
  # ISORT
  - linter_name: isort
    name: PYTHON_ISORT
    is_formatter: true
    linter_url: https://pycqa.github.io/isort/
    linter_repo: https://github.com/PyCQA/isort
    linter_speed: 5
    linter_banner_image_url: https://raw.githubusercontent.com/pycqa/isort/develop/art/logo_large.png
    linter_rules_configuration_url: https://pycqa.github.io/isort/docs/configuration/config_files.html
    linter_rules_inline_disable_url: https://pycqa.github.io/isort/docs/configuration/action_comments.html
    cli_lint_mode: list_of_files
    config_file_name: .isort.cfg
    cli_config_arg_name: "--settings-file"
    cli_lint_extra_args:
      - "--diff"
      - "--check"
      - "--profile"
      - "black"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for PythonBlackOrIsortLinter class behavior
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "\\@\\@ (.*) \\@\\@"
    examples:
      - "isort --diff --check --profile black myfile.py"
      - "isort --diff --check --profile black --settings-file .isort.cfg myfile.py"
      - "isort --profile black --settings-file .isort.cfg myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=black
          ARG PIP_BLACK_VERSION=25.1.0
        - |-
          # renovate: datasource=pypi depName=isort
          ARG PIP_ISORT_VERSION=6.0.1
      pip:
        - black==${PIP_BLACK_VERSION}
        - isort==${PIP_ISORT_VERSION}
    ide:
      atom:
        - name: atom-python-isort
          url: https://github.com/bh/atom-python-isort
        - name: atom-isort
          url: https://atom.io/packages/atom-isort
      emacs:
        - name: py-isort.el
          url: https://github.com/paetzke/py-isort.el
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
        - name: vim-isort
          url: https://github.com/fisadev/vim-isort#installation
      vscode:
        - name: VSCode Python Extension
          url: https://github.com/Microsoft/vscode-python
  # BANDIT
  - linter_name: bandit
    name: PYTHON_BANDIT
    can_output_sarif: true
    descriptor_flavors:
      - python
      - security
    linter_text: |
      bandit checks for security risks

      If you find it too harsh, you may define `PYTHON_BANDIT_DISABLE_ERRORS: true` in your `.mega-linter.yml` config file
    linter_url: https://bandit.readthedocs.io/en/latest/
    linter_repo: https://github.com/PyCQA/bandit
    linter_rules_url: https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    linter_banner_image_url: https://github.com/PyCQA/bandit/raw/main/logo/logotype-sm.png
    linter_image_url: https://github.com/PyCQA/bandit/raw/main/logo/logomark.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/bandit.png
    linter_rules_configuration_url: https://bandit.readthedocs.io/en/latest/config.html#
    linter_rules_inline_disable_url: https://bandit.readthedocs.io/en/latest/config.html#suppressing-individual-lines
    cli_lint_mode: list_of_files
    config_file_name: ".bandit.yml"
    cli_lint_extra_args:
      - --quiet
    cli_sarif_args:
      - --format
      - sarif
      - --output
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: ">> Issue: \\["
    version_extract_regex: "(?<=bandit )\\d+(\\.\\d+)+"
    test_folder: python_bandit
    examples:
      - "bandit myfile.py"
      - "bandit --configfile .bandit.yml myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=bandit
          ARG PIP_BANDIT_VERSION=1.8.3
        - |-
          # renovate: datasource=pypi depName=bandit_sarif_formatter
          ARG PIP_BANDIT_SARIF_FORMATTER_VERSION=1.1.1
      pip:
        - bandit==${PIP_BANDIT_VERSION}
        - bandit_sarif_formatter==${PIP_BANDIT_SARIF_FORMATTER_VERSION}
        - bandit[toml]==${PIP_BANDIT_VERSION}
    ide:
      atom:
        - name: bandit-lint
          url: https://atom.io/packages/bandit-lint
      sublime:
        - name: SublimeLinter-bandit
          url: https://github.com/SublimeLinter/SublimeLinter-bandit
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_bandit
  # MYPY
  - linter_name: mypy
    name: PYTHON_MYPY
    linter_text: |
      Optional static typing checks for python

      If you don't use python static typing, you should disable this linter by adding `PYTHON_MYPY` in `DISABLE_LINTERS` variable in your `.mega-linter.yml` config file
    linter_url: https://mypy.readthedocs.io/en/stable/
    linter_repo: https://github.com/python/mypy
    linter_spdx_license: MIT
    linter_speed: 1
    linter_banner_image_url: http://mypy-lang.org/static/mypy_light.svg
    linter_rules_configuration_url: https://mypy.readthedocs.io/en/stable/config_file.html
    linter_rules_inline_disable_url: https://mypy.readthedocs.io/en/stable/inline_config.html#inline-config
    linter_megalinter_ref_url: never
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--install-types"
      - "--non-interactive"
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "Found ([0-9]+) error"
    cli_config_arg_name: "--config-file"
    cli_version_arg_name: "--version"
    config_file_name: ".mypy.ini"
    version_extract_regex: "(?<=mypy )\\d+(\\.\\d+)+"
    test_folder: python_mypy
    examples:
      - "mypy myfile.py"
      - "mypy --config-file .mypy.yml myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=mypy
          ARG PIP_MYPY_VERSION=1.15.0
        - ENV MYPY_CACHE_DIR=/tmp # Avoid mypy cache to mess with other linters
      pip:
        - mypy==${PIP_MYPY_VERSION}
    ide:
      atom:
        - name: linter-mypy
          url: https://atom.io/packages/linter-mypy
      emacs:
        - name: Flycheck mypy
          url: https://github.com/lbolla/emacs-flycheck-mypy
      idea:
        - name: mypy-official
          url: https://plugins.jetbrains.com/plugin/13348-mypy-official-/
      sublime:
        - name: SublimeLinter-contrib-mypy
          url: https://github.com/fredcallaway/SublimeLinter-contrib-mypy
      vim:
        - name: Ale
          url: https://github.com/dense-analysis/ale
        - name: Syntastic
          url: https://github.com/vim-syntastic/syntastic
      vscode:
        - name: Mypy
          url: https://marketplace.visualstudio.com/items?itemName=matangover.mypy
  # PyType # NV Not working yet, if anyone wants to complete it, please be my guest :)
  # - linter_name: pytype
  #   name: PYTHON_PYTYPE
  #   linter_text: |
  #     Optional static typing checks for python, by Google

  #     If you don't use python static typing, you should disable this linter by adding `PYTHON_PYTYPE` in `DISABLE_LINTERS` variable in your `.mega-linter.yml` config file
  #   linter_url: https://google.github.io/pytype/
  #   linter_repo: https://github.com/google/pytype
  #   linter_speed: 1
  #   linter_rules_inline_disable_url: https://google.github.io/pytype/user_guide.html#silencing-errors
  #   cli_lint_mode: list_of_files
  #   config_file_name: pytype.cfg
  #   cli_lint_errors_count: regex_sum
  #   cli_lint_errors_regex: "Found ([0-9]+) error"
  #   test_folder: python_mypy
  #   examples:
  #     - "pytype myfile.py myfile2.py"
  #     - "pytype myfile.py"
  #   install:
  #     dockerfile:
  #       - |-
  #         # renovate: datasource=pypi depName=pytype
  #         ARG PIP_PYTYPE_VERSION=2024.10.11
  #     pip:
  #       - pytype==${PIP_PYTYPE_VERSION}
  # PyRight
  - class: PyrightLinter
    linter_name: pyright
    name: PYTHON_PYRIGHT
    linter_text: |
      Optional static typing checks for python, by Microsoft

      If you don't use python static typing, you should disable this linter by adding `PYTHON_PYRIGHT` in `DISABLE_LINTERS` variable in your `.mega-linter.yml` config file
    linter_url: https://github.com/Microsoft/pyright
    linter_rules_url: https://github.com/microsoft/pyright#type-checking-features
    linter_repo: https://github.com/microsoft/pyright
    linter_banner_image_url: https://github.com/microsoft/pyright/raw/main/docs/img/PyrightLarge.png
    linter_speed: 1
    linter_rules_configuration_url: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
    linter_rules_inline_disable_url: https://github.com/microsoft/pyright/blob/main/docs/comments.md#file-level-type-controls
    cli_lint_mode: list_of_files
    config_file_name: pyrightconfig.json
    cli_config_arg_name: -p
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "([0-9]+) errors,"
    test_folder: python_mypy
    examples:
      - "pyright myfile.py myfile2.py"
      - "pyright myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=pyright
          ARG NPM_PYRIGHT_VERSION=1.1.396
      npm:
        - pyright@${NPM_PYRIGHT_VERSION}
    ide:
      emacs:
        - name: LSP-pyright
          url: https://github.com/emacs-lsp/lsp-pyright
      sublime:
        - name: LSP-pyright
          url: https://packagecontrol.io/packages/LSP-pyright
      vim:
        - name: Ale
          url: https://github.com/dense-analysis/ale
        - name: coc-pyright
          url: https://github.com/fannheyward/coc-pyright
      vscode:
        - name: PyRight
          url: https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright
  # ruff
  - linter_name: ruff
    name: PYTHON_RUFF
    can_output_sarif: true
    linter_text: |
      An extremely fast Python linter, written in Rust.
    linter_url: https://github.com/astral-sh/ruff
    linter_repo: https://github.com/astral-sh/ruff
    linter_spdx_license: MIT
    linter_speed: 5
    linter_rules_url: https://docs.astral.sh/ruff/rules/
    linter_rules_configuration_url: https://docs.astral.sh/ruff/configuration/
    linter_rules_inline_disable_url: https://docs.astral.sh/ruff/linter/#error-suppression
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--config"
    cli_help_arg_name: "help"
    cli_lint_fix_arg_name: "--fix"
    cli_version_arg_name: "--version"
    cli_lint_extra_args:
      - "check"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "Found ([0-9]+) error"
    config_file_name: ".ruff.toml"
    cli_sarif_args:
      - --output-format
      - sarif
      - --output-file
      - "{{SARIF_OUTPUT_FILE}}"
    test_folder: python_ruff
    examples:
      - "ruff check myfile.py"
      - "ruff check --config .ruff.toml myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=ruff
          ARG PIP_RUFF_VERSION=0.9.9
      pip:
        - ruff==${PIP_RUFF_VERSION}
    ide:
      idea:
        - name: Ruff
          url: https://plugins.jetbrains.com/plugin/20574-ruff
          id: com.koxudaxi.ruff
      vscode:
        - name: Ruff
          url: https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff

  # ruff fmt
  - linter_name: ruff-format
    class: RuffFormatLinter
    name: PYTHON_RUFF_FORMAT
    is_formatter: true
    activation_rules:
      - type: variable
        variable: PYTHON_DEFAULT_STYLE
        expected_value: ruff
        default_value: black
    linter_text: |
      An extremely fast Python linter, written in Rust. Configured for formatting only.
    linter_url: https://github.com/astral-sh/ruff
    linter_repo: https://github.com/astral-sh/ruff
    linter_spdx_license: MIT
    linter_speed: 5
    linter_rules_url: https://docs.astral.sh/ruff/rules/
    linter_rules_configuration_url: https://docs.astral.sh/ruff/configuration/
    linter_rules_inline_disable_url: https://docs.astral.sh/ruff/linter/#error-suppression
    cli_executable: ruff
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--config"
    cli_help_arg_name: "help"
    cli_version_arg_name: "--version"
    cli_lint_extra_args:
      - format
      - --check
    cli_lint_fix_remove_args:
      - --check
    config_file_name: ".ruff.toml"
    examples:
      - "ruff format --check myfile.py myfile2.py"
      - "ruff format --config .ruff.toml myfile.py myfile2.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=ruff
          ARG PIP_RUFF_VERSION=0.9.9
      pip:
        - ruff==${PIP_RUFF_VERSION}
    ide:
      idea:
        - name: Ruff
          url: https://plugins.jetbrains.com/plugin/20574-ruff
          id: com.koxudaxi.ruff
      vscode:
        - name: Ruff
          url: https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
