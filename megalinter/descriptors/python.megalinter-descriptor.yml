descriptor_id: PYTHON
descriptor_type: language
descriptor_flavors:
  - cupcake
  - formatters
  - python
file_extensions:
  - ".py"
processing_order: -9
linters:
  # PYLINT
  - linter_name: pylint
    linter_text: |
      **Pylint** is a comprehensive static code analyzer for Python that goes beyond simple syntax checking. It analyzes your code without actually running it, checking for errors, enforcing coding standards, detecting code smells, and suggesting refactoring opportunities.

      **Key features:**

      - **Advanced Code Inference**: Uses internal code representation (astroid) to infer actual values and types, catching more complex issues
      - **Comprehensive Analysis**: Checks for errors, style violations, code complexity, and potential bugs
      - **Highly Configurable**: Extensive configuration options to customize rules and integrate with any coding standard
      - **Plugin Ecosystem**: Rich ecosystem of plugins for popular frameworks (Django, Pydantic, etc.)
      - **Smart Detection**: Not just trusting type hints - infers actual usage patterns and relationships
      - **Refactoring Suggestions**: Identifies code smells and suggests improvements for maintainability

      **What makes Pylint unique:**

      - **Deep Inference Engine**: Can detect issues like `import logging as argparse` and catch calls like `argparse.error()` as incorrect
      - **Thorough Analysis**: More comprehensive than other linters, though slower due to detailed inspection
      - **Opinionated Checks**: Includes optional checks for code quality beyond basic syntax

      **Common checks include:**

      - **Error Detection**: Syntax errors, undefined variables, import issues
      - **Code Quality**: Unused variables, too many arguments, complex functions
      - **Style Enforcement**: PEP 8 compliance, naming conventions, documentation standards
      - **Design Analysis**: Class design, inheritance issues, interface violations
      - **Security**: Basic security anti-patterns and vulnerable code constructs

      **Additional tools included:**

      - **Pyreverse**: Generates UML package and class diagrams
      - **Symilar**: Duplicate code detection integrated into pylint

      For legacy projects, start with `--errors-only` flag and progressively enable more checks. Works best alongside other tools like ruff, mypy, black, and isort for comprehensive Python code quality.
    name: PYTHON_PYLINT
    linter_url: https://pylint.readthedocs.io
    linter_repo: https://github.com/pylint-dev/pylint
    linter_spdx_license: GPL-2.0
    linter_speed: 2
    linter_rules_url: https://pylint.readthedocs.io/en/stable/user_guide/messages/index.html
    linter_image_url: https://raw.githubusercontent.com/pylint-dev/pylint/main/doc/logo.svg
    linter_rules_configuration_url: https://pylint.readthedocs.io/en/stable/user_guide/configuration/index.html
    linter_rules_inline_disable_url: https://pylint.readthedocs.io/en/stable/user_guide/messages/message_control.html
    cli_lint_mode: list_of_files
    config_file_name: .pylintrc
    cli_config_arg_name: "--rcfile"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: ":([0-9]+):([0-9]+):"
    examples:
      - "pylint myfile.py"
      - "pylint --rcfile .python-lint myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=pylint
          ARG PIP_PYLINT_VERSION=3.3.7
        - |-
          # renovate: datasource=pypi depName=typing-extensions
          ARG PIP_TYPING_EXTENSIONS_VERSION=4.14.1
      pip:
        - pylint==${PIP_PYLINT_VERSION}
        - typing-extensions==${PIP_TYPING_EXTENSIONS_VERSION}
    ide:
      eclipse:
        - name: PyLint
          url: https://pydev.org/manual_adv_pylint.html
      idea:
        - name: PyCharm (Native Support)
          url: https://www.jetbrains.com/pycharm/
      visual_studio:
        - name: Native Support
          url: https://docs.microsoft.com/fr-fr/visualstudio/python/linting-python-code?view=vs-2019
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_pylint
  # BLACK
  - linter_name: black
    linter_text: |
      **Black** is "the uncompromising code formatter" for Python that automatically formats your code to be consistent and PEP 8 compliant. By using Black, you agree to cede control over minutiae of hand-formatting in return for speed, determinism, and freedom from formatting debates.

      **Key features:**

      - **Opinionated Formatting**: Minimal configuration with sensible defaults - "Black is opinionated so you don't have to be"
      - **Deterministic Output**: Same code always produces identical formatting, regardless of environment
      - **Speed and Efficiency**: Fast formatting with parallel processing capabilities
      - **Smallest Diffs**: Produces minimal git diffs by being consistent across all projects
      - **AST Safety**: Verifies that reformatted code produces a valid AST equivalent to the original
      - **Wide Compatibility**: Supports multiple Python versions and syntax features

      **Formatting principles:**

      - **Consistency Over Preferences**: Uniform style across all Python projects using Black
      - **Readability First**: Optimizes for code readability and maintainability
      - **Minimal Configuration**: Works out of the box with virtually no setup required

      **What Black formats:**

      - **Code Structure**: Consistent indentation, line breaks, and whitespace
      - **String Formatting**: Standardizes quote usage and multi-line strings
      - **Import Organization**: Works well with isort for import formatting
      - **Expression Layout**: Optimizes function calls, list comprehensions, and complex expressions

      **Benefits:**

      - **Faster Code Reviews**: Eliminates style discussions and focuses on logic
      - **Mental Energy Savings**: No time spent on formatting decisions
      - **Team Consistency**: Entire team uses identical formatting standards
      - **Reduced Conflicts**: Fewer git merge conflicts due to formatting differences

      Black is successfully used by many projects, small and big, and has become the de facto standard for Python code formatting. It's now stable with comprehensive test coverage and should not expect large formatting changes in the future.

      **Note**: Black formats code according to its opinionated style. If you prefer different formatting options, you might consider other formatters, though Black's consistency is its main strength.
    name: PYTHON_BLACK
    is_formatter: true
    activation_rules:
      - type: variable
        variable: PYTHON_DEFAULT_STYLE
        expected_value: black
        default_value: black
    linter_url: https://black.readthedocs.io/en/stable/
    linter_repo: https://github.com/psf/black
    linter_spdx_license: MIT
    linter_speed: 3
    linter_banner_image_url: https://raw.githubusercontent.com/psf/black/master/docs/_static/logo2-readme.png
    linter_rules_configuration_url: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-format
    config_file_name: pyproject.toml
    cli_config_arg_name: "--config"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--diff"
      - "--check"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    examples:
      - "black --diff --check myfile.py"
      - "black --config pyproject.toml --diff --check myfile.py"
      - "black --config pyproject.toml myfile.py" # format
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=black
          ARG PIP_BLACK_VERSION=25.1.0
      pip:
        - black==${PIP_BLACK_VERSION}
    ide:
      emacs:
        - name: blacken
          url: https://github.com/pythonic-emacs/blacken
        - name: reformatter.el
          url: https://github.com/purcell/reformatter.el
        - name: elpy
          url: https://github.com/jorgenschaefer/elpy
      idea:
        - name: black
          url: https://black.readthedocs.io/en/stable/integrations/editors.html#pycharm-intellij-idea
      sublime:
        - name: sublack
          url: https://github.com/jgirardet/sublack
      vscode:
        - name: VSCode Python Extension
          url: https://marketplace.visualstudio.com/items?itemName=ms-python.python
  # FLAKE8
  - linter_name: flake8
    linter_text: |
      **Flake8** is a comprehensive Python code quality checker that combines three powerful tools—pycodestyle, pyflakes, and mccabe—into a unified linting solution. It serves as the go-to tool for enforcing Python coding standards and catching potential issues.

      **Key Features:**

      - **Multi-Tool Integration**: Combines pycodestyle (PEP 8 compliance), pyflakes (logical errors), and mccabe (complexity analysis)
      - **PEP 8 Enforcement**: Comprehensive style checking against Python's official style guide
      - **Error Detection**: Identifies undefined names, unused imports, syntax errors, and logical inconsistencies
      - **Complexity Analysis**: Measures cyclomatic complexity to identify overly complex functions and methods
      - **Highly Configurable**: Extensive configuration options for customizing rules, ignoring specific errors, and setting complexity thresholds
      - **Plugin Ecosystem**: Rich ecosystem of plugins for additional checks (security, documentation, imports, etc.)
      - **Fast Performance**: Efficient scanning with parallel processing capabilities for large codebases
      - **Inline Suppression**: Granular control with per-line and per-file error suppression options
    name: PYTHON_FLAKE8
    linter_url: https://flake8.pycqa.org
    linter_repo: https://github.com/PyCQA/flake8
    linter_spdx_license: MIT
    linter_speed: 3
    linter_rules_url: https://flake8.pycqa.org/en/latest/user/error-codes.html
    linter_rules_configuration_url: https://flake8.pycqa.org/en/latest/user/configuration.html#project-configuration
    linter_rules_inline_disable_url: https://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html#in-line-ignoring-errors
    cli_lint_mode: list_of_files
    config_file_name: .flake8
    cli_config_arg_name: "--config"
    cli_lint_errors_count: total_lines
    examples:
      - "flake8 myfile.py"
      - "flake8 --config .flake8 myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=flake8
          ARG PIP_FLAKE8_VERSION=7.3.0
      pip:
        - flake8==${PIP_FLAKE8_VERSION}
    ide:
      idea:
        - name: flake8-support
          url: https://plugins.jetbrains.com/plugin/11563-flake8-support
          id: python-flake8
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_flake8
  # ISORT
  - linter_name: isort
    linter_text: |
      **isort** is the definitive Python import sorting tool that automatically organizes and standardizes import statements according to configurable rules. It serves as an essential companion to code formatters for maintaining clean, professional Python codebases.

      **Key Features:**

      - **Intelligent Import Grouping**: Automatically separates standard library, third-party, and local imports into distinct sections
      - **Alphabetical Sorting**: Sorts imports within each group alphabetically for consistent ordering
      - **Multiple Profiles**: Built-in profiles for popular formatters (Black, Django, Google, etc.) ensuring seamless integration
      - **Highly Configurable**: Extensive configuration options for custom sorting rules, line lengths, and import styles
      - **Multi-line Import Handling**: Smart formatting of long import statements with various wrapping styles
      - **Namespace Package Support**: Proper handling of namespace packages and relative imports
      - **Performance Optimized**: Fast processing suitable for large codebases
      - **Format Compatibility**: Perfect integration with Black, autopep8, and other Python formatting tools
      - **Diff Mode**: Check-only mode for validation without modification
    name: PYTHON_ISORT
    is_formatter: true
    linter_url: https://pycqa.github.io/isort/
    linter_repo: https://github.com/PyCQA/isort
    linter_spdx_license: MIT
    linter_speed: 5
    linter_banner_image_url: https://raw.githubusercontent.com/pycqa/isort/develop/art/logo_large.png
    linter_rules_configuration_url: https://pycqa.github.io/isort/docs/configuration/config_files.html
    linter_rules_inline_disable_url: https://pycqa.github.io/isort/docs/configuration/action_comments.html
    cli_lint_mode: list_of_files
    config_file_name: .isort.cfg
    cli_config_arg_name: "--settings-file"
    cli_lint_extra_args:
      - "--diff"
      - "--check"
      - "--profile"
      - "black"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for PythonBlackOrIsortLinter class behavior
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "\\@\\@ (.*) \\@\\@"
    examples:
      - "isort --diff --check --profile black myfile.py"
      - "isort --diff --check --profile black --settings-file .isort.cfg myfile.py"
      - "isort --profile black --settings-file .isort.cfg myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=black
          ARG PIP_BLACK_VERSION=25.1.0
        - |-
          # renovate: datasource=pypi depName=isort
          ARG PIP_ISORT_VERSION=6.0.1
      pip:
        - black==${PIP_BLACK_VERSION}
        - isort==${PIP_ISORT_VERSION}
    ide:
      emacs:
        - name: py-isort.el
          url: https://github.com/paetzke/py-isort.el
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
        - name: vim-isort
          url: https://github.com/fisadev/vim-isort#installation
      vscode:
        - name: VSCode Python Extension
          url: https://github.com/Microsoft/vscode-python
  # BANDIT
  - linter_name: bandit
    name: PYTHON_BANDIT
    can_output_sarif: true
    descriptor_flavors:
      - python
      - security
    linter_text: |
      **Bandit** is a specialized security-focused tool designed to find common security issues in Python code. It processes each file by building an AST (Abstract Syntax Tree) and runs appropriate security plugins against the AST nodes to identify potential vulnerabilities.

      **Key features:**

      - **Security-Focused Analysis**: Specifically designed to detect security vulnerabilities and weaknesses
      - **AST-Based Scanning**: Builds abstract syntax trees for thorough code analysis
      - **Plugin Architecture**: Extensible system with test plugins and blacklist plugins for comprehensive coverage
      - **Multiple Output Formats**: Supports various report formats including SARIF for security tool integration
      - **Configurable Severity**: Customizable severity levels and rule configurations

      **Common security issues detected:**

      - **Injection Vulnerabilities**: SQL injection, command injection, code injection patterns
      - **Cryptographic Issues**: Weak cryptographic algorithms, insecure random number generation
      - **Authentication Problems**: Hardcoded passwords, weak authentication mechanisms  
      - **File System Security**: Insecure file permissions, path traversal vulnerabilities
      - **Network Security**: Insecure SSL/TLS configurations, unverified HTTPS requests
      - **Code Execution**: Use of dangerous functions like `eval()`, `exec()`, `pickle.loads()`
      - **Input Validation**: Missing input sanitization and validation

      **Advanced capabilities:**

      - **Blacklist Detection**: Identifies usage of known insecure or deprecated functions
      - **Context-Aware Analysis**: Understands code context to reduce false positives
      - **Baseline Support**: Can track security issues over time and focus on new problems

      If you find Bandit too strict for your use case, you can define `PYTHON_BANDIT_DISABLE_ERRORS: true` in your `.mega-linter.yml` config file to treat findings as warnings instead of errors.

      Bandit is essential for maintaining secure Python codebases and is widely used in security-conscious development environments.
    linter_url: https://bandit.readthedocs.io/en/latest/
    linter_repo: https://github.com/PyCQA/bandit
    linter_spdx_license: Apache-2.0
    linter_rules_url: https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    linter_banner_image_url: https://github.com/PyCQA/bandit/raw/main/logo/logotype-sm.png
    linter_image_url: https://github.com/PyCQA/bandit/raw/main/logo/logomark.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/bandit.png
    linter_rules_configuration_url: https://bandit.readthedocs.io/en/latest/config.html#
    linter_rules_inline_disable_url: https://bandit.readthedocs.io/en/latest/config.html#suppressing-individual-lines
    cli_lint_mode: list_of_files
    config_file_name: ".bandit.yml"
    cli_lint_extra_args:
      - --quiet
    cli_sarif_args:
      - --format
      - sarif
      - --output
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: ">> Issue: \\["
    version_extract_regex: "(?<=bandit )\\d+(\\.\\d+)+"
    test_folder: python_bandit
    examples:
      - "bandit myfile.py"
      - "bandit --configfile .bandit.yml myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=bandit
          ARG PIP_BANDIT_VERSION=1.8.6
        - |-
          # renovate: datasource=pypi depName=bandit_sarif_formatter
          ARG PIP_BANDIT_SARIF_FORMATTER_VERSION=1.1.1
      pip:
        - bandit==${PIP_BANDIT_VERSION}
        - bandit_sarif_formatter==${PIP_BANDIT_SARIF_FORMATTER_VERSION}
        - bandit[toml]==${PIP_BANDIT_VERSION}
    ide:
      sublime:
        - name: SublimeLinter-bandit
          url: https://github.com/SublimeLinter/SublimeLinter-bandit
      vscode:
        - name: Native Support
          url: https://code.visualstudio.com/docs/python/linting#_bandit
  # MYPY
  - linter_name: mypy
    name: PYTHON_MYPY
    linter_text: |
      **MyPy** is Python's premier static type checker that brings optional static typing to Python through gradual typing. It analyzes type annotations and infers types to catch bugs before runtime, bridging the gap between Python's dynamic nature and static analysis benefits.

      **Key Features:**

      - **Gradual Typing Support**: Add type checking incrementally to existing codebases without requiring full annotation coverage
      - **Type Inference**: Advanced type inference engine that understands Python idioms and can deduce types even without explicit annotations
      - **Protocol Support**: Duck typing through protocols, enabling structural subtyping for flexible type checking
      - **Generic Types**: Full support for generic types, type variables, and complex type relationships
      - **Plugin Architecture**: Extensible with plugins for popular frameworks like Django, SQLAlchemy, and dataclasses
      - **Incremental Checking**: Fast incremental analysis that only re-checks modified files and their dependencies
      - **Strict Mode Options**: Configurable strictness levels from permissive to extremely strict type checking
      - **Python Version Compatibility**: Supports multiple Python versions and can check compatibility across versions

      **Note**: If you don't use Python static typing, disable this linter by adding `PYTHON_MYPY` to `DISABLE_LINTERS` in your `.mega-linter.yml` config file.
    linter_url: https://mypy.readthedocs.io/en/stable/
    linter_repo: https://github.com/python/mypy
    linter_spdx_license: MIT
    linter_speed: 1
    linter_banner_image_url: http://mypy-lang.org/static/mypy_light.svg
    linter_rules_configuration_url: https://mypy.readthedocs.io/en/stable/config_file.html
    linter_rules_inline_disable_url: https://mypy.readthedocs.io/en/stable/inline_config.html#inline-config
    linter_megalinter_ref_url: never
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--install-types"
      - "--non-interactive"
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "Found ([0-9]+) error"
    cli_config_arg_name: "--config-file"
    cli_version_arg_name: "--version"
    config_file_name: ".mypy.ini"
    version_extract_regex: "(?<=mypy )\\d+(\\.\\d+)+"
    test_folder: python_mypy
    examples:
      - "mypy myfile.py"
      - "mypy --config-file .mypy.yml myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=mypy
          ARG PIP_MYPY_VERSION=1.17.0
        - ENV MYPY_CACHE_DIR=/tmp # Avoid mypy cache to mess with other linters
      pip:
        - mypy==${PIP_MYPY_VERSION}
    ide:
      emacs:
        - name: Flycheck mypy
          url: https://github.com/lbolla/emacs-flycheck-mypy
      idea:
        - name: mypy-official
          url: https://plugins.jetbrains.com/plugin/13348-mypy-official-/
      sublime:
        - name: SublimeLinter-contrib-mypy
          url: https://github.com/fredcallaway/SublimeLinter-contrib-mypy
      vim:
        - name: Ale
          url: https://github.com/dense-analysis/ale
        - name: Syntastic
          url: https://github.com/vim-syntastic/syntastic
      vscode:
        - name: Mypy
          url: https://marketplace.visualstudio.com/items?itemName=matangover.mypy
  # PyType # NV Not working yet, if anyone wants to complete it, please be my guest :)
  # - linter_name: pytype
  #   name: PYTHON_PYTYPE
  #   linter_text: |
  #     Optional static typing checks for python, by Google

  #     If you don't use python static typing, you should disable this linter by adding `PYTHON_PYTYPE` in `DISABLE_LINTERS` variable in your `.mega-linter.yml` config file
  #   linter_url: https://google.github.io/pytype/
  #   linter_repo: https://github.com/google/pytype
  #   linter_speed: 1
  #   linter_rules_inline_disable_url: https://google.github.io/pytype/user_guide.html#silencing-errors
  #   cli_lint_mode: list_of_files
  #   config_file_name: pytype.cfg
  #   cli_lint_errors_count: regex_sum
  #   cli_lint_errors_regex: "Found ([0-9]+) error"
  #   test_folder: python_mypy
  #   examples:
  #     - "pytype myfile.py myfile2.py"
  #     - "pytype myfile.py"
  #   install:
  #     dockerfile:
  #       - |-
  #         # renovate: datasource=pypi depName=pytype
  #         ARG PIP_PYTYPE_VERSION=2024.10.11
  #     pip:
  #       - pytype==${PIP_PYTYPE_VERSION}
  # PyRight
  - class: PyrightLinter
    linter_name: pyright
    name: PYTHON_PYRIGHT
    linter_text: |
      **Pyright** is Microsoft's high-performance static type checker for Python that provides fast, accurate type analysis. It serves as a powerful alternative to MyPy with focus on speed and developer experience.

      **Key Features:**

      - **High Performance**: Lightning-fast type checking with incremental analysis and efficient caching
      - **Advanced Type Features**: Full support for generics, protocols, type unions, literal types, and advanced Python typing features
      - **Configuration Flexibility**: Comprehensive configuration options through pyrightconfig.json for fine-tuned type checking
      - **Multi-Python Support**: Can analyze code for different Python versions and check version compatibility
      - **Import Resolution**: Sophisticated import resolution handling complex package structures and namespace packages
      - **Type Inference**: Advanced type inference engine that minimizes the need for explicit type annotations
      - **Strict Mode Support**: Configurable strictness levels from basic checking to comprehensive type safety enforcement
      - **Cross-Platform**: Consistent behavior across Windows, macOS, and Linux development environments

      **Note**: If you don't use Python static typing, disable this linter by adding `PYTHON_PYRIGHT` to `DISABLE_LINTERS` in your `.mega-linter.yml` config file.
    linter_url: https://github.com/Microsoft/pyright
    linter_rules_url: https://github.com/microsoft/pyright#type-checking-features
    linter_repo: https://github.com/microsoft/pyright
    linter_spdx_license: MIT
    linter_banner_image_url: https://github.com/microsoft/pyright/raw/main/docs/img/PyrightLarge.png
    linter_speed: 1
    linter_rules_configuration_url: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
    linter_rules_inline_disable_url: https://github.com/microsoft/pyright/blob/main/docs/comments.md#file-level-type-controls
    cli_lint_mode: list_of_files
    config_file_name: pyrightconfig.json
    cli_config_arg_name: -p
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "([0-9]+) errors,"
    test_folder: python_mypy
    examples:
      - "pyright myfile.py myfile2.py"
      - "pyright myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=pyright
          ARG NPM_PYRIGHT_VERSION=1.1.403
      npm:
        - pyright@${NPM_PYRIGHT_VERSION}
    ide:
      emacs:
        - name: LSP-pyright
          url: https://github.com/emacs-lsp/lsp-pyright
      sublime:
        - name: LSP-pyright
          url: https://packagecontrol.io/packages/LSP-pyright
      vim:
        - name: Ale
          url: https://github.com/dense-analysis/ale
        - name: coc-pyright
          url: https://github.com/fannheyward/coc-pyright
      vscode:
        - name: PyRight
          url: https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright
  # ruff
  - linter_name: ruff
    name: PYTHON_RUFF
    can_output_sarif: true
    linter_text: |
      **Ruff** is an extremely fast Python linter and code formatter written in Rust that aims to be 10-100x faster than existing tools while providing comprehensive functionality behind a single interface.

      **Key Features:**

      - **Lightning Performance**: 10-100x faster than Flake8, Black, and other traditional Python tools, with built-in caching for unchanged files
      - **800+ Built-in Rules**: Comprehensive rule set with native re-implementations of popular Flake8 plugins like flake8-bugbear, bandit, and more
      - **Drop-in Compatibility**: Parity with Flake8, isort, and Black - can replace multiple tools with a single fast solution
      - **Auto-fixing**: Automatic error correction for many violations (unused imports, formatting issues, etc.)
      - **Modern Python Support**: Full Python 3.13 compatibility with pyproject.toml configuration support
      - **Monorepo-Friendly**: Hierarchical and cascading configuration for complex project structures
    linter_url: https://github.com/astral-sh/ruff
    linter_repo: https://github.com/astral-sh/ruff
    linter_spdx_license: MIT
    linter_speed: 5
    linter_rules_url: https://docs.astral.sh/ruff/rules/
    linter_rules_configuration_url: https://docs.astral.sh/ruff/configuration/
    linter_rules_inline_disable_url: https://docs.astral.sh/ruff/linter/#error-suppression
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--config"
    cli_help_arg_name: "help"
    cli_lint_fix_arg_name: "--fix"
    cli_version_arg_name: "--version"
    cli_lint_extra_args:
      - "check"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "Found ([0-9]+) error"
    config_file_name: ".ruff.toml"
    cli_sarif_args:
      - --output-format
      - sarif
      - --output-file
      - "{{SARIF_OUTPUT_FILE}}"
    test_folder: python_ruff
    examples:
      - "ruff check myfile.py"
      - "ruff check --config .ruff.toml myfile.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=ruff
          ARG PIP_RUFF_VERSION=0.12.3
      pip:
        - ruff==${PIP_RUFF_VERSION}
    ide:
      idea:
        - name: Ruff
          url: https://plugins.jetbrains.com/plugin/20574-ruff
          id: com.koxudaxi.ruff
      vscode:
        - name: Ruff
          url: https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff

  # ruff fmt
  - linter_name: ruff-format
    class: RuffFormatLinter
    name: PYTHON_RUFF_FORMAT
    is_formatter: true
    activation_rules:
      - type: variable
        variable: PYTHON_DEFAULT_STYLE
        expected_value: ruff
        default_value: black
    linter_text: |
      **Ruff Formatter** is the formatting component of Ruff, an extremely fast Python code formatter written in Rust. Designed as a drop-in replacement for Black, it provides consistent Python code formatting at unprecedented speed.

      **Key Features:**

      - **Black Compatibility**: Drop-in replacement for Black with 99.9% compatibility and identical formatting output
      - **Extreme Performance**: 10-100x faster than Black, making it practical for large codebases
      - **Modern Python Support**: Full Python 3.13 compatibility with support for all modern Python syntax features
      - **Zero Configuration**: Works out of the box with sensible defaults, or customize via pyproject.toml
      - **Incremental Formatting**: Built-in caching avoids re-formatting unchanged files for maximum efficiency
    linter_url: https://github.com/astral-sh/ruff
    linter_repo: https://github.com/astral-sh/ruff
    linter_spdx_license: MIT
    linter_speed: 5
    linter_rules_url: https://docs.astral.sh/ruff/rules/
    linter_rules_configuration_url: https://docs.astral.sh/ruff/configuration/
    linter_rules_inline_disable_url: https://docs.astral.sh/ruff/linter/#error-suppression
    cli_executable: ruff
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--config"
    cli_help_arg_name: "help"
    cli_version_arg_name: "--version"
    cli_lint_extra_args:
      - format
      - --check
    cli_lint_fix_remove_args:
      - --check
    config_file_name: ".ruff.toml"
    examples:
      - "ruff format --check myfile.py myfile2.py"
      - "ruff format --config .ruff.toml myfile.py myfile2.py"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=ruff
          ARG PIP_RUFF_VERSION=0.12.3
      pip:
        - ruff==${PIP_RUFF_VERSION}
    ide:
      idea:
        - name: Ruff
          url: https://plugins.jetbrains.com/plugin/20574-ruff
          id: com.koxudaxi.ruff
      vscode:
        - name: Ruff
          url: https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
