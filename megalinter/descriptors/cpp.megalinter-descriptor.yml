descriptor_id: CPP
descriptor_label: "C++"
descriptor_type: language
descriptor_flavors:
  - cupcake
  - c_cpp
  - dotnet
  - dotnetweb
  - python
file_extensions:
  - ".cpp"
  - ".h"
  - ".cc"
  - ".hpp"
  - ".cxx"
  - ".cu"
  - ".hxx"
  - ".c++"
  - ".hh"
  - ".h++"
  - ".cuh"
linters:
  # Cppcheck
  - linter_name: cppcheck
    linter_text: |
      **Cppcheck** is a powerful static analysis tool for C and C++ code that detects bugs and undefined behavior that compilers typically miss. It performs deep code analysis without requiring code execution or special build configurations.

      **Key Features:**

      - **Memory Safety**: Detects buffer overflows, memory leaks, null pointer dereferences, and use-after-free errors
      - **Logic Error Detection**: Identifies unreachable code, infinite loops, invalid iterator usage, and logic mistakes
      - **Standards Compliance**: Checks adherence to C and C++ standards and catches undefined behavior
      - **Multi-Platform Support**: Works across different platforms and doesn't require specific build environments
      - **Low False Positives**: Focuses on finding real bugs with minimal false alarms
      - **Extensive Checks**: Covers over 200 different types of errors and suspicious code patterns
    name: CPP_CPPCHECK
    linter_url: https://cppcheck.sourceforge.io/
    linter_repo: https://cppcheck.sourceforge.io/
    linter_spdx_license: GPL-3.0
    linter_rules_url: https://sourceforge.net/p/cppcheck/wiki/ListOfChecks/
    linter_rules_configuration_url: https://cppcheck.sourceforge.io/manual.html#configuration
    cli_lint_extra_args:
      - --error-exitcode=1
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "error:"
    examples:
      - "cppcheck myfile.cpp"
    install:
      apk:
        - cppcheck
  # CPPLINT
  - class: CppLintLinter
    linter_name: cpplint
    linter_text: |
      **cpplint** is a command-line tool that enforces Google's C++ Style Guide, helping teams maintain consistent and readable C++ code. It focuses on style, formatting, and best practice compliance rather than logic errors.

      **Key Features:**

      - **Google C++ Style Guide**: Enforces comprehensive style guidelines used by Google's C++ projects
      - **Header File Checking**: Validates include guards, header ordering, and proper header usage
      - **Naming Conventions**: Ensures consistent naming for variables, functions, classes, and namespaces
      - **Formatting Compliance**: Checks indentation, line length, spacing, and comment formatting
      - **Best Practices**: Detects deprecated constructs, improper use of C++ features, and potential style issues
      - **Configurable Rules**: Allows filtering and customization of specific style checks
      - **Incremental Checking**: Can be run on individual files or as part of code quality validation
    name: CPP_CPPLINT
    linter_url: https://github.com/cpplint/cpplint
    linter_repo: https://github.com/cpplint/cpplint
    linter_spdx_license: BSD-3-Clause
    linter_rules_url: https://google.github.io/styleguide/cppguide.html
    cli_lint_mode: list_of_files
    cli_help_arg_name: "--help"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "Total errors found: ([0-9]+)"
    examples:
      - "cpplint myfile.cpp"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=cpplint
          ARG PIP_CPPLINT_VERSION=2.0.2
      pip:
        - cpplint==${PIP_CPPLINT_VERSION}
  # clang-format
  - linter_name: clang-format
    linter_text: |
      **clang-format** is a powerful code formatter for C, C++, Java, JavaScript, JSON, Objective-C, Protobuf, and C# that automatically formats code according to configurable style guidelines. It's part of the LLVM project and provides consistent, automated formatting.

      **Key Features:**

      - **Multi-Language Support**: Formats C/C++, Java, JavaScript, JSON, Objective-C, Protobuf, and C# code with language-specific rules
      - **Predefined Styles**: Built-in styles including LLVM, Google, Chromium, Mozilla, Microsoft, WebKit, and GNU coding standards
      - **Highly Configurable**: Extensive customization options through `.clang-format` files with hundreds of style parameters
      - **Selective Formatting**: Format specific lines, ranges, or regions with precise control over what gets formatted
      - **Git Integration**: Built-in tools for formatting only changed lines in git commits and diffs
      - **In-Place Editing**: Can modify files directly or output formatted code to stdout
    name: CPP_CLANG_FORMAT
    descriptor_flavors:
      - c_cpp
    linter_url: https://releases.llvm.org/17.0.1/tools/clang/docs/ClangFormat.html
    linter_repo: https://github.com/llvm/llvm-project
    linter_spdx_license: Apache-2.0
    linter_rules_url: https://releases.llvm.org/17.0.1/tools/clang/docs/ClangFormat.html
    linter_rules_configuration_url: https://releases.llvm.org/17.0.1/tools/clang/docs/ClangFormatStyleOptions.html
    linter_rules_inline_disable_url: https://releases.llvm.org/17.0.1/tools/clang/docs/ClangFormatStyleOptions.html#disabling-formatting-on-a-piece-of-code
    cli_lint_mode: list_of_files
    cli_help_arg_name: "--help"
    cli_lint_extra_args:
      - "--Werror"
      - "--dry-run"
    cli_lint_fix_arg_name: "-i"
    cli_lint_fix_remove_args:
      - "--Werror"
      - "--dry-run"
    config_file_name: .clang-format
    cli_config_arg_name: "--style=file:"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "code should be clang-formatted"
    examples:
      - "clang-format --Werror --dry-run myfile.cpp"
    install:
      apk:
        - clang19-extra-tools
    ide:
      vscode:
        - name: Clang-Format
          url: https://marketplace.visualstudio.com/items?itemName=xaver.clang-format
      emacs:
        - name: clang-format
          url: https://releases.llvm.org/17.0.1/tools/clang/docs/ClangFormat.html#emacs-integration
