descriptor_id: BASH
descriptor_type: language
descriptor_flavors:
  - all_flavors # Applicable to CI in any language project
  - ci_light
  - cupcake
  - c_cpp
  - formatters
file_extensions:
  - ""
  - ".sh"
  - ".bash"
  - ".dash"
  - ".ksh"
file_contains_regex_extensions:
  - ""
file_contains_regex:
  - "^#!/usr/bin/env bash"
  - "^#!/bin/bash"
  - "^#!/bin/sh"
install:
  apk:
    - bash
test_folder: shell
linters:
  # Bash Built in Linter
  - class: BashBashExecLinter
    linter_name: bash-exec
    linter_url: https://www.gnu.org/software/bash/
    linter_text: |
      Checks if shell files are executable

      Note: You can run `git add --chmod=+x myfile.sh` to make a file executable on Windows
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/bash-exec.png
    linter_megalinter_ref_url: never
    name: BASH_EXEC
    descriptor_flavors:
      - all_flavors
      - cupcake
      - security
    cli_executable_help: bash
    cli_executable_version: bash
    cli_help_arg_name: "--help"
    examples:
      - "bash-exec myfile.sh"
    install:
      dockerfile:
        - |
          RUN printf '#!/bin/bash \\n\\nif [[ -x "$1" ]]; then exit 0; else echo "Error: File:[$1] is not executable"; exit 1; fi' > /usr/bin/bash-exec \
              && chmod +x /usr/bin/bash-exec
    variables:
      - name: ERROR_ON_MISSING_EXEC_BIT
        description: If set to `false`, the `bash-exec` linter will report a warning if a shell script is not executable. If set to `true`, the `bash-exec` linter will report an error instead
        default_value: "false"
  # Shellcheck
  - class: ShellcheckLinter
    linter_name: shellcheck
    name: BASH_SHELLCHECK
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors
      - cupcake
      - ci_light
      - security
    linter_url: https://github.com/koalaman/shellcheck
    linter_repo: https://github.com/koalaman/shellcheck
    linter_rules_url: https://github.com/koalaman/shellcheck#gallery-of-bad-code
    linter_rules_inline_disable_url: https://github.com/koalaman/shellcheck/wiki/Ignore
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/shellcheck.png
    linter_megalinter_ref_url: never
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--color=auto"
      - "--external-sources"
    cli_sarif_args:
      - -f
      - json
    cli_help_arg_name: "--help"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "In .* line .*:.*\\n"
    examples:
      - "shellcheck --color=auto --external-sources myfile.sh"
    install:
      cargo:
        - shellcheck-sarif@${CARGO_SHELLCHECK_SARIF_VERSION}
      dockerfile:
        - |-
          # renovate: datasource=crate depName=shellcheck-sarif
          ARG CARGO_SHELLCHECK_SARIF_VERSION=0.7.0
        # Also update shellcheck version in action.megalinter-descriptor.yml
        - |-
          # renovate: datasource=docker depName=koalaman/shellcheck
          ARG BASH_SHELLCHECK_VERSION=v0.10.0
        - FROM koalaman/shellcheck:${BASH_SHELLCHECK_VERSION} AS shellcheck
        - COPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck
    ide:
      atom:
        - name: linter-shellcheck
          url: https://github.com/AtomLinter/linter-shellcheck
      emacs:
        - name: flycheck
          url: https://github.com/flycheck/flycheck
        - name: flymake-shellcheck
          url: https://github.com/federicotdn/flymake-shellcheck
      sublime:
        - name: SublimeLinter-shellcheck
          url: https://github.com/SublimeLinter/SublimeLinter-shellcheck
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
        - name: neomake
          url: https://github.com/neomake/neomake
        - name: syntastic
          url: https://github.com/scrooloose/syntastic
      vscode:
        - name: vscode-shellcheck
          url: https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck
  # SHFMT
  - linter_name: shfmt
    is_formatter: true
    linter_url: https://github.com/mvdan/sh
    linter_repo: https://github.com/mvdan/sh
    linter_megalinter_ref_url: "no"
    name: BASH_SHFMT
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "-d"
    cli_lint_fix_arg_name: "-w"
    cli_lint_fix_remove_args:
      - "-d"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "---.*\\n.*\\+\\+\\+.*"
    help_command_return_code: 0
    test_folder: shell_shfmt
    examples:
      - "shfmt -d myfile.sh"
      - "shfmt -w myfile.sh" # Fix
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=rhysd/actionlint
          ARG BASH_SHFMT_VERSION=v3.10.0-alpine
        - FROM mvdan/shfmt:${BASH_SHFMT_VERSION} AS shfmt
        - COPY --link --from=shfmt /bin/shfmt /usr/bin/
    ide:
      atom:
        - name: format-shell
          url: https://atom.io/packages/format-shell
      emacs:
        - name: emacs-shfmt
          url: https://github.com/purcell/emacs-shfmt/
      idea:
        - name: shell-scripts
          url: https://www.jetbrains.com/help/idea/shell-scripts.html
      micro:
        - name: micro
          url: https://micro-editor.github.io/
      sublime:
        - name: Sublime-Pretty-Shell
          url: https://github.com/aerobounce/Sublime-Pretty-Shell
      vim:
        - name: vim-shfmt
          url: https://github.com/z0mbix/vim-shfmt
      vscode:
        - name: shell-format
          url: https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format
