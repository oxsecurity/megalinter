descriptor_id: BASH
descriptor_type: language
descriptor_flavors:
  - all_flavors # Applicable to CI in any language project
  - ci_light
  - cupcake
  - c_cpp
  - formatters
file_extensions:
  - ""
  - ".sh"
  - ".bash"
  - ".dash"
  - ".ksh"
file_contains_regex_extensions:
  - ""
file_contains_regex:
  - "^#!/usr/bin/env bash"
  - "^#!/bin/bash"
  - "^#!/bin/sh"
install:
  apk:
    - bash
test_folder: shell
linters:
  # Bash Built in Linter
  - class: BashBashExecLinter
    linter_name: bash-exec
    linter_url: https://www.gnu.org/software/bash/
    linter_text: |
      **bash-exec** is a simple but essential linter that verifies shell scripts have proper executable permissions, preventing deployment issues where scripts fail to run due to missing execute permissions.

      **Key Features:**

      - **Permission Validation**: Checks if shell script files have executable permissions set correctly
      - **Cross-Platform Support**: Works across different operating systems with appropriate permission handling
      - **Zero Configuration**: Requires no setup or configuration files - works out of the box
      - **Quick Feedback**: Provides immediate feedback about file permission status

      **Note**: You can run `git add --chmod=+x myfile.sh` to make a file executable on Windows
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/bash-exec.png
    linter_megalinter_ref_url: never
    linter_rules_configuration_url: https://www.gnu.org/software/bash/manual/bash.html
    linter_spdx_license: GPL-3.0-or-later
    name: BASH_EXEC
    descriptor_flavors:
      - all_flavors
      - cupcake
      - security
    cli_executable_help: bash
    cli_executable_version: bash
    cli_help_arg_name: "--help"
    examples:
      - "bash-exec myfile.sh"
    install:
      dockerfile:
        - |
          RUN printf '#!/bin/bash \\n\\nif [[ -x "$1" ]]; then exit 0; else echo "Error: File:[$1] is not executable"; exit 1; fi' > /usr/bin/bash-exec \
              && chmod +x /usr/bin/bash-exec
    variables:
      - name: ERROR_ON_MISSING_EXEC_BIT
        description: If set to `false`, the `bash-exec` linter will report a warning if a shell script is not executable. If set to `true`, the `bash-exec` linter will report an error instead
        default_value: "false"
  # Shellcheck
  - class: ShellcheckLinter
    linter_name: shellcheck
    linter_text: |
      **ShellCheck** is a comprehensive static analysis tool for shell scripts that identifies bugs, security issues, and stylistic problems before they cause runtime failures. It serves as the gold standard for shell script quality assurance and reliability.

      **Key Features:**

      - **Advanced Bug Detection**: Catches common shell scripting mistakes like unquoted variables, incorrect conditionals, and path expansion issues
      - **Security Analysis**: Identifies potential security vulnerabilities including command injection risks and unsafe variable usage
      - **Portability Checking**: Warns about bashisms and non-portable constructs to ensure scripts work across different shells (bash, dash, sh)
      - **Syntax Validation**: Comprehensive parsing that catches syntax errors and malformed constructs
      - **Best Practices Enforcement**: Promotes modern shell scripting practices and warns against deprecated or dangerous patterns
      - **Detailed Explanations**: Each warning includes links to explanations with examples and recommended fixes
      - **Multi-Shell Support**: Analyzes bash, sh, dash, and ksh scripts with shell-specific checking
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Extensive Rule Coverage**: Over 100 different checks covering everything from quoting to array usage
    name: BASH_SHELLCHECK
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors
      - cupcake
      - ci_light
      - security
    linter_url: https://github.com/koalaman/shellcheck
    linter_repo: https://github.com/koalaman/shellcheck
    linter_spdx_license: GPL-3.0
    linter_rules_url: https://github.com/koalaman/shellcheck#gallery-of-bad-code
    linter_rules_inline_disable_url: https://github.com/koalaman/shellcheck/wiki/Ignore
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/shellcheck.png
    linter_megalinter_ref_url: never
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--color=auto"
      - "--external-sources"
    cli_sarif_args:
      - -f
      - json
    cli_help_arg_name: "--help"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "In .* line .*:.*\\n"
    examples:
      - "shellcheck --color=auto --external-sources myfile.sh"
    install:
      cargo:
        - shellcheck-sarif@${CARGO_SHELLCHECK_SARIF_VERSION}
      dockerfile:
        - |-
          # renovate: datasource=crate depName=shellcheck-sarif
          ARG CARGO_SHELLCHECK_SARIF_VERSION=0.8.0
        # Also update shellcheck version in action.megalinter-descriptor.yml
        - |-
          # renovate: datasource=docker depName=koalaman/shellcheck
          ARG BASH_SHELLCHECK_VERSION=v0.10.0
        - FROM koalaman/shellcheck:${BASH_SHELLCHECK_VERSION} AS shellcheck
        - COPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck
    ide:
      emacs:
        - name: flycheck
          url: https://github.com/flycheck/flycheck
        - name: flymake-shellcheck
          url: https://github.com/federicotdn/flymake-shellcheck
      sublime:
        - name: SublimeLinter-shellcheck
          url: https://github.com/SublimeLinter/SublimeLinter-shellcheck
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
        - name: neomake
          url: https://github.com/neomake/neomake
        - name: syntastic
          url: https://github.com/scrooloose/syntastic
      vscode:
        - name: vscode-shellcheck
          url: https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck
  # SHFMT
  - linter_name: shfmt
    linter_text: |
      **shfmt** is a powerful shell script formatter and parser that automatically standardizes shell script formatting to ensure consistent style across projects. It serves as both a formatter and validator for shell scripting best practices.

      **Key Features:**

      - **Multi-Shell Support**: Handles bash, POSIX sh, mksh, and bats scripts with shell-specific formatting rules
      - **Intelligent Formatting**: Smart indentation, spacing, and alignment that respects shell syntax and semantics
      - **Customizable Styles**: Configurable indentation size, binary operator positioning, and case statement formatting
      - **Parse Validation**: Built-in parser that catches syntax errors while formatting
      - **Diff-Friendly Output**: Generates minimal, clean diffs that focus on meaningful changes
      - **Language Constructs**: Proper handling of functions, conditionals, loops, arrays, and complex expansions
      - **Zero Dependencies**: Single binary with no external dependencies for easy deployment
    is_formatter: true
    linter_url: https://github.com/mvdan/sh
    linter_repo: https://github.com/mvdan/sh
    linter_spdx_license: BSD-3-Clause
    linter_megalinter_ref_url: "no"
    linter_rules_configuration_url: https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd
    linter_rules_inline_disable_url: https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd
    name: BASH_SHFMT
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "-d"
    cli_lint_fix_arg_name: "-w"
    cli_lint_fix_remove_args:
      - "-d"
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "---.*\\n.*\\+\\+\\+.*"
    help_command_return_code: 0
    test_folder: shell_shfmt
    examples:
      - "shfmt -d myfile.sh"
      - "shfmt -w myfile.sh" # Fix
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=mvdan/shfmt
          ARG BASH_SHFMT_VERSION=v3.12.0-alpine
        - FROM mvdan/shfmt:${BASH_SHFMT_VERSION} AS shfmt
        - COPY --link --from=shfmt /bin/shfmt /usr/bin/
    ide:
      emacs:
        - name: emacs-shfmt
          url: https://github.com/purcell/emacs-shfmt/
      idea:
        - name: shell-scripts
          url: https://www.jetbrains.com/help/idea/shell-scripts.html
      micro:
        - name: micro
          url: https://micro-editor.github.io/
      sublime:
        - name: Sublime-Pretty-Shell
          url: https://github.com/aerobounce/Sublime-Pretty-Shell
      vim:
        - name: vim-shfmt
          url: https://github.com/z0mbix/vim-shfmt
      vscode:
        - name: shell-format
          url: https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format
