descriptor_id: PHP
descriptor_type: language
descriptor_flavors:
  - cupcake
  - php
file_extensions:
  - ".php"
install:
  apk:
    - gnupg
    - php84
    - php84-phar
    - php84-mbstring
    - php84-xmlwriter
    - php84-tokenizer
    - php84-ctype
    - php84-curl
    - php84-dom
    - php84-opcache
    - php84-openssl
    - php84-common
    - php84-simplexml
    - php84-iconv
    - dpkg
  dockerfile:
    - RUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110
    - COPY --from=composer/composer:2-bin /composer /usr/bin/composer
    - ENV PATH="/root/.composer/vendor/bin:${PATH}"
    - ENV PHP_CS_FIXER_IGNORE_ENV=true
linters:
  # PHPCS
  - linter_name: phpcs
    linter_text: |
      **PHP_CodeSniffer (phpcs)** is a powerful static analysis tool that tokenizes PHP files and detects violations of defined coding standards. It serves as the industry standard for enforcing PHP coding conventions and maintaining consistent code quality across projects.

      **Key Features:**

      - **Multiple Coding Standards**: Built-in support for PSR-1, PSR-2, PSR-12, PEAR, Zend, WordPress, Drupal, and many other standards
      - **Tokenization Engine**: Advanced PHP tokenizer that understands PHP syntax and language constructs for accurate analysis
      - **Extensive Rule Set**: Comprehensive checks for code formatting, naming conventions, documentation, and structural issues
      - **Custom Standards**: Create and configure custom coding standards tailored to project or organizational requirements
      - **Detailed Reports**: Multiple report formats including full, summary, checkstyle, CSV, JSON, and SARIF
      - **Inline Suppression**: Flexible system for suppressing specific violations using comment annotations
      - **File Exclusions**: Sophisticated ignore patterns for excluding files, directories, or specific code sections
      - **Performance Optimized**: Efficient scanning designed for large codebases with minimal memory usage
    name: PHP_PHPCS
    can_output_sarif: true
    linter_spdx_license: BSD-3-Clause
    linter_url: https://github.com/PHPCSStandards/PHP_CodeSniffer
    linter_repo: https://github.com/PHPCSStandards/PHP_CodeSniffer
    linter_rules_configuration_url: https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file
    linter_rules_inline_disable_url: https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#ignoring-parts-of-a-file
    linter_rules_ignore_config_url: https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#ignoring-files-and-folders
    linter_rules_url: https://gist.github.com/tmsnvd/057ef1cf4fd412e8c8e866e5ba5119bc
    config_file_name: phpcs.xml
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--standard="
    cli_sarif_args:
      - "--report=\\Bartlett\\Sarif\\Converter\\Reporter\\PhpCsReport"
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "FOUND ([0-9]+) ERRORS?"
    cli_lint_warnings_count: regex_sum
    cli_lint_warnings_regex: "AND ([0-9]+) WARNINGS?"
    examples:
      - "phpcs myfile.php"
      - "phpcs --standard=phpcs.xml myfile.php"
      - "phpcs --standard=phpcs.xml mydir/ myfile.php"
    install:
      dockerfile:
        - |-
          # renovate: datasource=packagist depName=squizlabs/php_codesniffer
          ARG PHP_SQUIZLABS_PHP_CODESNIFFER_VERSION=3.13.2
        - |-
          # renovate: datasource=packagist depName=bartlett/sarif-php-converters
          ARG PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION=1.2.0
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && composer global require squizlabs/php_codesniffer:${PHP_SQUIZLABS_PHP_CODESNIFFER_VERSION} bartlett/sarif-php-converters:${PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION}
    ide:
      idea:
        - name: phpcs
          url: https://www.jetbrains.com/help/phpstorm/2019.1/using-php-code-sniffer.html
      sublime:
        - name: sublime-phpcs
          url: https://github.com/benmatselby/sublime-phpcs
        - name: SublimeLinter-phpcs
          url: https://github.com/SublimeLinter/SublimeLinter-phpcs
      vscode:
        - name: vscode-phpcs
          url: https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs
  # PHP Stan
  - linter_name: phpstan
    linter_text: |
      **PHPStan** is a comprehensive static analysis tool for PHP that focuses on finding errors in your code without executing it. It catches whole classes of bugs even before you write tests, providing deep code analysis and type safety for PHP applications.

      **Key Features:**

      - **Advanced Type Analysis**: Deep understanding of PHP types with support for generics, intersection types, and complex type relationships
      - **Zero-Configuration Start**: Works out of the box with sensible defaults, no configuration files required initially
      - **Incremental Analysis**: Smart caching and incremental checking for fast analysis of large codebases
      - **10 Strictness Levels**: Configurable analysis levels from basic checks to extremely strict type safety enforcement
      - **Framework Integration**: Built-in support for Symfony, Laravel, Doctrine, PHPUnit, and other popular PHP frameworks
      - **Custom Rules**: Extensible architecture supporting custom rules and organization-specific analysis requirements
      - **Baseline Support**: Generate baselines to introduce PHPStan gradually into existing projects without fixing all issues
      - **Memory Efficient**: Optimized for large codebases with intelligent memory management and parallel processing
    name: PHP_PHPSTAN
    can_output_sarif: true
    linter_spdx_license: MIT
    linter_url: https://phpstan.org/
    linter_repo: https://github.com/phpstan/phpstan
    linter_image_url: https://i.imgur.com/WaRKPlC.png
    linter_rules_configuration_url: https://phpstan.org/config-reference#neon-format
    linter_rules_inline_disable_url: https://phpstan.org/user-guide/ignoring-errors#ignoring-in-code-using-phpdocs
    config_file_name: phpstan.neon.dist
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "analyse"
      - "--no-progress"
      - "--no-ansi"
      - "--memory-limit"
      - "1G"
    cli_sarif_args:
      - "--error-format=sarif"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "Found ([0-9]+) error"
    examples:
      - "phpstan analyse --no-progress --no-ansi myfile.php"
      - "phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php"
      - "phpstan analyse --no-progress --no-ansi myfile1.php myfile2.php"
      - "phpstan analyse --no-progress --no-ansi mydir1/ mydir2/ myfile.php"
    install:
      dockerfile:
        - |-
          # renovate: datasource=packagist depName=phpstan/phpstan
          ARG PHP_PHPSTAN_PHPSTAN_VERSION=2.1.17
        - |-
          # renovate: datasource=packagist depName=phpstan/extension-installer
          ARG PHP_PHPSTAN_EXTENSION_INSTALLER_VERSION=1.4.3
        - |-
          # renovate: datasource=packagist depName=bartlett/sarif-php-converters
          ARG PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION=1.2.0
        - RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && composer config --global allow-plugins.phpstan/extension-installer true && composer global require phpstan/phpstan:${PHP_PHPSTAN_PHPSTAN_VERSION} phpstan/extension-installer:${PHP_PHPSTAN_EXTENSION_INSTALLER_VERSION} bartlett/sarif-php-converters:${PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION}
      idea:
        - name: PHPStan / Psalm / Generics
          url: https://plugins.jetbrains.com/plugin/12754-phpstan--psalm--generics
      vscode:
        - name: vscode-phpstan
          url: https://marketplace.visualstudio.com/items?itemName=calsmurf2904.vscode-phpstan
  # PSALM
  - linter_name: psalm
    linter_text: |
      **Psalm** is an advanced static analysis tool for PHP that provides comprehensive type checking, security analysis, and code quality assessment. Developed by Vimeo, it offers sophisticated analysis capabilities that go beyond traditional linting to catch subtle bugs and security vulnerabilities.

      **Key Features:**

      - **Gradual Type Checking**: Intelligent type inference that works with existing PHP code, gradually adding type safety
      - **Security Analysis**: Built-in taint analysis to detect potential security vulnerabilities like SQL injection and XSS
      - **Advanced Type System**: Support for generics, template types, conditional return types, and complex type relationships
      - **Dead Code Detection**: Identifies unused variables, methods, properties, and imports to help reduce codebase bloat
      - **Immutability Analysis**: Tracks object mutability and detects potential side effects in functional programming patterns
      - **Language Server**: Real-time analysis and intelligent code completion through Language Server Protocol
      - **Migration Tools**: Automated refactoring tools to add type annotations and improve code quality
      - **Framework Integration**: Specialized support for popular PHP frameworks with framework-specific analysis rules
      - **Performance Optimized**: Fast analysis with caching and incremental checking for large codebases
    name: PHP_PSALM
    can_output_sarif: true
    linter_spdx_license: MIT
    linter_url: https://psalm.dev
    linter_repo: https://github.com/vimeo/psalm
    linter_rules_url: https://psalm.dev/docs/running_psalm/issues/
    linter_banner_image_url: https://i1.wp.com/phpmagazine.net/wp-content/uploads/2018/12/PsalmLogo.png?w=653&ssl=1
    linter_rules_configuration_url: https://psalm.dev/docs/running_psalm/configuration/
    linter_rules_inline_disable_url: https://psalm.dev/docs/running_psalm/dealing_with_code_issues/#docblock-suppression
    config_file_name: psalm.xml
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - --output-format=console
    cli_config_arg_name: "--config="
    cli_sarif_args:
      - "--report={{SARIF_OUTPUT_FILE}}"
    version_extract_regex: "((\\d+(\\.\\d+)+)|Psalm (.*)@)"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "([0-9]+) error"
    examples:
      - "psalm myfile.php"
      - "psalm myfile.php mydir/"
      - "psalm --config=psalm.xml myfile.php"
      - "psalm --config=psalm.xml myfile.php mydir/"
    install:
      dockerfile:
        - |-
          # renovate: datasource=packagist depName=vimeo/psalm
          ARG PHP_VIMEO_PSALM_VERSION=6.12.1
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && composer global require vimeo/psalm:${PHP_VIMEO_PSALM_VERSION}
    ide:
      idea:
        - name: PHPStan / Psalm / Generics
          url: https://plugins.jetbrains.com/plugin/12754-phpstan--psalm--generics
          id: de.espend.idea.php.generics
      vscode:
        - name: Psalm VSCode Plugin
          url: https://marketplace.visualstudio.com/items?itemName=getpsalm.psalm-vscode-plugin
  # PHPLint
  - linter_name: phplint
    linter_text: |
      **PHPLint** is a high-performance syntax validation tool for PHP that provides rapid syntax checking without code execution. It serves as an essential first line of defense for catching PHP syntax errors and parse issues.

      **Key Features:**

      - **Fast Syntax Validation**: Lightning-fast PHP syntax checking without executing code for safe validation
      - **Parallel Processing**: Multi-threaded scanning that efficiently handles large codebases
      - **Comprehensive Error Detection**: Catches syntax errors, parse errors, and fundamental PHP language issues
      - **Multiple PHP Versions**: Supports validation against different PHP versions to ensure compatibility
      - **Batch Processing**: Validates entire directories and project structures efficiently
      - **SARIF Support**: Modern report formats for seamless integration with development tools and platforms
      - **Memory Efficient**: Minimal memory footprint for scanning large PHP projects
      - **Configurable Scanning**: Flexible file inclusion/exclusion patterns and custom validation rules
    can_output_sarif: true
    linter_url: https://github.com/overtrue/phplint
    linter_repo: https://github.com/overtrue/phplint
    linter_spdx_license: MIT
    linter_rules_configuration_url: https://github.com/overtrue/phplint/blob/main/docs/configuration.md#configuration
    config_file_name: .phplint.yml
    cli_lint_mode: list_of_files
    cli_sarif_args:
      - "--format=\\Overtrue\\PHPLint\\Output\\SarifOutput"
      - "--output={{SARIF_OUTPUT_FILE}}"
    examples:
      - "phplint myfile.php"
      - "phplint mydir"
      - "phplint mydir myfile.php"
      - "phplint mydir -vvv"
    install:
      dockerfile:
        - |-
          # renovate: datasource=packagist depName=overtrue/phplint
          ARG PHP_OVERTRUE_PHPLINT_VERSION=9.6.2
        - |-
          # renovate: datasource=packagist depName=bartlett/sarif-php-converters
          ARG PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION=1.2.0
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && composer global require overtrue/phplint:${PHP_OVERTRUE_PHPLINT_VERSION} bartlett/sarif-php-converters:${PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION}
  # PHP-CS-Fixer
  - linter_name: php-cs-fixer
    name: PHP_PHPCSFIXER
    linter_text: |
      **PHP-CS-Fixer** is a comprehensive tool that automatically fixes PHP code to follow coding standards and style guidelines. It can repair code style violations and even risky issues, making it an essential formatter for maintaining consistent PHP codebases.

      **Key Features:**

      - **Automatic Code Fixing**: Repairs coding standard violations and formatting issues automatically
      - **Extensive Rule Set**: 200+ built-in rules covering PSR-1, PSR-2, PSR-12, Symfony, and custom standards
      - **Risky Fixes Support**: Can apply potentially risky fixes that modify code behavior when enabled
      - **Highly Configurable**: Flexible configuration through PHP configuration files with rule customization
      - **Multiple Standards**: Supports PSR standards, Symfony coding standards, and custom rule sets
      - **Dry-Run Mode**: Preview changes without modifying files to review proposed fixes
      - **Incremental Fixing**: Can target specific directories, files, or rule sets for focused improvements
      - **Performance Optimized**: Fast execution with caching capabilities for large codebases

      - Enable **autofixes** by adding `PHP_PHPCSFIXER` in [APPLY_FIXES variable](https://megalinter.io/beta/configuration/#apply-fixes)
      - Add "--allow-risky=yes" option in PHP_PHPCSFIXER_ARGUMENTS variable
    linter_url: https://cs.symfony.com/
    linter_repo: https://github.com/PHP-CS-Fixer/PHP-CS-Fixer
    linter_spdx_license: MIT
    linter_rules_url: https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/rules/index.rst
    linter_rules_configuration_url: https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/config.rst
    linter_rules_inline_disable_url: https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/usage.rst#ignoring-code
    linter_image_url: https://cs.symfony.com/_static/images/logo.png
    config_file_name: .php-cs-fixer.dist.php
    cli_lint_mode: project
    cli_lint_extra_args:
      - "fix"
      - "--dry-run"
      - "--verbose"
      - "--show-progress=none"
    cli_config_arg_name: "--config"
    cli_lint_fix_remove_args:
      - "--dry-run"
    version_extract_regex: "(?<=PHP CS Fixer )\\d+(\\.\\d+)+"
    examples:
      - "php-cs-fixer check myfile.php"
      - "php-cs-fixer check mydir"
      - "php-cs-fixer check --config .php-cs-fixer.php"
    install:
      dockerfile:
        - |-
          # renovate: datasource=packagist depName=friendsofphp/php-cs-fixer
          ARG PHP_FRIENDSOFPHP_PHP_CS_FIXER_VERSION=v3.82.0
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && composer global require friendsofphp/php-cs-fixer:${PHP_FRIENDSOFPHP_PHP_CS_FIXER_VERSION} --with-all-dependencies
    ide:
      netbeans:
        - name: PHP-CS-Fixer
          url: https://plugins.netbeans.apache.org/catalogue/?id=36
      idea:
        - name: php-cs-fixer
          url: https://www.jetbrains.com/help/phpstorm/using-php-cs-fixer.html
      sublime:
        - name: sublime-phpcs
          url: https://github.com/benmatselby/sublime-phpcs
      vim:
        - name: vim-php-cs-fixer
          url: https://github.com/stephpy/vim-php-cs-fixer
      vscode:
        - name: vscode-php-cs-fixer
          url: https://github.com/junstyle/vscode-php-cs-fixer
