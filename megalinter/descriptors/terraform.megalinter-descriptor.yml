descriptor_id: TERRAFORM
descriptor_type: tooling_format
descriptor_flavors:
  - cupcake
  - formatters
  - terraform
file_extensions:
  - ".tf"
linters:
  # TFLINT
  - class: TfLintLinter
    can_output_sarif: true
    linter_name: tflint
    linter_spdx_license: MPL-2.0
    name: TERRAFORM_TFLINT
    descriptor_flavors:
      - cupcake
      - terraform
      - security
    linter_url: https://github.com/terraform-linters/tflint
    linter_repo: https://github.com/terraform-linters/tflint
    linter_rules_url: https://github.com/terraform-linters/tflint-ruleset-terraform/blob/main/docs/rules/README.md
    linter_rules_configuration_url: https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/config.md
    linter_rules_inline_disable_url: https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/annotations.md
    linter_text: |
      **TFLint** is a pluggable Terraform linter that provides deep inspection of Terraform configurations with a focus on catching errors that terraform plan might miss. It offers extensive static analysis capabilities including provider-specific checks, deprecated syntax detection, and infrastructure best practices validation.

      **Key Features:**

      - **Deep Terraform Analysis**: Goes beyond basic syntax checking to validate Terraform semantics and logic
      - **Provider-Specific Rules**: Specialized rule sets for AWS, Azure, GCP, and other cloud providers
      - **Plugin Architecture**: Extensible with community and custom plugins for specific use cases
      - **Performance Optimized**: Fast analysis suitable for large Terraform codebases
      - **Configuration Flexibility**: Highly configurable with .tflint.hcl files for project-specific requirements
      - **Error Prevention**: Catches common issues before terraform plan/apply execution
      - **Module Support**: Analyzes Terraform modules and their usage patterns
      - **Detailed Reporting**: Clear error messages with file locations and remediation suggestions

      > If you are using the GitHub action please use the `TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES: GITHUB_TOKEN` to prevent plugin download issues

      > If you have issues with tflint --init, create a GitHub Personal Access Token and set its value to PAT_GITHUB_COM variable.

      Note: It's recommended to create your own `.tflint.hcl` custom config file tailored to your project's specific needs.
      The default configuration enables all supported languages and rules, which may not be optimal for every project.
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/tflint.png
    cli_lint_mode: project
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "Error:"
    cli_lint_warnings_count: regex_count
    cli_lint_warnings_regex: "Warning:"
    config_file_name: .tflint.hcl
    cli_config_extra_args:
      - --recursive
    cli_sarif_args:
      - --format
      - sarif
    variables:
      - name: TERRAFORM_TFLINT_SECURED_ENV
        default_value: true
        description: Allows to send the full env to **tflint --init**. Initialized with default value `true`. Set to `false` to allow `tflint --init` to access your env vars.
      - name: PAT_GITHUB_COM
        default_value: ""
        description: If you have issues with tflint --init, create a GitHub Personal Access Token and set its value to PAT_GITHUB_COM variable.
    test_folder: terraform_tflint
    examples:
      - "tflint"
      - "tflint -c .tflint.hcl"
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=ghcr.io/terraform-linters/tflint
          ARG TERRAFORM_TFLINT_VERSION=0.58.0
        - FROM ghcr.io/terraform-linters/tflint:v${TERRAFORM_TFLINT_VERSION} AS tflint
        - COPY --link --from=tflint /usr/local/bin/tflint /usr/bin/

  # TERRASCAN
  - class: TerrascanLinter
    linter_name: terrascan
    linter_text: |
      **Terrascan** is a comprehensive static code analyzer for Infrastructure as Code that detects security vulnerabilities, compliance violations, and misconfigurations in cloud infrastructure. It supports multiple IaC tools including Terraform, Kubernetes, Docker, AWS CloudFormation, and more, providing over 1000 built-in policies across major cloud providers and compliance frameworks.

      **Key Features:**

      - **Multi-IaC Support**: Analyzes Terraform, Kubernetes, Docker, CloudFormation, ARM templates, and more
      - **1000+ Security Policies**: Extensive library of pre-built security and compliance policies
      - **Compliance Frameworks**: Built-in support for CIS, NIST, PCI, SOC 2, and other compliance standards
      - **Cloud Provider Coverage**: Comprehensive rules for AWS, Azure, GCP, and Kubernetes environments
      - **Custom Policy Engine**: Create custom policies using Rego (Open Policy Agent) for organization-specific requirements
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Detailed Reporting**: Comprehensive vulnerability reports with severity levels and remediation guidance
      - **Policy as Code**: Version-controlled security policies that evolve with your infrastructure
    can_output_sarif: true
    linter_spdx_license: Apache-2.0
    name: TERRAFORM_TERRASCAN
    descriptor_flavors:
      - cupcake
      - terraform
      - security
    linter_url: https://runterrascan.io/
    linter_repo: https://github.com/tenable/terrascan
    linter_rules_url: https://runterrascan.io/docs/usage/
    linter_rules_configuration_url: https://runterrascan.io/docs/usage/config_options/
    linter_banner_image_url: https://raw.githubusercontent.com/tenable/runterrascan.io/main/static/images/TerrascanTM_BY_Logo.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/terrascan.png
    config_file_name: terrascan.toml
    cli_config_arg_name: "--config-path"
    cli_lint_mode: project
    cli_lint_extra_args:
      - "scan"
      - "--iac-type"
      - "terraform"
      - "--verbose"
    cli_sarif_args:
      - --output
      - sarif
    cli_version_arg_name: "version"
    test_folder: terraform_terrascan
    examples:
      - "terrascan scan -i terraform -t all -f myfile.tf"
    downgraded_version: true
    downgraded_reason: https://github.com/tenable/terrascan/issues/1674
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=tenable/terrascan
          ARG TERRAFORM_TERRASCAN_VERSION=1.19.9
        - FROM tenable/terrascan:${TERRAFORM_TERRASCAN_VERSION} AS terrascan
        - COPY --link --from=terrascan /go/bin/terrascan /usr/bin/

  # TERRAGRUNT
  - linter_name: terragrunt
    linter_text: |
      **Terragrunt** is a thin wrapper for Terraform that provides tools for keeping your Terraform configurations DRY, working with multiple Terraform modules, and managing remote state. It helps validate Terragrunt configurations and ensures that your infrastructure code follows best practices for modularity, reusability, and maintainability.

      **Key Features:**

      - **DRY Terraform Code**: Eliminates repetition by allowing shared configurations across multiple environments
      - **Remote State Management**: Simplifies backend configuration and remote state management across projects
      - **Module Composition**: Orchestrates multiple Terraform modules with dependency management
      - **Configuration Validation**: Validates Terragrunt HCL configurations for syntax and semantic errors
      - **Environment Management**: Provides patterns for managing infrastructure across multiple environments
      - **Lock File Support**: Handles Terraform provider lock files consistently across environments
      - **Dependency Graph**: Automatically manages dependencies between Terraform modules and configurations
      - **Parallel Execution**: Runs Terraform operations in parallel where dependencies allow
      - **Error Handling**: Enhanced error handling and debugging capabilities for complex infrastructure deployments
    name: TERRAFORM_TERRAGRUNT
    linter_spdx_license: MIT
    file_extensions:
      - ".hcl"
    file_names_not_ends_with:
      - ".tflint.hcl"
    descriptor_flavors:
      - cupcake
      - terraform
      - security
    linter_url: https://terragrunt.gruntwork.io
    linter_repo: https://github.com/gruntwork-io/terragrunt
    linter_rules_configuration_url: https://terragrunt.gruntwork.io/docs/getting-started/quick-start/#add-terragrunthcl-to-your-project
    linter_image_url: https://github.com/gruntwork-io/terragrunt/blob/master/docs/assets/img/favicon/ms-icon-310x310.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/terragrunt.png
    config_file_name: terragrunt.hcl
    cli_config_arg_name: "--terragrunt-config"
    cli_lint_extra_args:
      - "hclfmt"
      - "--terragrunt-check"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--terragrunt-check"
    cli_lint_extra_args_after:
      - "--terragrunt-hclfmt-file"
    test_folder: terraform_terragrunt
    examples:
      - "terragrunt hclfmt --terragrunt-check --terragrunt-hclfmt-file myfile.hcl"
      - "terragrunt hclfmt --terragrunt-check --terragrunt-config terragrunt.hcl --terragrunt-hclfmt-file myfile.hcl"
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=alpine/terragrunt
          ARG TERRAFORM_TERRAGRUNT_VERSION=1.12.2
        - FROM alpine/terragrunt:${TERRAFORM_TERRAGRUNT_VERSION} AS terragrunt
        - COPY --link --from=terragrunt /usr/local/bin/terragrunt /usr/bin/

  # TERRAFORM_FMT
  - linter_name: terraform-fmt
    linter_text: |
      **terraform fmt** is the built-in Terraform command for automatically formatting Terraform configuration files to ensure consistent style and formatting. It rewrites Terraform configuration files to a canonical format and style, making code more readable and maintainable, following HashiCorp's official style conventions.

      **Key Features:**

      - **Official Formatter**: Built into Terraform core, ensuring compatibility and consistency with HashiCorp standards
      - **Canonical Formatting**: Applies consistent indentation, spacing, and line breaks across all Terraform files
      - **Automatic Fixing**: Rewrites files in-place to fix formatting issues automatically
      - **Diff Mode**: Shows formatting differences without modifying files for review purposes
      - **Recursive Processing**: Can format entire directory trees and module structures
      - **Check Mode**: Validates formatting without making changes, perfect for validation
      - **HCL Syntax Support**: Handles all HashiCorp Configuration Language constructs correctly
      - **Fast Performance**: Optimized for quick formatting of large Terraform codebases
      - **Zero Configuration**: Works out of the box with no setup or configuration required
      - **Team Consistency**: Ensures uniform code style across development teams and projects
    name: TERRAFORM_TERRAFORM_FMT
    is_formatter: true
    linter_spdx_license: BUSL-1.1
    linter_url: https://developer.hashicorp.com/terraform/cli/commands/fmt
    linter_repo: https://github.com/hashicorp/terraform
    linter_banner_image_url: https://www.datocms-assets.com/2885/1629941242-logo-terraform-main.svg
    cli_executable: terraform
    cli_lint_extra_args:
      - "fmt"
      - "--diff"
      - "--check"
    cli_lint_fix_arg_name: "--megalinter-fix-flag" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--diff"
      - "--check"
    examples:
      - "terraform fmt myfile.tf"
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=alpine/terragrunt
          ARG TERRAFORM_TERRAGRUNT_VERSION=1.12.2
        - FROM alpine/terragrunt:${TERRAFORM_TERRAGRUNT_VERSION} AS terragrunt
        - COPY --link --from=terragrunt /bin/terraform /usr/bin/
    ide:
      idea:
        - name: HashiCorp Terraform / HCL language support
          url: https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support
          id: org.intellij.plugins.hcl
      sublime:
        - name: Terrafmt
          url: https://packagecontrol.io/packages/Terrafmt
      vscode:
        - name: HashiCorp Terraform
          url: https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform
    test_folder: terraform_fmt
    version_extract_regex: "(?<=Terraform v)\\d+(\\.\\d+)+"
