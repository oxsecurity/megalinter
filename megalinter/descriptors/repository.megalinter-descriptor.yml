descriptor_id: REPOSITORY
descriptor_type: other
descriptor_flavors:
  - all_flavors # Applicable to CI in any language project
  - ci_light
  - cupcake
lint_all_files: true
linters:
  # CHECKOV
  - linter_name: checkov
    linter_text: |
      **Checkov** is a comprehensive static code analysis tool for Infrastructure as Code (IaC) that prevents cloud security misconfigurations before they reach production.

      **Key Features:**

      - **Multi-Platform IaC Support**: Analyzes Terraform, CloudFormation, Kubernetes, Helm, ARM templates, Docker, Serverless, and more
      - **Extensive Policy Library**: Over 1,000 built-in security and compliance policies covering CIS benchmarks, PCI-DSS, HIPAA, and other standards
      - **Cloud Provider Coverage**: Comprehensive rules for AWS, Azure, GCP, Oracle Cloud, and Alibaba Cloud services
      - **Security Focus**: Detects unencrypted storage, overly permissive security groups, missing logging, exposed secrets, and compliance violations
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Custom Policies**: Support for custom security policies written in Python or YAML for organization-specific requirements
      - **Policy Suppression**: Granular control over policy enforcement with inline and configuration-based suppression
      - **Graph-Based Analysis**: Advanced analysis using dependency graphs for complex infrastructure relationships
    name: REPOSITORY_CHECKOV
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - cupcake
      - terraform
      - security
    linter_url: https://www.checkov.io/
    linter_repo: https://github.com/bridgecrewio/checkov
    linter_speed: 2
    linter_banner_image_url: https://raw.githubusercontent.com/bridgecrewio/checkov/25388a34231e09ac17b266ad9db0b4c0e806e956/docs/web/images/checkov-logo.svg
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/checkov.png
    linter_rules_configuration_url: https://github.com/bridgecrewio/checkov#configuration-using-a-config-file
    linter_rules_inline_disable_url: https://www.checkov.io/2.Basics/Suppressing%20and%20Skipping%20Policies.html
    linter_rules_url: https://www.checkov.io/5.Policy%20Index/all.html
    linter_megalinter_ref_url: "no"
    linter_spdx_license: Apache-2.0
    cli_lint_mode: project
    cli_config_arg_name: "--config-file"
    config_file_name: .checkov.yml
    cli_sarif_args:
      - --output
      - sarif
      - --output-file-path
      - "{{REPORT_FOLDER}}"
    sarif_default_output_file: results_sarif.sarif
    cli_lint_extra_args:
      - "--directory"
      - "."
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: ", Failed checks: ([0-9]+), Skipped checks"
    examples:
      - "checkov --directory ."
      - "checkov --directory . --output --sarif"
    install:
      # cargo:
      #   - COMPILER_ONLY # Use COMPILER_ONLY fake package just to Dockerfile contains rust toolchain install
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=checkov
          ARG PIP_CHECKOV_VERSION=3.2.413
      pip:
        - checkov==${PIP_CHECKOV_VERSION}
    test_folder: repository_checkov

  # DEVSKIM
  - linter_name: devskim
    can_output_sarif: true
    descriptor_flavors:
      - all
      - security
    ignore_for_flavor_suggestions: true
    linter_text: |
      **DevSkim** is a security analysis tool that provides inline security guidance for developers by detecting security vulnerabilities and anti-patterns in source code.

      **Key Features:**

      - **Multi-Language Support**: Analyzes code in dozens of programming languages including C#, Java, JavaScript, Python, C/C++, and more
      - **Comprehensive Rule Set**: Over 500 built-in security rules covering common vulnerabilities like injection flaws, cryptographic issues, and authentication problems
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Custom Rules**: Extensible rule engine allowing organizations to create custom security policies
      - **Quick Fixes**: Automated remediation suggestions for many detected security issues
      - **Severity Classification**: Categorizes findings by severity level to help prioritize security fixes
      - **False Positive Management**: Configurable suppression system to reduce noise and focus on critical issues

      If you need to ignore folders,files or file extensions, use glob expressions `Glob` property of local `.devskim.json` file

      Example:

      ```json
      {
        "Globs": [
          "**/.git/**",
          "**/megalinter-reports/**"
        ]
      }
      ```
    linter_url: https://github.com/microsoft/DevSkim
    linter_repo: https://github.com/microsoft/DevSkim
    linter_speed: 1
    linter_rules_configuration_url: https://github.com/microsoft/DevSkim/wiki/Analyze-Command
    linter_rules_ignore_config_url: https://github.com/microsoft/DevSkim/wiki/Analyze-Command
    linter_image_url: https://github.com/microsoft/DevSkim/raw/main/media/devskim_logo.svg
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/devskim.png
    linter_spdx_license: MIT
    config_file_name: .devskim.json
    cli_config_arg_name: "--options-json"
    cli_lint_mode: project
    cli_lint_extra_args:
      - analyze
    cli_sarif_args:
      - --file-format
      - sarif
    cli_lint_extra_args_after:
      - --source-code
      - "."
      - -E
    cli_help_arg_name: --help
    cli_version_arg_name: --version
    cli_lint_errors_count: sarif
    cli_lint_warnings_count: sarif
    test_folder: devskim
    examples:
      - "devskim analyze --source-code ."
      - "devskim analyze --file-format sarif --source-code ."
      - "devskim analyze --file-format sarif --options-json config --source-code ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=nuget depName=Microsoft.CST.DevSkim.CLI
          ARG REPOSITORY_DEVSKIM_VERSION=1.0.59
        - RUN apk add --no-cache dotnet9-sdk
        - ENV PATH="${PATH}:/root/.dotnet/tools"
        - RUN dotnet tool install --allow-roll-forward --global Microsoft.CST.DevSkim.CLI --version ${REPOSITORY_DEVSKIM_VERSION}
    ide:
      vscode:
        - name: VSCode DevSkim
          url: https://marketplace.visualstudio.com/items?itemName=MS-CST-E.vscode-devskim

  # DUSTILOCK
  - class: DustilockLinter
    linter_name: dustilock
    linter_text: |
      **Dustilock** is a dependency vulnerability scanner that analyzes your dependencies for known security vulnerabilities and checks if there are newer, safer versions available. It scans various dependency files (package.json, requirements.txt, etc.) and provides alerts about vulnerable packages in your project, helping you maintain secure dependencies by identifying outdated packages with known CVEs.

      **Key Features:**

      - **Multi-Package Manager Support**: Analyzes dependencies from npm, pip, composer, Maven, Gradle, and other popular package managers
      - **Lock File Analysis**: Deep inspection of lock files to identify exact vulnerable versions and transitive dependencies
      - **Real-Time Vulnerability Database**: Uses up-to-date vulnerability databases to detect the latest security issues
      - **Supply Chain Security**: Identifies compromised or malicious packages in the dependency tree
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Detailed Reporting**: Comprehensive reports with vulnerability details, severity scores, and remediation guidance
      - **Version Upgrade Suggestions**: Recommends safer, newer versions to resolve vulnerabilities
      - **Transitive Dependency Analysis**: Scans both direct and indirect dependencies for comprehensive coverage
      - **Policy Enforcement**: Configurable security policies to block builds with critical vulnerabilities
    can_output_sarif: true
    descriptor_flavors:
      - all
      - security
    ignore_for_flavor_suggestions: true
    linter_url: https://github.com/Checkmarx/dustilock
    linter_repo: https://github.com/Checkmarx/dustilock
    linter_banner_image_url: https://user-images.githubusercontent.com/1287098/142776854-83abf265-a1ba-485f-a8b6-995da7f7ef8b.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/dustilock.png
    linter_spdx_license: Apache-2.0
    cli_lint_mode: project
    cli_lint_extra_args:
      - --recursive
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "(error )"
    linter_version_cache: "1.2.0"
    test_folder: dustilock
    examples:
      - "dustilock"
    install:
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=checkmarx/dustilock
          ARG REPOSITORY_DUSTILOCK_VERSION=1.2.0
        # The golang image used as a builder is a temporary workaround
        # Dustilock is not released as a binary or container
        - |-
          FROM golang:alpine AS dustilock
          ARG REPOSITORY_DUSTILOCK_VERSION
          RUN apk add --no-cache git && GOBIN=/usr/bin go install github.com/checkmarx/dustilock@v${REPOSITORY_DUSTILOCK_VERSION}
        - COPY --link --from=dustilock /usr/bin/dustilock /usr/bin/dustilock

  # GIT_DIFF
  - linter_name: git_diff
    lint_all_files: true
    test_folder: git_diff
    linter_text: |
      **git diff** is a conflict detection checker that scans files for Git conflict markers and other merge-related issues that may have been inadvertently left in the codebase after resolving merge conflicts.

      **Key Features:**

      - **Conflict Marker Detection**: Identifies Git conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`) that weren't properly resolved
      - **Merge Safety**: Prevents accidentally committing unresolved merge conflicts to version control
      - **Repository Hygiene**: Helps maintain clean codebases by catching leftover merge artifacts
      - **Fast Scanning**: Efficiently processes files to detect problematic patterns without performance overhead
    linter_url: https://git-scm.com
    linter_repo: https://github.com/git/git
    linter_speed: 5
    linter_spdx_license: LGPL-2.1
    linter_megalinter_ref_url: never
    cli_config_arg_name: ""
    cli_executable: git
    cli_lint_mode: project
    cli_lint_extra_args:
      - "diff"
      - "--check"
    cli_help_arg_name: "--help"
    examples:
      - "git diff --check"

  # GITLEAKS
  - class: GitleaksLinter
    linter_name: gitleaks
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    linter_url: https://github.com/gitleaks/gitleaks
    linter_repo: https://github.com/gitleaks/gitleaks
    linter_speed: 3
    linter_spdx_license: MIT
    linter_rules_configuration_url: https://github.com/gitleaks/gitleaks#configuration
    linter_rules_ignore_config_url: https://github.com/gitleaks/gitleaks#gitleaksignore
    linter_rules_inline_disable_url: https://github.com/gitleaks/gitleaks#gitleaksallow
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/gitleaks.png
    linter_text: |
      **gitleaks** is a SAST tool for detecting and preventing secrets like passwords, API keys, and tokens in git repos. It scans the entire history of a git repository, not just the current state, making it effective at finding secrets that may have been accidentally committed.

      **Key Features:**

      - **Full git history scanning** including all branches and commits
      - **High accuracy detection** with minimal false positives
      - **Custom rule support** for organization-specific secret patterns
      - **Multiple output formats** including JSON, CSV, and SARIF
      - **Pre-commit hook integration** to prevent secrets from being committed
      - **Baseline support** to ignore existing secrets while catching new ones
      - **Configuration flexibility** via `.gitleaks.toml` files
      - **Redaction support** to safely share scan results
      - **Entropy detection** for finding high-entropy strings that may be secrets

      ## Scan only Pull Request commits

      `VALIDATE_ALL_CODEBASE: false` doesn't make gitleaks analyze only updated files. To analyze only commits on Pull Request, set `VALIDATE_ALL_CODEBASE: false` together with `REPOSITORY_GITLEAKS_PR_COMMITS_SCAN: true` (you have to specify it explicitly), but only works for selected platforms: GitHub Actions, Azure Pipelines, GitLab Pipelines\* (Merge Requests and External Pull Requests)

      - \* Only GitLab self-managed and GitLab SaaS (Premium and Ultimate) are supported (limitation due to GitLab itself) and [Merge result pipelines](https://docs.gitlab.com/ee/ci/pipelines/merged_results_pipelines.html#enable-merged-results-pipelines){target=_blank} feature has to be enabled.
      - If MegaLinter with the gitleaks runs on PR on the not listed platform above, then the analysis is performed on the whole repository - default gitleaks behavior (checked-out commits, depends on fetch-depth configuration).
        - You can still scan only PR commits in your CI/CD platform by setting MegaLinter envs: `PULL_REQUEST=true`\*, `REPOSITORY_GITLEAKS_PR_COMMITS_SCAN: true`, `REPOSITORY_GITLEAKS_PR_SOURCE_SHA` with last commit sha from your PR and `REPOSITORY_GITLEAKS_PR_TARGET_SHA` commit sha from your target branch (for example, `main` if you do PR to main branch). Example on how to get source commit sha `git rev-list -n 1 refs/remotes/origin/<source_branch>` and target commit sha `git rev-parse refs/remotes/origin/<target_branch>`
          - \* `PULL_REQUEST` environment variable must be set to `true` only on Pull Requests, so you must calculate the value in your pipeline and pass the outcome.
      - PR commits scan feature, if applicable, will override your `--log-opts` argument if you used it in the `REPOSITORY_GITLEAKS_ARGUMENTS`.

      ### Azure Pipelines environment variables on Pull Requests

      In the case of Azure Pipelines when running in a Docker container, we have to explicitly pass some environment variables:

      ```bash
        docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \
            -e SYSTEM_PULLREQUEST_SOURCECOMMITID=$(System.PullRequest.SourceCommitId) \
            -e SYSTEM_PULLREQUEST_TARGETBRANCH=$(System.PullRequest.TargetBranch) \
            -e BUILD_REASON=$(Build.Reason) \
            oxsecurity/megalinter:v8
      ```

      ### Repository checkout on Pull Requests

      To scan only PR commits, the [shallow fetch](https://git-scm.com/docs/git-fetch#Documentation/git-fetch.txt---depthltdepthgt){target=_blank} for a repository checkout has to be 0. Below is an example configuration for supported platforms:

      #### GitHub Actions

      ```yml
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      ```

      #### Azure Pipelines

      ```yml
      - checkout: self
        fetchDepth: 0
      ```

      #### GitLab Pipelines

      ```yml
      variables:
        GIT_DEPTH: 0
      ```

      #### Git

      ```shell
      git fetch --depth=0
      ```
    config_file_name: .gitleaks.toml
    cli_config_arg_name: "-c"
    cli_lint_mode: project
    cli_lint_extra_args:
      - detect
      - --redact
      - --no-git
    cli_sarif_args:
      - --report-format
      - sarif
      - --report-path
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_extra_args_after:
      - "--verbose"
      - "--source"
      - "."
    cli_help_arg_name: help
    cli_version_arg_name: version
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "leaks found: ([0-9]+)"
    test_folder: gitleaks
    examples:
      - "gitleaks detect --redact --no-git --verbose --source ."
      - "gitleaks detect -c .gitleaks.toml --redact --no-git --verbose --source ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=zricethezav/gitleaks
          ARG REPOSITORY_GITLEAKS_VERSION=v8.27.2
        - FROM zricethezav/gitleaks:${REPOSITORY_GITLEAKS_VERSION} AS gitleaks
        - COPY --link --from=gitleaks /usr/bin/gitleaks /usr/bin/
    variables:
      - name: REPOSITORY_GITLEAKS_PR_COMMITS_SCAN
        description: Scan only commits in the current Pull Request/Merge Request
        default_value: "false"
      - name: REPOSITORY_GITLEAKS_PR_SOURCE_SHA
        description: Source commit SHA of the Pull Request/Merge Request
        default_value: ""
      - name: REPOSITORY_GITLEAKS_PR_TARGET_SHA
        description: Target commit SHA of the Pull Request/Merge Request
        default_value: ""

  # GRYPE
  - linter_name: grype
    linter_text: |
      **Grype** is a comprehensive vulnerability scanner for container images and filesystems that quickly identifies known security vulnerabilities in packages and dependencies. It serves as an essential tool for supply chain security by detecting CVEs across multiple vulnerability databases.

      **Key Features:**

      - **Multi-Source Scanning**: Analyzes container images, directories, SBOM files, and archives for comprehensive vulnerability coverage
      - **Extensive Database Coverage**: Leverages multiple vulnerability databases including NVD, Alpine SecDB, Ubuntu, Debian, and more
      - **Package Manager Support**: Detects vulnerabilities in packages from npm, pip, gem, Maven, Go modules, and other popular package managers
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Container Registry Integration**: Direct scanning of images from Docker Hub, ECR, GCR, and other container registries
      - **SBOM Analysis**: Can analyze Software Bill of Materials files for vulnerability assessment
      - **CI/CD Ready**: Designed for integration into continuous integration pipelines with configurable failure thresholds
      - **Detailed Reporting**: Comprehensive vulnerability reports with CVSS scores, severity levels, and remediation guidance
      - **Fast Performance**: Optimized scanning engine suitable for large-scale container and filesystem analysis
      - **Offline Support**: Can operate with cached vulnerability databases for air-gapped environments
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    linter_speed: 2
    linter_url: https://github.com/anchore/grype
    linter_repo: https://github.com/anchore/grype
    linter_rules_url: https://github.com/anchore/grype#vulnerability-summary
    linter_banner_image_url: https://user-images.githubusercontent.com/5199289/136855393-d0a9eef9-ccf1-4e2b-9d7c-7aad16a567e5.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/grype.png
    linter_rules_configuration_url: https://github.com/anchore/grype#configuration
    cli_lint_mode: project
    cli_config_arg_name: "--config"
    config_file_name: .grype.yaml
    cli_lint_extra_args_after:
      - dir:.
    cli_sarif_args:
      - --output
      - sarif
    cli_version_arg_name: version
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "(Low|Medium|High|Critical)"
    examples:
      - "grype dir:."
    downgraded_version: true
    downgraded_reason: Crash for failure test class with https://github.com/anchore/grype/releases/tag/v0.79.6
    install:
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=anchore/grype
          ARG REPOSITORY_GRYPE_VERSION=0.95.0
        - RUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/refs/tags/v${REPOSITORY_GRYPE_VERSION}/install.sh | sh -s -- -b /usr/local/bin
    test_folder: repository_grype

  # KICS
  - linter_name: kics
    linter_text: |
      **KICS** (Keeping Infrastructure as Code Secure) is a comprehensive open-source security scanner that identifies security vulnerabilities, compliance issues, and infrastructure misconfigurations in Infrastructure as Code files. It serves as a critical tool for preventing security risks before deployment to production environments.

      **Key Features:**

      - **Multi-Platform IaC Support**: Analyzes over 20 platforms including Terraform, CloudFormation, Kubernetes, Docker, Ansible, Helm, and more
      - **Extensive Query Library**: Over 2000+ built-in security queries covering OWASP Top 10, CWE, and platform-specific vulnerabilities
      - **Compliance Framework Support**: Built-in checks for CIS benchmarks, NIST, PCI-DSS, HIPAA, and other regulatory standards
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Custom Query Engine**: Rego-based policy engine allowing custom security rules for organization-specific requirements
      - **Remediation Guidance**: Detailed fix suggestions and best practice recommendations for identified issues
      - **Inline Suppression**: Comment-based suppression system for managing false positives and accepted risks
      - **Performance Optimized**: Fast scanning suitable for large Infrastructure as Code repositories
      - **Open Source**: Community-driven development with transparent security rules and continuous updates
    can_output_sarif: true
    descriptor_flavors:
      - cupcake
      - terraform
      - security
    linter_speed: 2
    linter_url: https://www.kics.io
    linter_repo: https://github.com/checkmarx/kics
    linter_rules_url: https://docs.kics.io/latest/queries/all-queries/
    linter_banner_image_url: https://raw.githubusercontent.com/checkmarx/kics/master/docs/img/logo/kics-hat-logo.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/kics.png
    linter_rules_configuration_url: https://docs.kics.io/latest/configuration-file/
    linter_rules_inline_disable_url: https://docs.kics.io/latest/running-kics/#using_commands_on_scanned_files_as_comments
    linter_megalinter_ref_url: https://docs.kics.io/latest/integrations/
    cli_lint_mode: project
    cli_config_arg_name: "--config"
    config_file_name: kics.config
    cli_executable: kics
    cli_lint_extra_args:
      - scan
    cli_lint_extra_args_after:
      - --no-progress
      - --path
      - "."
    sarif_default_output_file: kics-results.sarif
    cli_sarif_args:
      - --output-name
      - kics-results.sarif
      - --output-path
      - "{{REPORT_FOLDER}}"
      - --report-formats
      - "sarif"
    cli_version_arg_name: "version"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "TOTAL: ([0-9]+)"
    examples:
      - "kics scan --path ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=checkmarx/kics
          ARG REPOSITORY_KICS_VERSION=v2.1.10-alpine
        - FROM checkmarx/kics:${REPOSITORY_KICS_VERSION} AS kics
        - COPY --link --from=kics /app/bin/kics /usr/bin/kics
        - ENV KICS_QUERIES_PATH=/usr/bin/assets/queries KICS_LIBRARIES_PATH=/usr/bin/assets/libraries
        - COPY --from=kics /app/bin/assets /usr/bin/assets
    test_folder: repository_kics

  # LS-LINT
  - linter_name: ls-lint
    linter_text: |
      **ls-lint** is an extremely fast file and directory name linter that helps maintain consistent naming conventions across your project. It validates file and directory names against configurable rules to enforce naming patterns, prevent problematic characters, and ensure cross-platform compatibility.

      **Key Features:**

      - **Lightning Fast Performance**: Written in Go for extremely fast scanning of large directory structures and file systems
      - **Configurable Rules**: Flexible YAML configuration supporting regex patterns, case conventions, and custom naming rules
      - **Cross-Platform Compatibility**: Prevents naming conflicts between different operating systems (Windows, macOS, Linux)
      - **Multiple Naming Conventions**: Built-in support for camelCase, PascalCase, snake_case, kebab-case, and custom patterns
      - **Directory Structure Validation**: Enforces consistent naming across both files and directory hierarchies
      - **Zero Dependencies**: Standalone binary with no external dependencies for easy installation and deployment
      - **Globbing Support**: Advanced pattern matching for applying different rules to specific file types or directories
      - **Team Collaboration**: Ensures consistent naming conventions across large development teams and projects
      - **Error Prevention**: Catches naming issues early to prevent problems with case-sensitive filesystems and tools
    linter_url: https://ls-lint.org/
    linter_repo: https://github.com/loeffel-io/ls-lint
    linter_rules_url: https://ls-lint.org/2.2/configuration/the-rules.html
    linter_banner_image_url: https://raw.githubusercontent.com/loeffel-io/ls-lint/master/assets/logo/ls-lint.png
    active_only_if_file_found:
      - ".ls-lint.yml"
    cli_lint_mode: project
    cli_config_arg_name: "--config"
    config_file_name: ".ls-lint.yml"
    examples:
      - "ls-lint"
      - "ls-lint --workdir src"
    test_folder: repository_file
    cli_lint_errors_count: "total_lines"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=@ls-lint/ls-lint
          ARG NPM_LS_LINT_LS_LINT_VERSION=2.3.1
      npm:
        - "@ls-lint/ls-lint@${NPM_LS_LINT_LS_LINT_VERSION}"

  # SECRETLINT
  - class: SecretLintLinter
    linter_name: secretlint
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    linter_speed: 1
    linter_text: |
      **SecretLint** is a comprehensive secrets detection tool that prevents sensitive information like API keys, passwords, and tokens from being committed to version control. It provides pluggable architecture with extensive rule sets for detecting various types of secrets across different platforms and services.

      **Key Features:**

      - **Extensive Rule Library**: Built-in detection for AWS, GitHub, Slack, Google, and dozens of other service credentials
      - **Pluggable Architecture**: Modular rule system allowing custom secret patterns and organization-specific detection
      - **Multiple Output Formats**: Supports JSON, SARIF, and other formats for integration with security tools and platforms
      - **Configuration Flexibility**: Highly configurable with support for custom rules, ignore patterns, and severity levels
      - **Ignore System**: Sophisticated ignore patterns for managing false positives and legacy secrets
      - **Team Collaboration**: Shared configuration files ensure consistent secret detection across development teams
      - **Performance Optimized**: Fast scanning suitable for large repositories and automated workflows
      - **Open Source**: Community-driven with transparent detection rules and continuous updates
    linter_url: https://github.com/secretlint/secretlint
    linter_repo: https://github.com/secretlint/secretlint
    linter_banner_image_url: https://github.com/secretlint/secretlint/raw/master/docs/assets/SecretLintLP.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/secretlint.png
    linter_rules_url: https://github.com/secretlint/secretlint#rule-packages
    linter_rules_configuration_url: https://github.com/secretlint/secretlint#configuration
    linter_rules_ignore_config_url: https://github.com/secretlint/secretlint/blob/master/docs/configuration.md#secretlintignore
    linter_megalinter_ref_url: https://github.com/secretlint/secretlint#mega-linter
    config_file_name: .secretlintrc.json
    cli_config_arg_name: "--secretlintrc"
    ignore_file_name: .secretlintignore
    cli_lint_ignore_arg_name: --secretlintignore
    cli_lint_mode: project
    cli_lint_extra_args_after:
      - "**/*"
    cli_sarif_args:
      - --format
      - "@secretlint/secretlint-formatter-sarif"
    cli_help_arg_name: "--help"
    test_folder: credentials
    examples:
      - 'secretlint "*/**"'
      - 'secretlint --secretlintrc .secretlintrc.json "**/*"'
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=secretlint
          ARG NPM_SECRETLINT_VERSION=10.1.1
        - |-
          # renovate: datasource=npm depName=@secretlint/secretlint-rule-preset-recommend
          ARG NPM_SECRETLINT_SECRETLINT_RULE_PRESET_RECOMMEND_VERSION=10.1.1
        - |-
          # renovate: datasource=npm depName=@secretlint/secretlint-formatter-sarif
          ARG NPM_SECRETLINT_SECRETLINT_FORMATTER_SARIF_VERSION=10.1.1
      npm:
        - secretlint@${NPM_SECRETLINT_VERSION}
        - "@secretlint/secretlint-rule-preset-recommend@${NPM_SECRETLINT_SECRETLINT_RULE_PRESET_RECOMMEND_VERSION}"
        - "@secretlint/secretlint-formatter-sarif@${NPM_SECRETLINT_SECRETLINT_FORMATTER_SARIF_VERSION}"

  # SEMGREP
  - class: SemgrepLinter
    linter_name: semgrep
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - cupcake
      - security
    linter_url: https://semgrep.dev/
    linter_repo: https://github.com/returntocorp/semgrep
    linter_speed: 1
    linter_text: |
      **Semgrep** is a fast, AI-powered static analysis tool that finds bugs, detects security vulnerabilities, and enforces code standards across 30+ programming languages and frameworks. Unlike traditional SAST tools, Semgrep provides high-confidence findings with minimal false positives.

      **Key Features:**

      - **Multi-Language Support**: Comprehensive analysis for 30+ languages including Python, JavaScript, Java, Go, C/C++, and more
      - **High-Precision Analysis**: AI-powered noise filtering reduces false positives by up to 98% compared to traditional SAST tools
      - **Security-Focused**: Built-in rulesets for OWASP Top 10, CWE vulnerabilities, and framework-specific security patterns
      - **Custom Rule Engine**: Simple, code-like syntax for writing custom rules that match your organization's coding standards
      - **Lightning Fast**: Median CI scan time of 10 seconds, designed for developer workflow integration
      - **Extensive Rule Registry**: Thousands of community and expert-maintained rules covering security, correctness, and performance
      To use SemGrep in MegaLinter you must define a list of rulesets to use.
      Example: `REPOSITORY_SEMGREP_RULESETS: ["p/docker-compose","p/owasp-top-ten"]`
      Exception for standalone and security flavors docker images, that use a list of security rulesets by default.
    linter_rules_url: https://semgrep.dev/r
    linter_rules_configuration_url: https://semgrep.dev/docs/running-rules/
    linter_rules_inline_disable_url: https://semgrep.dev/docs/ignoring-findings/#inline-comments
    linter_rules_ignore_config_url: https://semgrep.dev/docs/ignoring-files-folders-code/#defining-files-and-folders-in-semgrepignore
    linter_banner_image_url: https://raw.githubusercontent.com/returntocorp/semgrep/develop/semgrep.svg
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/semgrep.png
    cli_lint_mode: project
    cli_config_arg_name: --config
    cli_config_default_value: auto
    ignore_file_name: .semgrepignore
    cli_lint_extra_args:
      - --error # Exit 1 when errors are found
    cli_lint_extra_args_after:
      - "{{WORKSPACE}}"
    # cli_lint_fix_arg_name: --autofix # Disable for now as some "fixes" are actually breaking ML code
    cli_sarif_args:
      - --sarif
      - --output
      - "{{SARIF_OUTPUT_FILE}}"
    cli_help_arg_name: -h
    cli_help_extra_args: ["--help"]
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "files: ([0-9]+) finding"
    test_folder: repository_semgrep
    examples:
      - "semgrep /tmp/lint"
      - "semgrep "
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=semgrep
          ARG PIP_SEMGREP_VERSION=1.116.0
      pip:
        - semgrep==${PIP_SEMGREP_VERSION}
    variables:
      - name: REPOSITORY_SEMGREP_RULESETS
        description: List of semgrep rulesets identifiers that you want to enforce
        default_value: auto
      - name: REPOSITORY_SEMGREP_RULESETS_TYPE
        description: "MegaLinter semgrep ruleset list preset id . Available values: security"
        default_value: ""
    ide:
      vscode:
        - name: VSCode SemGrep
          url: https://marketplace.visualstudio.com/items?itemName=semgrep.semgrep

  # SYFT
  - class: SyftLinter
    linter_name: syft
    can_output_sarif: true
    is_sbom: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    ignore_for_flavor_suggestions: true
    linter_url: https://github.com/anchore/syft
    linter_repo: https://github.com/anchore/syft
    linter_text: |
      **Syft** is a comprehensive Software Bill of Materials (SBOM) generation tool that creates detailed inventories of software components and dependencies in your projects. It serves as an essential tool for software supply chain security and compliance management.

      **Key Features:**

      - **Multi-Format SBOM Generation**: Creates SBOMs in SPDX, CycloneDX, and Syft native formats for maximum compatibility
      - **Extensive Ecosystem Support**: Analyzes container images, filesystems, archives, and source code across multiple programming languages
      - **Language Coverage**: Supports packages from npm, pip, gems, Java/Maven/Gradle, Go modules, .NET, and many more
      - **Container Analysis**: Deep inspection of container images including OS packages and application dependencies
      - **Fast Scanning**: High-performance analysis suitable for CI/CD pipelines and large codebases
      - **Flexible Output**: Multiple output formats including JSON, XML, and human-readable tables
      - **Supply Chain Visibility**: Provides complete transparency into software components and their origins
      - **Compliance Ready**: Supports regulatory requirements and industry standards for software transparency
      - **Integration Friendly**: Seamlessly integrates with vulnerability scanners and security tools for comprehensive analysis
    linter_banner_image_url: https://user-images.githubusercontent.com/5199289/136844524-1527b09f-c5cb-4aa9-be54-5aa92a6086c1.png
    cli_lint_mode: project
    config_file_name: .syft.yaml
    cli_config_arg_name: --config
    cli_lint_extra_args:
      - scan
      - .
    cli_sarif_args:
      - --output
      - json
      - --file
      - "{{SARIF_OUTPUT_FILE}}.syft.json"
    test_folder: repository_syft
    examples:
      - "syft /tmp/lint"
    install:
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=anchore/syft
          ARG REPOSITORY_SYFT_VERSION=1.28.0
        - RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/refs/tags/v${REPOSITORY_SYFT_VERSION}/install.sh | sh -s -- -b /usr/local/bin

  # TRIVY
  - linter_name: trivy
    class: TrivyLinter
    can_output_sarif: true
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    linter_text: |
      **Trivy** is a comprehensive security scanner that detects vulnerabilities, misconfigurations, secrets, and license issues in container images, filesystems, and git repositories. It serves as an all-in-one security solution for modern development workflows.

      **Key Features:**

      - **Multi-Target Scanning**: Analyzes container images, filesystem directories, git repositories, Kubernetes clusters, and cloud infrastructure
      - **Vulnerability Detection**: Comprehensive CVE database covering OS packages, language-specific libraries, and application dependencies
      - **Misconfiguration Scanning**: Built-in policies for Infrastructure as Code including Terraform, CloudFormation, Kubernetes, and Docker
      - **Secret Detection**: Identifies hardcoded secrets, API keys, passwords, and sensitive information in source code
      - **License Scanning**: Analyzes software licenses to ensure compliance with organizational policies
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **High Performance**: Fast scanning optimized for CI/CD pipelines with efficient caching mechanisms
      - **Offline Support**: Can operate in air-gapped environments with offline vulnerability databases
      - **Extensive Integration**: Works with major CI/CD platforms, container registries, and security orchestration tools

      **Note**: You can ignore specific findings by defining a [.trivyignore file](https://aquasecurity.github.io/trivy/latest/docs/configuration/filtering/#by-finding-ids) at your repository root.
    linter_url: https://aquasecurity.github.io/trivy/
    linter_repo: https://github.com/aquasecurity/trivy
    linter_speed: 2
    linter_banner_image_url: https://github.com/aquasecurity/trivy/raw/main/docs/imgs/logo.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/trivy.png
    linter_rules_configuration_url: https://aquasecurity.github.io/trivy/latest/docs/configuration/
    linter_rules_ignore_config_url: https://aquasecurity.github.io/trivy/latest/docs/configuration/filtering/#by-inline-comments
    cli_lint_mode: project
    config_file_name: trivy.yaml
    cli_config_arg_name: --config
    cli_sarif_args:
      - --format
      - sarif
      - -o
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_extra_args:
      - fs
      - --scanners
      - vuln,misconfig
      - --exit-code
      - "1"
    cli_lint_extra_args_after:
      - "."
    test_folder: trivy
    examples:
      - "trivy fs --scanners vuln,misconfig ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=aquasecurity/trivy
          ARG REPOSITORY_TRIVY_VERSION=0.64.1
        - |
          RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin "v${REPOSITORY_TRIVY_VERSION}" \
              && (trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress)
    ide:
      vscode:
        - name: VSCode Trivy
          url: https://marketplace.visualstudio.com/items?itemName=AquaSecurityOfficial.trivy-vulnerability-scanner

  # TRIVY SBOM
  - linter_name: trivy-sbom
    class: TrivySbomLinter
    can_output_sarif: true
    is_sbom: true
    name: REPOSITORY_TRIVY_SBOM
    cli_executable: trivy
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    linter_text: |
      **Trivy SBOM** is a specialized component of Trivy that generates comprehensive Software Bill of Materials (SBOM) documents for enhanced supply chain security and compliance. It provides detailed inventory management for software components and dependencies.

      **Key Features:**

      - **Comprehensive Component Discovery**: Automatically detects and catalogs all software components, libraries, and dependencies in projects
      - **Multi-Format SBOM Output**: Generates SBOMs in industry-standard formats including SPDX and CycloneDX for maximum compatibility
      - **Container and Filesystem Analysis**: Creates SBOMs for container images, filesystems, and source code repositories
      - **Dependency Mapping**: Provides complete dependency graphs showing relationships between components
      - **License Information**: Includes license details for each component to support compliance and legal reviews
      - **Vulnerability Context**: Links SBOM data with security information for comprehensive risk assessment
      - **Supply Chain Transparency**: Enables organizations to meet regulatory requirements and industry standards
      - **Audit Trail**: Creates detailed records of software composition for security auditing and compliance reporting
    linter_url: https://aquasecurity.github.io/trivy/
    linter_repo: https://github.com/aquasecurity/trivy
    linter_speed: 2
    linter_banner_image_url: https://github.com/aquasecurity/trivy/raw/main/docs/imgs/logo.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/trivy-sbom.png
    linter_rules_configuration_url: https://aquasecurity.github.io/trivy/latest/docs/configuration/
    linter_rules_ignore_config_url: https://aquasecurity.github.io/trivy/latest/docs/configuration/filtering/#by-inline-comments
    cli_lint_mode: project
    config_file_name: trivy-sbom.yaml
    cli_config_arg_name: --config
    cli_lint_extra_args:
      - fs
      - --format
      - cyclonedx
    cli_lint_extra_args_after:
      - "."
    cli_sarif_args:
      - --output
      - "{{SARIF_OUTPUT_FILE}}.trivy-sbom.json"
    test_folder: trivy
    examples:
      - "trivy fs --format cyclonedx ."
      - "trivy fs --config trivy-sbom.yaml --format cyclonedx ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=aquasecurity/trivy
          ARG REPOSITORY_TRIVY_SBOM_VERSION=0.64.1
        - |
          RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin "v${REPOSITORY_TRIVY_SBOM_VERSION}" \
              && (trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress)
    ide:
      vscode:
        - name: VSCode Trivy
          url: https://marketplace.visualstudio.com/items?itemName=AquaSecurityOfficial.trivy-vulnerability-scanner

  # TRUFFLEHOG
  - class: TruffleHogLinter
    linter_name: trufflehog
    linter_text: |
      **TruffleHog** is an advanced secrets scanner that searches through git repositories, files, and other sources to find secrets, passwords, API keys, and other sensitive information that may have been accidentally committed to code. It combines pattern matching, entropy analysis, and verification capabilities to provide comprehensive secret detection.

      **Key Features:**

      - **Git History Scanning**: Deep analysis of entire git history including all branches, commits, and deleted files
      - **Entropy Analysis**: Advanced mathematical analysis to detect high-entropy strings that may be secrets
      - **Pattern Matching**: Extensive library of regex patterns for detecting known secret formats from popular services
      - **Secret Verification**: Validates detected secrets by attempting authentication with the actual services
      - **Multi-Source Support**: Scans git repositories, filesystems, cloud storage, databases, and container images
      - **Custom Detectors**: Extensible framework for adding organization-specific secret detection patterns
      - **Performance Optimized**: Efficient scanning algorithms suitable for large repositories and continuous monitoring
      - **Detailed Reporting**: Comprehensive output with context, verification status, and remediation guidance
      - **False Positive Management**: Sophisticated filtering and ignore systems to reduce noise and focus on real threats
    descriptor_flavors:
      - all_flavors # Applicable to CI in any language project
      - ci_light
      - cupcake
      - security
    linter_speed: 2
    linter_url: https://github.com/trufflesecurity/trufflehog
    linter_repo: https://github.com/trufflesecurity/trufflehog
    linter_banner_image_url: https://storage.googleapis.com/trufflehog-static-sources/pixel_pig.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/trufflehog.png
    linter_rules_configuration_url: https://github.com/trufflesecurity/trufflehog#regex-detector-alpha
    cli_lint_mode: project
    cli_config_arg_name: "--config"
    config_file_name: .trufflehog.yml
    cli_lint_extra_args:
      - filesystem
      - "."
      - --fail
      - --only-verified
      - --no-update
    cli_help_arg_name: --help
    cli_version_arg_name: --version
    examples:
      - "trufflehog filesystem ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=trufflesecurity/trufflehog
          ARG REPOSITORY_TRUFFLEHOG_VERSION=3.89.2
        - FROM trufflesecurity/trufflehog:${REPOSITORY_TRUFFLEHOG_VERSION} AS trufflehog
        - COPY --link --from=trufflehog /usr/bin/trufflehog /usr/bin/
    test_folder: gitleaks
