descriptor_id: KUBERNETES
descriptor_type: tooling_format
descriptor_flavors:
  - all_flavors # Applicable to CI in any language project
  - cupcake
  - security
files_sub_directory: kubernetes
file_extensions:
  - ".yml"
  - ".yaml"
  - ".json"
file_contains_regex:
  - "apiVersion:"
  - 'kustomize\.config\.k8s\.io'
  - "tekton"
linters:
  # KUBECONFORM
  - linter_name: kubeconform
    name: KUBERNETES_KUBECONFORM
    linter_repo: https://github.com/yannh/kubeconform
    linter_url: https://github.com/yannh/kubeconform
    linter_spdx_license: Apache-2.0
    linter_rules_configuration_url: https://github.com/yannh/kubeconform#usage
    linter_rules_inline_disable_url: https://github.com/yannh/kubeconform#disabling-validation-for-specific-resources
    linter_banner_image_url: https://user-images.githubusercontent.com/19731161/142411871-f695e40c-bfa8-43ca-97c0-94c256749732.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/kubeconform.png
    linter_text: |
      **kubeconform** is a FAST Kubernetes manifest validation tool with support for Custom Resources. It's designed as a more up-to-date and feature-rich alternative to kubeval, with significant performance improvements and enhanced functionality.

      **Key Features:**

      - **High Performance**: Multi-threaded validation with caching and concurrent routines for superior speed compared to kubeval
      - **Up-to-Date Schemas**: Uses self-updating fork of kubernetes-json-schema with guaranteed current schemas for all recent Kubernetes versions
      - **Custom Resource Support**: Validates CustomResourceDefinitions (CRDs) with configurable schema locations and CRDs-catalog integration
      - **OpenShift Compatibility**: Built-in support for OpenShift manifest validation with version-specific schemas
      - **Flexible Schema Sources**: Supports multiple schema locations (HTTP/HTTPS URLs, local filesystem) with templated paths
      - **Multiple Output Formats**: JSON, JUnit, TAP, and text outputs with detailed validation summaries
      - **Advanced Filtering**: Skip specific resource kinds, ignore missing schemas, and use regex patterns for file exclusion
      - **CI/CD Ready**: Optimized for integration with GitHub Actions, GitLab CI, and other continuous integration platforms
    cli_version_arg_name: -v
    cli_help_arg_name: -h
    cli_lint_extra_args:
      - -summary
      - -cache
      - /tmp/
    cli_lint_mode: list_of_files
    # Count errors when either file is invalid, or an error occurred (e.g. couldn't find schema for this object)
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "(?:Invalid|Errors): ([0-9]+)"
    examples:
      - kubeconform myfile.yml
      - kubeconform -ignore-missing-schemas -skip SomeCRD,AnotherCRD -kubernetes-version '1.18.0' -strict myfile.yml
    install:
      dockerfile:
        - |-
          # renovate: datasource=docker depName=ghcr.io/yannh/kubeconform
          ARG KUBERNETES_KUBECONFORM_VERSION=v0.7.0-alpine
        - FROM ghcr.io/yannh/kubeconform:${KUBERNETES_KUBECONFORM_VERSION} AS kubeconform
        - COPY --link --from=kubeconform /kubeconform /usr/bin/

  # HELM LINT
  - linter_name: helm
    name: KUBERNETES_HELM
    linter_repo: https://github.com/helm/helm
    linter_url: https://helm.sh/docs/helm/helm_lint/
    linter_spdx_license: Apache-2.0
    linter_rules_configuration_url: https://helm.sh/docs/helm/helm_lint/
    linter_rules_inline_disable_url: https://helm.sh/docs/topics/charts/#schema-files
    files_sub_directory: ""
    test_folder: kubernetes_helm
    active_only_if_file_found:
      - Chart.yml
      - Chart.yaml
    cli_lint_mode: project
    cli_help_arg_name: help
    cli_version_arg_name: version
    cli_lint_extra_args:
      - "lint"
    linter_banner_image_url: https://helm.sh/img/helm.svg
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/helm.png
    linter_text: |
      **Helm Lint** examines Helm charts for potential issues, misconfigurations, and adherence to best practices. It validates chart structure, templates, and values to ensure charts can be successfully deployed and function correctly in Kubernetes environments.

      **Key Features:**

      - **Chart Validation**: Verifies chart structure, metadata, and required files are present and correctly formatted
      - **Template Rendering**: Tests that all templates render properly with default and provided values
      - **YAML Syntax Checking**: Validates YAML syntax and structure across all chart files
      - **Kubernetes API Compliance**: Ensures generated manifests comply with Kubernetes API schemas and versions
      - **Best Practice Enforcement**: Checks for common Helm chart antipatterns and recommended practices
      - **Dependency Validation**: Verifies chart dependencies are properly declared and accessible
      - **Subchart Support**: Can recursively lint subcharts and their dependencies
    examples:
      - helm lint .
      - helm lint --with-subcharts .
    install:
      apk:
        - helm
    # KUBESCAPE
  - class: KubescapeLinter
    linter_name: kubescape
    name: KUBERNETES_KUBESCAPE
    can_output_sarif: true
    files_sub_directory: ""
    linter_repo: https://github.com/kubescape/kubescape
    linter_url: https://github.com/kubescape/kubescape
    linter_text: |
      **Kubescape** is a comprehensive Kubernetes security scanner that examines charts and Kubernetes files for security vulnerabilities, misconfigurations, and compliance violations. It provides security analysis based on established frameworks and best practices.

      **Key Features:**

      - **Multi-Framework Security Scanning**: Supports NSA/CISA guidelines, MITRE ATT&CK, CIS Kubernetes Benchmark, and custom frameworks
      - **Vulnerability Assessment**: Scans container images for known CVEs and security vulnerabilities
      - **Configuration Analysis**: Detects misconfigurations in Kubernetes manifests, Helm charts, and cluster configurations
      - **Compliance Reporting**: Generates compliance reports against security standards and regulatory requirements
      - **SARIF Output**: Modern security report format for integration with development platforms and security tools
      - **Risk Scoring**: Provides risk assessment and prioritization of security findings
      - **CI/CD Integration**: Seamlessly integrates into development pipelines for shift-left security practices
      - **Custom Policies**: Supports custom security policies and rules for organization-specific requirements
      - **Multi-Format Support**: Analyzes YAML manifests, Helm charts, and live cluster configurations
    linter_banner_image_url: https://www.armosec.io/wp-content/uploads/2022/11/Kubescape_BY_ARMO.png
    linter_icon_png_url: https://raw.githubusercontent.com/oxsecurity/megalinter/main/docs/assets/icons/linters/kubescape.png
    linter_spdx_license: Apache-2.0
    active_only_if_file_found:
      - Chart.yml
      - Chart.yaml
    cli_lint_mode: project
    cli_help_arg_name: help
    cli_version_arg_name: version
    cli_lint_extra_args:
      - "scan"
      - --verbose
      - "--severity-threshold"
      - high
    cli_lint_extra_args_after:
      - "."
    cli_sarif_args: ["--format", "sarif", "--output", "{{SARIF_OUTPUT_FILE}}"]
    examples:
      - "kubescape scan ."
    test_folder: kubernetes_kubescape
    ide:
      vscode:
        - name: Kubescape
          url: https://marketplace.visualstudio.com/items?itemName=kubescape.kubescape
    install:
      apk:
        - curl
        - gcompat
        - libstdc++
      dockerfile:
        - |-
          # renovate: datasource=github-tags depName=kubescape/kubescape
          ARG KUBERNETES_KUBESCAPE_VERSION=3.0.37
        - |-
          RUN ln -s /lib/libc.so.6 /usr/lib/libresolv.so.2 && \
              curl --retry 5 --retry-delay 5 -sLv https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash -s -- -v "v${KUBERNETES_KUBESCAPE_VERSION}"
