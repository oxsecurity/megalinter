{
  "$id": "http://github.com/oxsecurity/megalinter-configuration.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "additionalProperties": false,
  "definitions": {
    "command_info": {
      "description": "Command information",
      "properties": {
        "command": {
          "examples": [
            "npm run test",
            "echo \"This is a custom command\""
          ],
          "title": "Bash command to run",
          "type": "string"
        },
        "continue_if_failed": {
          "default": true,
          "description": "If command fails, continue MegaLinter process or not",
          "title": "Continue if failed",
          "type": "boolean"
        },
        "cwd": {
          "enum": [
            "root",
            "workspace"
          ],
          "examples": [
            "root",
            "workspace"
          ],
          "title": "Folder where to run the command",
          "type": "string"
        },
        "output_variables": {
          "description": "ENV variables to get from output after running the commands, and store in MegaLinter ENV context",
          "items": {
            "type": "string"
          },
          "title": "Output ENV variables",
          "type": "array"
        },
        "secured_env": {
          "default": true,
          "description": "Apply filtering of secured env variables before calling the command (default true). Be careful if you disable it.",
          "title": "Secured ENV variables",
          "type": "boolean"
        },
        "tag": {
          "examples": [
            "before_plugins"
          ],
          "title": "Tag defining at which commands entry point the command will be run",
          "type": "string"
        },
        "venv": {
          "examples": [
            "flake8"
          ],
          "title": "Name of the python venv to run the command in.",
          "type": "string"
        }
      },
      "required": [],
      "title": "Command",
      "type": "object"
    },
    "enum_descriptor_keys": {
      "enum": [
        "ACTION",
        "ANSIBLE",
        "API",
        "ARM",
        "BASH",
        "BICEP",
        "C",
        "CLOJURE",
        "CLOUDFORMATION",
        "COFFEE",
        "COPYPASTE",
        "CPP",
        "CREDENTIALS",
        "CSHARP",
        "CSS",
        "DART",
        "DOCKERFILE",
        "EDITORCONFIG",
        "ENV",
        "GHERKIN",
        "GIT",
        "GO",
        "GRAPHQL",
        "GROOVY",
        "HTML",
        "JAVA",
        "JAVASCRIPT",
        "JSON",
        "JSX",
        "KOTLIN",
        "KUBERNETES",
        "LATEX",
        "LUA",
        "MAKEFILE",
        "MARKDOWN",
        "PERL",
        "PHP",
        "POWERSHELL",
        "PROTOBUF",
        "PUPPET",
        "PYTHON",
        "R",
        "RAKU",
        "REPOSITORY",
        "RST",
        "RUBY",
        "RUST",
        "SALESFORCE",
        "SCALA",
        "SNAKEMAKE",
        "SPELL",
        "SQL",
        "SWIFT",
        "TEKTON",
        "TERRAFORM",
        "TSX",
        "TYPESCRIPT",
        "VBDOTNET",
        "XML",
        "YAML"
      ],
      "type": "string"
    },
    "enum_linter_keys": {
      "enum": [
        "ACTION_ACTIONLINT",
        "ANSIBLE_ANSIBLE_LINT",
        "API_SPECTRAL",
        "ARM_ARM_TTK",
        "BASH_EXEC",
        "BASH_SHELLCHECK",
        "BASH_SHFMT",
        "BICEP_BICEP_LINTER",
        "CLOJURE_CLJSTYLE",
        "CLOJURE_CLJ_KONDO",
        "CLOUDFORMATION_CFN_LINT",
        "COFFEE_COFFEELINT",
        "COPYPASTE_JSCPD",
        "CPP_CLANG_FORMAT",
        "CPP_CPPLINT",
        "CREDENTIALS_SECRETLINT",
        "CSHARP_CSHARPIER",
        "CSHARP_DOTNET_FORMAT",
        "CSHARP_ROSLYNATOR",
        "CSS_SCSSLINT",
        "CSS_STYLELINT",
        "C_CLANG_FORMAT",
        "C_CPPLINT",
        "DART_DARTANALYZER",
        "DOCKERFILE_DOCKERFILELINT",
        "DOCKERFILE_HADOLINT",
        "EDITORCONFIG_EDITORCONFIG_CHECKER",
        "ENV_DOTENV_LINTER",
        "GHERKIN_GHERKIN_LINT",
        "GIT_GIT_DIFF",
        "GO_GOLANGCI_LINT",
        "GO_REVIVE",
        "GRAPHQL_GRAPHQL_SCHEMA_LINTER",
        "GROOVY_NPM_GROOVY_LINT",
        "HTML_DJLINT",
        "HTML_HTMLHINT",
        "JAVASCRIPT_ES",
        "JAVASCRIPT_PRETTIER",
        "JAVASCRIPT_STANDARD",
        "JAVA_CHECKSTYLE",
        "JAVA_PMD",
        "JSON_ESLINT_PLUGIN_JSONC",
        "JSON_JSONLINT",
        "JSON_NPM_PACKAGE_JSON_LINT",
        "JSON_PRETTIER",
        "JSON_V8R",
        "JSX_ESLINT",
        "KOTLIN_DETEKT",
        "KOTLIN_KTLINT",
        "KUBERNETES_HELM",
        "KUBERNETES_KUBECONFORM",
        "KUBERNETES_KUBESCAPE",
        "KUBERNETES_KUBEVAL",
        "LATEX_CHKTEX",
        "LUA_LUACHECK",
        "LUA_SELENE",
        "LUA_STYLUA",
        "MAKEFILE_CHECKMAKE",
        "MARKDOWN_MARKDOWNLINT",
        "MARKDOWN_MARKDOWN_LINK_CHECK",
        "MARKDOWN_MARKDOWN_TABLE_FORMATTER",
        "MARKDOWN_REMARK_LINT",
        "OPENAPI_SPECTRAL",
        "PERL_PERLCRITIC",
        "PHP_BUILTIN",
        "PHP_PHPCS",
        "PHP_PHPCSFIXER",
        "PHP_PHPLINT",
        "PHP_PHPSTAN",
        "PHP_PSALM",
        "POWERSHELL_POWERSHELL",
        "POWERSHELL_POWERSHELL_FORMATTER",
        "PROTOBUF_PROTOLINT",
        "PUPPET_PUPPET_LINT",
        "PYTHON_BANDIT",
        "PYTHON_BLACK",
        "PYTHON_FLAKE8",
        "PYTHON_ISORT",
        "PYTHON_MYPY",
        "PYTHON_PYLINT",
        "PYTHON_PYRIGHT",
        "PYTHON_RUFF",
        "PYTHON_RUFF_FORMAT",
        "RAKU_RAKU",
        "REPOSITORY_CHECKOV",
        "REPOSITORY_DEVSKIM",
        "REPOSITORY_DUSTILOCK",
        "REPOSITORY_GITLEAKS",
        "REPOSITORY_GIT_DIFF",
        "REPOSITORY_GOODCHECK",
        "REPOSITORY_GRYPE",
        "REPOSITORY_KICS",
        "REPOSITORY_LS_LINT",
        "REPOSITORY_SECRETLINT",
        "REPOSITORY_SEMGREP",
        "REPOSITORY_SYFT",
        "REPOSITORY_TRIVY",
        "REPOSITORY_TRIVY_SBOM",
        "REPOSITORY_TRUFFLEHOG",
        "RST_RSTCHECK",
        "RST_RSTFMT",
        "RST_RST_LINT",
        "RUBY_RUBOCOP",
        "RUST_CLIPPY",
        "R_LINTR",
        "SALESFORCE_LIGHTNING_FLOW_SCANNER",
        "SALESFORCE_SFDX_SCANNER_APEX",
        "SALESFORCE_SFDX_SCANNER_AURA",
        "SALESFORCE_SFDX_SCANNER_LWC",
        "SCALA_SCALAFIX",
        "SNAKEMAKE_LINT",
        "SNAKEMAKE_SNAKEFMT",
        "SPELL_CSPELL",
        "SPELL_LYCHEE",
        "SPELL_MISSPELL",
        "SPELL_PROSELINT",
        "SPELL_VALE",
        "SQL_SQLFLUFF",
        "SQL_SQL_LINT",
        "SQL_TSQLLINT",
        "SWIFT_SWIFTLINT",
        "TEKTON_TEKTON_LINT",
        "TERRAFORM_CHECKOV",
        "TERRAFORM_KICS",
        "TERRAFORM_TERRAFORM_FMT",
        "TERRAFORM_TERRAGRUNT",
        "TERRAFORM_TERRASCAN",
        "TERRAFORM_TFLINT",
        "TSX_ESLINT",
        "TYPESCRIPT_ES",
        "TYPESCRIPT_PRETTIER",
        "TYPESCRIPT_STANDARD",
        "VBDOTNET_DOTNET_FORMAT",
        "XML_XMLLINT",
        "YAML_PRETTIER",
        "YAML_V8R",
        "YAML_YAMLLINT"
      ],
      "type": "string"
    }
  },
  "description": "MegaLinter configuration file",
  "properties": {
    "ACTION_ACTIONLINT_ARGUMENTS": {
      "$id": "#/properties/ACTION_ACTIONLINT_ARGUMENTS",
      "description": "ACTION_ACTIONLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ACTION_ACTIONLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ACTION_ACTIONLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/ACTION_ACTIONLINT_CLI_EXECUTABLE",
      "default": [
        [
          "actionlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "ACTION_ACTIONLINT: CLI Executable",
      "type": "array"
    },
    "ACTION_ACTIONLINT_CLI_LINT_MODE": {
      "$id": "#/properties/ACTION_ACTIONLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "ACTION_ACTIONLINT: Override default cli lint mode",
      "type": "string"
    },
    "ACTION_ACTIONLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/ACTION_ACTIONLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "ACTION_ACTIONLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ACTION_ACTIONLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ACTION_ACTIONLINT_CONFIG_FILE": {
      "$id": "#/properties/ACTION_ACTIONLINT_CONFIG_FILE",
      "default": "actionlint.yml",
      "description": "ACTION_ACTIONLINT: User custom config file name if different from default",
      "title": "ACTION_ACTIONLINT: Custom config file name",
      "type": "string"
    },
    "ACTION_ACTIONLINT_DIRECTORY": {
      "$id": "#/properties/ACTION_ACTIONLINT_DIRECTORY",
      "default": ".github/workflows",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "ACTION_ACTIONLINT: Directory containing ACTION files",
      "type": "string"
    },
    "ACTION_ACTIONLINT_DISABLE_ERRORS": {
      "$id": "#/properties/ACTION_ACTIONLINT_DISABLE_ERRORS",
      "default": false,
      "title": "ACTION_ACTIONLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "ACTION_ACTIONLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/ACTION_ACTIONLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "ACTION_ACTIONLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "ACTION_ACTIONLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/ACTION_ACTIONLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ACTION_ACTIONLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ACTION_ACTIONLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/ACTION_ACTIONLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ACTION_ACTIONLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ACTION_ACTIONLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ACTION_ACTIONLINT_FILTER_REGEX_EXCLUDE",
      "title": "ACTION_ACTIONLINT: Excluding Regex",
      "type": "string"
    },
    "ACTION_ACTIONLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ACTION_ACTIONLINT_FILTER_REGEX_INCLUDE",
      "title": "ACTION_ACTIONLINT: Including Regex",
      "type": "string"
    },
    "ACTION_ACTIONLINT_POST_COMMANDS": {
      "$id": "#/properties/ACTION_ACTIONLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ACTION_ACTIONLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "ACTION_ACTIONLINT_PRE_COMMANDS": {
      "$id": "#/properties/ACTION_ACTIONLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ACTION_ACTIONLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "ACTION_ACTIONLINT_RULES_PATH": {
      "$id": "#/properties/ACTION_ACTIONLINT_RULES_PATH",
      "description": "ACTION_ACTIONLINT: Path where to find linter configuration file",
      "title": "ACTION_ACTIONLINT: Custom config file path",
      "type": "string"
    },
    "ACTION_ACTIONLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/ACTION_ACTIONLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling ACTION_ACTIONLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "ACTION_ACTIONLINT: Unsecured env variables",
      "type": "array"
    },
    "ACTION_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ACTION_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ACTION descriptor",
      "type": "string"
    },
    "ACTION_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ACTION_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ACTION descriptor",
      "type": "string"
    },
    "ACTION_POST_COMMANDS": {
      "$id": "#/properties/ACTION_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for ACTION descriptor",
      "type": "array"
    },
    "ACTION_PRE_COMMANDS": {
      "$id": "#/properties/ACTION_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for ACTION descriptor",
      "type": "array"
    },
    "ADDITIONAL_EXCLUDED_DIRECTORIES": {
      "$id": "#/properties/ADDITIONAL_EXCLUDED_DIRECTORIES",
      "description": "List of additional excluded directory basenames to add to MegaLinter default excluded directories. They are excluded at any nested level.",
      "examples": [
        [
          "test"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Additional excluded directories",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_ARGUMENTS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_ARGUMENTS",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ANSIBLE_ANSIBLE_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "ansible-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: CLI Executable",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "ANSIBLE_ANSIBLE_LINT: Override default cli lint mode",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ANSIBLE_ANSIBLE_LINT_CONFIG_FILE": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_CONFIG_FILE",
      "default": ".ansible-lint",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom config file name if different from default",
      "title": "ANSIBLE_ANSIBLE_LINT: Custom config file name",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_DIRECTORY": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_DIRECTORY",
      "default": "ansible",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "ANSIBLE_ANSIBLE_LINT: Directory containing ANSIBLE files",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "ANSIBLE_ANSIBLE_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "ANSIBLE_ANSIBLE_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_FILE_NAME": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILE_NAME",
      "default": ".ansible-lint.yml",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom config file name if different from default",
      "title": "ANSIBLE_ANSIBLE_LINT: Custom config file name",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_POST_COMMANDS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_PRE_COMMANDS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_RULES_PATH": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_RULES_PATH",
      "description": "ANSIBLE_ANSIBLE_LINT: Path where to find linter configuration file",
      "title": "ANSIBLE_ANSIBLE_LINT: Custom config file path",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling ANSIBLE_ANSIBLE_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Unsecured env variables",
      "type": "array"
    },
    "ANSIBLE_DIRECTORY": {
      "$id": "#/properties/ANSIBLE_DIRECTORY",
      "default": "ansible",
      "title": "ANSIBLE_DIRECTORY: Directory containing ANSIBLE files",
      "type": "string"
    },
    "ANSIBLE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ANSIBLE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ANSIBLE descriptor",
      "type": "string"
    },
    "ANSIBLE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ANSIBLE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ANSIBLE descriptor",
      "type": "string"
    },
    "ANSIBLE_POST_COMMANDS": {
      "$id": "#/properties/ANSIBLE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for ANSIBLE descriptor",
      "type": "array"
    },
    "ANSIBLE_PRE_COMMANDS": {
      "$id": "#/properties/ANSIBLE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for ANSIBLE descriptor",
      "type": "array"
    },
    "API_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/API_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for API descriptor",
      "type": "string"
    },
    "API_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/API_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for API descriptor",
      "type": "string"
    },
    "API_POST_COMMANDS": {
      "$id": "#/properties/API_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for API descriptor",
      "type": "array"
    },
    "API_PRE_COMMANDS": {
      "$id": "#/properties/API_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for API descriptor",
      "type": "array"
    },
    "API_SPECTRAL_ARGUMENTS": {
      "$id": "#/properties/API_SPECTRAL_ARGUMENTS",
      "description": "API_SPECTRAL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "API_SPECTRAL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "API_SPECTRAL_CLI_EXECUTABLE": {
      "$id": "#/properties/API_SPECTRAL_CLI_EXECUTABLE",
      "default": [
        [
          "spectral"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "API_SPECTRAL: CLI Executable",
      "type": "array"
    },
    "API_SPECTRAL_CLI_LINT_MODE": {
      "$id": "#/properties/API_SPECTRAL_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "API_SPECTRAL: Override default cli lint mode",
      "type": "string"
    },
    "API_SPECTRAL_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/API_SPECTRAL_COMMAND_REMOVE_ARGUMENTS",
      "description": "API_SPECTRAL: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "API_SPECTRAL: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "API_SPECTRAL_CONFIG_FILE": {
      "$id": "#/properties/API_SPECTRAL_CONFIG_FILE",
      "default": ".spectral.yaml",
      "description": "API_SPECTRAL: User custom config file name if different from default",
      "title": "API_SPECTRAL: Custom config file name",
      "type": "string"
    },
    "API_SPECTRAL_DISABLE_ERRORS": {
      "$id": "#/properties/API_SPECTRAL_DISABLE_ERRORS",
      "default": false,
      "title": "API_SPECTRAL: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "API_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/API_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "API_SPECTRAL: Maximum number of errors allowed",
      "type": "number"
    },
    "API_SPECTRAL_FILE_EXTENSIONS": {
      "$id": "#/properties/API_SPECTRAL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "API_SPECTRAL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "API_SPECTRAL_FILE_NAMES_REGEX": {
      "$id": "#/properties/API_SPECTRAL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "API_SPECTRAL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "API_SPECTRAL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/API_SPECTRAL_FILTER_REGEX_EXCLUDE",
      "title": "API_SPECTRAL: Excluding Regex",
      "type": "string"
    },
    "API_SPECTRAL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/API_SPECTRAL_FILTER_REGEX_INCLUDE",
      "title": "API_SPECTRAL: Including Regex",
      "type": "string"
    },
    "API_SPECTRAL_POST_COMMANDS": {
      "$id": "#/properties/API_SPECTRAL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "API_SPECTRAL: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "API_SPECTRAL_PRE_COMMANDS": {
      "$id": "#/properties/API_SPECTRAL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "API_SPECTRAL: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "API_SPECTRAL_RULES_PATH": {
      "$id": "#/properties/API_SPECTRAL_RULES_PATH",
      "description": "API_SPECTRAL: Path where to find linter configuration file",
      "title": "API_SPECTRAL: Custom config file path",
      "type": "string"
    },
    "API_SPECTRAL_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/API_SPECTRAL_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling API_SPECTRAL and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "API_SPECTRAL: Unsecured env variables",
      "type": "array"
    },
    "APPLY_FIXES": {
      "$id": "#/properties/APPLY_FIXES",
      "default": "none",
      "description": "'all' to apply formatting and auto-fixes of all linters, or a list of linter keys",
      "examples": [
        "all",
        "none",
        [
          "JAVASCRIPT_ES",
          "MARKDOWN_MARKDOWNLINT"
        ]
      ],
      "title": "Apply linters formatting and auto-fixes",
      "type": [
        "array",
        "string"
      ]
    },
    "ARM_ARM_TTK_ARGUMENTS": {
      "$id": "#/properties/ARM_ARM_TTK_ARGUMENTS",
      "description": "ARM_ARM_TTK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ARM_ARM_TTK_CLI_EXECUTABLE": {
      "$id": "#/properties/ARM_ARM_TTK_CLI_EXECUTABLE",
      "default": [
        [
          "arm-ttk"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: CLI Executable",
      "type": "array"
    },
    "ARM_ARM_TTK_CLI_LINT_MODE": {
      "$id": "#/properties/ARM_ARM_TTK_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "ARM_ARM_TTK: Override default cli lint mode",
      "type": "string"
    },
    "ARM_ARM_TTK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/ARM_ARM_TTK_COMMAND_REMOVE_ARGUMENTS",
      "description": "ARM_ARM_TTK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ARM_ARM_TTK_CONFIG_FILE": {
      "$id": "#/properties/ARM_ARM_TTK_CONFIG_FILE",
      "default": ".arm-ttk.psd1",
      "description": "ARM_ARM_TTK: User custom config file name if different from default",
      "title": "ARM_ARM_TTK: Custom config file name",
      "type": "string"
    },
    "ARM_ARM_TTK_DISABLE_ERRORS": {
      "$id": "#/properties/ARM_ARM_TTK_DISABLE_ERRORS",
      "default": false,
      "title": "ARM_ARM_TTK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "ARM_ARM_TTK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/ARM_ARM_TTK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "ARM_ARM_TTK: Maximum number of errors allowed",
      "type": "number"
    },
    "ARM_ARM_TTK_FILE_EXTENSIONS": {
      "$id": "#/properties/ARM_ARM_TTK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ARM_ARM_TTK_FILE_NAME": {
      "$id": "#/properties/ARM_ARM_TTK_FILE_NAME",
      "default": ".arm-ttk.psd1",
      "description": "ARM_ARM_TTK: User custom config file name if different from default",
      "title": "ARM_ARM_TTK: Custom config file name",
      "type": "string"
    },
    "ARM_ARM_TTK_FILE_NAMES_REGEX": {
      "$id": "#/properties/ARM_ARM_TTK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ARM_ARM_TTK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ARM_ARM_TTK_FILTER_REGEX_EXCLUDE",
      "title": "ARM_ARM_TTK: Excluding Regex",
      "type": "string"
    },
    "ARM_ARM_TTK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ARM_ARM_TTK_FILTER_REGEX_INCLUDE",
      "title": "ARM_ARM_TTK: Including Regex",
      "type": "string"
    },
    "ARM_ARM_TTK_POST_COMMANDS": {
      "$id": "#/properties/ARM_ARM_TTK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ARM_ARM_TTK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "ARM_ARM_TTK_PRE_COMMANDS": {
      "$id": "#/properties/ARM_ARM_TTK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ARM_ARM_TTK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "ARM_ARM_TTK_RULES_PATH": {
      "$id": "#/properties/ARM_ARM_TTK_RULES_PATH",
      "description": "ARM_ARM_TTK: Path where to find linter configuration file",
      "title": "ARM_ARM_TTK: Custom config file path",
      "type": "string"
    },
    "ARM_ARM_TTK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/ARM_ARM_TTK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling ARM_ARM_TTK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Unsecured env variables",
      "type": "array"
    },
    "ARM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ARM_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ARM descriptor",
      "type": "string"
    },
    "ARM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ARM_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ARM descriptor",
      "type": "string"
    },
    "ARM_POST_COMMANDS": {
      "$id": "#/properties/ARM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for ARM descriptor",
      "type": "array"
    },
    "ARM_PRE_COMMANDS": {
      "$id": "#/properties/ARM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for ARM descriptor",
      "type": "array"
    },
    "AZURE_COMMENT_REPORTER": {
      "$id": "#/properties/AZURE_COMMENT_REPORTER",
      "default": true,
      "description": "Posts MegaLinter results summary in the comments of the related pull request (if existing)",
      "title": "Activate Azure PR Comments reporter",
      "type": "boolean"
    },
    "AZURE_COMMENT_REPORTER_LINKS_TYPE": {
      "$id": "#/properties/AZURE_COMMENT_REPORTER_LINKS_TYPE",
      "default": "artifacts",
      "enum": [
        "artifacts",
        "build"
      ],
      "title": "Type of hyperlinks in Azure PR Comments (artifacts or build)",
      "type": "string"
    },
    "BASH_EXEC_ARGUMENTS": {
      "$id": "#/properties/BASH_EXEC_ARGUMENTS",
      "description": "BASH_EXEC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_EXEC_CLI_EXECUTABLE": {
      "$id": "#/properties/BASH_EXEC_CLI_EXECUTABLE",
      "default": [
        [
          "bash-exec"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: CLI Executable",
      "type": "array"
    },
    "BASH_EXEC_CLI_LINT_MODE": {
      "$id": "#/properties/BASH_EXEC_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "BASH_EXEC: Override default cli lint mode",
      "type": "string"
    },
    "BASH_EXEC_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/BASH_EXEC_COMMAND_REMOVE_ARGUMENTS",
      "description": "BASH_EXEC: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_EXEC_DISABLE_ERRORS": {
      "$id": "#/properties/BASH_EXEC_DISABLE_ERRORS",
      "default": false,
      "title": "BASH_EXEC: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "BASH_EXEC_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/BASH_EXEC_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "BASH_EXEC: Maximum number of errors allowed",
      "type": "number"
    },
    "BASH_EXEC_FILE_EXTENSIONS": {
      "$id": "#/properties/BASH_EXEC_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BASH_EXEC_FILE_NAMES_REGEX": {
      "$id": "#/properties/BASH_EXEC_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BASH_EXEC_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_EXEC_FILTER_REGEX_EXCLUDE",
      "title": "BASH_EXEC: Excluding Regex",
      "type": "string"
    },
    "BASH_EXEC_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_EXEC_FILTER_REGEX_INCLUDE",
      "title": "BASH_EXEC: Including Regex",
      "type": "string"
    },
    "BASH_EXEC_POST_COMMANDS": {
      "$id": "#/properties/BASH_EXEC_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BASH_EXEC: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "BASH_EXEC_PRE_COMMANDS": {
      "$id": "#/properties/BASH_EXEC_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BASH_EXEC: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "BASH_EXEC_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/BASH_EXEC_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling BASH_EXEC and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Unsecured env variables",
      "type": "array"
    },
    "BASH_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for BASH descriptor",
      "type": "string"
    },
    "BASH_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for BASH descriptor",
      "type": "string"
    },
    "BASH_POST_COMMANDS": {
      "$id": "#/properties/BASH_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for BASH descriptor",
      "type": "array"
    },
    "BASH_PRE_COMMANDS": {
      "$id": "#/properties/BASH_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for BASH descriptor",
      "type": "array"
    },
    "BASH_SHELLCHECK_ARGUMENTS": {
      "$id": "#/properties/BASH_SHELLCHECK_ARGUMENTS",
      "description": "BASH_SHELLCHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_SHELLCHECK_CLI_EXECUTABLE": {
      "$id": "#/properties/BASH_SHELLCHECK_CLI_EXECUTABLE",
      "default": [
        [
          "shellcheck"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: CLI Executable",
      "type": "array"
    },
    "BASH_SHELLCHECK_CLI_LINT_MODE": {
      "$id": "#/properties/BASH_SHELLCHECK_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "BASH_SHELLCHECK: Override default cli lint mode",
      "type": "string"
    },
    "BASH_SHELLCHECK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/BASH_SHELLCHECK_COMMAND_REMOVE_ARGUMENTS",
      "description": "BASH_SHELLCHECK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_SHELLCHECK_DISABLE_ERRORS": {
      "$id": "#/properties/BASH_SHELLCHECK_DISABLE_ERRORS",
      "default": false,
      "title": "BASH_SHELLCHECK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "BASH_SHELLCHECK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/BASH_SHELLCHECK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "BASH_SHELLCHECK: Maximum number of errors allowed",
      "type": "number"
    },
    "BASH_SHELLCHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/BASH_SHELLCHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BASH_SHELLCHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/BASH_SHELLCHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE",
      "title": "BASH_SHELLCHECK: Excluding Regex",
      "type": "string"
    },
    "BASH_SHELLCHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_SHELLCHECK_FILTER_REGEX_INCLUDE",
      "title": "BASH_SHELLCHECK: Including Regex",
      "type": "string"
    },
    "BASH_SHELLCHECK_POST_COMMANDS": {
      "$id": "#/properties/BASH_SHELLCHECK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BASH_SHELLCHECK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "BASH_SHELLCHECK_PRE_COMMANDS": {
      "$id": "#/properties/BASH_SHELLCHECK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BASH_SHELLCHECK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "BASH_SHELLCHECK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/BASH_SHELLCHECK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling BASH_SHELLCHECK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Unsecured env variables",
      "type": "array"
    },
    "BASH_SHFMT_ARGUMENTS": {
      "$id": "#/properties/BASH_SHFMT_ARGUMENTS",
      "description": "BASH_SHFMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_SHFMT_CLI_EXECUTABLE": {
      "$id": "#/properties/BASH_SHFMT_CLI_EXECUTABLE",
      "default": [
        [
          "shfmt"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: CLI Executable",
      "type": "array"
    },
    "BASH_SHFMT_CLI_LINT_MODE": {
      "$id": "#/properties/BASH_SHFMT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "BASH_SHFMT: Override default cli lint mode",
      "type": "string"
    },
    "BASH_SHFMT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/BASH_SHFMT_COMMAND_REMOVE_ARGUMENTS",
      "description": "BASH_SHFMT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_SHFMT_DISABLE_ERRORS": {
      "$id": "#/properties/BASH_SHFMT_DISABLE_ERRORS",
      "default": false,
      "title": "BASH_SHFMT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "BASH_SHFMT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/BASH_SHFMT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "BASH_SHFMT: Maximum number of errors allowed",
      "type": "number"
    },
    "BASH_SHFMT_FILE_EXTENSIONS": {
      "$id": "#/properties/BASH_SHFMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BASH_SHFMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/BASH_SHFMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BASH_SHFMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_SHFMT_FILTER_REGEX_EXCLUDE",
      "title": "BASH_SHFMT: Excluding Regex",
      "type": "string"
    },
    "BASH_SHFMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_SHFMT_FILTER_REGEX_INCLUDE",
      "title": "BASH_SHFMT: Including Regex",
      "type": "string"
    },
    "BASH_SHFMT_POST_COMMANDS": {
      "$id": "#/properties/BASH_SHFMT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BASH_SHFMT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "BASH_SHFMT_PRE_COMMANDS": {
      "$id": "#/properties/BASH_SHFMT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BASH_SHFMT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "BASH_SHFMT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/BASH_SHFMT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling BASH_SHFMT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Unsecured env variables",
      "type": "array"
    },
    "BICEP_BICEP_LINTER_ARGUMENTS": {
      "$id": "#/properties/BICEP_BICEP_LINTER_ARGUMENTS",
      "description": "BICEP_BICEP_LINTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BICEP_BICEP_LINTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BICEP_BICEP_LINTER_CLI_EXECUTABLE": {
      "$id": "#/properties/BICEP_BICEP_LINTER_CLI_EXECUTABLE",
      "default": [
        [
          "bicep"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "BICEP_BICEP_LINTER: CLI Executable",
      "type": "array"
    },
    "BICEP_BICEP_LINTER_CLI_LINT_MODE": {
      "$id": "#/properties/BICEP_BICEP_LINTER_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "BICEP_BICEP_LINTER: Override default cli lint mode",
      "type": "string"
    },
    "BICEP_BICEP_LINTER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/BICEP_BICEP_LINTER_COMMAND_REMOVE_ARGUMENTS",
      "description": "BICEP_BICEP_LINTER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BICEP_BICEP_LINTER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BICEP_BICEP_LINTER_DISABLE_ERRORS": {
      "$id": "#/properties/BICEP_BICEP_LINTER_DISABLE_ERRORS",
      "default": false,
      "title": "BICEP_BICEP_LINTER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "BICEP_BICEP_LINTER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/BICEP_BICEP_LINTER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "BICEP_BICEP_LINTER: Maximum number of errors allowed",
      "type": "number"
    },
    "BICEP_BICEP_LINTER_FILE_EXTENSIONS": {
      "$id": "#/properties/BICEP_BICEP_LINTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BICEP_BICEP_LINTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BICEP_BICEP_LINTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/BICEP_BICEP_LINTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BICEP_BICEP_LINTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BICEP_BICEP_LINTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BICEP_BICEP_LINTER_FILTER_REGEX_EXCLUDE",
      "title": "BICEP_BICEP_LINTER: Excluding Regex",
      "type": "string"
    },
    "BICEP_BICEP_LINTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BICEP_BICEP_LINTER_FILTER_REGEX_INCLUDE",
      "title": "BICEP_BICEP_LINTER: Including Regex",
      "type": "string"
    },
    "BICEP_BICEP_LINTER_POST_COMMANDS": {
      "$id": "#/properties/BICEP_BICEP_LINTER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BICEP_BICEP_LINTER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "BICEP_BICEP_LINTER_PRE_COMMANDS": {
      "$id": "#/properties/BICEP_BICEP_LINTER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "BICEP_BICEP_LINTER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "BICEP_BICEP_LINTER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/BICEP_BICEP_LINTER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling BICEP_BICEP_LINTER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "BICEP_BICEP_LINTER: Unsecured env variables",
      "type": "array"
    },
    "BICEP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BICEP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for BICEP descriptor",
      "type": "string"
    },
    "BICEP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BICEP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for BICEP descriptor",
      "type": "string"
    },
    "BICEP_POST_COMMANDS": {
      "$id": "#/properties/BICEP_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for BICEP descriptor",
      "type": "array"
    },
    "BICEP_PRE_COMMANDS": {
      "$id": "#/properties/BICEP_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for BICEP descriptor",
      "type": "array"
    },
    "BITBUCKET_COMMENT_REPORTER": {
      "$id": "#/properties/BITBUCKET_COMMENT_REPORTER",
      "default": true,
      "description": "Posts Mega-Linter results summary in the comments of the related pull request (if existing)",
      "title": "Activate Bitbucket PR Comments reporter",
      "type": "boolean"
    },
    "BITBUCKET_COMMENT_REPORTER_OVERWRITE_COMMENT": {
      "$id": "#/properties/BITBUCKET_COMMENT_REPORTER_OVERWRITE_COMMENT",
      "default": true,
      "description": "Set to false to disable the overwrite of existing MegaLinter Pull Request comment in case of new run",
      "title": "Overwrite Bitbucket Pull Request Comment",
      "type": "boolean"
    },
    "CLEAR_REPORT_FOLDER": {
      "$id": "#/properties/CLEAR_REPORT_FOLDER",
      "default": false,
      "description": "Flag to clear files from report folder (usually megalinter-reports) before starting the linting process",
      "title": "Clear Report Folder",
      "type": "boolean"
    },
    "CLOJURE_CLJSTYLE_ARGUMENTS": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_ARGUMENTS",
      "description": "CLOJURE_CLJSTYLE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJSTYLE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOJURE_CLJSTYLE_CLI_EXECUTABLE": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_CLI_EXECUTABLE",
      "default": [
        [
          "cljstyle"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJSTYLE: CLI Executable",
      "type": "array"
    },
    "CLOJURE_CLJSTYLE_CLI_LINT_MODE": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "CLOJURE_CLJSTYLE: Override default cli lint mode",
      "type": "string"
    },
    "CLOJURE_CLJSTYLE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_COMMAND_REMOVE_ARGUMENTS",
      "description": "CLOJURE_CLJSTYLE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJSTYLE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOJURE_CLJSTYLE_CONFIG_FILE": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_CONFIG_FILE",
      "default": ".cljstyle",
      "description": "CLOJURE_CLJSTYLE: User custom config file name if different from default",
      "title": "CLOJURE_CLJSTYLE: Custom config file name",
      "type": "string"
    },
    "CLOJURE_CLJSTYLE_DISABLE_ERRORS": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_DISABLE_ERRORS",
      "default": false,
      "title": "CLOJURE_CLJSTYLE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CLOJURE_CLJSTYLE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CLOJURE_CLJSTYLE: Maximum number of errors allowed",
      "type": "number"
    },
    "CLOJURE_CLJSTYLE_FILE_EXTENSIONS": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJSTYLE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CLOJURE_CLJSTYLE_FILE_NAMES_REGEX": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJSTYLE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CLOJURE_CLJSTYLE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_FILTER_REGEX_EXCLUDE",
      "title": "CLOJURE_CLJSTYLE: Excluding Regex",
      "type": "string"
    },
    "CLOJURE_CLJSTYLE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_FILTER_REGEX_INCLUDE",
      "title": "CLOJURE_CLJSTYLE: Including Regex",
      "type": "string"
    },
    "CLOJURE_CLJSTYLE_POST_COMMANDS": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CLOJURE_CLJSTYLE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CLOJURE_CLJSTYLE_PRE_COMMANDS": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CLOJURE_CLJSTYLE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CLOJURE_CLJSTYLE_RULES_PATH": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_RULES_PATH",
      "description": "CLOJURE_CLJSTYLE: Path where to find linter configuration file",
      "title": "CLOJURE_CLJSTYLE: Custom config file path",
      "type": "string"
    },
    "CLOJURE_CLJSTYLE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CLOJURE_CLJSTYLE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CLOJURE_CLJSTYLE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJSTYLE: Unsecured env variables",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_ARGUMENTS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_ARGUMENTS",
      "description": "CLOJURE_CLJ_KONDO: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOJURE_CLJ_KONDO_CLI_EXECUTABLE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_CLI_EXECUTABLE",
      "default": [
        [
          "clj-kondo"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: CLI Executable",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_CLI_LINT_MODE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "CLOJURE_CLJ_KONDO: Override default cli lint mode",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_COMMAND_REMOVE_ARGUMENTS",
      "description": "CLOJURE_CLJ_KONDO: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOJURE_CLJ_KONDO_CONFIG_FILE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_CONFIG_FILE",
      "default": ".clj-kondo/config.edn",
      "description": "CLOJURE_CLJ_KONDO: User custom config file name if different from default",
      "title": "CLOJURE_CLJ_KONDO: Custom config file name",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_DISABLE_ERRORS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_DISABLE_ERRORS",
      "default": false,
      "title": "CLOJURE_CLJ_KONDO: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CLOJURE_CLJ_KONDO_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CLOJURE_CLJ_KONDO: Maximum number of errors allowed",
      "type": "number"
    },
    "CLOJURE_CLJ_KONDO_FILE_EXTENSIONS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_FILE_NAME": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILE_NAME",
      "default": ".clj-kondo/config.edn",
      "description": "CLOJURE_CLJ_KONDO: User custom config file name if different from default",
      "title": "CLOJURE_CLJ_KONDO: Custom config file name",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE",
      "title": "CLOJURE_CLJ_KONDO: Excluding Regex",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE",
      "title": "CLOJURE_CLJ_KONDO: Including Regex",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_POST_COMMANDS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CLOJURE_CLJ_KONDO: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_PRE_COMMANDS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CLOJURE_CLJ_KONDO: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_RULES_PATH": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_RULES_PATH",
      "description": "CLOJURE_CLJ_KONDO: Path where to find linter configuration file",
      "title": "CLOJURE_CLJ_KONDO: Custom config file path",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CLOJURE_CLJ_KONDO and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Unsecured env variables",
      "type": "array"
    },
    "CLOJURE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOJURE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CLOJURE descriptor",
      "type": "string"
    },
    "CLOJURE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOJURE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CLOJURE descriptor",
      "type": "string"
    },
    "CLOJURE_POST_COMMANDS": {
      "$id": "#/properties/CLOJURE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for CLOJURE descriptor",
      "type": "array"
    },
    "CLOJURE_PRE_COMMANDS": {
      "$id": "#/properties/CLOJURE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for CLOJURE descriptor",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_ARGUMENTS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_ARGUMENTS",
      "description": "CLOUDFORMATION_CFN_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOUDFORMATION_CFN_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "cfn-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: CLI Executable",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "CLOUDFORMATION_CFN_LINT: Override default cli lint mode",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "CLOUDFORMATION_CFN_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOUDFORMATION_CFN_LINT_CONFIG_FILE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_CONFIG_FILE",
      "default": ".cfnlintrc.yml",
      "description": "CLOUDFORMATION_CFN_LINT: User custom config file name if different from default",
      "title": "CLOUDFORMATION_CFN_LINT: Custom config file name",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "CLOUDFORMATION_CFN_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CLOUDFORMATION_CFN_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_FILE_NAME": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILE_NAME",
      "default": ".cfnlintrc.yml",
      "description": "CLOUDFORMATION_CFN_LINT: User custom config file name if different from default",
      "title": "CLOUDFORMATION_CFN_LINT: Custom config file name",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE",
      "title": "CLOUDFORMATION_CFN_LINT: Excluding Regex",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE",
      "title": "CLOUDFORMATION_CFN_LINT: Including Regex",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_POST_COMMANDS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_PRE_COMMANDS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_RULES_PATH": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_RULES_PATH",
      "description": "CLOUDFORMATION_CFN_LINT: Path where to find linter configuration file",
      "title": "CLOUDFORMATION_CFN_LINT: Custom config file path",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CLOUDFORMATION_CFN_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Unsecured env variables",
      "type": "array"
    },
    "CLOUDFORMATION_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CLOUDFORMATION descriptor",
      "type": "string"
    },
    "CLOUDFORMATION_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CLOUDFORMATION descriptor",
      "type": "string"
    },
    "CLOUDFORMATION_POST_COMMANDS": {
      "$id": "#/properties/CLOUDFORMATION_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for CLOUDFORMATION descriptor",
      "type": "array"
    },
    "CLOUDFORMATION_PRE_COMMANDS": {
      "$id": "#/properties/CLOUDFORMATION_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for CLOUDFORMATION descriptor",
      "type": "array"
    },
    "COFFEE_COFFEELINT_ARGUMENTS": {
      "$id": "#/properties/COFFEE_COFFEELINT_ARGUMENTS",
      "description": "COFFEE_COFFEELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "COFFEE_COFFEELINT_CLI_EXECUTABLE": {
      "$id": "#/properties/COFFEE_COFFEELINT_CLI_EXECUTABLE",
      "default": [
        [
          "coffeelint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: CLI Executable",
      "type": "array"
    },
    "COFFEE_COFFEELINT_CLI_LINT_MODE": {
      "$id": "#/properties/COFFEE_COFFEELINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "COFFEE_COFFEELINT: Override default cli lint mode",
      "type": "string"
    },
    "COFFEE_COFFEELINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/COFFEE_COFFEELINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "COFFEE_COFFEELINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "COFFEE_COFFEELINT_CONFIG_FILE": {
      "$id": "#/properties/COFFEE_COFFEELINT_CONFIG_FILE",
      "default": ".coffee-lint.json",
      "description": "COFFEE_COFFEELINT: User custom config file name if different from default",
      "title": "COFFEE_COFFEELINT: Custom config file name",
      "type": "string"
    },
    "COFFEE_COFFEELINT_DISABLE_ERRORS": {
      "$id": "#/properties/COFFEE_COFFEELINT_DISABLE_ERRORS",
      "default": false,
      "title": "COFFEE_COFFEELINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "COFFEE_COFFEELINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/COFFEE_COFFEELINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "COFFEE_COFFEELINT: Maximum number of errors allowed",
      "type": "number"
    },
    "COFFEE_COFFEELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "COFFEE_COFFEELINT_FILE_NAME": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILE_NAME",
      "default": ".coffee-lint.json",
      "description": "COFFEE_COFFEELINT: User custom config file name if different from default",
      "title": "COFFEE_COFFEELINT: Custom config file name",
      "type": "string"
    },
    "COFFEE_COFFEELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE",
      "title": "COFFEE_COFFEELINT: Excluding Regex",
      "type": "string"
    },
    "COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE",
      "title": "COFFEE_COFFEELINT: Including Regex",
      "type": "string"
    },
    "COFFEE_COFFEELINT_POST_COMMANDS": {
      "$id": "#/properties/COFFEE_COFFEELINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "COFFEE_COFFEELINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "COFFEE_COFFEELINT_PRE_COMMANDS": {
      "$id": "#/properties/COFFEE_COFFEELINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "COFFEE_COFFEELINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "COFFEE_COFFEELINT_RULES_PATH": {
      "$id": "#/properties/COFFEE_COFFEELINT_RULES_PATH",
      "description": "COFFEE_COFFEELINT: Path where to find linter configuration file",
      "title": "COFFEE_COFFEELINT: Custom config file path",
      "type": "string"
    },
    "COFFEE_COFFEELINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/COFFEE_COFFEELINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling COFFEE_COFFEELINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Unsecured env variables",
      "type": "array"
    },
    "COFFEE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COFFEE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for COFFEE descriptor",
      "type": "string"
    },
    "COFFEE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COFFEE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for COFFEE descriptor",
      "type": "string"
    },
    "COFFEE_POST_COMMANDS": {
      "$id": "#/properties/COFFEE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for COFFEE descriptor",
      "type": "array"
    },
    "COFFEE_PRE_COMMANDS": {
      "$id": "#/properties/COFFEE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for COFFEE descriptor",
      "type": "array"
    },
    "CONFIG_PROPERTIES_TO_APPEND": {
      "$id": "#/properties/CONFIG_PROPERTIES_TO_APPEND",
      "description": "List of configuration properties to append their values (instead of replacing them) in case of using EXTENDS.",
      "examples": [
        [
          "ENABLE_LINTERS"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "List of configuration properties to append their values",
      "type": "array"
    },
    "CONFIG_REPORTER": {
      "$id": "#/properties/CONFIG_REPORTER",
      "default": true,
      "description": "Generates a folder IDE-config located in report folder, containing default MegaLinter configuration files used during the linting, and updated VSCode extensions.js config file",
      "title": "Activate local configuration reporter",
      "type": "boolean"
    },
    "CONFIG_REPORTER_SUB_FOLDER": {
      "$id": "#/properties/CONFIG_REPORTER_SUB_FOLDER",
      "default": "IDE-config",
      "title": "Output folder for IDE configuration files within report folder",
      "type": "string"
    },
    "CONSOLE_REPORTER": {
      "$id": "#/properties/CONSOLE_REPORTER",
      "default": true,
      "description": "",
      "title": "Activate console reporter",
      "type": "boolean"
    },
    "CONSOLE_REPORTER_SECTIONS": {
      "$id": "#/properties/CONSOLE_REPORTER_SECTIONS",
      "default": true,
      "description": "Define to false if you do not want logs to be organized in sections",
      "title": "Activate console logs sections",
      "type": "boolean"
    },
    "COPYPASTE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COPYPASTE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for COPYPASTE descriptor",
      "type": "string"
    },
    "COPYPASTE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COPYPASTE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for COPYPASTE descriptor",
      "type": "string"
    },
    "COPYPASTE_JSCPD_ARGUMENTS": {
      "$id": "#/properties/COPYPASTE_JSCPD_ARGUMENTS",
      "description": "COPYPASTE_JSCPD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "COPYPASTE_JSCPD_CLI_EXECUTABLE": {
      "$id": "#/properties/COPYPASTE_JSCPD_CLI_EXECUTABLE",
      "default": [
        [
          "jscpd"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: CLI Executable",
      "type": "array"
    },
    "COPYPASTE_JSCPD_CLI_LINT_MODE": {
      "$id": "#/properties/COPYPASTE_JSCPD_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "COPYPASTE_JSCPD: Override default cli lint mode",
      "type": "string"
    },
    "COPYPASTE_JSCPD_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/COPYPASTE_JSCPD_COMMAND_REMOVE_ARGUMENTS",
      "description": "COPYPASTE_JSCPD: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "COPYPASTE_JSCPD_CONFIG_FILE": {
      "$id": "#/properties/COPYPASTE_JSCPD_CONFIG_FILE",
      "default": ".jscpd.json",
      "description": "COPYPASTE_JSCPD: User custom config file name if different from default",
      "title": "COPYPASTE_JSCPD: Custom config file name",
      "type": "string"
    },
    "COPYPASTE_JSCPD_DISABLE_ERRORS": {
      "$id": "#/properties/COPYPASTE_JSCPD_DISABLE_ERRORS",
      "default": false,
      "title": "COPYPASTE_JSCPD: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "COPYPASTE_JSCPD_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/COPYPASTE_JSCPD_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "COPYPASTE_JSCPD: Maximum number of errors allowed",
      "type": "number"
    },
    "COPYPASTE_JSCPD_FILE_NAME": {
      "$id": "#/properties/COPYPASTE_JSCPD_FILE_NAME",
      "default": ".jscpd.json",
      "description": "COPYPASTE_JSCPD: User custom config file name if different from default",
      "title": "COPYPASTE_JSCPD: Custom config file name",
      "type": "string"
    },
    "COPYPASTE_JSCPD_POST_COMMANDS": {
      "$id": "#/properties/COPYPASTE_JSCPD_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "COPYPASTE_JSCPD: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "COPYPASTE_JSCPD_PRE_COMMANDS": {
      "$id": "#/properties/COPYPASTE_JSCPD_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "COPYPASTE_JSCPD: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "COPYPASTE_JSCPD_RULES_PATH": {
      "$id": "#/properties/COPYPASTE_JSCPD_RULES_PATH",
      "description": "COPYPASTE_JSCPD: Path where to find linter configuration file",
      "title": "COPYPASTE_JSCPD: Custom config file path",
      "type": "string"
    },
    "COPYPASTE_JSCPD_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/COPYPASTE_JSCPD_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling COPYPASTE_JSCPD and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: Unsecured env variables",
      "type": "array"
    },
    "COPYPASTE_POST_COMMANDS": {
      "$id": "#/properties/COPYPASTE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for COPYPASTE descriptor",
      "type": "array"
    },
    "COPYPASTE_PRE_COMMANDS": {
      "$id": "#/properties/COPYPASTE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for COPYPASTE descriptor",
      "type": "array"
    },
    "CPP_CLANG_FORMAT_ARGUMENTS": {
      "$id": "#/properties/CPP_CLANG_FORMAT_ARGUMENTS",
      "description": "CPP_CLANG_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CLANG_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CPP_CLANG_FORMAT_CLI_EXECUTABLE": {
      "$id": "#/properties/CPP_CLANG_FORMAT_CLI_EXECUTABLE",
      "default": [
        [
          "clang-format"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CLANG_FORMAT: CLI Executable",
      "type": "array"
    },
    "CPP_CLANG_FORMAT_CLI_LINT_MODE": {
      "$id": "#/properties/CPP_CLANG_FORMAT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "CPP_CLANG_FORMAT: Override default cli lint mode",
      "type": "string"
    },
    "CPP_CLANG_FORMAT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CPP_CLANG_FORMAT_COMMAND_REMOVE_ARGUMENTS",
      "description": "CPP_CLANG_FORMAT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CLANG_FORMAT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CPP_CLANG_FORMAT_CONFIG_FILE": {
      "$id": "#/properties/CPP_CLANG_FORMAT_CONFIG_FILE",
      "default": ".clang-format",
      "description": "CPP_CLANG_FORMAT: User custom config file name if different from default",
      "title": "CPP_CLANG_FORMAT: Custom config file name",
      "type": "string"
    },
    "CPP_CLANG_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/CPP_CLANG_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "CPP_CLANG_FORMAT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CPP_CLANG_FORMAT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CPP_CLANG_FORMAT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CPP_CLANG_FORMAT: Maximum number of errors allowed",
      "type": "number"
    },
    "CPP_CLANG_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/CPP_CLANG_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CLANG_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CPP_CLANG_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CPP_CLANG_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CLANG_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CPP_CLANG_FORMAT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CPP_CLANG_FORMAT_FILTER_REGEX_EXCLUDE",
      "title": "CPP_CLANG_FORMAT: Excluding Regex",
      "type": "string"
    },
    "CPP_CLANG_FORMAT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CPP_CLANG_FORMAT_FILTER_REGEX_INCLUDE",
      "title": "CPP_CLANG_FORMAT: Including Regex",
      "type": "string"
    },
    "CPP_CLANG_FORMAT_POST_COMMANDS": {
      "$id": "#/properties/CPP_CLANG_FORMAT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CPP_CLANG_FORMAT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CPP_CLANG_FORMAT_PRE_COMMANDS": {
      "$id": "#/properties/CPP_CLANG_FORMAT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CPP_CLANG_FORMAT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CPP_CLANG_FORMAT_RULES_PATH": {
      "$id": "#/properties/CPP_CLANG_FORMAT_RULES_PATH",
      "description": "CPP_CLANG_FORMAT: Path where to find linter configuration file",
      "title": "CPP_CLANG_FORMAT: Custom config file path",
      "type": "string"
    },
    "CPP_CLANG_FORMAT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CPP_CLANG_FORMAT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CPP_CLANG_FORMAT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CPP_CLANG_FORMAT: Unsecured env variables",
      "type": "array"
    },
    "CPP_CPPLINT_ARGUMENTS": {
      "$id": "#/properties/CPP_CPPLINT_ARGUMENTS",
      "description": "CPP_CPPLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CPP_CPPLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/CPP_CPPLINT_CLI_EXECUTABLE",
      "default": [
        [
          "cpplint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: CLI Executable",
      "type": "array"
    },
    "CPP_CPPLINT_CLI_LINT_MODE": {
      "$id": "#/properties/CPP_CPPLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "CPP_CPPLINT: Override default cli lint mode",
      "type": "string"
    },
    "CPP_CPPLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CPP_CPPLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "CPP_CPPLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CPP_CPPLINT_DISABLE_ERRORS": {
      "$id": "#/properties/CPP_CPPLINT_DISABLE_ERRORS",
      "default": false,
      "title": "CPP_CPPLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CPP_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CPP_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CPP_CPPLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "CPP_CPPLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CPP_CPPLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CPP_CPPLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CPP_CPPLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CPP_CPPLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CPP_CPPLINT_FILTER_REGEX_EXCLUDE",
      "title": "CPP_CPPLINT: Excluding Regex",
      "type": "string"
    },
    "CPP_CPPLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CPP_CPPLINT_FILTER_REGEX_INCLUDE",
      "title": "CPP_CPPLINT: Including Regex",
      "type": "string"
    },
    "CPP_CPPLINT_POST_COMMANDS": {
      "$id": "#/properties/CPP_CPPLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CPP_CPPLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CPP_CPPLINT_PRE_COMMANDS": {
      "$id": "#/properties/CPP_CPPLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CPP_CPPLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CPP_CPPLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CPP_CPPLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CPP_CPPLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Unsecured env variables",
      "type": "array"
    },
    "CPP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CPP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CPP descriptor",
      "type": "string"
    },
    "CPP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CPP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CPP descriptor",
      "type": "string"
    },
    "CPP_POST_COMMANDS": {
      "$id": "#/properties/CPP_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for CPP descriptor",
      "type": "array"
    },
    "CPP_PRE_COMMANDS": {
      "$id": "#/properties/CPP_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for CPP descriptor",
      "type": "array"
    },
    "CREDENTIALS_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CREDENTIALS_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CREDENTIALS descriptor",
      "type": "string"
    },
    "CREDENTIALS_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CREDENTIALS_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CREDENTIALS descriptor",
      "type": "string"
    },
    "CREDENTIALS_SECRETLINT_ARGUMENTS": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_ARGUMENTS",
      "description": "CREDENTIALS_SECRETLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) CREDENTIALS_SECRETLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CREDENTIALS_SECRETLINT_CONFIG_FILE": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_CONFIG_FILE",
      "default": ".secretlintrc.json",
      "description": "CREDENTIALS_SECRETLINT: User custom config file name if different from default",
      "title": "(removed) CREDENTIALS_SECRETLINT: Custom config file name",
      "type": "string"
    },
    "CREDENTIALS_SECRETLINT_DISABLE_ERRORS": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) CREDENTIALS_SECRETLINT: Linter does not make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CREDENTIALS_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) CREDENTIALS_SECRETLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "CREDENTIALS_SECRETLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) CREDENTIALS_SECRETLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CREDENTIALS_SECRETLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) CREDENTIALS_SECRETLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CREDENTIALS_SECRETLINT_POST_COMMANDS": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) CREDENTIALS_SECRETLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CREDENTIALS_SECRETLINT_PRE_COMMANDS": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) CREDENTIALS_SECRETLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CREDENTIALS_SECRETLINT_RULES_PATH": {
      "$id": "#/properties/CREDENTIALS_SECRETLINT_RULES_PATH",
      "description": "CREDENTIALS_SECRETLINT: Path where to find linter configuration file",
      "title": "(removed) CREDENTIALS_SECRETLINT: Custom config file path",
      "type": "string"
    },
    "CSHARP_CSHARPIER_ARGUMENTS": {
      "$id": "#/properties/CSHARP_CSHARPIER_ARGUMENTS",
      "description": "CSHARP_CSHARPIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_CSHARPIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_CSHARPIER_CLI_EXECUTABLE": {
      "$id": "#/properties/CSHARP_CSHARPIER_CLI_EXECUTABLE",
      "default": [
        [
          "dotnet-csharpier"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_CSHARPIER: CLI Executable",
      "type": "array"
    },
    "CSHARP_CSHARPIER_CLI_LINT_MODE": {
      "$id": "#/properties/CSHARP_CSHARPIER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "CSHARP_CSHARPIER: Override default cli lint mode",
      "type": "string"
    },
    "CSHARP_CSHARPIER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CSHARP_CSHARPIER_COMMAND_REMOVE_ARGUMENTS",
      "description": "CSHARP_CSHARPIER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_CSHARPIER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_CSHARPIER_CONFIG_FILE": {
      "$id": "#/properties/CSHARP_CSHARPIER_CONFIG_FILE",
      "default": ".csharpierrc",
      "description": "CSHARP_CSHARPIER: User custom config file name if different from default",
      "title": "CSHARP_CSHARPIER: Custom config file name",
      "type": "string"
    },
    "CSHARP_CSHARPIER_DISABLE_ERRORS": {
      "$id": "#/properties/CSHARP_CSHARPIER_DISABLE_ERRORS",
      "default": false,
      "title": "CSHARP_CSHARPIER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CSHARP_CSHARPIER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CSHARP_CSHARPIER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CSHARP_CSHARPIER: Maximum number of errors allowed",
      "type": "number"
    },
    "CSHARP_CSHARPIER_FILE_EXTENSIONS": {
      "$id": "#/properties/CSHARP_CSHARPIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_CSHARPIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSHARP_CSHARPIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSHARP_CSHARPIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_CSHARPIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSHARP_CSHARPIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSHARP_CSHARPIER_FILTER_REGEX_EXCLUDE",
      "title": "CSHARP_CSHARPIER: Excluding Regex",
      "type": "string"
    },
    "CSHARP_CSHARPIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSHARP_CSHARPIER_FILTER_REGEX_INCLUDE",
      "title": "CSHARP_CSHARPIER: Including Regex",
      "type": "string"
    },
    "CSHARP_CSHARPIER_POST_COMMANDS": {
      "$id": "#/properties/CSHARP_CSHARPIER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSHARP_CSHARPIER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CSHARP_CSHARPIER_PRE_COMMANDS": {
      "$id": "#/properties/CSHARP_CSHARPIER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSHARP_CSHARPIER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CSHARP_CSHARPIER_RULES_PATH": {
      "$id": "#/properties/CSHARP_CSHARPIER_RULES_PATH",
      "description": "CSHARP_CSHARPIER: Path where to find linter configuration file",
      "title": "CSHARP_CSHARPIER: Custom config file path",
      "type": "string"
    },
    "CSHARP_CSHARPIER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CSHARP_CSHARPIER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CSHARP_CSHARPIER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CSHARP_CSHARPIER: Unsecured env variables",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_ARGUMENTS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_ARGUMENTS",
      "description": "CSHARP_DOTNET_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_DOTNET_FORMAT_CLI_EXECUTABLE": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_CLI_EXECUTABLE",
      "default": [
        [
          "dotnet"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: CLI Executable",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_CLI_LINT_MODE": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "CSHARP_DOTNET_FORMAT: Override default cli lint mode",
      "type": "string"
    },
    "CSHARP_DOTNET_FORMAT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_COMMAND_REMOVE_ARGUMENTS",
      "description": "CSHARP_DOTNET_FORMAT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_DOTNET_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "CSHARP_DOTNET_FORMAT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CSHARP_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CSHARP_DOTNET_FORMAT: Maximum number of errors allowed",
      "type": "number"
    },
    "CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_POST_COMMANDS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSHARP_DOTNET_FORMAT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_PRE_COMMANDS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSHARP_DOTNET_FORMAT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CSHARP_DOTNET_FORMAT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Unsecured env variables",
      "type": "array"
    },
    "CSHARP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSHARP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CSHARP descriptor",
      "type": "string"
    },
    "CSHARP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSHARP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CSHARP descriptor",
      "type": "string"
    },
    "CSHARP_POST_COMMANDS": {
      "$id": "#/properties/CSHARP_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for CSHARP descriptor",
      "type": "array"
    },
    "CSHARP_PRE_COMMANDS": {
      "$id": "#/properties/CSHARP_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for CSHARP descriptor",
      "type": "array"
    },
    "CSHARP_ROSLYNATOR_ARGUMENTS": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_ARGUMENTS",
      "description": "CSHARP_ROSLYNATOR: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_ROSLYNATOR: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_ROSLYNATOR_CLI_EXECUTABLE": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_CLI_EXECUTABLE",
      "default": [
        [
          "roslynator"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_ROSLYNATOR: CLI Executable",
      "type": "array"
    },
    "CSHARP_ROSLYNATOR_CLI_LINT_MODE": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "CSHARP_ROSLYNATOR: Override default cli lint mode",
      "type": "string"
    },
    "CSHARP_ROSLYNATOR_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_COMMAND_REMOVE_ARGUMENTS",
      "description": "CSHARP_ROSLYNATOR: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_ROSLYNATOR: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_ROSLYNATOR_DISABLE_ERRORS": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_DISABLE_ERRORS",
      "default": false,
      "title": "CSHARP_ROSLYNATOR: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CSHARP_ROSLYNATOR_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CSHARP_ROSLYNATOR: Maximum number of errors allowed",
      "type": "number"
    },
    "CSHARP_ROSLYNATOR_FILE_EXTENSIONS": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_ROSLYNATOR: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSHARP_ROSLYNATOR_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_ROSLYNATOR: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSHARP_ROSLYNATOR_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_FILTER_REGEX_EXCLUDE",
      "title": "CSHARP_ROSLYNATOR: Excluding Regex",
      "type": "string"
    },
    "CSHARP_ROSLYNATOR_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_FILTER_REGEX_INCLUDE",
      "title": "CSHARP_ROSLYNATOR: Including Regex",
      "type": "string"
    },
    "CSHARP_ROSLYNATOR_POST_COMMANDS": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSHARP_ROSLYNATOR: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CSHARP_ROSLYNATOR_PRE_COMMANDS": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSHARP_ROSLYNATOR: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CSHARP_ROSLYNATOR_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CSHARP_ROSLYNATOR_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CSHARP_ROSLYNATOR and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CSHARP_ROSLYNATOR: Unsecured env variables",
      "type": "array"
    },
    "CSS_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSS_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CSS descriptor",
      "type": "string"
    },
    "CSS_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSS_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CSS descriptor",
      "type": "string"
    },
    "CSS_POST_COMMANDS": {
      "$id": "#/properties/CSS_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for CSS descriptor",
      "type": "array"
    },
    "CSS_PRE_COMMANDS": {
      "$id": "#/properties/CSS_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for CSS descriptor",
      "type": "array"
    },
    "CSS_SCSS_LINT_ARGUMENTS": {
      "$id": "#/properties/CSS_SCSS_LINT_ARGUMENTS",
      "description": "CSS_SCSS_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSS_SCSS_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/CSS_SCSS_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "scss-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) CSS_SCSS_LINT: CLI Executable",
      "type": "array"
    },
    "CSS_SCSS_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/CSS_SCSS_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "(deprecated) CSS_SCSS_LINT: Override default cli lint mode",
      "type": "string"
    },
    "CSS_SCSS_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CSS_SCSS_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "CSS_SCSS_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSS_SCSS_LINT_CONFIG_FILE": {
      "$id": "#/properties/CSS_SCSS_LINT_CONFIG_FILE",
      "default": ".scss-lint.yml",
      "description": "CSS_SCSS_LINT: User custom config file name if different from default",
      "title": "(deprecated) CSS_SCSS_LINT: Custom config file name",
      "type": "string"
    },
    "CSS_SCSS_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/CSS_SCSS_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "(deprecated) CSS_SCSS_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CSS_SCSS_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CSS_SCSS_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(deprecated) CSS_SCSS_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "CSS_SCSS_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CSS_SCSS_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSS_SCSS_LINT_FILE_NAME": {
      "$id": "#/properties/CSS_SCSS_LINT_FILE_NAME",
      "default": ".scss-lint.yml",
      "description": "CSS_SCSS_LINT: User custom config file name if different from default",
      "title": "CSS_SCSS_LINT: Custom config file name",
      "type": "string"
    },
    "CSS_SCSS_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSS_SCSS_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE",
      "title": "(deprecated) CSS_SCSS_LINT: Excluding Regex",
      "type": "string"
    },
    "CSS_SCSS_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSS_SCSS_LINT_FILTER_REGEX_INCLUDE",
      "title": "(deprecated) CSS_SCSS_LINT: Including Regex",
      "type": "string"
    },
    "CSS_SCSS_LINT_POST_COMMANDS": {
      "$id": "#/properties/CSS_SCSS_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CSS_SCSS_LINT_PRE_COMMANDS": {
      "$id": "#/properties/CSS_SCSS_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CSS_SCSS_LINT_RULES_PATH": {
      "$id": "#/properties/CSS_SCSS_LINT_RULES_PATH",
      "description": "CSS_SCSS_LINT: Path where to find linter configuration file",
      "title": "(deprecated) CSS_SCSS_LINT: Custom config file path",
      "type": "string"
    },
    "CSS_SCSS_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CSS_SCSS_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CSS_SCSS_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "(deprecated) CSS_SCSS_LINT: Unsecured env variables",
      "type": "array"
    },
    "CSS_STYLELINT_ARGUMENTS": {
      "$id": "#/properties/CSS_STYLELINT_ARGUMENTS",
      "description": "CSS_STYLELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSS_STYLELINT_CLI_EXECUTABLE": {
      "$id": "#/properties/CSS_STYLELINT_CLI_EXECUTABLE",
      "default": [
        [
          "stylelint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: CLI Executable",
      "type": "array"
    },
    "CSS_STYLELINT_CLI_LINT_MODE": {
      "$id": "#/properties/CSS_STYLELINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "CSS_STYLELINT: Override default cli lint mode",
      "type": "string"
    },
    "CSS_STYLELINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/CSS_STYLELINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "CSS_STYLELINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSS_STYLELINT_CONFIG_FILE": {
      "$id": "#/properties/CSS_STYLELINT_CONFIG_FILE",
      "default": ".stylelintrc.json",
      "description": "CSS_STYLELINT: User custom config file name if different from default",
      "title": "CSS_STYLELINT: Custom config file name",
      "type": "string"
    },
    "CSS_STYLELINT_DISABLE_ERRORS": {
      "$id": "#/properties/CSS_STYLELINT_DISABLE_ERRORS",
      "default": false,
      "title": "CSS_STYLELINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "CSS_STYLELINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/CSS_STYLELINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "CSS_STYLELINT: Maximum number of errors allowed",
      "type": "number"
    },
    "CSS_STYLELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CSS_STYLELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSS_STYLELINT_FILE_NAME": {
      "$id": "#/properties/CSS_STYLELINT_FILE_NAME",
      "default": ".stylelintrc.json",
      "description": "CSS_STYLELINT: User custom config file name if different from default",
      "title": "CSS_STYLELINT: Custom config file name",
      "type": "string"
    },
    "CSS_STYLELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSS_STYLELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSS_STYLELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSS_STYLELINT_FILTER_REGEX_EXCLUDE",
      "title": "CSS_STYLELINT: Excluding Regex",
      "type": "string"
    },
    "CSS_STYLELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSS_STYLELINT_FILTER_REGEX_INCLUDE",
      "title": "CSS_STYLELINT: Including Regex",
      "type": "string"
    },
    "CSS_STYLELINT_POST_COMMANDS": {
      "$id": "#/properties/CSS_STYLELINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSS_STYLELINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "CSS_STYLELINT_PRE_COMMANDS": {
      "$id": "#/properties/CSS_STYLELINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "CSS_STYLELINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "CSS_STYLELINT_RULES_PATH": {
      "$id": "#/properties/CSS_STYLELINT_RULES_PATH",
      "description": "CSS_STYLELINT: Path where to find linter configuration file",
      "title": "CSS_STYLELINT: Custom config file path",
      "type": "string"
    },
    "CSS_STYLELINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/CSS_STYLELINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling CSS_STYLELINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Unsecured env variables",
      "type": "array"
    },
    "C_CLANG_FORMAT_ARGUMENTS": {
      "$id": "#/properties/C_CLANG_FORMAT_ARGUMENTS",
      "description": "C_CLANG_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CLANG_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "C_CLANG_FORMAT_CLI_EXECUTABLE": {
      "$id": "#/properties/C_CLANG_FORMAT_CLI_EXECUTABLE",
      "default": [
        [
          "clang-format"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CLANG_FORMAT: CLI Executable",
      "type": "array"
    },
    "C_CLANG_FORMAT_CLI_LINT_MODE": {
      "$id": "#/properties/C_CLANG_FORMAT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "C_CLANG_FORMAT: Override default cli lint mode",
      "type": "string"
    },
    "C_CLANG_FORMAT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/C_CLANG_FORMAT_COMMAND_REMOVE_ARGUMENTS",
      "description": "C_CLANG_FORMAT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CLANG_FORMAT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "C_CLANG_FORMAT_CONFIG_FILE": {
      "$id": "#/properties/C_CLANG_FORMAT_CONFIG_FILE",
      "default": ".clang-format",
      "description": "C_CLANG_FORMAT: User custom config file name if different from default",
      "title": "C_CLANG_FORMAT: Custom config file name",
      "type": "string"
    },
    "C_CLANG_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/C_CLANG_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "C_CLANG_FORMAT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "C_CLANG_FORMAT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/C_CLANG_FORMAT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "C_CLANG_FORMAT: Maximum number of errors allowed",
      "type": "number"
    },
    "C_CLANG_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/C_CLANG_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CLANG_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "C_CLANG_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/C_CLANG_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CLANG_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "C_CLANG_FORMAT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/C_CLANG_FORMAT_FILTER_REGEX_EXCLUDE",
      "title": "C_CLANG_FORMAT: Excluding Regex",
      "type": "string"
    },
    "C_CLANG_FORMAT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/C_CLANG_FORMAT_FILTER_REGEX_INCLUDE",
      "title": "C_CLANG_FORMAT: Including Regex",
      "type": "string"
    },
    "C_CLANG_FORMAT_POST_COMMANDS": {
      "$id": "#/properties/C_CLANG_FORMAT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "C_CLANG_FORMAT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "C_CLANG_FORMAT_PRE_COMMANDS": {
      "$id": "#/properties/C_CLANG_FORMAT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "C_CLANG_FORMAT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "C_CLANG_FORMAT_RULES_PATH": {
      "$id": "#/properties/C_CLANG_FORMAT_RULES_PATH",
      "description": "C_CLANG_FORMAT: Path where to find linter configuration file",
      "title": "C_CLANG_FORMAT: Custom config file path",
      "type": "string"
    },
    "C_CLANG_FORMAT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/C_CLANG_FORMAT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling C_CLANG_FORMAT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "C_CLANG_FORMAT: Unsecured env variables",
      "type": "array"
    },
    "C_CPPLINT_ARGUMENTS": {
      "$id": "#/properties/C_CPPLINT_ARGUMENTS",
      "description": "C_CPPLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "C_CPPLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/C_CPPLINT_CLI_EXECUTABLE",
      "default": [
        [
          "cpplint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: CLI Executable",
      "type": "array"
    },
    "C_CPPLINT_CLI_LINT_MODE": {
      "$id": "#/properties/C_CPPLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "C_CPPLINT: Override default cli lint mode",
      "type": "string"
    },
    "C_CPPLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/C_CPPLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "C_CPPLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "C_CPPLINT_DISABLE_ERRORS": {
      "$id": "#/properties/C_CPPLINT_DISABLE_ERRORS",
      "default": false,
      "title": "C_CPPLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "C_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/C_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "C_CPPLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "C_CPPLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/C_CPPLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "C_CPPLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/C_CPPLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "C_CPPLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/C_CPPLINT_FILTER_REGEX_EXCLUDE",
      "title": "C_CPPLINT: Excluding Regex",
      "type": "string"
    },
    "C_CPPLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/C_CPPLINT_FILTER_REGEX_INCLUDE",
      "title": "C_CPPLINT: Including Regex",
      "type": "string"
    },
    "C_CPPLINT_POST_COMMANDS": {
      "$id": "#/properties/C_CPPLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "C_CPPLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "C_CPPLINT_PRE_COMMANDS": {
      "$id": "#/properties/C_CPPLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "C_CPPLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "C_CPPLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/C_CPPLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling C_CPPLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Unsecured env variables",
      "type": "array"
    },
    "C_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/C_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for C descriptor",
      "type": "string"
    },
    "C_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/C_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for C descriptor",
      "type": "string"
    },
    "C_POST_COMMANDS": {
      "$id": "#/properties/C_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for C descriptor",
      "type": "array"
    },
    "C_PRE_COMMANDS": {
      "$id": "#/properties/C_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for C descriptor",
      "type": "array"
    },
    "DART_DARTANALYZER_ARGUMENTS": {
      "$id": "#/properties/DART_DARTANALYZER_ARGUMENTS",
      "description": "DART_DARTANALYZER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DART_DARTANALYZER_CLI_EXECUTABLE": {
      "$id": "#/properties/DART_DARTANALYZER_CLI_EXECUTABLE",
      "default": [
        [
          "dart"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: CLI Executable",
      "type": "array"
    },
    "DART_DARTANALYZER_CLI_LINT_MODE": {
      "$id": "#/properties/DART_DARTANALYZER_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "DART_DARTANALYZER: Override default cli lint mode",
      "type": "string"
    },
    "DART_DARTANALYZER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/DART_DARTANALYZER_COMMAND_REMOVE_ARGUMENTS",
      "description": "DART_DARTANALYZER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DART_DARTANALYZER_CONFIG_FILE": {
      "$id": "#/properties/DART_DARTANALYZER_CONFIG_FILE",
      "default": "analysis_options.yaml",
      "description": "DART_DARTANALYZER: User custom config file name if different from default",
      "title": "DART_DARTANALYZER: Custom config file name",
      "type": "string"
    },
    "DART_DARTANALYZER_DISABLE_ERRORS": {
      "$id": "#/properties/DART_DARTANALYZER_DISABLE_ERRORS",
      "default": false,
      "title": "DART_DARTANALYZER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "DART_DARTANALYZER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/DART_DARTANALYZER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "DART_DARTANALYZER: Maximum number of errors allowed",
      "type": "number"
    },
    "DART_DARTANALYZER_FILE_EXTENSIONS": {
      "$id": "#/properties/DART_DARTANALYZER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "DART_DARTANALYZER_FILE_NAME": {
      "$id": "#/properties/DART_DARTANALYZER_FILE_NAME",
      "default": "analysis_options.yml",
      "description": "DART_DARTANALYZER: User custom config file name if different from default",
      "title": "DART_DARTANALYZER: Custom config file name",
      "type": "string"
    },
    "DART_DARTANALYZER_FILE_NAMES_REGEX": {
      "$id": "#/properties/DART_DARTANALYZER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "DART_DARTANALYZER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DART_DARTANALYZER_FILTER_REGEX_EXCLUDE",
      "title": "DART_DARTANALYZER: Excluding Regex",
      "type": "string"
    },
    "DART_DARTANALYZER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DART_DARTANALYZER_FILTER_REGEX_INCLUDE",
      "title": "DART_DARTANALYZER: Including Regex",
      "type": "string"
    },
    "DART_DARTANALYZER_POST_COMMANDS": {
      "$id": "#/properties/DART_DARTANALYZER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "DART_DARTANALYZER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "DART_DARTANALYZER_PRE_COMMANDS": {
      "$id": "#/properties/DART_DARTANALYZER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "DART_DARTANALYZER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "DART_DARTANALYZER_RULES_PATH": {
      "$id": "#/properties/DART_DARTANALYZER_RULES_PATH",
      "description": "DART_DARTANALYZER: Path where to find linter configuration file",
      "title": "DART_DARTANALYZER: Custom config file path",
      "type": "string"
    },
    "DART_DARTANALYZER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/DART_DARTANALYZER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling DART_DARTANALYZER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Unsecured env variables",
      "type": "array"
    },
    "DART_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DART_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for DART descriptor",
      "type": "string"
    },
    "DART_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DART_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for DART descriptor",
      "type": "string"
    },
    "DART_POST_COMMANDS": {
      "$id": "#/properties/DART_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for DART descriptor",
      "type": "array"
    },
    "DART_PRE_COMMANDS": {
      "$id": "#/properties/DART_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for DART descriptor",
      "type": "array"
    },
    "DEFAULT_BRANCH": {
      "$id": "#/properties/DEFAULT_BRANCH",
      "default": "HEAD",
      "description": "Deprecated: The name of the repository's default branch.",
      "examples": [
        "master",
        "main"
      ],
      "title": "Default git branch",
      "type": "string"
    },
    "DEFAULT_WORKSPACE": {
      "$id": "#/properties/DEFAULT_WORKSPACE",
      "default": "/tmp/lint",
      "description": "The location containing files to lint if you are running as docker image",
      "title": "Default Workspace",
      "type": "string"
    },
    "DISABLE": {
      "$id": "#/properties/DISABLE",
      "description": "If DISABLE is set, the linters in the listed descriptors will be skipped",
      "examples": [
        [
          "BASH",
          "HTML"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_descriptor_keys"
      },
      "title": "Disabled descriptor keys",
      "type": "array"
    },
    "DISABLE_ERRORS": {
      "$id": "#/properties/DISABLE_ERRORS",
      "default": false,
      "description": "Flag to have the MegaLinter complete with exit code 0 even if errors were detected.",
      "title": "Disable errors",
      "type": "boolean"
    },
    "DISABLE_ERRORS_LINTERS": {
      "$id": "#/properties/DISABLE_ERRORS_LINTERS",
      "description": "If DISABLE_ERRORS_LINTERS is set, the listed linters will be run but errors will be not blocking",
      "examples": [
        [
          "BASH_BASH_SHFMT",
          "JAVASCRIPT_STANDARD"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_linter_keys"
      },
      "title": "Disabled errors linter keys",
      "type": "array"
    },
    "DISABLE_LINTERS": {
      "$id": "#/properties/DISABLE_LINTERS",
      "description": "If DISABLE_LINTERS is set, the listed linters will be skipped",
      "examples": [
        [
          "BASH_BASH_SHFMT",
          "JAVASCRIPT_STANDARD"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_linter_keys"
      },
      "title": "Disabled linter keys",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_ARGUMENTS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_ARGUMENTS",
      "description": "DOCKERFILE_DOCKERFILELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DOCKERFILE_DOCKERFILELINT_CLI_LINT_MODE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Override default cli lint mode",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_CONFIG_FILE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_CONFIG_FILE",
      "default": ".dockerfilelintrc",
      "description": "DOCKERFILE_DOCKERFILELINT: User custom config file name if different from default",
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Linter does not make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Maximum number of errors allowed",
      "type": "number"
    },
    "DOCKERFILE_DOCKERFILELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_FILE_NAME": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILE_NAME",
      "default": ".dockerfilelintrc",
      "description": "DOCKERFILE_DOCKERFILELINT: User custom config file name if different from default",
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_EXCLUDE",
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Excluding Regex",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_INCLUDE",
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Including Regex",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_POST_COMMANDS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_PRE_COMMANDS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_RULES_PATH": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_RULES_PATH",
      "description": "DOCKERFILE_DOCKERFILELINT: Path where to find linter configuration file",
      "title": "(removed) DOCKERFILE_DOCKERFILELINT: Custom config file path",
      "type": "string"
    },
    "DOCKERFILE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DOCKERFILE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for DOCKERFILE descriptor",
      "type": "string"
    },
    "DOCKERFILE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DOCKERFILE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for DOCKERFILE descriptor",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_ARGUMENTS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_ARGUMENTS",
      "description": "DOCKERFILE_HADOLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DOCKERFILE_HADOLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_CLI_EXECUTABLE",
      "default": [
        [
          "hadolint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: CLI Executable",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_CLI_LINT_MODE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "DOCKERFILE_HADOLINT: Override default cli lint mode",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "DOCKERFILE_HADOLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DOCKERFILE_HADOLINT_CONFIG_FILE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_CONFIG_FILE",
      "default": ".hadolint.yaml",
      "description": "DOCKERFILE_HADOLINT: User custom config file name if different from default",
      "title": "DOCKERFILE_HADOLINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_DISABLE_ERRORS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_DISABLE_ERRORS",
      "default": false,
      "title": "DOCKERFILE_HADOLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "DOCKERFILE_HADOLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "DOCKERFILE_HADOLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "DOCKERFILE_HADOLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_FILE_NAME": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILE_NAME",
      "default": ".hadolint.yml",
      "description": "DOCKERFILE_HADOLINT: User custom config file name if different from default",
      "title": "DOCKERFILE_HADOLINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE",
      "title": "DOCKERFILE_HADOLINT: Excluding Regex",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE",
      "title": "DOCKERFILE_HADOLINT: Including Regex",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_POST_COMMANDS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "DOCKERFILE_HADOLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_PRE_COMMANDS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "DOCKERFILE_HADOLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_RULES_PATH": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_RULES_PATH",
      "description": "DOCKERFILE_HADOLINT: Path where to find linter configuration file",
      "title": "DOCKERFILE_HADOLINT: Custom config file path",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling DOCKERFILE_HADOLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Unsecured env variables",
      "type": "array"
    },
    "DOCKERFILE_POST_COMMANDS": {
      "$id": "#/properties/DOCKERFILE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for DOCKERFILE descriptor",
      "type": "array"
    },
    "DOCKERFILE_PRE_COMMANDS": {
      "$id": "#/properties/DOCKERFILE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for DOCKERFILE descriptor",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_EXECUTABLE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_EXECUTABLE",
      "default": [
        [
          "editorconfig-checker"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: CLI Executable",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_LINT_MODE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Override default cli lint mode",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_COMMAND_REMOVE_ARGUMENTS",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE",
      "default": ".ecrc",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom config file name if different from default",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom config file name",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS",
      "default": false,
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Maximum number of errors allowed",
      "type": "number"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAME": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAME",
      "default": ".ecrc",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom config file name if different from default",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom config file name",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Excluding Regex",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Including Regex",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_POST_COMMANDS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_PRE_COMMANDS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: Path where to find linter configuration file",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom config file path",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling EDITORCONFIG_EDITORCONFIG_CHECKER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Unsecured env variables",
      "type": "array"
    },
    "EDITORCONFIG_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/EDITORCONFIG_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for EDITORCONFIG descriptor",
      "type": "string"
    },
    "EDITORCONFIG_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/EDITORCONFIG_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for EDITORCONFIG descriptor",
      "type": "string"
    },
    "EDITORCONFIG_POST_COMMANDS": {
      "$id": "#/properties/EDITORCONFIG_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for EDITORCONFIG descriptor",
      "type": "array"
    },
    "EDITORCONFIG_PRE_COMMANDS": {
      "$id": "#/properties/EDITORCONFIG_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for EDITORCONFIG descriptor",
      "type": "array"
    },
    "EMAIL_REPORTER": {
      "$id": "#/properties/EMAIL_REPORTER",
      "default": true,
      "description": "MegaLinter can send email with reports to given addresses. Please set EMAIL_REPORTER_** variables if activated",
      "title": "Activate Email reporter",
      "type": "boolean"
    },
    "EMAIL_REPORTER_EMAIL": {
      "$id": "#/properties/EMAIL_REPORTER_EMAIL",
      "description": "Comma-separated list of recipient emails, that will receive reports",
      "title": "Email reporter: E-mail addresses",
      "type": "string"
    },
    "EMAIL_REPORTER_SENDER": {
      "$id": "#/properties/EMAIL_REPORTER_SENDER",
      "default": "megalinter@gmail.com",
      "title": "Email reporter: Sender of emails",
      "type": "string"
    },
    "EMAIL_REPORTER_SEND_SUCCESS": {
      "$id": "#/properties/EMAIL_REPORTER_SEND_SUCCESS",
      "default": false,
      "description": "Define to true if you want to receive reports by mail even when there is no errors or updated sources",
      "title": "Send email reports even when success",
      "type": "boolean"
    },
    "EMAIL_REPORTER_SMTP_HOST": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_HOST",
      "default": "smtp.gmail.com",
      "title": "Email reporter: SMTP server host",
      "type": "string"
    },
    "EMAIL_REPORTER_SMTP_PASSWORD": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_PASSWORD",
      "title": "Email reporter: SMTP server password. Never hardcode it in a config variable, use secrets and context variables",
      "type": "string"
    },
    "EMAIL_REPORTER_SMTP_PORT": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_PORT",
      "default": "465",
      "title": "Email reporter: SMTP server port",
      "type": "number"
    },
    "EMAIL_REPORTER_SMTP_USERNAME": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_USERNAME",
      "default": "megalinter@gmail.com",
      "title": "Email reporter: SMTP username",
      "type": "string"
    },
    "ENABLE": {
      "$id": "#/properties/ENABLE",
      "description": "If ENABLE is not set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default",
      "examples": [
        [
          "BASH",
          "HTML",
          "JAVASCRIPT"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_descriptor_keys"
      },
      "title": "Enabled descriptor keys",
      "type": "array"
    },
    "ENABLE_LINTERS": {
      "$id": "#/properties/ENABLE_LINTERS",
      "description": "If ENABLE_LINTERS is set, only listed linters will be processed",
      "examples": [
        [
          "JAVASCRIPT_ES",
          "PYTHON_PYLINT"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_linter_keys"
      },
      "title": "Enabled linter keys",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_ARGUMENTS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_ARGUMENTS",
      "description": "ENV_DOTENV_LINTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ENV_DOTENV_LINTER_CLI_EXECUTABLE": {
      "$id": "#/properties/ENV_DOTENV_LINTER_CLI_EXECUTABLE",
      "default": [
        [
          "dotenv-linter"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: CLI Executable",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_CLI_LINT_MODE": {
      "$id": "#/properties/ENV_DOTENV_LINTER_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "ENV_DOTENV_LINTER: Override default cli lint mode",
      "type": "string"
    },
    "ENV_DOTENV_LINTER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_COMMAND_REMOVE_ARGUMENTS",
      "description": "ENV_DOTENV_LINTER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ENV_DOTENV_LINTER_DISABLE_ERRORS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_DISABLE_ERRORS",
      "default": false,
      "title": "ENV_DOTENV_LINTER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "ENV_DOTENV_LINTER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/ENV_DOTENV_LINTER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "ENV_DOTENV_LINTER: Maximum number of errors allowed",
      "type": "number"
    },
    "ENV_DOTENV_LINTER_FILE_EXTENSIONS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE",
      "title": "ENV_DOTENV_LINTER: Excluding Regex",
      "type": "string"
    },
    "ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE",
      "title": "ENV_DOTENV_LINTER: Including Regex",
      "type": "string"
    },
    "ENV_DOTENV_LINTER_POST_COMMANDS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ENV_DOTENV_LINTER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_PRE_COMMANDS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "ENV_DOTENV_LINTER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/ENV_DOTENV_LINTER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling ENV_DOTENV_LINTER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Unsecured env variables",
      "type": "array"
    },
    "ENV_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ENV_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ENV descriptor",
      "type": "string"
    },
    "ENV_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ENV_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ENV descriptor",
      "type": "string"
    },
    "ENV_POST_COMMANDS": {
      "$id": "#/properties/ENV_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for ENV descriptor",
      "type": "array"
    },
    "ENV_PRE_COMMANDS": {
      "$id": "#/properties/ENV_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for ENV descriptor",
      "type": "array"
    },
    "ERROR_ON_MISSING_EXEC_BIT": {
      "$id": "#/properties/ERROR_ON_MISSING_EXEC_BIT",
      "default": false,
      "description": "If set to `false`, the `bash-exec` linter will report a warning if a shell script is not executable. If set to `true`, the `bash-exec` linter will report an error instead",
      "title": "Disable errors for BASH-EXEC",
      "type": "boolean"
    },
    "EXCLUDED_DIRECTORIES": {
      "$id": "#/properties/EXCLUDED_DIRECTORIES",
      "description": "List of excluded directory basenames replacing MegaLinter default excluded directories. They are excluded at any nested level.",
      "examples": [
        [
          ".github",
          "node_modules"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Excluded directories",
      "type": "array"
    },
    "EXTENDS": {
      "$id": "#/properties/EXTENDS",
      "description": "Base mega-linter.yml config file(s) to extend local configuration from. Can be a single URL or a list of .mega-linter.yml config files URLs",
      "examples:": [
        "https://raw.githubusercontent.com/oxsecurity/megalinter/main/.automation/test/mega-linter-config-test/extension1.mega-linter.yml",
        "https://raw.githubusercontent.com/oxsecurity/megalinter/main/.automation/test/mega-linter-config-test/extension2.mega-linter.yml"
      ],
      "items": {
        "type": "string"
      },
      "title": "MegaLinter config files to extend from",
      "type": [
        "array",
        "string"
      ]
    },
    "FAIL_IF_MISSING_LINTER_IN_FLAVOR": {
      "$id": "#/properties/FAIL_IF_MISSING_LINTER_IN_FLAVOR",
      "default": false,
      "description": "If set to true, MegaLinter fails if a linter is missing in the selected flavor",
      "title": "Fail if missing linter",
      "type": "boolean"
    },
    "FAIL_IF_UPDATED_SOURCES": {
      "$id": "#/properties/FAIL_IF_UPDATED_SOURCES",
      "default": false,
      "description": "If set to true, MegaLinter fails if a linter or formatter has auto-fixed sources, even if there are no errors",
      "title": "Fail if updated sources",
      "type": "boolean"
    },
    "FILEIO_REPORTER": {
      "$id": "#/properties/FILEIO_REPORTER",
      "default": false,
      "description": "If you don't use artifacts upload to read MegaLinter reports, you can access them with an hyperlink to file.io. Important: MegaLinter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically)",
      "title": "Activate File.io reporter",
      "type": "boolean"
    },
    "FILEIO_REPORTER_SEND_SUCCESS": {
      "$id": "#/properties/FILEIO_REPORTER_SEND_SUCCESS",
      "default": false,
      "description": "Skip posting to file.io if linting is in success",
      "title": "Skip file.io if success",
      "type": "boolean"
    },
    "FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/FILTER_REGEX_EXCLUDE",
      "description": "Regular expression defining which files will be excluded from linting",
      "examples": [
        "(\\.automation/test|docs/javascripts|docs/overrides|flavors|clj-kondo|TEMPLATES)",
        "(src/test)"
      ],
      "title": "Excluding regex filter",
      "type": "string"
    },
    "FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/FILTER_REGEX_INCLUDE",
      "description": "Regular expression defining which files will be processed by linters",
      "examples": [
        "(src/)"
      ],
      "title": "Including regex filter",
      "type": "string"
    },
    "FLAVOR_SUGGESTIONS": {
      "$id": "#/properties/FLAVOR_SUGGESTIONS",
      "default": true,
      "description": "Provides suggestions about different MegaLinter flavors to use to improve runtime performances",
      "title": "Flavor suggestions",
      "type": "boolean"
    },
    "FORMATTERS_DISABLE_ERRORS": {
      "$id": "#/properties/FORMATTERS_DISABLE_ERRORS",
      "default": true,
      "description": "Formatter errors will be reported as errors (and not warnings) if this variable is set to false",
      "title": "Disable errors when linter is a formatter",
      "type": "boolean"
    },
    "GHERKIN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GHERKIN_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GHERKIN descriptor",
      "type": "string"
    },
    "GHERKIN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GHERKIN_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GHERKIN descriptor",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_ARGUMENTS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_ARGUMENTS",
      "description": "GHERKIN_GHERKIN_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GHERKIN_GHERKIN_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "gherkin-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: CLI Executable",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "GHERKIN_GHERKIN_LINT: Override default cli lint mode",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "GHERKIN_GHERKIN_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GHERKIN_GHERKIN_LINT_CONFIG_FILE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_CONFIG_FILE",
      "default": ".gherkin-lintrc",
      "description": "GHERKIN_GHERKIN_LINT: User custom config file name if different from default",
      "title": "GHERKIN_GHERKIN_LINT: Custom config file name",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "GHERKIN_GHERKIN_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "GHERKIN_GHERKIN_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "GHERKIN_GHERKIN_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_FILE_NAME": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILE_NAME",
      "default": ".gherkin-lintrc",
      "description": "GHERKIN_GHERKIN_LINT: User custom config file name if different from default",
      "title": "GHERKIN_GHERKIN_LINT: Custom config file name",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE",
      "title": "GHERKIN_GHERKIN_LINT: Excluding Regex",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE",
      "title": "GHERKIN_GHERKIN_LINT: Including Regex",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_POST_COMMANDS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GHERKIN_GHERKIN_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_PRE_COMMANDS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GHERKIN_GHERKIN_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_RULES_PATH": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_RULES_PATH",
      "description": "GHERKIN_GHERKIN_LINT: Path where to find linter configuration file",
      "title": "GHERKIN_GHERKIN_LINT: Custom config file path",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling GHERKIN_GHERKIN_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Unsecured env variables",
      "type": "array"
    },
    "GHERKIN_POST_COMMANDS": {
      "$id": "#/properties/GHERKIN_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for GHERKIN descriptor",
      "type": "array"
    },
    "GHERKIN_PRE_COMMANDS": {
      "$id": "#/properties/GHERKIN_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for GHERKIN descriptor",
      "type": "array"
    },
    "GITHUB_API_URL": {
      "$id": "#/properties/GITHUB_API_URL",
      "default": "https://api.github.com",
      "description": "URL where the github API can be reached. Must be overridden if using GitHub Enterprise",
      "examples": [
        "https://github.my-company.com/api/v3"
      ],
      "format": "uri",
      "title": "GitHub API base URL",
      "type": "string"
    },
    "GITHUB_COMMENT_REPORTER": {
      "$id": "#/properties/GITHUB_COMMENT_REPORTER",
      "default": true,
      "description": "Posts MegaLinter results summary in the comments of the related pull request (if existing)",
      "title": "Activate GitHub PR Comments reporter",
      "type": "boolean"
    },
    "GITHUB_SERVER_URL": {
      "$id": "#/properties/GITHUB_SERVER_URL",
      "default": "https://github.com",
      "description": "URL of the GitHub instance. Must be overridden if using GitHub Enterprise",
      "examples": [
        "https://github.my-company.com/"
      ],
      "format": "uri",
      "title": "GitHub server base URL",
      "type": "string"
    },
    "GITHUB_STATUS_REPORTER": {
      "$id": "#/properties/GITHUB_STATUS_REPORTER",
      "default": true,
      "description": "Posts a status on the pull request for each processed linter",
      "title": "Activate GitHub Status reporter",
      "type": "boolean"
    },
    "GITHUB_WORKSPACE": {
      "$id": "#/properties/GITHUB_WORKSPACE",
      "default": "/tmp/lint",
      "description": "Base directory for REPORT_OUTPUT_FOLDER, for user-defined linter rules location, for location of linted files if DEFAULT_WORKSPACE is not set",
      "title": "GitHub Workspace",
      "type": "string"
    },
    "GITLAB_ACCESS_TOKEN_MEGALINTER": {
      "$id": "#/properties/GITLAB_ACCESS_TOKEN_MEGALINTER",
      "default": true,
      "description": "Gitlab access token with API access (can be user or project Access token)",
      "title": "Gitlab Access Token",
      "type": "string"
    },
    "GITLAB_CERTIFICATE_PATH": {
      "$id": "#/properties/GITLAB_CERTIFICATE_PATH",
      "default": true,
      "description": "Path to SSL certificate if necessary",
      "title": "Gitlab SSL Certificate path",
      "type": "string"
    },
    "GITLAB_COMMENT_REPORTER": {
      "$id": "#/properties/GITLAB_COMMENT_REPORTER",
      "default": true,
      "description": "Posts Mega-Linter results summary in the comments of the related merge request (if existing)",
      "title": "Activate Gitlab MR Comments reporter",
      "type": "boolean"
    },
    "GITLAB_COMMENT_REPORTER_OVERWRITE_COMMENT": {
      "$id": "#/properties/GITLAB_COMMENT_REPORTER_OVERWRITE_COMMENT",
      "default": true,
      "description": "Set to false to disable the overwrite of existing MegaLinter Merge Request comment in case of new run",
      "title": "Overwrite Gitlab Merge Request Comment",
      "type": "boolean"
    },
    "GITLAB_CUSTOM_CERTIFICATE": {
      "$id": "#/properties/GITLAB_CUSTOM_CERTIFICATE",
      "default": true,
      "description": "Store your SSL certificate string value in a CI env variable named GITLAB_CUSTOM_CERTIFICATE if you want it to be copied by MegaLinter in a local certificate file that will be used by python gitlab lib",
      "title": "Gitlab SSL Certificate value",
      "type": "string"
    },
    "GIT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GIT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GIT descriptor",
      "type": "string"
    },
    "GIT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GIT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GIT descriptor",
      "type": "string"
    },
    "GIT_GIT_DIFF_ARGUMENTS": {
      "$id": "#/properties/GIT_GIT_DIFF_ARGUMENTS",
      "description": "GIT_GIT_DIFF: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) GIT_GIT_DIFF: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GIT_GIT_DIFF_DISABLE_ERRORS": {
      "$id": "#/properties/GIT_GIT_DIFF_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) GIT_GIT_DIFF: Linter does not make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "GIT_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/GIT_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) GIT_GIT_DIFF: Maximum number of errors allowed",
      "type": "number"
    },
    "GIT_GIT_DIFF_FILE_EXTENSIONS": {
      "$id": "#/properties/GIT_GIT_DIFF_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) GIT_GIT_DIFF: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GIT_GIT_DIFF_FILE_NAMES_REGEX": {
      "$id": "#/properties/GIT_GIT_DIFF_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) GIT_GIT_DIFF: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GIT_GIT_DIFF_POST_COMMANDS": {
      "$id": "#/properties/GIT_GIT_DIFF_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) GIT_GIT_DIFF: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "GIT_GIT_DIFF_PRE_COMMANDS": {
      "$id": "#/properties/GIT_GIT_DIFF_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) GIT_GIT_DIFF: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "GO_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GO_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GO descriptor",
      "type": "string"
    },
    "GO_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GO_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GO descriptor",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_ARGUMENTS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_ARGUMENTS",
      "description": "GO_GOLANGCI_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GO_GOLANGCI_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/GO_GOLANGCI_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "golangci-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: CLI Executable",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/GO_GOLANGCI_LINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "GO_GOLANGCI_LINT: Override default cli lint mode",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "GO_GOLANGCI_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GO_GOLANGCI_LINT_CONFIG_FILE": {
      "$id": "#/properties/GO_GOLANGCI_LINT_CONFIG_FILE",
      "default": ".golangci.yml",
      "description": "GO_GOLANGCI_LINT: User custom config file name if different from default",
      "title": "GO_GOLANGCI_LINT: Custom config file name",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "GO_GOLANGCI_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "GO_GOLANGCI_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/GO_GOLANGCI_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "GO_GOLANGCI_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "GO_GOLANGCI_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_FILE_NAME": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILE_NAME",
      "default": ".golangci.yml",
      "description": "GO_GOLANGCI_LINT: User custom config file name if different from default",
      "title": "GO_GOLANGCI_LINT: Custom config file name",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_POST_COMMANDS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GO_GOLANGCI_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_PRE_COMMANDS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GO_GOLANGCI_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_RULES_PATH": {
      "$id": "#/properties/GO_GOLANGCI_LINT_RULES_PATH",
      "description": "GO_GOLANGCI_LINT: Path where to find linter configuration file",
      "title": "GO_GOLANGCI_LINT: Custom config file path",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/GO_GOLANGCI_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling GO_GOLANGCI_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Unsecured env variables",
      "type": "array"
    },
    "GO_POST_COMMANDS": {
      "$id": "#/properties/GO_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for GO descriptor",
      "type": "array"
    },
    "GO_PRE_COMMANDS": {
      "$id": "#/properties/GO_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for GO descriptor",
      "type": "array"
    },
    "GO_REVIVE_ARGUMENTS": {
      "$id": "#/properties/GO_REVIVE_ARGUMENTS",
      "description": "GO_REVIVE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_REVIVE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GO_REVIVE_CLI_EXECUTABLE": {
      "$id": "#/properties/GO_REVIVE_CLI_EXECUTABLE",
      "default": [
        [
          "revive"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_REVIVE: CLI Executable",
      "type": "array"
    },
    "GO_REVIVE_CLI_LINT_MODE": {
      "$id": "#/properties/GO_REVIVE_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "GO_REVIVE: Override default cli lint mode",
      "type": "string"
    },
    "GO_REVIVE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/GO_REVIVE_COMMAND_REMOVE_ARGUMENTS",
      "description": "GO_REVIVE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_REVIVE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GO_REVIVE_CONFIG_FILE": {
      "$id": "#/properties/GO_REVIVE_CONFIG_FILE",
      "default": "revive.toml",
      "description": "GO_REVIVE: User custom config file name if different from default",
      "title": "GO_REVIVE: Custom config file name",
      "type": "string"
    },
    "GO_REVIVE_DISABLE_ERRORS": {
      "$id": "#/properties/GO_REVIVE_DISABLE_ERRORS",
      "default": false,
      "title": "GO_REVIVE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "GO_REVIVE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/GO_REVIVE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "GO_REVIVE: Maximum number of errors allowed",
      "type": "number"
    },
    "GO_REVIVE_FILE_EXTENSIONS": {
      "$id": "#/properties/GO_REVIVE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_REVIVE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GO_REVIVE_FILE_NAMES_REGEX": {
      "$id": "#/properties/GO_REVIVE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_REVIVE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GO_REVIVE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GO_REVIVE_FILTER_REGEX_EXCLUDE",
      "title": "GO_REVIVE: Excluding Regex",
      "type": "string"
    },
    "GO_REVIVE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GO_REVIVE_FILTER_REGEX_INCLUDE",
      "title": "GO_REVIVE: Including Regex",
      "type": "string"
    },
    "GO_REVIVE_POST_COMMANDS": {
      "$id": "#/properties/GO_REVIVE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GO_REVIVE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "GO_REVIVE_PRE_COMMANDS": {
      "$id": "#/properties/GO_REVIVE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GO_REVIVE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "GO_REVIVE_RULES_PATH": {
      "$id": "#/properties/GO_REVIVE_RULES_PATH",
      "description": "GO_REVIVE: Path where to find linter configuration file",
      "title": "GO_REVIVE: Custom config file path",
      "type": "string"
    },
    "GO_REVIVE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/GO_REVIVE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling GO_REVIVE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "GO_REVIVE: Unsecured env variables",
      "type": "array"
    },
    "GRAPHQL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GRAPHQL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GRAPHQL descriptor",
      "type": "string"
    },
    "GRAPHQL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GRAPHQL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GRAPHQL descriptor",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_EXECUTABLE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_EXECUTABLE",
      "default": [
        [
          "graphql-schema-linter"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: CLI Executable",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_LINT_MODE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Override default cli lint mode",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_COMMAND_REMOVE_ARGUMENTS",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE",
      "default": ".graphql-schema-linterrc",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom config file name if different from default",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom config file name",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS",
      "default": false,
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Maximum number of errors allowed",
      "type": "number"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAME": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAME",
      "default": ".graphql-schema-linterrc",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom config file name if different from default",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom config file name",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Excluding Regex",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Including Regex",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_POST_COMMANDS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_PRE_COMMANDS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Path where to find linter configuration file",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom config file path",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling GRAPHQL_GRAPHQL_SCHEMA_LINTER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Unsecured env variables",
      "type": "array"
    },
    "GRAPHQL_POST_COMMANDS": {
      "$id": "#/properties/GRAPHQL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for GRAPHQL descriptor",
      "type": "array"
    },
    "GRAPHQL_PRE_COMMANDS": {
      "$id": "#/properties/GRAPHQL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for GRAPHQL descriptor",
      "type": "array"
    },
    "GROOVY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GROOVY_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GROOVY descriptor",
      "type": "string"
    },
    "GROOVY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GROOVY_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GROOVY descriptor",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_ARGUMENTS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_ARGUMENTS",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GROOVY_NPM_GROOVY_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "npm-groovy-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: CLI Executable",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "GROOVY_NPM_GROOVY_LINT: Override default cli lint mode",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GROOVY_NPM_GROOVY_LINT_CONFIG_FILE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_CONFIG_FILE",
      "default": ".groovylintrc.json",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom config file name if different from default",
      "title": "GROOVY_NPM_GROOVY_LINT: Custom config file name",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "GROOVY_NPM_GROOVY_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "GROOVY_NPM_GROOVY_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_FILE_NAME": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILE_NAME",
      "default": ".groovylintrc.json",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom config file name if different from default",
      "title": "GROOVY_NPM_GROOVY_LINT: Custom config file name",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE",
      "title": "GROOVY_NPM_GROOVY_LINT: Excluding Regex",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE",
      "title": "GROOVY_NPM_GROOVY_LINT: Including Regex",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_POST_COMMANDS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_PRE_COMMANDS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_RULES_PATH": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_RULES_PATH",
      "description": "GROOVY_NPM_GROOVY_LINT: Path where to find linter configuration file",
      "title": "GROOVY_NPM_GROOVY_LINT: Custom config file path",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling GROOVY_NPM_GROOVY_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Unsecured env variables",
      "type": "array"
    },
    "GROOVY_POST_COMMANDS": {
      "$id": "#/properties/GROOVY_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for GROOVY descriptor",
      "type": "array"
    },
    "GROOVY_PRE_COMMANDS": {
      "$id": "#/properties/GROOVY_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for GROOVY descriptor",
      "type": "array"
    },
    "HTML_DJLINT_ARGUMENTS": {
      "$id": "#/properties/HTML_DJLINT_ARGUMENTS",
      "description": "HTML_DJLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_DJLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "HTML_DJLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/HTML_DJLINT_CLI_EXECUTABLE",
      "default": [
        [
          "djlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_DJLINT: CLI Executable",
      "type": "array"
    },
    "HTML_DJLINT_CLI_LINT_MODE": {
      "$id": "#/properties/HTML_DJLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "HTML_DJLINT: Override default cli lint mode",
      "type": "string"
    },
    "HTML_DJLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/HTML_DJLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "HTML_DJLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_DJLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "HTML_DJLINT_DISABLE_ERRORS": {
      "$id": "#/properties/HTML_DJLINT_DISABLE_ERRORS",
      "default": false,
      "title": "HTML_DJLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "HTML_DJLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/HTML_DJLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "HTML_DJLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "HTML_DJLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/HTML_DJLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_DJLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "HTML_DJLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/HTML_DJLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_DJLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "HTML_DJLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/HTML_DJLINT_FILTER_REGEX_EXCLUDE",
      "title": "HTML_DJLINT: Excluding Regex",
      "type": "string"
    },
    "HTML_DJLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/HTML_DJLINT_FILTER_REGEX_INCLUDE",
      "title": "HTML_DJLINT: Including Regex",
      "type": "string"
    },
    "HTML_DJLINT_POST_COMMANDS": {
      "$id": "#/properties/HTML_DJLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "HTML_DJLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "HTML_DJLINT_PRE_COMMANDS": {
      "$id": "#/properties/HTML_DJLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "HTML_DJLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "HTML_DJLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/HTML_DJLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling HTML_DJLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "HTML_DJLINT: Unsecured env variables",
      "type": "array"
    },
    "HTML_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/HTML_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for HTML descriptor",
      "type": "string"
    },
    "HTML_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/HTML_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for HTML descriptor",
      "type": "string"
    },
    "HTML_HTMLHINT_ARGUMENTS": {
      "$id": "#/properties/HTML_HTMLHINT_ARGUMENTS",
      "description": "HTML_HTMLHINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "HTML_HTMLHINT_CLI_EXECUTABLE": {
      "$id": "#/properties/HTML_HTMLHINT_CLI_EXECUTABLE",
      "default": [
        [
          "htmlhint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: CLI Executable",
      "type": "array"
    },
    "HTML_HTMLHINT_CLI_LINT_MODE": {
      "$id": "#/properties/HTML_HTMLHINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "HTML_HTMLHINT: Override default cli lint mode",
      "type": "string"
    },
    "HTML_HTMLHINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/HTML_HTMLHINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "HTML_HTMLHINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "HTML_HTMLHINT_CONFIG_FILE": {
      "$id": "#/properties/HTML_HTMLHINT_CONFIG_FILE",
      "default": ".htmlhintrc",
      "description": "HTML_HTMLHINT: User custom config file name if different from default",
      "title": "HTML_HTMLHINT: Custom config file name",
      "type": "string"
    },
    "HTML_HTMLHINT_DISABLE_ERRORS": {
      "$id": "#/properties/HTML_HTMLHINT_DISABLE_ERRORS",
      "default": false,
      "title": "HTML_HTMLHINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "HTML_HTMLHINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/HTML_HTMLHINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "HTML_HTMLHINT: Maximum number of errors allowed",
      "type": "number"
    },
    "HTML_HTMLHINT_FILE_EXTENSIONS": {
      "$id": "#/properties/HTML_HTMLHINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "HTML_HTMLHINT_FILE_NAME": {
      "$id": "#/properties/HTML_HTMLHINT_FILE_NAME",
      "default": ".htmlhintrc",
      "description": "HTML_HTMLHINT: User custom config file name if different from default",
      "title": "HTML_HTMLHINT: Custom config file name",
      "type": "string"
    },
    "HTML_HTMLHINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/HTML_HTMLHINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "HTML_HTMLHINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/HTML_HTMLHINT_FILTER_REGEX_EXCLUDE",
      "title": "HTML_HTMLHINT: Excluding Regex",
      "type": "string"
    },
    "HTML_HTMLHINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/HTML_HTMLHINT_FILTER_REGEX_INCLUDE",
      "title": "HTML_HTMLHINT: Including Regex",
      "type": "string"
    },
    "HTML_HTMLHINT_POST_COMMANDS": {
      "$id": "#/properties/HTML_HTMLHINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "HTML_HTMLHINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "HTML_HTMLHINT_PRE_COMMANDS": {
      "$id": "#/properties/HTML_HTMLHINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "HTML_HTMLHINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "HTML_HTMLHINT_RULES_PATH": {
      "$id": "#/properties/HTML_HTMLHINT_RULES_PATH",
      "description": "HTML_HTMLHINT: Path where to find linter configuration file",
      "title": "HTML_HTMLHINT: Custom config file path",
      "type": "string"
    },
    "HTML_HTMLHINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/HTML_HTMLHINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling HTML_HTMLHINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Unsecured env variables",
      "type": "array"
    },
    "HTML_POST_COMMANDS": {
      "$id": "#/properties/HTML_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for HTML descriptor",
      "type": "array"
    },
    "HTML_PRE_COMMANDS": {
      "$id": "#/properties/HTML_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for HTML descriptor",
      "type": "array"
    },
    "IGNORE_GENERATED_FILES": {
      "$id": "#/properties/IGNORE_GENERATED_FILES",
      "default": false,
      "title": "Makes MegaLinter skip files containing @generated marker (and not containing @not-generated)",
      "type": "boolean"
    },
    "IGNORE_GITIGNORED_FILES": {
      "$id": "#/properties/IGNORE_GITIGNORED_FILES",
      "default": false,
      "title": "Makes MegaLinter skip files that are ignored by git using .gitignore",
      "type": "boolean"
    },
    "JAVASCRIPT_DEFAULT_STYLE": {
      "$id": "#/properties/JAVASCRIPT_DEFAULT_STYLE",
      "description": "Style of javascript formatting to apply",
      "enum": [
        "standard",
        "prettier"
      ],
      "examples": [
        "standard",
        "prettier"
      ],
      "title": "Javascript default style",
      "type": "string"
    },
    "JAVASCRIPT_ES_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_ES_ARGUMENTS",
      "description": "JAVASCRIPT_ES: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_ES_CLI_EXECUTABLE": {
      "$id": "#/properties/JAVASCRIPT_ES_CLI_EXECUTABLE",
      "default": [
        [
          "eslint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: CLI Executable",
      "type": "array"
    },
    "JAVASCRIPT_ES_CLI_LINT_MODE": {
      "$id": "#/properties/JAVASCRIPT_ES_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JAVASCRIPT_ES: Override default cli lint mode",
      "type": "string"
    },
    "JAVASCRIPT_ES_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_ES_COMMAND_REMOVE_ARGUMENTS",
      "description": "JAVASCRIPT_ES: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_ES_CONFIG_FILE": {
      "$id": "#/properties/JAVASCRIPT_ES_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "JAVASCRIPT_ES: User custom config file name if different from default",
      "title": "JAVASCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "JAVASCRIPT_ES_DISABLE_ERRORS": {
      "$id": "#/properties/JAVASCRIPT_ES_DISABLE_ERRORS",
      "default": false,
      "title": "JAVASCRIPT_ES: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JAVASCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JAVASCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JAVASCRIPT_ES: Maximum number of errors allowed",
      "type": "number"
    },
    "JAVASCRIPT_ES_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVASCRIPT_ES_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVASCRIPT_ES_FILE_NAME": {
      "$id": "#/properties/JAVASCRIPT_ES_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "JAVASCRIPT_ES: User custom config file name if different from default",
      "title": "JAVASCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "JAVASCRIPT_ES_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVASCRIPT_ES_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE",
      "title": "JAVASCRIPT_ES: Excluding Regex",
      "type": "string"
    },
    "JAVASCRIPT_ES_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_ES_FILTER_REGEX_INCLUDE",
      "title": "JAVASCRIPT_ES: Including Regex",
      "type": "string"
    },
    "JAVASCRIPT_ES_POST_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_ES_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVASCRIPT_ES: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JAVASCRIPT_ES_PRE_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_ES_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVASCRIPT_ES: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JAVASCRIPT_ES_RULES_PATH": {
      "$id": "#/properties/JAVASCRIPT_ES_RULES_PATH",
      "description": "JAVASCRIPT_ES: Path where to find linter configuration file",
      "title": "JAVASCRIPT_ES: Custom config file path",
      "type": "string"
    },
    "JAVASCRIPT_ES_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JAVASCRIPT_ES_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JAVASCRIPT_ES and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Unsecured env variables",
      "type": "array"
    },
    "JAVASCRIPT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JAVASCRIPT descriptor",
      "type": "string"
    },
    "JAVASCRIPT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JAVASCRIPT descriptor",
      "type": "string"
    },
    "JAVASCRIPT_POST_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for JAVASCRIPT descriptor",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_ARGUMENTS",
      "description": "JAVASCRIPT_PRETTIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_PRETTIER_CLI_EXECUTABLE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_CLI_EXECUTABLE",
      "default": [
        [
          "prettier"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: CLI Executable",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_CLI_LINT_MODE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JAVASCRIPT_PRETTIER: Override default cli lint mode",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_COMMAND_REMOVE_ARGUMENTS",
      "description": "JAVASCRIPT_PRETTIER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_PRETTIER_CONFIG_FILE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_CONFIG_FILE",
      "default": ".prettierrc.json",
      "description": "JAVASCRIPT_PRETTIER: User custom config file name if different from default",
      "title": "JAVASCRIPT_PRETTIER: Custom config file name",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_DISABLE_ERRORS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_DISABLE_ERRORS",
      "default": false,
      "title": "JAVASCRIPT_PRETTIER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JAVASCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JAVASCRIPT_PRETTIER: Maximum number of errors allowed",
      "type": "number"
    },
    "JAVASCRIPT_PRETTIER_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE",
      "title": "JAVASCRIPT_PRETTIER: Excluding Regex",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE",
      "title": "JAVASCRIPT_PRETTIER: Including Regex",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_POST_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVASCRIPT_PRETTIER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_PRE_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVASCRIPT_PRETTIER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_RULES_PATH": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_RULES_PATH",
      "description": "JAVASCRIPT_PRETTIER: Path where to find linter configuration file",
      "title": "JAVASCRIPT_PRETTIER: Custom config file path",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JAVASCRIPT_PRETTIER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Unsecured env variables",
      "type": "array"
    },
    "JAVASCRIPT_PRE_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for JAVASCRIPT descriptor",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_ARGUMENTS",
      "description": "JAVASCRIPT_STANDARD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_STANDARD_CLI_EXECUTABLE": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_CLI_EXECUTABLE",
      "default": [
        [
          "standard"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: CLI Executable",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_CLI_LINT_MODE": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JAVASCRIPT_STANDARD: Override default cli lint mode",
      "type": "string"
    },
    "JAVASCRIPT_STANDARD_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_COMMAND_REMOVE_ARGUMENTS",
      "description": "JAVASCRIPT_STANDARD: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_STANDARD_DISABLE_ERRORS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_DISABLE_ERRORS",
      "default": false,
      "title": "JAVASCRIPT_STANDARD: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JAVASCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JAVASCRIPT_STANDARD: Maximum number of errors allowed",
      "type": "number"
    },
    "JAVASCRIPT_STANDARD_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE",
      "title": "JAVASCRIPT_STANDARD: Excluding Regex",
      "type": "string"
    },
    "JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE",
      "title": "JAVASCRIPT_STANDARD: Including Regex",
      "type": "string"
    },
    "JAVASCRIPT_STANDARD_POST_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVASCRIPT_STANDARD: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_PRE_COMMANDS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVASCRIPT_STANDARD: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JAVASCRIPT_STANDARD and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Unsecured env variables",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_ARGUMENTS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_ARGUMENTS",
      "description": "JAVA_CHECKSTYLE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVA_CHECKSTYLE_CLI_EXECUTABLE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_CLI_EXECUTABLE",
      "default": [
        [
          "java"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: CLI Executable",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_CLI_LINT_MODE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JAVA_CHECKSTYLE: Override default cli lint mode",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_COMMAND_REMOVE_ARGUMENTS",
      "description": "JAVA_CHECKSTYLE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVA_CHECKSTYLE_CONFIG_FILE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_CONFIG_FILE",
      "default": "sun_checks.xml",
      "description": "JAVA_CHECKSTYLE: User custom config file name if different from default",
      "title": "JAVA_CHECKSTYLE: Custom config file name",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_DISABLE_ERRORS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_DISABLE_ERRORS",
      "default": false,
      "title": "JAVA_CHECKSTYLE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JAVA_CHECKSTYLE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JAVA_CHECKSTYLE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JAVA_CHECKSTYLE: Maximum number of errors allowed",
      "type": "number"
    },
    "JAVA_CHECKSTYLE_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_FILE_NAME": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILE_NAME",
      "default": "sun_checks.xml",
      "description": "JAVA_CHECKSTYLE: User custom config file name if different from default",
      "title": "JAVA_CHECKSTYLE: Custom config file name",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE",
      "title": "JAVA_CHECKSTYLE: Excluding Regex",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE",
      "title": "JAVA_CHECKSTYLE: Including Regex",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_POST_COMMANDS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVA_CHECKSTYLE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_PRE_COMMANDS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVA_CHECKSTYLE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_RULES_PATH": {
      "$id": "#/properties/JAVA_CHECKSTYLE_RULES_PATH",
      "description": "JAVA_CHECKSTYLE: Path where to find linter configuration file",
      "title": "JAVA_CHECKSTYLE: Custom config file path",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JAVA_CHECKSTYLE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JAVA_CHECKSTYLE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Unsecured env variables",
      "type": "array"
    },
    "JAVA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVA_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JAVA descriptor",
      "type": "string"
    },
    "JAVA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVA_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JAVA descriptor",
      "type": "string"
    },
    "JAVA_PMD_ARGUMENTS": {
      "$id": "#/properties/JAVA_PMD_ARGUMENTS",
      "description": "JAVA_PMD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_PMD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVA_PMD_CLI_EXECUTABLE": {
      "$id": "#/properties/JAVA_PMD_CLI_EXECUTABLE",
      "default": [
        [
          "/usr/bin/pmd/bin/pmd"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_PMD: CLI Executable",
      "type": "array"
    },
    "JAVA_PMD_CLI_LINT_MODE": {
      "$id": "#/properties/JAVA_PMD_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JAVA_PMD: Override default cli lint mode",
      "type": "string"
    },
    "JAVA_PMD_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JAVA_PMD_COMMAND_REMOVE_ARGUMENTS",
      "description": "JAVA_PMD: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_PMD: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVA_PMD_CONFIG_FILE": {
      "$id": "#/properties/JAVA_PMD_CONFIG_FILE",
      "default": "java-pmd-ruleset.xml",
      "description": "JAVA_PMD: User custom config file name if different from default",
      "title": "JAVA_PMD: Custom config file name",
      "type": "string"
    },
    "JAVA_PMD_DISABLE_ERRORS": {
      "$id": "#/properties/JAVA_PMD_DISABLE_ERRORS",
      "default": false,
      "title": "JAVA_PMD: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JAVA_PMD_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JAVA_PMD_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JAVA_PMD: Maximum number of errors allowed",
      "type": "number"
    },
    "JAVA_PMD_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVA_PMD_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_PMD: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVA_PMD_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVA_PMD_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_PMD: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVA_PMD_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVA_PMD_FILTER_REGEX_EXCLUDE",
      "title": "JAVA_PMD: Excluding Regex",
      "type": "string"
    },
    "JAVA_PMD_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVA_PMD_FILTER_REGEX_INCLUDE",
      "title": "JAVA_PMD: Including Regex",
      "type": "string"
    },
    "JAVA_PMD_POST_COMMANDS": {
      "$id": "#/properties/JAVA_PMD_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVA_PMD: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JAVA_PMD_PRE_COMMANDS": {
      "$id": "#/properties/JAVA_PMD_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JAVA_PMD: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JAVA_PMD_RULES_PATH": {
      "$id": "#/properties/JAVA_PMD_RULES_PATH",
      "description": "JAVA_PMD: Path where to find linter configuration file",
      "title": "JAVA_PMD: Custom config file path",
      "type": "string"
    },
    "JAVA_PMD_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JAVA_PMD_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JAVA_PMD and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JAVA_PMD: Unsecured env variables",
      "type": "array"
    },
    "JAVA_POST_COMMANDS": {
      "$id": "#/properties/JAVA_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for JAVA descriptor",
      "type": "array"
    },
    "JAVA_PRE_COMMANDS": {
      "$id": "#/properties/JAVA_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for JAVA descriptor",
      "type": "array"
    },
    "JOB_SUMMARY_ADDITIONAL_MARKDOWN": {
      "$id": "#/properties/JOB_SUMMARY_ADDITIONAL_MARKDOWN",
      "description": "Custom markdown to add at the end of the summary message posted on a PR/MR",
      "title": "Job Summary additional markdown",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_ESLINT_PLUGIN_JSONC_CLI_EXECUTABLE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_CLI_EXECUTABLE",
      "default": [
        [
          "eslint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: CLI Executable",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_CLI_LINT_MODE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JSON_ESLINT_PLUGIN_JSONC: Override default cli lint mode",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_COMMAND_REMOVE_ARGUMENTS",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE",
      "default": ".eslintrc-json.json",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom config file name if different from default",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom config file name",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_ESLINT_PLUGIN_JSONC: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JSON_ESLINT_PLUGIN_JSONC: Maximum number of errors allowed",
      "type": "number"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILE_NAME": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom config file name if different from default",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom config file name",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Excluding Regex",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Including Regex",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_POST_COMMANDS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_PRE_COMMANDS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_RULES_PATH": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_RULES_PATH",
      "description": "JSON_ESLINT_PLUGIN_JSONC: Path where to find linter configuration file",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom config file path",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JSON_ESLINT_PLUGIN_JSONC and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Unsecured env variables",
      "type": "array"
    },
    "JSON_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JSON descriptor",
      "type": "string"
    },
    "JSON_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JSON descriptor",
      "type": "string"
    },
    "JSON_JSONLINT_ARGUMENTS": {
      "$id": "#/properties/JSON_JSONLINT_ARGUMENTS",
      "description": "JSON_JSONLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_JSONLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/JSON_JSONLINT_CLI_EXECUTABLE",
      "default": [
        [
          "jsonlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: CLI Executable",
      "type": "array"
    },
    "JSON_JSONLINT_CLI_LINT_MODE": {
      "$id": "#/properties/JSON_JSONLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JSON_JSONLINT: Override default cli lint mode",
      "type": "string"
    },
    "JSON_JSONLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JSON_JSONLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "JSON_JSONLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_JSONLINT_CONFIG_FILE": {
      "$id": "#/properties/JSON_JSONLINT_CONFIG_FILE",
      "default": ".jsonlintrc",
      "description": "JSON_JSONLINT: User custom config file name if different from default",
      "title": "JSON_JSONLINT: Custom config file name",
      "type": "string"
    },
    "JSON_JSONLINT_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_JSONLINT_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_JSONLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_JSONLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JSON_JSONLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JSON_JSONLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "JSON_JSONLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_JSONLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_JSONLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_JSONLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_JSONLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_JSONLINT_FILTER_REGEX_EXCLUDE",
      "title": "JSON_JSONLINT: Excluding Regex",
      "type": "string"
    },
    "JSON_JSONLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_JSONLINT_FILTER_REGEX_INCLUDE",
      "title": "JSON_JSONLINT: Including Regex",
      "type": "string"
    },
    "JSON_JSONLINT_POST_COMMANDS": {
      "$id": "#/properties/JSON_JSONLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_JSONLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JSON_JSONLINT_PRE_COMMANDS": {
      "$id": "#/properties/JSON_JSONLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_JSONLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JSON_JSONLINT_RULES_PATH": {
      "$id": "#/properties/JSON_JSONLINT_RULES_PATH",
      "description": "JSON_JSONLINT: Path where to find linter configuration file",
      "title": "JSON_JSONLINT: Custom config file path",
      "type": "string"
    },
    "JSON_JSONLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JSON_JSONLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JSON_JSONLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Unsecured env variables",
      "type": "array"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_ARGUMENTS": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_ARGUMENTS",
      "description": "JSON_NPM_PACKAGE_JSON_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_NPM_PACKAGE_JSON_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "npmPkgJsonLint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: CLI Executable",
      "type": "array"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Override default cli lint mode",
      "type": "string"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "JSON_NPM_PACKAGE_JSON_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_NPM_PACKAGE_JSON_LINT_CONFIG_FILE": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_CONFIG_FILE",
      "default": ".npmpackagejsonlintrc.json",
      "description": "JSON_NPM_PACKAGE_JSON_LINT: User custom config file name if different from default",
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Custom config file name",
      "type": "string"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_POST_COMMANDS": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_PRE_COMMANDS": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_RULES_PATH": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_RULES_PATH",
      "description": "JSON_NPM_PACKAGE_JSON_LINT: Path where to find linter configuration file",
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Custom config file path",
      "type": "string"
    },
    "JSON_NPM_PACKAGE_JSON_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JSON_NPM_PACKAGE_JSON_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JSON_NPM_PACKAGE_JSON_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JSON_NPM_PACKAGE_JSON_LINT: Unsecured env variables",
      "type": "array"
    },
    "JSON_POST_COMMANDS": {
      "$id": "#/properties/JSON_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for JSON descriptor",
      "type": "array"
    },
    "JSON_PRETTIER_ARGUMENTS": {
      "$id": "#/properties/JSON_PRETTIER_ARGUMENTS",
      "description": "JSON_PRETTIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_PRETTIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_PRETTIER_CLI_EXECUTABLE": {
      "$id": "#/properties/JSON_PRETTIER_CLI_EXECUTABLE",
      "default": [
        [
          "prettier"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_PRETTIER: CLI Executable",
      "type": "array"
    },
    "JSON_PRETTIER_CLI_LINT_MODE": {
      "$id": "#/properties/JSON_PRETTIER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JSON_PRETTIER: Override default cli lint mode",
      "type": "string"
    },
    "JSON_PRETTIER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JSON_PRETTIER_COMMAND_REMOVE_ARGUMENTS",
      "description": "JSON_PRETTIER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_PRETTIER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_PRETTIER_CONFIG_FILE": {
      "$id": "#/properties/JSON_PRETTIER_CONFIG_FILE",
      "default": ".prettierrc.json",
      "description": "JSON_PRETTIER: User custom config file name if different from default",
      "title": "JSON_PRETTIER: Custom config file name",
      "type": "string"
    },
    "JSON_PRETTIER_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_PRETTIER_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_PRETTIER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JSON_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JSON_PRETTIER: Maximum number of errors allowed",
      "type": "number"
    },
    "JSON_PRETTIER_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_PRETTIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_PRETTIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_PRETTIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_PRETTIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_PRETTIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_PRETTIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_PRETTIER_FILTER_REGEX_EXCLUDE",
      "title": "JSON_PRETTIER: Excluding Regex",
      "type": "string"
    },
    "JSON_PRETTIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_PRETTIER_FILTER_REGEX_INCLUDE",
      "title": "JSON_PRETTIER: Including Regex",
      "type": "string"
    },
    "JSON_PRETTIER_POST_COMMANDS": {
      "$id": "#/properties/JSON_PRETTIER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_PRETTIER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JSON_PRETTIER_PRE_COMMANDS": {
      "$id": "#/properties/JSON_PRETTIER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_PRETTIER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JSON_PRETTIER_RULES_PATH": {
      "$id": "#/properties/JSON_PRETTIER_RULES_PATH",
      "description": "JSON_PRETTIER: Path where to find linter configuration file",
      "title": "JSON_PRETTIER: Custom config file path",
      "type": "string"
    },
    "JSON_PRETTIER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JSON_PRETTIER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JSON_PRETTIER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JSON_PRETTIER: Unsecured env variables",
      "type": "array"
    },
    "JSON_PRE_COMMANDS": {
      "$id": "#/properties/JSON_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for JSON descriptor",
      "type": "array"
    },
    "JSON_REPORTER": {
      "$id": "#/properties/JSON_REPORTER",
      "default": false,
      "description": "Output a large execution log in a JSON file named mega-linter-report.json",
      "title": "JSON reporter",
      "type": "boolean"
    },
    "JSON_REPORTER_OUTPUT_DETAIL": {
      "$id": "#/properties/JSON_REPORTER_OUTPUT_DETAIL",
      "default": "simple",
      "description": "Defines if output contain only error files (simple) or all files (detailed)",
      "enum": [
        "simple",
        "detailed"
      ],
      "title": "JSON reporter output detail",
      "type": "string"
    },
    "JSON_V8R_ARGUMENTS": {
      "$id": "#/properties/JSON_V8R_ARGUMENTS",
      "description": "JSON_V8R: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_V8R_CLI_EXECUTABLE": {
      "$id": "#/properties/JSON_V8R_CLI_EXECUTABLE",
      "default": [
        [
          "v8r"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: CLI Executable",
      "type": "array"
    },
    "JSON_V8R_CLI_LINT_MODE": {
      "$id": "#/properties/JSON_V8R_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JSON_V8R: Override default cli lint mode",
      "type": "string"
    },
    "JSON_V8R_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JSON_V8R_COMMAND_REMOVE_ARGUMENTS",
      "description": "JSON_V8R: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_V8R_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_V8R_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_V8R: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_V8R_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JSON_V8R_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JSON_V8R: Maximum number of errors allowed",
      "type": "number"
    },
    "JSON_V8R_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_V8R_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_V8R_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_V8R_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_V8R_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_V8R_FILTER_REGEX_EXCLUDE",
      "title": "JSON_V8R: Excluding Regex",
      "type": "string"
    },
    "JSON_V8R_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_V8R_FILTER_REGEX_INCLUDE",
      "title": "JSON_V8R: Including Regex",
      "type": "string"
    },
    "JSON_V8R_POST_COMMANDS": {
      "$id": "#/properties/JSON_V8R_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_V8R: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JSON_V8R_PRE_COMMANDS": {
      "$id": "#/properties/JSON_V8R_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSON_V8R: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JSON_V8R_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JSON_V8R_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JSON_V8R and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Unsecured env variables",
      "type": "array"
    },
    "JSX_ESLINT_ARGUMENTS": {
      "$id": "#/properties/JSX_ESLINT_ARGUMENTS",
      "description": "JSX_ESLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSX_ESLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/JSX_ESLINT_CLI_EXECUTABLE",
      "default": [
        [
          "eslint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: CLI Executable",
      "type": "array"
    },
    "JSX_ESLINT_CLI_LINT_MODE": {
      "$id": "#/properties/JSX_ESLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "JSX_ESLINT: Override default cli lint mode",
      "type": "string"
    },
    "JSX_ESLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/JSX_ESLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "JSX_ESLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSX_ESLINT_CONFIG_FILE": {
      "$id": "#/properties/JSX_ESLINT_CONFIG_FILE",
      "default": "eslint.config.js",
      "description": "JSX_ESLINT: User custom config file name if different from default",
      "title": "JSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "JSX_ESLINT_DISABLE_ERRORS": {
      "$id": "#/properties/JSX_ESLINT_DISABLE_ERRORS",
      "default": false,
      "title": "JSX_ESLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "JSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/JSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "JSX_ESLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "JSX_ESLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/JSX_ESLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSX_ESLINT_FILE_NAME": {
      "$id": "#/properties/JSX_ESLINT_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "JSX_ESLINT: User custom config file name if different from default",
      "title": "JSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "JSX_ESLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSX_ESLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSX_ESLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSX_ESLINT_FILTER_REGEX_EXCLUDE",
      "title": "JSX_ESLINT: Excluding Regex",
      "type": "string"
    },
    "JSX_ESLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSX_ESLINT_FILTER_REGEX_INCLUDE",
      "title": "JSX_ESLINT: Including Regex",
      "type": "string"
    },
    "JSX_ESLINT_POST_COMMANDS": {
      "$id": "#/properties/JSX_ESLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSX_ESLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "JSX_ESLINT_PRE_COMMANDS": {
      "$id": "#/properties/JSX_ESLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "JSX_ESLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "JSX_ESLINT_RULES_PATH": {
      "$id": "#/properties/JSX_ESLINT_RULES_PATH",
      "description": "JSX_ESLINT: Path where to find linter configuration file",
      "title": "JSX_ESLINT: Custom config file path",
      "type": "string"
    },
    "JSX_ESLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/JSX_ESLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling JSX_ESLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Unsecured env variables",
      "type": "array"
    },
    "JSX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSX_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JSX descriptor",
      "type": "string"
    },
    "JSX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSX_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JSX descriptor",
      "type": "string"
    },
    "JSX_POST_COMMANDS": {
      "$id": "#/properties/JSX_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for JSX descriptor",
      "type": "array"
    },
    "JSX_PRE_COMMANDS": {
      "$id": "#/properties/JSX_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for JSX descriptor",
      "type": "array"
    },
    "KOTLIN_DETEKT_ARGUMENTS": {
      "$id": "#/properties/KOTLIN_DETEKT_ARGUMENTS",
      "description": "KOTLIN_DETEKT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_DETEKT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KOTLIN_DETEKT_CLI_EXECUTABLE": {
      "$id": "#/properties/KOTLIN_DETEKT_CLI_EXECUTABLE",
      "default": [
        [
          "detekt-cli"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_DETEKT: CLI Executable",
      "type": "array"
    },
    "KOTLIN_DETEKT_CLI_LINT_MODE": {
      "$id": "#/properties/KOTLIN_DETEKT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "KOTLIN_DETEKT: Override default cli lint mode",
      "type": "string"
    },
    "KOTLIN_DETEKT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/KOTLIN_DETEKT_COMMAND_REMOVE_ARGUMENTS",
      "description": "KOTLIN_DETEKT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_DETEKT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KOTLIN_DETEKT_DISABLE_ERRORS": {
      "$id": "#/properties/KOTLIN_DETEKT_DISABLE_ERRORS",
      "default": false,
      "title": "KOTLIN_DETEKT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "KOTLIN_DETEKT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/KOTLIN_DETEKT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "KOTLIN_DETEKT: Maximum number of errors allowed",
      "type": "number"
    },
    "KOTLIN_DETEKT_FILE_EXTENSIONS": {
      "$id": "#/properties/KOTLIN_DETEKT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_DETEKT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KOTLIN_DETEKT_FILE_NAMES_REGEX": {
      "$id": "#/properties/KOTLIN_DETEKT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_DETEKT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KOTLIN_DETEKT_POST_COMMANDS": {
      "$id": "#/properties/KOTLIN_DETEKT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KOTLIN_DETEKT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "KOTLIN_DETEKT_PRE_COMMANDS": {
      "$id": "#/properties/KOTLIN_DETEKT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KOTLIN_DETEKT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "KOTLIN_DETEKT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/KOTLIN_DETEKT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling KOTLIN_DETEKT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_DETEKT: Unsecured env variables",
      "type": "array"
    },
    "KOTLIN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KOTLIN_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for KOTLIN descriptor",
      "type": "string"
    },
    "KOTLIN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KOTLIN_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for KOTLIN descriptor",
      "type": "string"
    },
    "KOTLIN_KTLINT_ARGUMENTS": {
      "$id": "#/properties/KOTLIN_KTLINT_ARGUMENTS",
      "description": "KOTLIN_KTLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KOTLIN_KTLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/KOTLIN_KTLINT_CLI_EXECUTABLE",
      "default": [
        [
          "ktlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: CLI Executable",
      "type": "array"
    },
    "KOTLIN_KTLINT_CLI_LINT_MODE": {
      "$id": "#/properties/KOTLIN_KTLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "KOTLIN_KTLINT: Override default cli lint mode",
      "type": "string"
    },
    "KOTLIN_KTLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/KOTLIN_KTLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "KOTLIN_KTLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KOTLIN_KTLINT_DISABLE_ERRORS": {
      "$id": "#/properties/KOTLIN_KTLINT_DISABLE_ERRORS",
      "default": false,
      "title": "KOTLIN_KTLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "KOTLIN_KTLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/KOTLIN_KTLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "KOTLIN_KTLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "KOTLIN_KTLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/KOTLIN_KTLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KOTLIN_KTLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/KOTLIN_KTLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE",
      "title": "KOTLIN_KTLINT: Excluding Regex",
      "type": "string"
    },
    "KOTLIN_KTLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KOTLIN_KTLINT_FILTER_REGEX_INCLUDE",
      "title": "KOTLIN_KTLINT: Including Regex",
      "type": "string"
    },
    "KOTLIN_KTLINT_POST_COMMANDS": {
      "$id": "#/properties/KOTLIN_KTLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KOTLIN_KTLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "KOTLIN_KTLINT_PRE_COMMANDS": {
      "$id": "#/properties/KOTLIN_KTLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KOTLIN_KTLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "KOTLIN_KTLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/KOTLIN_KTLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling KOTLIN_KTLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Unsecured env variables",
      "type": "array"
    },
    "KOTLIN_POST_COMMANDS": {
      "$id": "#/properties/KOTLIN_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for KOTLIN descriptor",
      "type": "array"
    },
    "KOTLIN_PRE_COMMANDS": {
      "$id": "#/properties/KOTLIN_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for KOTLIN descriptor",
      "type": "array"
    },
    "KUBERNETES_DIRECTORY": {
      "$id": "#/properties/KUBERNETES_DIRECTORY",
      "title": "Directory containing KUBERNETES files",
      "type": "string"
    },
    "KUBERNETES_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KUBERNETES_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for KUBERNETES descriptor",
      "type": "string"
    },
    "KUBERNETES_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KUBERNETES_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for KUBERNETES descriptor",
      "type": "string"
    },
    "KUBERNETES_HELM_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_HELM_ARGUMENTS",
      "description": "KUBERNETES_HELM: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_HELM: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_HELM_CLI_EXECUTABLE": {
      "$id": "#/properties/KUBERNETES_HELM_CLI_EXECUTABLE",
      "default": [
        [
          "helm"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_HELM: CLI Executable",
      "type": "array"
    },
    "KUBERNETES_HELM_CLI_LINT_MODE": {
      "$id": "#/properties/KUBERNETES_HELM_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "KUBERNETES_HELM: Override default cli lint mode",
      "type": "string"
    },
    "KUBERNETES_HELM_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_HELM_COMMAND_REMOVE_ARGUMENTS",
      "description": "KUBERNETES_HELM: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_HELM: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_HELM_DIRECTORY": {
      "$id": "#/properties/KUBERNETES_HELM_DIRECTORY",
      "default": "",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "KUBERNETES_HELM: Directory containing KUBERNETES files",
      "type": "string"
    },
    "KUBERNETES_HELM_DISABLE_ERRORS": {
      "$id": "#/properties/KUBERNETES_HELM_DISABLE_ERRORS",
      "default": false,
      "title": "KUBERNETES_HELM: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "KUBERNETES_HELM_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/KUBERNETES_HELM_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "KUBERNETES_HELM: Maximum number of errors allowed",
      "type": "number"
    },
    "KUBERNETES_HELM_FILE_EXTENSIONS": {
      "$id": "#/properties/KUBERNETES_HELM_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_HELM: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KUBERNETES_HELM_FILE_NAMES_REGEX": {
      "$id": "#/properties/KUBERNETES_HELM_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_HELM: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KUBERNETES_HELM_POST_COMMANDS": {
      "$id": "#/properties/KUBERNETES_HELM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KUBERNETES_HELM: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "KUBERNETES_HELM_PRE_COMMANDS": {
      "$id": "#/properties/KUBERNETES_HELM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KUBERNETES_HELM: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "KUBERNETES_HELM_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/KUBERNETES_HELM_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling KUBERNETES_HELM and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_HELM: Unsecured env variables",
      "type": "array"
    },
    "KUBERNETES_KUBECONFORM_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_ARGUMENTS",
      "description": "KUBERNETES_KUBECONFORM: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBECONFORM: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_KUBECONFORM_CLI_EXECUTABLE": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_CLI_EXECUTABLE",
      "default": [
        [
          "kubeconform"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBECONFORM: CLI Executable",
      "type": "array"
    },
    "KUBERNETES_KUBECONFORM_CLI_LINT_MODE": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "KUBERNETES_KUBECONFORM: Override default cli lint mode",
      "type": "string"
    },
    "KUBERNETES_KUBECONFORM_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_COMMAND_REMOVE_ARGUMENTS",
      "description": "KUBERNETES_KUBECONFORM: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBECONFORM: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_KUBECONFORM_DIRECTORY": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_DIRECTORY",
      "default": "kubernetes",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "KUBERNETES_KUBECONFORM: Directory containing KUBERNETES files",
      "type": "string"
    },
    "KUBERNETES_KUBECONFORM_DISABLE_ERRORS": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_DISABLE_ERRORS",
      "default": false,
      "title": "KUBERNETES_KUBECONFORM: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "KUBERNETES_KUBECONFORM_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "KUBERNETES_KUBECONFORM: Maximum number of errors allowed",
      "type": "number"
    },
    "KUBERNETES_KUBECONFORM_FILE_EXTENSIONS": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBECONFORM: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KUBERNETES_KUBECONFORM_FILE_NAMES_REGEX": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBECONFORM: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KUBERNETES_KUBECONFORM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_FILTER_REGEX_EXCLUDE",
      "title": "KUBERNETES_KUBECONFORM: Excluding Regex",
      "type": "string"
    },
    "KUBERNETES_KUBECONFORM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_FILTER_REGEX_INCLUDE",
      "title": "KUBERNETES_KUBECONFORM: Including Regex",
      "type": "string"
    },
    "KUBERNETES_KUBECONFORM_POST_COMMANDS": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KUBERNETES_KUBECONFORM: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "KUBERNETES_KUBECONFORM_PRE_COMMANDS": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KUBERNETES_KUBECONFORM: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "KUBERNETES_KUBECONFORM_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/KUBERNETES_KUBECONFORM_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling KUBERNETES_KUBECONFORM and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBECONFORM: Unsecured env variables",
      "type": "array"
    },
    "KUBERNETES_KUBESCAPE_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_ARGUMENTS",
      "description": "KUBERNETES_KUBESCAPE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBESCAPE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_KUBESCAPE_CLI_EXECUTABLE": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_CLI_EXECUTABLE",
      "default": [
        [
          "kubescape"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBESCAPE: CLI Executable",
      "type": "array"
    },
    "KUBERNETES_KUBESCAPE_CLI_LINT_MODE": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "KUBERNETES_KUBESCAPE: Override default cli lint mode",
      "type": "string"
    },
    "KUBERNETES_KUBESCAPE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_COMMAND_REMOVE_ARGUMENTS",
      "description": "KUBERNETES_KUBESCAPE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBESCAPE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_KUBESCAPE_DIRECTORY": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_DIRECTORY",
      "default": "",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "KUBERNETES_KUBESCAPE: Directory containing KUBERNETES files",
      "type": "string"
    },
    "KUBERNETES_KUBESCAPE_DISABLE_ERRORS": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_DISABLE_ERRORS",
      "default": false,
      "title": "KUBERNETES_KUBESCAPE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "KUBERNETES_KUBESCAPE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "KUBERNETES_KUBESCAPE: Maximum number of errors allowed",
      "type": "number"
    },
    "KUBERNETES_KUBESCAPE_FILE_EXTENSIONS": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBESCAPE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KUBERNETES_KUBESCAPE_FILE_NAMES_REGEX": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBESCAPE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KUBERNETES_KUBESCAPE_POST_COMMANDS": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KUBERNETES_KUBESCAPE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "KUBERNETES_KUBESCAPE_PRE_COMMANDS": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "KUBERNETES_KUBESCAPE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "KUBERNETES_KUBESCAPE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/KUBERNETES_KUBESCAPE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling KUBERNETES_KUBESCAPE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBESCAPE: Unsecured env variables",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_ARGUMENTS",
      "description": "KUBERNETES_KUBEVAL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) KUBERNETES_KUBEVAL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_KUBEVAL_CLI_EXECUTABLE": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_CLI_EXECUTABLE",
      "default": [
        [
          "kubeval"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) KUBERNETES_KUBEVAL: CLI Executable",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_CLI_LINT_MODE": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "(removed) KUBERNETES_KUBEVAL: Override default cli lint mode",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_DIRECTORY": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_DIRECTORY",
      "default": "kubernetes",
      "title": "(removed) KUBERNETES_KUBEVAL: Directory containing KUBERNETES files",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_DISABLE_ERRORS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) KUBERNETES_KUBEVAL: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "KUBERNETES_KUBEVAL_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) KUBERNETES_KUBEVAL: Maximum number of errors allowed",
      "type": "number"
    },
    "KUBERNETES_KUBEVAL_FILE_EXTENSIONS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) KUBERNETES_KUBEVAL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_FILE_NAMES_REGEX": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) KUBERNETES_KUBEVAL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE",
      "title": "(removed) KUBERNETES_KUBEVAL: Excluding Regex",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE",
      "title": "(removed) KUBERNETES_KUBEVAL: Including Regex",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_POST_COMMANDS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) KUBERNETES_KUBEVAL: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_PRE_COMMANDS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) KUBERNETES_KUBEVAL: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "KUBERNETES_POST_COMMANDS": {
      "$id": "#/properties/KUBERNETES_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for KUBERNETES descriptor",
      "type": "array"
    },
    "KUBERNETES_PRE_COMMANDS": {
      "$id": "#/properties/KUBERNETES_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for KUBERNETES descriptor",
      "type": "array"
    },
    "LATEX_CHKTEX_ARGUMENTS": {
      "$id": "#/properties/LATEX_CHKTEX_ARGUMENTS",
      "description": "LATEX_CHKTEX: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LATEX_CHKTEX_CLI_EXECUTABLE": {
      "$id": "#/properties/LATEX_CHKTEX_CLI_EXECUTABLE",
      "default": [
        [
          "chktex"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: CLI Executable",
      "type": "array"
    },
    "LATEX_CHKTEX_CLI_LINT_MODE": {
      "$id": "#/properties/LATEX_CHKTEX_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "LATEX_CHKTEX: Override default cli lint mode",
      "type": "string"
    },
    "LATEX_CHKTEX_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/LATEX_CHKTEX_COMMAND_REMOVE_ARGUMENTS",
      "description": "LATEX_CHKTEX: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LATEX_CHKTEX_CONFIG_FILE": {
      "$id": "#/properties/LATEX_CHKTEX_CONFIG_FILE",
      "default": ".chktexrc",
      "description": "LATEX_CHKTEX: User custom config file name if different from default",
      "title": "LATEX_CHKTEX: Custom config file name",
      "type": "string"
    },
    "LATEX_CHKTEX_DISABLE_ERRORS": {
      "$id": "#/properties/LATEX_CHKTEX_DISABLE_ERRORS",
      "default": false,
      "title": "LATEX_CHKTEX: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "LATEX_CHKTEX_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/LATEX_CHKTEX_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "LATEX_CHKTEX: Maximum number of errors allowed",
      "type": "number"
    },
    "LATEX_CHKTEX_FILE_EXTENSIONS": {
      "$id": "#/properties/LATEX_CHKTEX_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "LATEX_CHKTEX_FILE_NAME": {
      "$id": "#/properties/LATEX_CHKTEX_FILE_NAME",
      "default": ".chktexrc",
      "description": "LATEX_CHKTEX: User custom config file name if different from default",
      "title": "LATEX_CHKTEX: Custom config file name",
      "type": "string"
    },
    "LATEX_CHKTEX_FILE_NAMES_REGEX": {
      "$id": "#/properties/LATEX_CHKTEX_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "LATEX_CHKTEX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LATEX_CHKTEX_FILTER_REGEX_EXCLUDE",
      "title": "LATEX_CHKTEX: Excluding Regex",
      "type": "string"
    },
    "LATEX_CHKTEX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LATEX_CHKTEX_FILTER_REGEX_INCLUDE",
      "title": "LATEX_CHKTEX: Including Regex",
      "type": "string"
    },
    "LATEX_CHKTEX_POST_COMMANDS": {
      "$id": "#/properties/LATEX_CHKTEX_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LATEX_CHKTEX: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "LATEX_CHKTEX_PRE_COMMANDS": {
      "$id": "#/properties/LATEX_CHKTEX_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LATEX_CHKTEX: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "LATEX_CHKTEX_RULES_PATH": {
      "$id": "#/properties/LATEX_CHKTEX_RULES_PATH",
      "description": "LATEX_CHKTEX: Path where to find linter configuration file",
      "title": "LATEX_CHKTEX: Custom config file path",
      "type": "string"
    },
    "LATEX_CHKTEX_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/LATEX_CHKTEX_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling LATEX_CHKTEX and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Unsecured env variables",
      "type": "array"
    },
    "LATEX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LATEX_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for LATEX descriptor",
      "type": "string"
    },
    "LATEX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LATEX_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for LATEX descriptor",
      "type": "string"
    },
    "LATEX_POST_COMMANDS": {
      "$id": "#/properties/LATEX_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for LATEX descriptor",
      "type": "array"
    },
    "LATEX_PRE_COMMANDS": {
      "$id": "#/properties/LATEX_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for LATEX descriptor",
      "type": "array"
    },
    "LINTER_RULES_PATH": {
      "$id": "#/properties/LINTER_RULES_PATH",
      "default": ".github/linters",
      "description": "Directory for all linter configuration rules. Can be a local folder or a remote URL. Not necessary if your linters configuration files are at the root of your repository",
      "examples": [
        "myrulesfolder",
        "https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules"
      ],
      "title": "Linter rules path",
      "type": "string"
    },
    "LOG_FILE": {
      "$id": "#/properties/LOG_FILE",
      "default": "mega-linter.log",
      "description": "The file name for outputting logs. All output is sent to the log file regardless of LOG_LEVEL",
      "title": "Log file name",
      "type": "string"
    },
    "LOG_LEVEL": {
      "$id": "#/properties/LOG_LEVEL",
      "default": "INFO",
      "description": "How much output the script will generate to the console. One of INFO, DEBUG, WARNING or ERROR.",
      "enum": [
        "INFO",
        "DEBUG",
        "WARNING",
        "ERROR"
      ],
      "title": "Log level",
      "type": "string"
    },
    "LUA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LUA_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for LUA descriptor",
      "type": "string"
    },
    "LUA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LUA_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for LUA descriptor",
      "type": "string"
    },
    "LUA_LUACHECK_ARGUMENTS": {
      "$id": "#/properties/LUA_LUACHECK_ARGUMENTS",
      "description": "LUA_LUACHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_LUACHECK_CLI_EXECUTABLE": {
      "$id": "#/properties/LUA_LUACHECK_CLI_EXECUTABLE",
      "default": [
        [
          "luacheck"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: CLI Executable",
      "type": "array"
    },
    "LUA_LUACHECK_CLI_LINT_MODE": {
      "$id": "#/properties/LUA_LUACHECK_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "LUA_LUACHECK: Override default cli lint mode",
      "type": "string"
    },
    "LUA_LUACHECK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/LUA_LUACHECK_COMMAND_REMOVE_ARGUMENTS",
      "description": "LUA_LUACHECK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_LUACHECK_CONFIG_FILE": {
      "$id": "#/properties/LUA_LUACHECK_CONFIG_FILE",
      "default": ".luacheckrc",
      "description": "LUA_LUACHECK: User custom config file name if different from default",
      "title": "LUA_LUACHECK: Custom config file name",
      "type": "string"
    },
    "LUA_LUACHECK_DISABLE_ERRORS": {
      "$id": "#/properties/LUA_LUACHECK_DISABLE_ERRORS",
      "default": false,
      "title": "LUA_LUACHECK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "LUA_LUACHECK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/LUA_LUACHECK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "LUA_LUACHECK: Maximum number of errors allowed",
      "type": "number"
    },
    "LUA_LUACHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/LUA_LUACHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "LUA_LUACHECK_FILE_NAME": {
      "$id": "#/properties/LUA_LUACHECK_FILE_NAME",
      "default": ".luacheckrc",
      "description": "LUA_LUACHECK: User custom config file name if different from default",
      "title": "LUA_LUACHECK: Custom config file name",
      "type": "string"
    },
    "LUA_LUACHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/LUA_LUACHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "LUA_LUACHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LUA_LUACHECK_FILTER_REGEX_EXCLUDE",
      "title": "LUA_LUACHECK: Excluding Regex",
      "type": "string"
    },
    "LUA_LUACHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LUA_LUACHECK_FILTER_REGEX_INCLUDE",
      "title": "LUA_LUACHECK: Including Regex",
      "type": "string"
    },
    "LUA_LUACHECK_POST_COMMANDS": {
      "$id": "#/properties/LUA_LUACHECK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LUA_LUACHECK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "LUA_LUACHECK_PRE_COMMANDS": {
      "$id": "#/properties/LUA_LUACHECK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LUA_LUACHECK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "LUA_LUACHECK_RULES_PATH": {
      "$id": "#/properties/LUA_LUACHECK_RULES_PATH",
      "description": "LUA_LUACHECK: Path where to find linter configuration file",
      "title": "LUA_LUACHECK: Custom config file path",
      "type": "string"
    },
    "LUA_LUACHECK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/LUA_LUACHECK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling LUA_LUACHECK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Unsecured env variables",
      "type": "array"
    },
    "LUA_POST_COMMANDS": {
      "$id": "#/properties/LUA_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for LUA descriptor",
      "type": "array"
    },
    "LUA_PRE_COMMANDS": {
      "$id": "#/properties/LUA_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for LUA descriptor",
      "type": "array"
    },
    "LUA_SELENE_ARGUMENTS": {
      "$id": "#/properties/LUA_SELENE_ARGUMENTS",
      "description": "LUA_SELENE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_SELENE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_SELENE_CLI_EXECUTABLE": {
      "$id": "#/properties/LUA_SELENE_CLI_EXECUTABLE",
      "default": [
        [
          "selene"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_SELENE: CLI Executable",
      "type": "array"
    },
    "LUA_SELENE_CLI_LINT_MODE": {
      "$id": "#/properties/LUA_SELENE_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "LUA_SELENE: Override default cli lint mode",
      "type": "string"
    },
    "LUA_SELENE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/LUA_SELENE_COMMAND_REMOVE_ARGUMENTS",
      "description": "LUA_SELENE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_SELENE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_SELENE_CONFIG_FILE": {
      "$id": "#/properties/LUA_SELENE_CONFIG_FILE",
      "default": "selene.toml",
      "description": "LUA_SELENE: User custom config file name if different from default",
      "title": "LUA_SELENE: Custom config file name",
      "type": "string"
    },
    "LUA_SELENE_DISABLE_ERRORS": {
      "$id": "#/properties/LUA_SELENE_DISABLE_ERRORS",
      "default": false,
      "title": "LUA_SELENE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "LUA_SELENE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/LUA_SELENE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "LUA_SELENE: Maximum number of errors allowed",
      "type": "number"
    },
    "LUA_SELENE_FILE_EXTENSIONS": {
      "$id": "#/properties/LUA_SELENE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_SELENE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "LUA_SELENE_FILE_NAMES_REGEX": {
      "$id": "#/properties/LUA_SELENE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_SELENE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "LUA_SELENE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LUA_SELENE_FILTER_REGEX_EXCLUDE",
      "title": "LUA_SELENE: Excluding Regex",
      "type": "string"
    },
    "LUA_SELENE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LUA_SELENE_FILTER_REGEX_INCLUDE",
      "title": "LUA_SELENE: Including Regex",
      "type": "string"
    },
    "LUA_SELENE_POST_COMMANDS": {
      "$id": "#/properties/LUA_SELENE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LUA_SELENE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "LUA_SELENE_PRE_COMMANDS": {
      "$id": "#/properties/LUA_SELENE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LUA_SELENE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "LUA_SELENE_RULES_PATH": {
      "$id": "#/properties/LUA_SELENE_RULES_PATH",
      "description": "LUA_SELENE: Path where to find linter configuration file",
      "title": "LUA_SELENE: Custom config file path",
      "type": "string"
    },
    "LUA_SELENE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/LUA_SELENE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling LUA_SELENE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "LUA_SELENE: Unsecured env variables",
      "type": "array"
    },
    "LUA_STYLUA_ARGUMENTS": {
      "$id": "#/properties/LUA_STYLUA_ARGUMENTS",
      "description": "LUA_STYLUA: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_STYLUA: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_STYLUA_CLI_EXECUTABLE": {
      "$id": "#/properties/LUA_STYLUA_CLI_EXECUTABLE",
      "default": [
        [
          "stylua"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_STYLUA: CLI Executable",
      "type": "array"
    },
    "LUA_STYLUA_CLI_LINT_MODE": {
      "$id": "#/properties/LUA_STYLUA_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "LUA_STYLUA: Override default cli lint mode",
      "type": "string"
    },
    "LUA_STYLUA_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/LUA_STYLUA_COMMAND_REMOVE_ARGUMENTS",
      "description": "LUA_STYLUA: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_STYLUA: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_STYLUA_CONFIG_FILE": {
      "$id": "#/properties/LUA_STYLUA_CONFIG_FILE",
      "default": "stylua.toml",
      "description": "LUA_STYLUA: User custom config file name if different from default",
      "title": "LUA_STYLUA: Custom config file name",
      "type": "string"
    },
    "LUA_STYLUA_DISABLE_ERRORS": {
      "$id": "#/properties/LUA_STYLUA_DISABLE_ERRORS",
      "default": false,
      "title": "LUA_STYLUA: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "LUA_STYLUA_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/LUA_STYLUA_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "LUA_STYLUA: Maximum number of errors allowed",
      "type": "number"
    },
    "LUA_STYLUA_FILE_EXTENSIONS": {
      "$id": "#/properties/LUA_STYLUA_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_STYLUA: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "LUA_STYLUA_FILE_NAMES_REGEX": {
      "$id": "#/properties/LUA_STYLUA_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_STYLUA: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "LUA_STYLUA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LUA_STYLUA_FILTER_REGEX_EXCLUDE",
      "title": "LUA_STYLUA: Excluding Regex",
      "type": "string"
    },
    "LUA_STYLUA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LUA_STYLUA_FILTER_REGEX_INCLUDE",
      "title": "LUA_STYLUA: Including Regex",
      "type": "string"
    },
    "LUA_STYLUA_POST_COMMANDS": {
      "$id": "#/properties/LUA_STYLUA_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LUA_STYLUA: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "LUA_STYLUA_PRE_COMMANDS": {
      "$id": "#/properties/LUA_STYLUA_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "LUA_STYLUA: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "LUA_STYLUA_RULES_PATH": {
      "$id": "#/properties/LUA_STYLUA_RULES_PATH",
      "description": "LUA_STYLUA: Path where to find linter configuration file",
      "title": "LUA_STYLUA: Custom config file path",
      "type": "string"
    },
    "LUA_STYLUA_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/LUA_STYLUA_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling LUA_STYLUA and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "LUA_STYLUA: Unsecured env variables",
      "type": "array"
    },
    "MAKEFILE_CHECKMAKE_ARGUMENTS": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_ARGUMENTS",
      "description": "MAKEFILE_CHECKMAKE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MAKEFILE_CHECKMAKE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MAKEFILE_CHECKMAKE_CLI_EXECUTABLE": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_CLI_EXECUTABLE",
      "default": [
        [
          "checkmake"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "MAKEFILE_CHECKMAKE: CLI Executable",
      "type": "array"
    },
    "MAKEFILE_CHECKMAKE_CLI_LINT_MODE": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "MAKEFILE_CHECKMAKE: Override default cli lint mode",
      "type": "string"
    },
    "MAKEFILE_CHECKMAKE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_COMMAND_REMOVE_ARGUMENTS",
      "description": "MAKEFILE_CHECKMAKE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MAKEFILE_CHECKMAKE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MAKEFILE_CHECKMAKE_CONFIG_FILE": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_CONFIG_FILE",
      "default": ".checkmake.ini",
      "description": "MAKEFILE_CHECKMAKE: User custom config file name if different from default",
      "title": "MAKEFILE_CHECKMAKE: Custom config file name",
      "type": "string"
    },
    "MAKEFILE_CHECKMAKE_DISABLE_ERRORS": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_DISABLE_ERRORS",
      "default": false,
      "title": "MAKEFILE_CHECKMAKE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "MAKEFILE_CHECKMAKE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "MAKEFILE_CHECKMAKE: Maximum number of errors allowed",
      "type": "number"
    },
    "MAKEFILE_CHECKMAKE_FILE_EXTENSIONS": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MAKEFILE_CHECKMAKE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MAKEFILE_CHECKMAKE_FILE_NAMES_REGEX": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MAKEFILE_CHECKMAKE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MAKEFILE_CHECKMAKE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_FILTER_REGEX_EXCLUDE",
      "title": "MAKEFILE_CHECKMAKE: Excluding Regex",
      "type": "string"
    },
    "MAKEFILE_CHECKMAKE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_FILTER_REGEX_INCLUDE",
      "title": "MAKEFILE_CHECKMAKE: Including Regex",
      "type": "string"
    },
    "MAKEFILE_CHECKMAKE_POST_COMMANDS": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MAKEFILE_CHECKMAKE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "MAKEFILE_CHECKMAKE_PRE_COMMANDS": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MAKEFILE_CHECKMAKE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "MAKEFILE_CHECKMAKE_RULES_PATH": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_RULES_PATH",
      "description": "MAKEFILE_CHECKMAKE: Path where to find linter configuration file",
      "title": "MAKEFILE_CHECKMAKE: Custom config file path",
      "type": "string"
    },
    "MAKEFILE_CHECKMAKE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/MAKEFILE_CHECKMAKE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling MAKEFILE_CHECKMAKE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "MAKEFILE_CHECKMAKE: Unsecured env variables",
      "type": "array"
    },
    "MAKEFILE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MAKEFILE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for MAKEFILE descriptor",
      "type": "string"
    },
    "MAKEFILE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MAKEFILE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for MAKEFILE descriptor",
      "type": "string"
    },
    "MAKEFILE_POST_COMMANDS": {
      "$id": "#/properties/MAKEFILE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for MAKEFILE descriptor",
      "type": "array"
    },
    "MAKEFILE_PRE_COMMANDS": {
      "$id": "#/properties/MAKEFILE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for MAKEFILE descriptor",
      "type": "array"
    },
    "MARKDOWN_DEFAULT_STYLE": {
      "$id": "#/properties/MARKDOWN_DEFAULT_STYLE",
      "description": "Style of markdown formatting to apply",
      "enum": [
        "markdownlint",
        "remark-lint"
      ],
      "title": "Markdown default formatting style",
      "type": "string"
    },
    "MARKDOWN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for MARKDOWN descriptor",
      "type": "string"
    },
    "MARKDOWN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for MARKDOWN descriptor",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWNLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWNLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_CLI_EXECUTABLE",
      "default": [
        [
          "markdownlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: CLI Executable",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_CLI_LINT_MODE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "MARKDOWN_MARKDOWNLINT: Override default cli lint mode",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWNLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWNLINT_CONFIG_FILE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_CONFIG_FILE",
      "default": ".markdownlint.json",
      "description": "MARKDOWN_MARKDOWNLINT: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWNLINT: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWNLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "MARKDOWN_MARKDOWNLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_FILE_NAME": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILE_NAME",
      "default": ".markdownlint.json",
      "description": "MARKDOWN_MARKDOWNLINT: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWNLINT: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWNLINT: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWNLINT: Including Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_POST_COMMANDS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_PRE_COMMANDS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_RULES_PATH": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_RULES_PATH",
      "description": "MARKDOWN_MARKDOWNLINT: Path where to find linter configuration file",
      "title": "MARKDOWN_MARKDOWNLINT: Custom config file path",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling MARKDOWN_MARKDOWNLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Unsecured env variables",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_CLI_EXECUTABLE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_CLI_EXECUTABLE",
      "default": [
        [
          "markdown-link-check"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: CLI Executable",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_CLI_LINT_MODE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Override default cli lint mode",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_COMMAND_REMOVE_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE",
      "default": ".markdown-link-check.json",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Maximum number of errors allowed",
      "type": "number"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAME": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAME",
      "default": ".markdown-link-check.json",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Including Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_POST_COMMANDS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_PRE_COMMANDS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: Path where to find linter configuration file",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom config file path",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling MARKDOWN_MARKDOWN_LINK_CHECK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Unsecured env variables",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_EXECUTABLE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_EXECUTABLE",
      "default": [
        [
          "markdown-table-formatter"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: CLI Executable",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_LINT_MODE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Override default cli lint mode",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_COMMAND_REMOVE_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Maximum number of errors allowed",
      "type": "number"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Including Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_POST_COMMANDS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_PRE_COMMANDS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling MARKDOWN_MARKDOWN_TABLE_FORMATTER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Unsecured env variables",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Custom arguments",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Linter does not make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Including Regex",
      "type": "string"
    },
    "MARKDOWN_POST_COMMANDS": {
      "$id": "#/properties/MARKDOWN_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for MARKDOWN descriptor",
      "type": "array"
    },
    "MARKDOWN_PRE_COMMANDS": {
      "$id": "#/properties/MARKDOWN_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for MARKDOWN descriptor",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_ARGUMENTS",
      "description": "MARKDOWN_REMARK_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_REMARK_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "remark"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: CLI Executable",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "MARKDOWN_REMARK_LINT: Override default cli lint mode",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "MARKDOWN_REMARK_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_REMARK_LINT_CONFIG_FILE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_CONFIG_FILE",
      "default": ".remarkrc",
      "description": "MARKDOWN_REMARK_LINT: User custom config file name if different from default",
      "title": "MARKDOWN_REMARK_LINT: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_REMARK_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_REMARK_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "MARKDOWN_REMARK_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "MARKDOWN_REMARK_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_REMARK_LINT: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_REMARK_LINT: Including Regex",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_POST_COMMANDS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_REMARK_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_PRE_COMMANDS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "MARKDOWN_REMARK_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_RULES_PATH": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_RULES_PATH",
      "description": "MARKDOWN_REMARK_LINT: Path where to find linter configuration file",
      "title": "MARKDOWN_REMARK_LINT: Custom config file path",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling MARKDOWN_REMARK_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Unsecured env variables",
      "type": "array"
    },
    "MARKDOWN_SUMMARY_REPORTER": {
      "$id": "#/properties/MARKDOWN_SUMMARY_REPORTER",
      "default": false,
      "description": "Generate SUMMARY reports that can be used to display issues directly in PR comment",
      "title": "Activate SUMMARY reporter",
      "type": "boolean"
    },
    "MARKDOWN_SUMMARY_REPORTER_FILE_NAME": {
      "$id": "#/properties/MARKDOWN_SUMMARY_REPORTER_FILE_NAME",
      "default": "megalinter-summary.log",
      "description": "Override SUMMARY output file name",
      "title": "SUMMARY report file name",
      "type": "string"
    },
    "MEGALINTER_FILES_TO_LINT": {
      "$id": "#/properties/MEGALINTER_FILES_TO_LINT",
      "description": "Comma-separated list of files to analyze. Using this variable will bypass other file listing methods",
      "examples:": [
        [
          "myfile1.js",
          "path/to/myfile2.js"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "List of files to analyze",
      "type": "array"
    },
    "MULTI_STATUS": {
      "$id": "#/properties/MULTI_STATUS",
      "default": true,
      "description": "(DEPRECATED, use GITHUB_STATUS_REPORTER) Posts a status on the pull request for each processed linter",
      "title": "(DEPRECATED) Activate GitHub Status reporter",
      "type": "boolean"
    },
    "OPENAPI_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/OPENAPI_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for OPENAPI descriptor",
      "type": "string"
    },
    "OPENAPI_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/OPENAPI_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for OPENAPI descriptor",
      "type": "string"
    },
    "OPENAPI_POST_COMMANDS": {
      "$id": "#/properties/OPENAPI_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for OPENAPI descriptor",
      "type": "array"
    },
    "OPENAPI_PRE_COMMANDS": {
      "$id": "#/properties/OPENAPI_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for OPENAPI descriptor",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_ARGUMENTS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_ARGUMENTS",
      "description": "OPENAPI_SPECTRAL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "OPENAPI_SPECTRAL_CLI_EXECUTABLE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_CLI_EXECUTABLE",
      "default": [
        [
          "spectral"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: CLI Executable",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_CLI_LINT_MODE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "(deprecated) OPENAPI_SPECTRAL: Override default cli lint mode",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_COMMAND_REMOVE_ARGUMENTS",
      "description": "OPENAPI_SPECTRAL: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "OPENAPI_SPECTRAL_CONFIG_FILE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_CONFIG_FILE",
      "default": ".openapirc.yml",
      "description": "OPENAPI_SPECTRAL: User custom config file name if different from default",
      "title": "(deprecated) OPENAPI_SPECTRAL: Custom config file name",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_DISABLE_ERRORS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_DISABLE_ERRORS",
      "default": false,
      "title": "(deprecated) OPENAPI_SPECTRAL: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "OPENAPI_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/OPENAPI_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(deprecated) OPENAPI_SPECTRAL: Maximum number of errors allowed",
      "type": "number"
    },
    "OPENAPI_SPECTRAL_FILE_EXTENSIONS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_FILE_NAME": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILE_NAME",
      "default": ".openapirc.yml",
      "description": "OPENAPI_SPECTRAL: User custom config file name if different from default",
      "title": "OPENAPI_SPECTRAL: Custom config file name",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_FILE_NAMES_REGEX": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE",
      "title": "(deprecated) OPENAPI_SPECTRAL: Excluding Regex",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE",
      "title": "(deprecated) OPENAPI_SPECTRAL: Including Regex",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_POST_COMMANDS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_PRE_COMMANDS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_RULES_PATH": {
      "$id": "#/properties/OPENAPI_SPECTRAL_RULES_PATH",
      "description": "OPENAPI_SPECTRAL: Path where to find linter configuration file",
      "title": "(deprecated) OPENAPI_SPECTRAL: Custom config file path",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/OPENAPI_SPECTRAL_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling OPENAPI_SPECTRAL and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "(deprecated) OPENAPI_SPECTRAL: Unsecured env variables",
      "type": "array"
    },
    "OUTPUT_DETAIL": {
      "$id": "#/properties/OUTPUT_DETAIL",
      "description": "(DEPRECATED) Output detail for text reporter: only error files (simple) or all files (detailed)",
      "enum": [
        "simple",
        "detailed"
      ],
      "title": "Output detail (DEPRECATED, use reporters variables instead)",
      "type": "string"
    },
    "OUTPUT_FORMAT": {
      "$id": "#/properties/OUTPUT_FORMAT",
      "description": "(DEPRECATED) Output format: text or tap",
      "enum": [
        "text",
        "tap"
      ],
      "title": "Output format (DEPRECATED, use reporters variables instead)",
      "type": "string"
    },
    "PARALLEL": {
      "$id": "#/properties/PARALLEL",
      "default": true,
      "description": "Process linters in parallel to improve overall MegaLinter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files",
      "title": "Parallel processing",
      "type": "boolean"
    },
    "PARALLEL_PROCESS_NUMBER": {
      "$id": "#/properties/PARALLEL_PROCESS_NUMBER",
      "description": "All available cores are used by default. If there are too many, you need to decrease the number of used cores in order to enhance performances",
      "examples": [
        4
      ],
      "title": "Parallel process number",
      "type": "number"
    },
    "PERL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PERL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PERL descriptor",
      "type": "string"
    },
    "PERL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PERL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PERL descriptor",
      "type": "string"
    },
    "PERL_PERLCRITIC_ARGUMENTS": {
      "$id": "#/properties/PERL_PERLCRITIC_ARGUMENTS",
      "description": "PERL_PERLCRITIC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PERL_PERLCRITIC_CLI_EXECUTABLE": {
      "$id": "#/properties/PERL_PERLCRITIC_CLI_EXECUTABLE",
      "default": [
        [
          "perlcritic"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: CLI Executable",
      "type": "array"
    },
    "PERL_PERLCRITIC_CLI_LINT_MODE": {
      "$id": "#/properties/PERL_PERLCRITIC_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "PERL_PERLCRITIC: Override default cli lint mode",
      "type": "string"
    },
    "PERL_PERLCRITIC_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PERL_PERLCRITIC_COMMAND_REMOVE_ARGUMENTS",
      "description": "PERL_PERLCRITIC: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PERL_PERLCRITIC_DISABLE_ERRORS": {
      "$id": "#/properties/PERL_PERLCRITIC_DISABLE_ERRORS",
      "default": false,
      "title": "PERL_PERLCRITIC: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PERL_PERLCRITIC_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PERL_PERLCRITIC_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PERL_PERLCRITIC: Maximum number of errors allowed",
      "type": "number"
    },
    "PERL_PERLCRITIC_FILE_EXTENSIONS": {
      "$id": "#/properties/PERL_PERLCRITIC_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PERL_PERLCRITIC_FILE_NAMES_REGEX": {
      "$id": "#/properties/PERL_PERLCRITIC_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE",
      "title": "PERL_PERLCRITIC: Excluding Regex",
      "type": "string"
    },
    "PERL_PERLCRITIC_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PERL_PERLCRITIC_FILTER_REGEX_INCLUDE",
      "title": "PERL_PERLCRITIC: Including Regex",
      "type": "string"
    },
    "PERL_PERLCRITIC_POST_COMMANDS": {
      "$id": "#/properties/PERL_PERLCRITIC_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PERL_PERLCRITIC: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PERL_PERLCRITIC_PRE_COMMANDS": {
      "$id": "#/properties/PERL_PERLCRITIC_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PERL_PERLCRITIC: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PERL_PERLCRITIC_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PERL_PERLCRITIC_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PERL_PERLCRITIC and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Unsecured env variables",
      "type": "array"
    },
    "PERL_POST_COMMANDS": {
      "$id": "#/properties/PERL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for PERL descriptor",
      "type": "array"
    },
    "PERL_PRE_COMMANDS": {
      "$id": "#/properties/PERL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for PERL descriptor",
      "type": "array"
    },
    "PHP_BUILTIN_ARGUMENTS": {
      "$id": "#/properties/PHP_BUILTIN_ARGUMENTS",
      "description": "PHP_BUILTIN: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) PHP_BUILTIN: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_BUILTIN_CLI_EXECUTABLE": {
      "$id": "#/properties/PHP_BUILTIN_CLI_EXECUTABLE",
      "title": "(removed) PHP_BUILTIN: Override default CLI executable for linting request",
      "type": "string"
    },
    "PHP_BUILTIN_CLI_LINT_MODE": {
      "$id": "#/properties/PHP_BUILTIN_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "(removed) PHP_BUILTIN: Override default cli lint mode",
      "type": "string"
    },
    "PHP_BUILTIN_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_BUILTIN_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) PHP_BUILTIN: Linter does not make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_BUILTIN_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PHP_BUILTIN_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) PHP_BUILTIN: Maximum number of errors allowed",
      "type": "number"
    },
    "PHP_BUILTIN_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_BUILTIN_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) PHP_BUILTIN: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_BUILTIN_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_BUILTIN_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) PHP_BUILTIN: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_BUILTIN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_BUILTIN_FILTER_REGEX_EXCLUDE",
      "title": "(removed) PHP_BUILTIN: Excluding Regex",
      "type": "string"
    },
    "PHP_BUILTIN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_BUILTIN_FILTER_REGEX_INCLUDE",
      "title": "(removed) PHP_BUILTIN: Including Regex",
      "type": "string"
    },
    "PHP_BUILTIN_POST_COMMANDS": {
      "$id": "#/properties/PHP_BUILTIN_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) PHP_BUILTIN: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PHP_BUILTIN_PRE_COMMANDS": {
      "$id": "#/properties/PHP_BUILTIN_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) PHP_BUILTIN: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PHP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PHP descriptor",
      "type": "string"
    },
    "PHP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PHP descriptor",
      "type": "string"
    },
    "PHP_PHPCSFIXER_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPCSFIXER_ARGUMENTS",
      "description": "PHP_PHPCSFIXER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCSFIXER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPCSFIXER_CLI_EXECUTABLE": {
      "$id": "#/properties/PHP_PHPCSFIXER_CLI_EXECUTABLE",
      "default": [
        [
          "php-cs-fixer"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCSFIXER: CLI Executable",
      "type": "array"
    },
    "PHP_PHPCSFIXER_CLI_LINT_MODE": {
      "$id": "#/properties/PHP_PHPCSFIXER_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PHP_PHPCSFIXER: Override default cli lint mode",
      "type": "string"
    },
    "PHP_PHPCSFIXER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPCSFIXER_COMMAND_REMOVE_ARGUMENTS",
      "description": "PHP_PHPCSFIXER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCSFIXER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPCSFIXER_CONFIG_FILE": {
      "$id": "#/properties/PHP_PHPCSFIXER_CONFIG_FILE",
      "default": ".php-cs-fixer.dist.php",
      "description": "PHP_PHPCSFIXER: User custom config file name if different from default",
      "title": "PHP_PHPCSFIXER: Custom config file name",
      "type": "string"
    },
    "PHP_PHPCSFIXER_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PHPCSFIXER_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PHPCSFIXER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PHPCSFIXER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PHP_PHPCSFIXER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PHP_PHPCSFIXER: Maximum number of errors allowed",
      "type": "number"
    },
    "PHP_PHPCSFIXER_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PHPCSFIXER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCSFIXER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PHPCSFIXER_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PHPCSFIXER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCSFIXER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PHPCSFIXER_POST_COMMANDS": {
      "$id": "#/properties/PHP_PHPCSFIXER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPCSFIXER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PHP_PHPCSFIXER_PRE_COMMANDS": {
      "$id": "#/properties/PHP_PHPCSFIXER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPCSFIXER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PHP_PHPCSFIXER_RULES_PATH": {
      "$id": "#/properties/PHP_PHPCSFIXER_RULES_PATH",
      "description": "PHP_PHPCSFIXER: Path where to find linter configuration file",
      "title": "PHP_PHPCSFIXER: Custom config file path",
      "type": "string"
    },
    "PHP_PHPCSFIXER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PHP_PHPCSFIXER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PHP_PHPCSFIXER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCSFIXER: Unsecured env variables",
      "type": "array"
    },
    "PHP_PHPCS_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPCS_ARGUMENTS",
      "description": "PHP_PHPCS: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPCS_CLI_EXECUTABLE": {
      "$id": "#/properties/PHP_PHPCS_CLI_EXECUTABLE",
      "default": [
        [
          "phpcs"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: CLI Executable",
      "type": "array"
    },
    "PHP_PHPCS_CLI_LINT_MODE": {
      "$id": "#/properties/PHP_PHPCS_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PHP_PHPCS: Override default cli lint mode",
      "type": "string"
    },
    "PHP_PHPCS_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPCS_COMMAND_REMOVE_ARGUMENTS",
      "description": "PHP_PHPCS: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPCS_CONFIG_FILE": {
      "$id": "#/properties/PHP_PHPCS_CONFIG_FILE",
      "default": "phpcs.xml",
      "description": "PHP_PHPCS: User custom config file name if different from default",
      "title": "PHP_PHPCS: Custom config file name",
      "type": "string"
    },
    "PHP_PHPCS_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PHPCS_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PHPCS: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PHPCS_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PHP_PHPCS_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PHP_PHPCS: Maximum number of errors allowed",
      "type": "number"
    },
    "PHP_PHPCS_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PHPCS_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PHPCS_FILE_NAME": {
      "$id": "#/properties/PHP_PHPCS_FILE_NAME",
      "default": "phpcs.xml",
      "description": "PHP_PHPCS: User custom config file name if different from default",
      "title": "PHP_PHPCS: Custom config file name",
      "type": "string"
    },
    "PHP_PHPCS_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PHPCS_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PHPCS_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PHPCS_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PHPCS: Excluding Regex",
      "type": "string"
    },
    "PHP_PHPCS_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PHPCS_FILTER_REGEX_INCLUDE",
      "title": "PHP_PHPCS: Including Regex",
      "type": "string"
    },
    "PHP_PHPCS_POST_COMMANDS": {
      "$id": "#/properties/PHP_PHPCS_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPCS: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PHP_PHPCS_PRE_COMMANDS": {
      "$id": "#/properties/PHP_PHPCS_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPCS: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PHP_PHPCS_RULES_PATH": {
      "$id": "#/properties/PHP_PHPCS_RULES_PATH",
      "description": "PHP_PHPCS: Path where to find linter configuration file",
      "title": "PHP_PHPCS: Custom config file path",
      "type": "string"
    },
    "PHP_PHPCS_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PHP_PHPCS_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PHP_PHPCS and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Unsecured env variables",
      "type": "array"
    },
    "PHP_PHPLINT_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPLINT_ARGUMENTS",
      "description": "PHP_PHPLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/PHP_PHPLINT_CLI_EXECUTABLE",
      "default": [
        [
          "phplint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPLINT: CLI Executable",
      "type": "array"
    },
    "PHP_PHPLINT_CLI_LINT_MODE": {
      "$id": "#/properties/PHP_PHPLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PHP_PHPLINT: Override default cli lint mode",
      "type": "string"
    },
    "PHP_PHPLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PHP_PHPLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPLINT_CONFIG_FILE": {
      "$id": "#/properties/PHP_PHPLINT_CONFIG_FILE",
      "default": ".phplint.yml",
      "description": "PHP_PHPLINT: User custom config file name if different from default",
      "title": "PHP_PHPLINT: Custom config file name",
      "type": "string"
    },
    "PHP_PHPLINT_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PHPLINT_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PHPLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PHPLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PHP_PHPLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PHP_PHPLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "PHP_PHPLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PHPLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PHPLINT_FILE_NAME": {
      "$id": "#/properties/PHP_PHPLINT_FILE_NAME",
      "default": ".phplint.yml",
      "description": "PHP_PHPLINT: User custom config file name if different from default",
      "title": "PHP_PHPLINT: Custom config file name",
      "type": "string"
    },
    "PHP_PHPLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PHPLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PHPLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PHPLINT_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PHPLINT: Excluding Regex",
      "type": "string"
    },
    "PHP_PHPLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PHPLINT_FILTER_REGEX_INCLUDE",
      "title": "PHP_PHPLINT: Including Regex",
      "type": "string"
    },
    "PHP_PHPLINT_POST_COMMANDS": {
      "$id": "#/properties/PHP_PHPLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PHP_PHPLINT_PRE_COMMANDS": {
      "$id": "#/properties/PHP_PHPLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PHP_PHPLINT_RULES_PATH": {
      "$id": "#/properties/PHP_PHPLINT_RULES_PATH",
      "description": "PHP_PHPLINT: Path where to find linter configuration file",
      "title": "PHP_PHPLINT: Custom config file path",
      "type": "string"
    },
    "PHP_PHPLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PHP_PHPLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PHP_PHPLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPLINT: Unsecured env variables",
      "type": "array"
    },
    "PHP_PHPSTAN_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPSTAN_ARGUMENTS",
      "description": "PHP_PHPSTAN: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPSTAN_CLI_EXECUTABLE": {
      "$id": "#/properties/PHP_PHPSTAN_CLI_EXECUTABLE",
      "default": [
        [
          "phpstan"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: CLI Executable",
      "type": "array"
    },
    "PHP_PHPSTAN_CLI_LINT_MODE": {
      "$id": "#/properties/PHP_PHPSTAN_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PHP_PHPSTAN: Override default cli lint mode",
      "type": "string"
    },
    "PHP_PHPSTAN_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPSTAN_COMMAND_REMOVE_ARGUMENTS",
      "description": "PHP_PHPSTAN: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPSTAN_CONFIG_FILE": {
      "$id": "#/properties/PHP_PHPSTAN_CONFIG_FILE",
      "default": "phpstan.neon.dist",
      "description": "PHP_PHPSTAN: User custom config file name if different from default",
      "title": "PHP_PHPSTAN: Custom config file name",
      "type": "string"
    },
    "PHP_PHPSTAN_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PHPSTAN_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PHPSTAN: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PHPSTAN_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PHP_PHPSTAN_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PHP_PHPSTAN: Maximum number of errors allowed",
      "type": "number"
    },
    "PHP_PHPSTAN_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PHPSTAN_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PHPSTAN_FILE_NAME": {
      "$id": "#/properties/PHP_PHPSTAN_FILE_NAME",
      "default": "phpstan.neon",
      "description": "PHP_PHPSTAN: User custom config file name if different from default",
      "title": "PHP_PHPSTAN: Custom config file name",
      "type": "string"
    },
    "PHP_PHPSTAN_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PHPSTAN_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PHPSTAN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PHPSTAN_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PHPSTAN: Excluding Regex",
      "type": "string"
    },
    "PHP_PHPSTAN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PHPSTAN_FILTER_REGEX_INCLUDE",
      "title": "PHP_PHPSTAN: Including Regex",
      "type": "string"
    },
    "PHP_PHPSTAN_POST_COMMANDS": {
      "$id": "#/properties/PHP_PHPSTAN_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPSTAN: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PHP_PHPSTAN_PRE_COMMANDS": {
      "$id": "#/properties/PHP_PHPSTAN_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PHPSTAN: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PHP_PHPSTAN_RULES_PATH": {
      "$id": "#/properties/PHP_PHPSTAN_RULES_PATH",
      "description": "PHP_PHPSTAN: Path where to find linter configuration file",
      "title": "PHP_PHPSTAN: Custom config file path",
      "type": "string"
    },
    "PHP_PHPSTAN_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PHP_PHPSTAN_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PHP_PHPSTAN and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Unsecured env variables",
      "type": "array"
    },
    "PHP_POST_COMMANDS": {
      "$id": "#/properties/PHP_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for PHP descriptor",
      "type": "array"
    },
    "PHP_PRE_COMMANDS": {
      "$id": "#/properties/PHP_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for PHP descriptor",
      "type": "array"
    },
    "PHP_PSALM_ARGUMENTS": {
      "$id": "#/properties/PHP_PSALM_ARGUMENTS",
      "description": "PHP_PSALM: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PSALM_CLI_EXECUTABLE": {
      "$id": "#/properties/PHP_PSALM_CLI_EXECUTABLE",
      "default": [
        [
          "psalm"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: CLI Executable",
      "type": "array"
    },
    "PHP_PSALM_CLI_LINT_MODE": {
      "$id": "#/properties/PHP_PSALM_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PHP_PSALM: Override default cli lint mode",
      "type": "string"
    },
    "PHP_PSALM_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PHP_PSALM_COMMAND_REMOVE_ARGUMENTS",
      "description": "PHP_PSALM: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PSALM_CONFIG_FILE": {
      "$id": "#/properties/PHP_PSALM_CONFIG_FILE",
      "default": "psalm.xml",
      "description": "PHP_PSALM: User custom config file name if different from default",
      "title": "PHP_PSALM: Custom config file name",
      "type": "string"
    },
    "PHP_PSALM_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PSALM_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PSALM: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PSALM_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PHP_PSALM_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PHP_PSALM: Maximum number of errors allowed",
      "type": "number"
    },
    "PHP_PSALM_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PSALM_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PSALM_FILE_NAME": {
      "$id": "#/properties/PHP_PSALM_FILE_NAME",
      "default": "psalm.xml",
      "description": "PHP_PSALM: User custom config file name if different from default",
      "title": "PHP_PSALM: Custom config file name",
      "type": "string"
    },
    "PHP_PSALM_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PSALM_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PSALM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PSALM_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PSALM: Excluding Regex",
      "type": "string"
    },
    "PHP_PSALM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PSALM_FILTER_REGEX_INCLUDE",
      "title": "PHP_PSALM: Including Regex",
      "type": "string"
    },
    "PHP_PSALM_POST_COMMANDS": {
      "$id": "#/properties/PHP_PSALM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PSALM: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PHP_PSALM_PRE_COMMANDS": {
      "$id": "#/properties/PHP_PSALM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PHP_PSALM: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PHP_PSALM_RULES_PATH": {
      "$id": "#/properties/PHP_PSALM_RULES_PATH",
      "description": "PHP_PSALM: Path where to find linter configuration file",
      "title": "PHP_PSALM: Custom config file path",
      "type": "string"
    },
    "PHP_PSALM_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PHP_PSALM_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PHP_PSALM and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Unsecured env variables",
      "type": "array"
    },
    "PLUGINS": {
      "$id": "#/properties/PLUGINS",
      "description": "List of MegaLinter plugins. URL must follow format https://**/mega-linter-plugin-**/**.mega-linter-descriptor.yml",
      "examples": [
        [
          "https://raw.githubusercontent.com/cookiejar/megalinter-plugin-cookiejar/master/cookietemplate.mega-linter-descriptor.yml"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "List of plugins loaded at runtime",
      "type": "array"
    },
    "POST_COMMANDS": {
      "$id": "#/properties/POST_COMMANDS",
      "default": [],
      "description": "Custom bash commands to run after linters",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post run commands",
      "type": "array"
    },
    "POST_GITHUB_COMMENT": {
      "$id": "#/properties/POST_GITHUB_COMMENT",
      "default": true,
      "description": "(DEPRECATED, use GITHUB_COMMENT_REPORTER) Posts MegaLinter results summary in the comments of the related pull request (if existing)",
      "title": "(DEPRECATED) Activate GitHub PR Comments reporter",
      "type": "boolean"
    },
    "POST_GITLAB_COMMENT": {
      "$id": "#/properties/POST_GITLAB_COMMENT",
      "default": true,
      "description": "(DEPRECATED, use GITHUB_COMMENT_REPORTER) Posts MegaLinter results summary in the comments of the related merge request (if existing)",
      "title": "(DEPRECATED) Activate Gitlab MR Comments reporter",
      "type": "boolean"
    },
    "POWERSHELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/POWERSHELL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for POWERSHELL descriptor",
      "type": "string"
    },
    "POWERSHELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/POWERSHELL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for POWERSHELL descriptor",
      "type": "string"
    },
    "POWERSHELL_POST_COMMANDS": {
      "$id": "#/properties/POWERSHELL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for POWERSHELL descriptor",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_ARGUMENTS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_ARGUMENTS",
      "description": "POWERSHELL_POWERSHELL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "POWERSHELL_POWERSHELL_CLI_EXECUTABLE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_CLI_EXECUTABLE",
      "default": [
        [
          "pwsh"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: CLI Executable",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_CLI_LINT_MODE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "POWERSHELL_POWERSHELL: Override default cli lint mode",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_COMMAND_REMOVE_ARGUMENTS",
      "description": "POWERSHELL_POWERSHELL: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "POWERSHELL_POWERSHELL_CONFIG_FILE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_CONFIG_FILE",
      "default": ".powershell-psscriptanalyzer.psd1",
      "description": "POWERSHELL_POWERSHELL: User custom config file name if different from default",
      "title": "POWERSHELL_POWERSHELL: Custom config file name",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_DISABLE_ERRORS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_DISABLE_ERRORS",
      "default": false,
      "title": "POWERSHELL_POWERSHELL: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "POWERSHELL_POWERSHELL_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "POWERSHELL_POWERSHELL: Maximum number of errors allowed",
      "type": "number"
    },
    "POWERSHELL_POWERSHELL_FILE_EXTENSIONS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FILE_NAME": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILE_NAME",
      "default": ".powershell-psscriptanalyzer.psd1",
      "description": "POWERSHELL_POWERSHELL: User custom config file name if different from default",
      "title": "POWERSHELL_POWERSHELL: Custom config file name",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FILE_NAMES_REGEX": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE",
      "title": "POWERSHELL_POWERSHELL: Excluding Regex",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE",
      "title": "POWERSHELL_POWERSHELL: Including Regex",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_ARGUMENTS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_ARGUMENTS",
      "description": "POWERSHELL_POWERSHELL_FORMATTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "POWERSHELL_POWERSHELL_FORMATTER_CLI_EXECUTABLE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_CLI_EXECUTABLE",
      "default": [
        [
          "pwsh"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: CLI Executable",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_CLI_LINT_MODE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Override default cli lint mode",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_COMMAND_REMOVE_ARGUMENTS",
      "description": "POWERSHELL_POWERSHELL_FORMATTER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "POWERSHELL_POWERSHELL_FORMATTER_CONFIG_FILE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_CONFIG_FILE",
      "default": ".powershell-formatter.psd1",
      "description": "POWERSHELL_POWERSHELL_FORMATTER: User custom config file name if different from default",
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Custom config file name",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_DISABLE_ERRORS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_DISABLE_ERRORS",
      "default": false,
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Maximum number of errors allowed",
      "type": "number"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_FILE_EXTENSIONS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_FILTER_REGEX_EXCLUDE",
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Excluding Regex",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_FILTER_REGEX_INCLUDE",
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Including Regex",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_OUTPUT_ENCODING": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_OUTPUT_ENCODING",
      "default": "utf8",
      "description": "POWERSHELL_POWERSHELL_FORMATTER: `-Encoding` to be used when writing content to the file",
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Output encoding type",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_POST_COMMANDS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_PRE_COMMANDS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_RULES_PATH": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_RULES_PATH",
      "description": "POWERSHELL_POWERSHELL_FORMATTER: Path where to find linter configuration file",
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Custom config file path",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FORMATTER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FORMATTER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling POWERSHELL_POWERSHELL_FORMATTER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL_FORMATTER: Unsecured env variables",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_POST_COMMANDS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "POWERSHELL_POWERSHELL: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_PRE_COMMANDS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "POWERSHELL_POWERSHELL: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_RULES_PATH": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_RULES_PATH",
      "description": "POWERSHELL_POWERSHELL: Path where to find linter configuration file",
      "title": "POWERSHELL_POWERSHELL: Custom config file path",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling POWERSHELL_POWERSHELL and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Unsecured env variables",
      "type": "array"
    },
    "POWERSHELL_PRE_COMMANDS": {
      "$id": "#/properties/POWERSHELL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for POWERSHELL descriptor",
      "type": "array"
    },
    "PRE_COMMANDS": {
      "$id": "#/properties/PRE_COMMANDS",
      "default": [],
      "description": "Custom bash commands to run before linters",
      "examples": [
        [
          {
            "command": "npm install java-caller",
            "continue_if_failed": false,
            "cwd": "root"
          },
          {
            "command": "echo \"pre-run command has been called\"",
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre-run commands",
      "type": "array"
    },
    "PRINT_ALL_FILES": {
      "$id": "#/properties/PRINT_ALL_FILES",
      "default": true,
      "description": "If set to false, only fixed and error files are displayed in logs",
      "title": "Print all files in console logs",
      "type": "boolean"
    },
    "PRINT_ALPACA": {
      "$id": "#/properties/PRINT_ALPACA",
      "default": true,
      "description": "Enable printing alpaca image to console output",
      "title": "Print le lama NUL (alpaca)",
      "type": "boolean"
    },
    "PROTOBUF_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PROTOBUF_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PROTOBUF descriptor",
      "type": "string"
    },
    "PROTOBUF_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PROTOBUF_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PROTOBUF descriptor",
      "type": "string"
    },
    "PROTOBUF_POST_COMMANDS": {
      "$id": "#/properties/PROTOBUF_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for PROTOBUF descriptor",
      "type": "array"
    },
    "PROTOBUF_PRE_COMMANDS": {
      "$id": "#/properties/PROTOBUF_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for PROTOBUF descriptor",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_ARGUMENTS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_ARGUMENTS",
      "description": "PROTOBUF_PROTOLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PROTOBUF_PROTOLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_CLI_EXECUTABLE",
      "default": [
        [
          "protolint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: CLI Executable",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_CLI_LINT_MODE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "PROTOBUF_PROTOLINT: Override default cli lint mode",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PROTOBUF_PROTOLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PROTOBUF_PROTOLINT_CONFIG_FILE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_CONFIG_FILE",
      "default": ".protolintrc.yml",
      "description": "PROTOBUF_PROTOLINT: User custom config file name if different from default",
      "title": "PROTOBUF_PROTOLINT: Custom config file name",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_DISABLE_ERRORS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_DISABLE_ERRORS",
      "default": false,
      "title": "PROTOBUF_PROTOLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PROTOBUF_PROTOLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PROTOBUF_PROTOLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "PROTOBUF_PROTOLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_FILE_NAME": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILE_NAME",
      "default": ".protolintrc.yml",
      "description": "PROTOBUF_PROTOLINT: User custom config file name if different from default",
      "title": "PROTOBUF_PROTOLINT: Custom config file name",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE",
      "title": "PROTOBUF_PROTOLINT: Excluding Regex",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE",
      "title": "PROTOBUF_PROTOLINT: Including Regex",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_POST_COMMANDS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PROTOBUF_PROTOLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_PRE_COMMANDS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PROTOBUF_PROTOLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_RULES_PATH": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_RULES_PATH",
      "description": "PROTOBUF_PROTOLINT: Path where to find linter configuration file",
      "title": "PROTOBUF_PROTOLINT: Custom config file path",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PROTOBUF_PROTOLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Unsecured env variables",
      "type": "array"
    },
    "PUPPET_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PUPPET_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PUPPET descriptor",
      "type": "string"
    },
    "PUPPET_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PUPPET_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PUPPET descriptor",
      "type": "string"
    },
    "PUPPET_POST_COMMANDS": {
      "$id": "#/properties/PUPPET_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for PUPPET descriptor",
      "type": "array"
    },
    "PUPPET_PRE_COMMANDS": {
      "$id": "#/properties/PUPPET_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for PUPPET descriptor",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_ARGUMENTS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_ARGUMENTS",
      "description": "PUPPET_PUPPET_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PUPPET_PUPPET_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "puppet-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: CLI Executable",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "PUPPET_PUPPET_LINT: Override default cli lint mode",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PUPPET_PUPPET_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PUPPET_PUPPET_LINT_CONFIG_FILE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_CONFIG_FILE",
      "default": ".puppet-lint.rc",
      "description": "PUPPET_PUPPET_LINT: User custom config file name if different from default",
      "title": "PUPPET_PUPPET_LINT: Custom config file name",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "PUPPET_PUPPET_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PUPPET_PUPPET_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PUPPET_PUPPET_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "PUPPET_PUPPET_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_FILE_NAME": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILE_NAME",
      "default": ".puppet-lint.rc",
      "description": "PUPPET_PUPPET_LINT: User custom config file name if different from default",
      "title": "PUPPET_PUPPET_LINT: Custom config file name",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE",
      "title": "PUPPET_PUPPET_LINT: Excluding Regex",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE",
      "title": "PUPPET_PUPPET_LINT: Including Regex",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_POST_COMMANDS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PUPPET_PUPPET_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_PRE_COMMANDS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PUPPET_PUPPET_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_RULES_PATH": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_RULES_PATH",
      "description": "PUPPET_PUPPET_LINT: Path where to find linter configuration file",
      "title": "PUPPET_PUPPET_LINT: Custom config file path",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PUPPET_PUPPET_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_BANDIT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_BANDIT_ARGUMENTS",
      "description": "PYTHON_BANDIT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BANDIT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_BANDIT_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_BANDIT_CLI_EXECUTABLE",
      "default": [
        [
          "bandit"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BANDIT: CLI Executable",
      "type": "array"
    },
    "PYTHON_BANDIT_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_BANDIT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_BANDIT: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_BANDIT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_BANDIT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_BANDIT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BANDIT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_BANDIT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_BANDIT_CONFIG_FILE",
      "default": ".bandit.yml",
      "description": "PYTHON_BANDIT: User custom config file name if different from default",
      "title": "PYTHON_BANDIT: Custom config file name",
      "type": "string"
    },
    "PYTHON_BANDIT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_BANDIT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_BANDIT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_BANDIT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_BANDIT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_BANDIT: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_BANDIT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_BANDIT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BANDIT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_BANDIT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_BANDIT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BANDIT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_BANDIT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_BANDIT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_BANDIT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_BANDIT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_BANDIT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_BANDIT: Including Regex",
      "type": "string"
    },
    "PYTHON_BANDIT_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_BANDIT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_BANDIT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_BANDIT_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_BANDIT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_BANDIT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_BANDIT_RULES_PATH": {
      "$id": "#/properties/PYTHON_BANDIT_RULES_PATH",
      "description": "PYTHON_BANDIT: Path where to find linter configuration file",
      "title": "PYTHON_BANDIT: Custom config file path",
      "type": "string"
    },
    "PYTHON_BANDIT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_BANDIT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_BANDIT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BANDIT: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_BLACK_ARGUMENTS": {
      "$id": "#/properties/PYTHON_BLACK_ARGUMENTS",
      "description": "PYTHON_BLACK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_BLACK_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_BLACK_CLI_EXECUTABLE",
      "default": [
        [
          "black"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: CLI Executable",
      "type": "array"
    },
    "PYTHON_BLACK_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_BLACK_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_BLACK: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_BLACK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_BLACK_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_BLACK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_BLACK_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_BLACK_CONFIG_FILE",
      "default": "pyproject.toml",
      "description": "PYTHON_BLACK: User custom config file name if different from default",
      "title": "PYTHON_BLACK: Custom config file name",
      "type": "string"
    },
    "PYTHON_BLACK_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_BLACK_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_BLACK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_BLACK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_BLACK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_BLACK: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_BLACK_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_BLACK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_BLACK_FILE_NAME": {
      "$id": "#/properties/PYTHON_BLACK_FILE_NAME",
      "default": ".python-black",
      "description": "PYTHON_BLACK: User custom config file name if different from default",
      "title": "PYTHON_BLACK: Custom config file name",
      "type": "string"
    },
    "PYTHON_BLACK_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_BLACK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_BLACK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_BLACK_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_BLACK: Excluding Regex",
      "type": "string"
    },
    "PYTHON_BLACK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_BLACK_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_BLACK: Including Regex",
      "type": "string"
    },
    "PYTHON_BLACK_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_BLACK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_BLACK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_BLACK_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_BLACK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_BLACK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_BLACK_RULES_PATH": {
      "$id": "#/properties/PYTHON_BLACK_RULES_PATH",
      "description": "PYTHON_BLACK: Path where to find linter configuration file",
      "title": "PYTHON_BLACK: Custom config file path",
      "type": "string"
    },
    "PYTHON_BLACK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_BLACK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_BLACK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_DEFAULT_STYLE": {
      "$id": "#/properties/PYTHON_DEFAULT_STYLE",
      "description": "Style of python formatting to apply",
      "enum": [
        "black",
        "ruff"
      ],
      "examples": [
        "black",
        "ruff"
      ],
      "title": "Python default style",
      "type": "string"
    },
    "PYTHON_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PYTHON descriptor",
      "type": "string"
    },
    "PYTHON_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PYTHON descriptor",
      "type": "string"
    },
    "PYTHON_FLAKE8_ARGUMENTS": {
      "$id": "#/properties/PYTHON_FLAKE8_ARGUMENTS",
      "description": "PYTHON_FLAKE8: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_FLAKE8_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_FLAKE8_CLI_EXECUTABLE",
      "default": [
        [
          "flake8"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: CLI Executable",
      "type": "array"
    },
    "PYTHON_FLAKE8_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_FLAKE8_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_FLAKE8: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_FLAKE8_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_FLAKE8_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_FLAKE8: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_FLAKE8_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_FLAKE8_CONFIG_FILE",
      "default": ".flake8",
      "description": "PYTHON_FLAKE8: User custom config file name if different from default",
      "title": "PYTHON_FLAKE8: Custom config file name",
      "type": "string"
    },
    "PYTHON_FLAKE8_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_FLAKE8_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_FLAKE8: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_FLAKE8_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_FLAKE8_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_FLAKE8: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_FLAKE8_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_FLAKE8_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_FLAKE8_FILE_NAME": {
      "$id": "#/properties/PYTHON_FLAKE8_FILE_NAME",
      "default": ".flake8",
      "description": "PYTHON_FLAKE8: User custom config file name if different from default",
      "title": "PYTHON_FLAKE8: Custom config file name",
      "type": "string"
    },
    "PYTHON_FLAKE8_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_FLAKE8_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_FLAKE8: Excluding Regex",
      "type": "string"
    },
    "PYTHON_FLAKE8_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_FLAKE8_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_FLAKE8: Including Regex",
      "type": "string"
    },
    "PYTHON_FLAKE8_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_FLAKE8_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_FLAKE8: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_FLAKE8_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_FLAKE8_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_FLAKE8: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_FLAKE8_RULES_PATH": {
      "$id": "#/properties/PYTHON_FLAKE8_RULES_PATH",
      "description": "PYTHON_FLAKE8: Path where to find linter configuration file",
      "title": "PYTHON_FLAKE8: Custom config file path",
      "type": "string"
    },
    "PYTHON_FLAKE8_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_FLAKE8_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_FLAKE8 and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_ISORT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_ISORT_ARGUMENTS",
      "description": "PYTHON_ISORT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_ISORT_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_ISORT_CLI_EXECUTABLE",
      "default": [
        [
          "isort"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: CLI Executable",
      "type": "array"
    },
    "PYTHON_ISORT_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_ISORT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_ISORT: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_ISORT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_ISORT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_ISORT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_ISORT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_ISORT_CONFIG_FILE",
      "default": ".isort.cfg",
      "description": "PYTHON_ISORT: User custom config file name if different from default",
      "title": "PYTHON_ISORT: Custom config file name",
      "type": "string"
    },
    "PYTHON_ISORT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_ISORT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_ISORT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_ISORT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_ISORT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_ISORT: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_ISORT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_ISORT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_ISORT_FILE_NAME": {
      "$id": "#/properties/PYTHON_ISORT_FILE_NAME",
      "default": ".isort.cfg",
      "description": "PYTHON_ISORT: User custom config file name if different from default",
      "title": "PYTHON_ISORT: Custom config file name",
      "type": "string"
    },
    "PYTHON_ISORT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_ISORT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_ISORT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_ISORT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_ISORT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_ISORT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_ISORT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_ISORT: Including Regex",
      "type": "string"
    },
    "PYTHON_ISORT_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_ISORT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_ISORT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_ISORT_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_ISORT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_ISORT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_ISORT_RULES_PATH": {
      "$id": "#/properties/PYTHON_ISORT_RULES_PATH",
      "description": "PYTHON_ISORT: Path where to find linter configuration file",
      "title": "PYTHON_ISORT: Custom config file path",
      "type": "string"
    },
    "PYTHON_ISORT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_ISORT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_ISORT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_MYPY_ARGUMENTS": {
      "$id": "#/properties/PYTHON_MYPY_ARGUMENTS",
      "description": "PYTHON_MYPY: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_MYPY: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_MYPY_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_MYPY_CLI_EXECUTABLE",
      "default": [
        [
          "mypy"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_MYPY: CLI Executable",
      "type": "array"
    },
    "PYTHON_MYPY_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_MYPY_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_MYPY: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_MYPY_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_MYPY_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_MYPY: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_MYPY: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_MYPY_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_MYPY_CONFIG_FILE",
      "default": ".mypy.ini",
      "description": "PYTHON_MYPY: User custom config file name if different from default",
      "title": "PYTHON_MYPY: Custom config file name",
      "type": "string"
    },
    "PYTHON_MYPY_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_MYPY_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_MYPY: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_MYPY_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_MYPY_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_MYPY: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_MYPY_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_MYPY_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_MYPY: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_MYPY_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_MYPY_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_MYPY: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_MYPY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_MYPY_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_MYPY: Excluding Regex",
      "type": "string"
    },
    "PYTHON_MYPY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_MYPY_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_MYPY: Including Regex",
      "type": "string"
    },
    "PYTHON_MYPY_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_MYPY_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_MYPY: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_MYPY_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_MYPY_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_MYPY: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_MYPY_RULES_PATH": {
      "$id": "#/properties/PYTHON_MYPY_RULES_PATH",
      "description": "PYTHON_MYPY: Path where to find linter configuration file",
      "title": "PYTHON_MYPY: Custom config file path",
      "type": "string"
    },
    "PYTHON_MYPY_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_MYPY_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_MYPY and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_MYPY: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for PYTHON descriptor",
      "type": "array"
    },
    "PYTHON_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for PYTHON descriptor",
      "type": "array"
    },
    "PYTHON_PYLINT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_PYLINT_ARGUMENTS",
      "description": "PYTHON_PYLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_PYLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_PYLINT_CLI_EXECUTABLE",
      "default": [
        [
          "pylint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: CLI Executable",
      "type": "array"
    },
    "PYTHON_PYLINT_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_PYLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_PYLINT: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_PYLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_PYLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_PYLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_PYLINT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_PYLINT_CONFIG_FILE",
      "default": ".pylintrc",
      "description": "PYTHON_PYLINT: User custom config file name if different from default",
      "title": "PYTHON_PYLINT: Custom config file name",
      "type": "string"
    },
    "PYTHON_PYLINT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_PYLINT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_PYLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_PYLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_PYLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_PYLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_PYLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_PYLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_PYLINT_FILE_NAME": {
      "$id": "#/properties/PYTHON_PYLINT_FILE_NAME",
      "default": ".python-lint",
      "description": "PYTHON_PYLINT: User custom config file name if different from default",
      "title": "PYTHON_PYLINT: Custom config file name",
      "type": "string"
    },
    "PYTHON_PYLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_PYLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_PYLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_PYLINT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_PYLINT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_PYLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_PYLINT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_PYLINT: Including Regex",
      "type": "string"
    },
    "PYTHON_PYLINT_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_PYLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_PYLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_PYLINT_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_PYLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_PYLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_PYLINT_RULES_PATH": {
      "$id": "#/properties/PYTHON_PYLINT_RULES_PATH",
      "description": "PYTHON_PYLINT: Path where to find linter configuration file",
      "title": "PYTHON_PYLINT: Custom config file path",
      "type": "string"
    },
    "PYTHON_PYLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_PYLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_PYLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_PYRIGHT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_PYRIGHT_ARGUMENTS",
      "description": "PYTHON_PYRIGHT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYRIGHT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_PYRIGHT_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_PYRIGHT_CLI_EXECUTABLE",
      "default": [
        [
          "pyright"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYRIGHT: CLI Executable",
      "type": "array"
    },
    "PYTHON_PYRIGHT_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_PYRIGHT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_PYRIGHT: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_PYRIGHT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_PYRIGHT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_PYRIGHT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYRIGHT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_PYRIGHT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_PYRIGHT_CONFIG_FILE",
      "default": "pyrightconfig.json",
      "description": "PYTHON_PYRIGHT: User custom config file name if different from default",
      "title": "PYTHON_PYRIGHT: Custom config file name",
      "type": "string"
    },
    "PYTHON_PYRIGHT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_PYRIGHT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_PYRIGHT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_PYRIGHT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_PYRIGHT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_PYRIGHT: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_PYRIGHT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_PYRIGHT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYRIGHT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_PYRIGHT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_PYRIGHT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYRIGHT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_PYRIGHT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_PYRIGHT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_PYRIGHT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_PYRIGHT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_PYRIGHT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_PYRIGHT: Including Regex",
      "type": "string"
    },
    "PYTHON_PYRIGHT_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_PYRIGHT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_PYRIGHT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_PYRIGHT_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_PYRIGHT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_PYRIGHT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_PYRIGHT_RULES_PATH": {
      "$id": "#/properties/PYTHON_PYRIGHT_RULES_PATH",
      "description": "PYTHON_PYRIGHT: Path where to find linter configuration file",
      "title": "PYTHON_PYRIGHT: Custom config file path",
      "type": "string"
    },
    "PYTHON_PYRIGHT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_PYRIGHT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_PYRIGHT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYRIGHT: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_RUFF_ARGUMENTS": {
      "$id": "#/properties/PYTHON_RUFF_ARGUMENTS",
      "description": "PYTHON_RUFF: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_RUFF_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_RUFF_CLI_EXECUTABLE",
      "default": [
        [
          "ruff"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF: CLI Executable",
      "type": "array"
    },
    "PYTHON_RUFF_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_RUFF_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_RUFF: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_RUFF_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_RUFF_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_RUFF: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_RUFF_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_RUFF_CONFIG_FILE",
      "default": ".ruff.toml",
      "description": "PYTHON_RUFF: User custom config file name if different from default",
      "title": "PYTHON_RUFF: Custom config file name",
      "type": "string"
    },
    "PYTHON_RUFF_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_RUFF_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_RUFF: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_RUFF_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_RUFF_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_RUFF: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_RUFF_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_RUFF_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_RUFF_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_RUFF_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_RUFF_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_RUFF_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_RUFF: Excluding Regex",
      "type": "string"
    },
    "PYTHON_RUFF_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_RUFF_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_RUFF: Including Regex",
      "type": "string"
    },
    "PYTHON_RUFF_FORMAT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_ARGUMENTS",
      "description": "PYTHON_RUFF_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_RUFF_FORMAT_CLI_EXECUTABLE": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_CLI_EXECUTABLE",
      "default": [
        [
          "ruff"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF_FORMAT: CLI Executable",
      "type": "array"
    },
    "PYTHON_RUFF_FORMAT_CLI_LINT_MODE": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "PYTHON_RUFF_FORMAT: Override default cli lint mode",
      "type": "string"
    },
    "PYTHON_RUFF_FORMAT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_COMMAND_REMOVE_ARGUMENTS",
      "description": "PYTHON_RUFF_FORMAT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF_FORMAT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_RUFF_FORMAT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_CONFIG_FILE",
      "default": ".ruff.toml",
      "description": "PYTHON_RUFF_FORMAT: User custom config file name if different from default",
      "title": "PYTHON_RUFF_FORMAT: Custom config file name",
      "type": "string"
    },
    "PYTHON_RUFF_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_RUFF_FORMAT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_RUFF_FORMAT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "PYTHON_RUFF_FORMAT: Maximum number of errors allowed",
      "type": "number"
    },
    "PYTHON_RUFF_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_RUFF_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_RUFF_FORMAT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_RUFF_FORMAT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_RUFF_FORMAT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_RUFF_FORMAT: Including Regex",
      "type": "string"
    },
    "PYTHON_RUFF_FORMAT_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_RUFF_FORMAT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_RUFF_FORMAT_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_RUFF_FORMAT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_RUFF_FORMAT_RULES_PATH": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_RULES_PATH",
      "description": "PYTHON_RUFF_FORMAT: Path where to find linter configuration file",
      "title": "PYTHON_RUFF_FORMAT: Custom config file path",
      "type": "string"
    },
    "PYTHON_RUFF_FORMAT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_RUFF_FORMAT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_RUFF_FORMAT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF_FORMAT: Unsecured env variables",
      "type": "array"
    },
    "PYTHON_RUFF_POST_COMMANDS": {
      "$id": "#/properties/PYTHON_RUFF_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_RUFF: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "PYTHON_RUFF_PRE_COMMANDS": {
      "$id": "#/properties/PYTHON_RUFF_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "PYTHON_RUFF: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "PYTHON_RUFF_RULES_PATH": {
      "$id": "#/properties/PYTHON_RUFF_RULES_PATH",
      "description": "PYTHON_RUFF: Path where to find linter configuration file",
      "title": "PYTHON_RUFF: Custom config file path",
      "type": "string"
    },
    "PYTHON_RUFF_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/PYTHON_RUFF_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling PYTHON_RUFF and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "PYTHON_RUFF: Unsecured env variables",
      "type": "array"
    },
    "RAKU_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RAKU_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RAKU descriptor",
      "type": "string"
    },
    "RAKU_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RAKU_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RAKU descriptor",
      "type": "string"
    },
    "RAKU_POST_COMMANDS": {
      "$id": "#/properties/RAKU_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for RAKU descriptor",
      "type": "array"
    },
    "RAKU_PRE_COMMANDS": {
      "$id": "#/properties/RAKU_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for RAKU descriptor",
      "type": "array"
    },
    "RAKU_RAKU_ARGUMENTS": {
      "$id": "#/properties/RAKU_RAKU_ARGUMENTS",
      "description": "RAKU_RAKU: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RAKU_RAKU_CLI_EXECUTABLE": {
      "$id": "#/properties/RAKU_RAKU_CLI_EXECUTABLE",
      "default": [
        [
          "raku"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: CLI Executable",
      "type": "array"
    },
    "RAKU_RAKU_CLI_LINT_MODE": {
      "$id": "#/properties/RAKU_RAKU_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "RAKU_RAKU: Override default cli lint mode",
      "type": "string"
    },
    "RAKU_RAKU_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/RAKU_RAKU_COMMAND_REMOVE_ARGUMENTS",
      "description": "RAKU_RAKU: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RAKU_RAKU_CONFIG_FILE": {
      "$id": "#/properties/RAKU_RAKU_CONFIG_FILE",
      "default": "META6.json",
      "description": "RAKU_RAKU: User custom config file name if different from default",
      "title": "RAKU_RAKU: Custom config file name",
      "type": "string"
    },
    "RAKU_RAKU_DISABLE_ERRORS": {
      "$id": "#/properties/RAKU_RAKU_DISABLE_ERRORS",
      "default": false,
      "title": "RAKU_RAKU: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "RAKU_RAKU_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/RAKU_RAKU_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "RAKU_RAKU: Maximum number of errors allowed",
      "type": "number"
    },
    "RAKU_RAKU_FILE_EXTENSIONS": {
      "$id": "#/properties/RAKU_RAKU_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RAKU_RAKU_FILE_NAME": {
      "$id": "#/properties/RAKU_RAKU_FILE_NAME",
      "default": "META6.json",
      "description": "RAKU_RAKU: User custom config file name if different from default",
      "title": "RAKU_RAKU: Custom config file name",
      "type": "string"
    },
    "RAKU_RAKU_FILE_NAMES_REGEX": {
      "$id": "#/properties/RAKU_RAKU_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RAKU_RAKU_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RAKU_RAKU_FILTER_REGEX_EXCLUDE",
      "title": "RAKU_RAKU: Excluding Regex",
      "type": "string"
    },
    "RAKU_RAKU_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RAKU_RAKU_FILTER_REGEX_INCLUDE",
      "title": "RAKU_RAKU: Including Regex",
      "type": "string"
    },
    "RAKU_RAKU_POST_COMMANDS": {
      "$id": "#/properties/RAKU_RAKU_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RAKU_RAKU: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "RAKU_RAKU_PRE_COMMANDS": {
      "$id": "#/properties/RAKU_RAKU_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RAKU_RAKU: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "RAKU_RAKU_RULES_PATH": {
      "$id": "#/properties/RAKU_RAKU_RULES_PATH",
      "description": "RAKU_RAKU: Path where to find linter configuration file",
      "title": "RAKU_RAKU: Custom config file path",
      "type": "string"
    },
    "RAKU_RAKU_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/RAKU_RAKU_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling RAKU_RAKU and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Unsecured env variables",
      "type": "array"
    },
    "REPORTERS_MARKDOWN_TYPE": {
      "$id": "#/properties/REPORTERS_MARKDOWN_TYPE",
      "default": "advanced",
      "description": "Define simple if you do not to have external images in PR/MR comments",
      "enum": [
        "simple",
        "advanced"
      ],
      "title": "Reporters Markdown type",
      "type": "string"
    },
    "REPORT_OUTPUT_FOLDER": {
      "$id": "#/properties/REPORT_OUTPUT_FOLDER",
      "default": "report",
      "description": "The location where the output reporting will be generated to",
      "title": "Output folder",
      "type": "string"
    },
    "REPOSITORY_CHECKOV_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_CHECKOV_ARGUMENTS",
      "description": "REPOSITORY_CHECKOV: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_CHECKOV: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_CHECKOV_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_CHECKOV_CLI_EXECUTABLE",
      "default": [
        [
          "checkov"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_CHECKOV: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_CHECKOV_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_CHECKOV_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_CHECKOV: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_CHECKOV_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_CHECKOV_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_CHECKOV: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_CHECKOV: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_CHECKOV_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_CHECKOV_CONFIG_FILE",
      "default": ".checkov.yml",
      "description": "REPOSITORY_CHECKOV: User custom config file name if different from default",
      "title": "REPOSITORY_CHECKOV: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_CHECKOV_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_CHECKOV_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_CHECKOV: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_CHECKOV: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_CHECKOV_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_CHECKOV_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_CHECKOV: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_CHECKOV_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_CHECKOV_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_CHECKOV: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_CHECKOV_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_CHECKOV_RULES_PATH",
      "description": "REPOSITORY_CHECKOV: Path where to find linter configuration file",
      "title": "REPOSITORY_CHECKOV: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_CHECKOV_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_CHECKOV_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_CHECKOV and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_CHECKOV: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_DEVSKIM_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_ARGUMENTS",
      "description": "REPOSITORY_DEVSKIM: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DEVSKIM: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_DEVSKIM_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_CLI_EXECUTABLE",
      "default": [
        [
          "devskim"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DEVSKIM: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_DEVSKIM_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_DEVSKIM: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_DEVSKIM_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_DEVSKIM: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DEVSKIM: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_DEVSKIM_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_CONFIG_FILE",
      "default": ".devskim.json",
      "description": "REPOSITORY_DEVSKIM: User custom config file name if different from default",
      "title": "REPOSITORY_DEVSKIM: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_DEVSKIM_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_DEVSKIM: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_DEVSKIM_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_DEVSKIM: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_DEVSKIM_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_DEVSKIM: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_DEVSKIM_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_DEVSKIM: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_DEVSKIM_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_RULES_PATH",
      "description": "REPOSITORY_DEVSKIM: Path where to find linter configuration file",
      "title": "REPOSITORY_DEVSKIM: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_DEVSKIM_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_DEVSKIM_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_DEVSKIM and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DEVSKIM: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_DUSTILOCK_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_ARGUMENTS",
      "description": "REPOSITORY_DUSTILOCK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DUSTILOCK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_DUSTILOCK_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_CLI_EXECUTABLE",
      "default": [
        [
          "dustilock"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DUSTILOCK: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_DUSTILOCK_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_DUSTILOCK: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_DUSTILOCK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_DUSTILOCK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DUSTILOCK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_DUSTILOCK_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_DUSTILOCK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_DUSTILOCK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_DUSTILOCK: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_DUSTILOCK_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_DUSTILOCK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_DUSTILOCK_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_DUSTILOCK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_DUSTILOCK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_DUSTILOCK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_DUSTILOCK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_DUSTILOCK: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/REPOSITORY_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for REPOSITORY descriptor",
      "type": "string"
    },
    "REPOSITORY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/REPOSITORY_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for REPOSITORY descriptor",
      "type": "string"
    },
    "REPOSITORY_GITLEAKS_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_ARGUMENTS",
      "description": "REPOSITORY_GITLEAKS: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GITLEAKS: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GITLEAKS_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_CLI_EXECUTABLE",
      "default": [
        [
          "gitleaks"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GITLEAKS: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_GITLEAKS_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_GITLEAKS: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_GITLEAKS_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_GITLEAKS: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GITLEAKS: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GITLEAKS_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_CONFIG_FILE",
      "default": ".gitleaks.toml",
      "description": "REPOSITORY_GITLEAKS: User custom config file name if different from default",
      "title": "REPOSITORY_GITLEAKS: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_GITLEAKS_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_GITLEAKS: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_GITLEAKS_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_GITLEAKS: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_GITLEAKS_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_GITLEAKS: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_GITLEAKS_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_GITLEAKS: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_GITLEAKS_PR_COMMITS_SCAN": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_PR_COMMITS_SCAN",
      "default": false,
      "title": "REPOSITORY_GITLEAKS: Scan only commits in the current Pull Request/Merge Request",
      "type": "boolean"
    },
    "REPOSITORY_GITLEAKS_PR_SOURCE_SHA": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_PR_SOURCE_SHA",
      "default": "",
      "title": "REPOSITORY_GITLEAKS: Source commit SHA of the Pull Request/Merge Request",
      "type": "string"
    },
    "REPOSITORY_GITLEAKS_PR_TARGET_SHA": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_PR_TARGET_SHA",
      "default": "",
      "title": "REPOSITORY_GITLEAKS: Target commit SHA of the Pull Request/Merge Request",
      "type": "string"
    },
    "REPOSITORY_GITLEAKS_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_RULES_PATH",
      "description": "REPOSITORY_GITLEAKS: Path where to find linter configuration file",
      "title": "REPOSITORY_GITLEAKS: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_GITLEAKS_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_GITLEAKS_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_GITLEAKS and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GITLEAKS: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_GIT_DIFF_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_ARGUMENTS",
      "description": "REPOSITORY_GIT_DIFF: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GIT_DIFF: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GIT_DIFF_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_CLI_EXECUTABLE",
      "default": [
        [
          "git"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GIT_DIFF: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_GIT_DIFF_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_GIT_DIFF: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_GIT_DIFF_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_GIT_DIFF: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GIT_DIFF: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GIT_DIFF_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_GIT_DIFF: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_GIT_DIFF: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_GIT_DIFF_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_GIT_DIFF: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_GIT_DIFF_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_GIT_DIFF: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_GIT_DIFF_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_GIT_DIFF_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_GIT_DIFF and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GIT_DIFF: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_GOODCHECK_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_ARGUMENTS",
      "description": "REPOSITORY_GOODCHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) REPOSITORY_GOODCHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GOODCHECK_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_CLI_EXECUTABLE",
      "default": [
        [
          "goodcheck"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) REPOSITORY_GOODCHECK: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_GOODCHECK_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_CONFIG_FILE",
      "default": "goodcheck.yml",
      "description": "REPOSITORY_GOODCHECK: User custom config file name if different from default",
      "title": "(removed) REPOSITORY_GOODCHECK: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_GOODCHECK_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) REPOSITORY_GOODCHECK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_GOODCHECK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) REPOSITORY_GOODCHECK: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_GOODCHECK_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) REPOSITORY_GOODCHECK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_GOODCHECK_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) REPOSITORY_GOODCHECK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_GOODCHECK_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_GOODCHECK_RULES_PATH",
      "description": "REPOSITORY_GOODCHECK: Path where to find linter configuration file",
      "title": "(removed) REPOSITORY_GOODCHECK: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_GRYPE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GRYPE_ARGUMENTS",
      "description": "REPOSITORY_GRYPE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GRYPE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GRYPE_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_GRYPE_CLI_EXECUTABLE",
      "default": [
        [
          "grype"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GRYPE: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_GRYPE_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_GRYPE_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_GRYPE: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_GRYPE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_GRYPE_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_GRYPE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GRYPE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_GRYPE_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_GRYPE_CONFIG_FILE",
      "default": ".grype.yaml",
      "description": "REPOSITORY_GRYPE: User custom config file name if different from default",
      "title": "REPOSITORY_GRYPE: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_GRYPE_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_GRYPE_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_GRYPE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_GRYPE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_GRYPE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_GRYPE: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_GRYPE_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GRYPE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_GRYPE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_GRYPE_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_GRYPE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_GRYPE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_GRYPE_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_GRYPE_RULES_PATH",
      "description": "REPOSITORY_GRYPE: Path where to find linter configuration file",
      "title": "REPOSITORY_GRYPE: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_GRYPE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_GRYPE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_GRYPE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_GRYPE: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_KICS_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_KICS_ARGUMENTS",
      "description": "REPOSITORY_KICS: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_KICS: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_KICS_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_KICS_CLI_EXECUTABLE",
      "default": [
        [
          "kics"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_KICS: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_KICS_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_KICS_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_KICS: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_KICS_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_KICS_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_KICS: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_KICS: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_KICS_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_KICS_CONFIG_FILE",
      "default": "kics.config",
      "description": "REPOSITORY_KICS: User custom config file name if different from default",
      "title": "REPOSITORY_KICS: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_KICS_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_KICS_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_KICS: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_KICS_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_KICS_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_KICS: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_KICS_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_KICS_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_KICS: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_KICS_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_KICS_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_KICS: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_KICS_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_KICS_RULES_PATH",
      "description": "REPOSITORY_KICS: Path where to find linter configuration file",
      "title": "REPOSITORY_KICS: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_KICS_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_KICS_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_KICS and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_KICS: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_LS_LINT_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_LS_LINT_ARGUMENTS",
      "description": "REPOSITORY_LS_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_LS_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_LS_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_LS_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "ls-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_LS_LINT: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_LS_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_LS_LINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_LS_LINT: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_LS_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_LS_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_LS_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_LS_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_LS_LINT_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_LS_LINT_CONFIG_FILE",
      "default": ".ls-lint.yml",
      "description": "REPOSITORY_LS_LINT: User custom config file name if different from default",
      "title": "REPOSITORY_LS_LINT: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_LS_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_LS_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_LS_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_LS_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_LS_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_LS_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_LS_LINT_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_LS_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_LS_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_LS_LINT_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_LS_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_LS_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_LS_LINT_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_LS_LINT_RULES_PATH",
      "description": "REPOSITORY_LS_LINT: Path where to find linter configuration file",
      "title": "REPOSITORY_LS_LINT: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_LS_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_LS_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_LS_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_LS_LINT: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for REPOSITORY descriptor",
      "type": "array"
    },
    "REPOSITORY_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for REPOSITORY descriptor",
      "type": "array"
    },
    "REPOSITORY_SECRETLINT_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_ARGUMENTS",
      "description": "REPOSITORY_SECRETLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SECRETLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SECRETLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_CLI_EXECUTABLE",
      "default": [
        [
          "secretlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SECRETLINT: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_SECRETLINT_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_SECRETLINT: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_SECRETLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_SECRETLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SECRETLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SECRETLINT_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_CONFIG_FILE",
      "default": ".secretlintrc.json",
      "description": "REPOSITORY_SECRETLINT: User custom config file name if different from default",
      "title": "REPOSITORY_SECRETLINT: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_SECRETLINT_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_SECRETLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_SECRETLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_SECRETLINT_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_SECRETLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_SECRETLINT_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_SECRETLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_SECRETLINT_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_RULES_PATH",
      "description": "REPOSITORY_SECRETLINT: Path where to find linter configuration file",
      "title": "REPOSITORY_SECRETLINT: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_SECRETLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_SECRETLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_SECRETLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SECRETLINT: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_SEMGREP_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_SEMGREP_ARGUMENTS",
      "description": "REPOSITORY_SEMGREP: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SEMGREP: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SEMGREP_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_SEMGREP_CLI_EXECUTABLE",
      "default": [
        [
          "semgrep"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SEMGREP: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_SEMGREP_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_SEMGREP_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_SEMGREP: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_SEMGREP_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_SEMGREP_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_SEMGREP: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SEMGREP: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SEMGREP_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_SEMGREP_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_SEMGREP: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_SEMGREP_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_SEMGREP_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_SEMGREP: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_SEMGREP_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_SEMGREP_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_SEMGREP: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_SEMGREP_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_SEMGREP_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_SEMGREP: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_SEMGREP_RULESETS": {
      "$id": "#/properties/REPOSITORY_SEMGREP_RULESETS",
      "description": "REPOSITORY_SEMGREP: Specify custom ruleset(s) for semgrep",
      "examples:": [
        "auto",
        "p/ci"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SEMGREP: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SEMGREP_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_SEMGREP_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_SEMGREP and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SEMGREP: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_SYFT_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_SYFT_ARGUMENTS",
      "description": "REPOSITORY_SYFT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SYFT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SYFT_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_SYFT_CLI_EXECUTABLE",
      "default": [
        [
          "syft"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SYFT: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_SYFT_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_SYFT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_SYFT: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_SYFT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_SYFT_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_SYFT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SYFT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_SYFT_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_SYFT_CONFIG_FILE",
      "default": ".syft.yaml",
      "description": "REPOSITORY_SYFT: User custom config file name if different from default",
      "title": "REPOSITORY_SYFT: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_SYFT_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_SYFT_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_SYFT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_SYFT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_SYFT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_SYFT: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_SYFT_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_SYFT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_SYFT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_SYFT_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_SYFT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_SYFT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_SYFT_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_SYFT_RULES_PATH",
      "description": "REPOSITORY_SYFT: Path where to find linter configuration file",
      "title": "REPOSITORY_SYFT: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_SYFT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_SYFT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_SYFT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_SYFT: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_TRIVY_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_TRIVY_ARGUMENTS",
      "description": "REPOSITORY_TRIVY: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_TRIVY_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_TRIVY_CLI_EXECUTABLE",
      "default": [
        [
          "trivy"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_TRIVY_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_TRIVY_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_TRIVY: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_TRIVY_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_TRIVY_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_TRIVY: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_TRIVY_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_TRIVY_CONFIG_FILE",
      "default": "trivy.yaml",
      "description": "REPOSITORY_TRIVY: User custom config file name if different from default",
      "title": "REPOSITORY_TRIVY: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_TRIVY_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_TRIVY_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_TRIVY: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_TRIVY_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_TRIVY_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_TRIVY: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_TRIVY_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_TRIVY_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_TRIVY: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_TRIVY_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_TRIVY_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_TRIVY: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_TRIVY_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_TRIVY_RULES_PATH",
      "description": "REPOSITORY_TRIVY: Path where to find linter configuration file",
      "title": "REPOSITORY_TRIVY: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_TRIVY_SBOM_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_ARGUMENTS",
      "description": "REPOSITORY_TRIVY_SBOM: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY_SBOM: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_TRIVY_SBOM_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_CLI_EXECUTABLE",
      "default": [
        [
          "trivy"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY_SBOM: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_TRIVY_SBOM_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_TRIVY_SBOM: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_TRIVY_SBOM_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_TRIVY_SBOM: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY_SBOM: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_TRIVY_SBOM_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_CONFIG_FILE",
      "default": "trivy-sbom.yaml",
      "description": "REPOSITORY_TRIVY_SBOM: User custom config file name if different from default",
      "title": "REPOSITORY_TRIVY_SBOM: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_TRIVY_SBOM_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_TRIVY_SBOM: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_TRIVY_SBOM_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_TRIVY_SBOM: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_TRIVY_SBOM_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_TRIVY_SBOM: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_TRIVY_SBOM_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_TRIVY_SBOM: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_TRIVY_SBOM_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_RULES_PATH",
      "description": "REPOSITORY_TRIVY_SBOM: Path where to find linter configuration file",
      "title": "REPOSITORY_TRIVY_SBOM: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_TRIVY_SBOM_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_TRIVY_SBOM_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_TRIVY_SBOM and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY_SBOM: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_TRIVY_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_TRIVY_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_TRIVY and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRIVY: Unsecured env variables",
      "type": "array"
    },
    "REPOSITORY_TRUFFLEHOG_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_ARGUMENTS",
      "description": "REPOSITORY_TRUFFLEHOG: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRUFFLEHOG: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_TRUFFLEHOG_CLI_EXECUTABLE": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_CLI_EXECUTABLE",
      "default": [
        [
          "trufflehog"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRUFFLEHOG: CLI Executable",
      "type": "array"
    },
    "REPOSITORY_TRUFFLEHOG_CLI_LINT_MODE": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "REPOSITORY_TRUFFLEHOG: Override default cli lint mode",
      "type": "string"
    },
    "REPOSITORY_TRUFFLEHOG_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_COMMAND_REMOVE_ARGUMENTS",
      "description": "REPOSITORY_TRUFFLEHOG: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRUFFLEHOG: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "REPOSITORY_TRUFFLEHOG_CONFIG_FILE": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_CONFIG_FILE",
      "default": ".trufflehog.yml",
      "description": "REPOSITORY_TRUFFLEHOG: User custom config file name if different from default",
      "title": "REPOSITORY_TRUFFLEHOG: Custom config file name",
      "type": "string"
    },
    "REPOSITORY_TRUFFLEHOG_DISABLE_ERRORS": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_DISABLE_ERRORS",
      "default": false,
      "title": "REPOSITORY_TRUFFLEHOG: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "REPOSITORY_TRUFFLEHOG_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "REPOSITORY_TRUFFLEHOG: Maximum number of errors allowed",
      "type": "number"
    },
    "REPOSITORY_TRUFFLEHOG_POST_COMMANDS": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_TRUFFLEHOG: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "REPOSITORY_TRUFFLEHOG_PRE_COMMANDS": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "REPOSITORY_TRUFFLEHOG: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "REPOSITORY_TRUFFLEHOG_RULES_PATH": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_RULES_PATH",
      "description": "REPOSITORY_TRUFFLEHOG: Path where to find linter configuration file",
      "title": "REPOSITORY_TRUFFLEHOG: Custom config file path",
      "type": "string"
    },
    "REPOSITORY_TRUFFLEHOG_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/REPOSITORY_TRUFFLEHOG_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling REPOSITORY_TRUFFLEHOG and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "REPOSITORY_TRUFFLEHOG: Unsecured env variables",
      "type": "array"
    },
    "RST_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RST descriptor",
      "type": "string"
    },
    "RST_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RST descriptor",
      "type": "string"
    },
    "RST_POST_COMMANDS": {
      "$id": "#/properties/RST_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for RST descriptor",
      "type": "array"
    },
    "RST_PRE_COMMANDS": {
      "$id": "#/properties/RST_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for RST descriptor",
      "type": "array"
    },
    "RST_RSTCHECK_ARGUMENTS": {
      "$id": "#/properties/RST_RSTCHECK_ARGUMENTS",
      "description": "RST_RSTCHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RSTCHECK_CLI_EXECUTABLE": {
      "$id": "#/properties/RST_RSTCHECK_CLI_EXECUTABLE",
      "default": [
        [
          "rstcheck"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: CLI Executable",
      "type": "array"
    },
    "RST_RSTCHECK_CLI_LINT_MODE": {
      "$id": "#/properties/RST_RSTCHECK_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "RST_RSTCHECK: Override default cli lint mode",
      "type": "string"
    },
    "RST_RSTCHECK_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/RST_RSTCHECK_COMMAND_REMOVE_ARGUMENTS",
      "description": "RST_RSTCHECK: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RSTCHECK_CONFIG_FILE": {
      "$id": "#/properties/RST_RSTCHECK_CONFIG_FILE",
      "default": ".rstcheck.cfg",
      "description": "RST_RSTCHECK: User custom config file name if different from default",
      "title": "RST_RSTCHECK: Custom config file name",
      "type": "string"
    },
    "RST_RSTCHECK_DISABLE_ERRORS": {
      "$id": "#/properties/RST_RSTCHECK_DISABLE_ERRORS",
      "default": false,
      "title": "RST_RSTCHECK: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "RST_RSTCHECK_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/RST_RSTCHECK_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "RST_RSTCHECK: Maximum number of errors allowed",
      "type": "number"
    },
    "RST_RSTCHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/RST_RSTCHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RST_RSTCHECK_FILE_NAME": {
      "$id": "#/properties/RST_RSTCHECK_FILE_NAME",
      "default": ".rstcheck.cfg",
      "description": "RST_RSTCHECK: User custom config file name if different from default",
      "title": "RST_RSTCHECK: Custom config file name",
      "type": "string"
    },
    "RST_RSTCHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/RST_RSTCHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RST_RSTCHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_RSTCHECK_FILTER_REGEX_EXCLUDE",
      "title": "RST_RSTCHECK: Excluding Regex",
      "type": "string"
    },
    "RST_RSTCHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_RSTCHECK_FILTER_REGEX_INCLUDE",
      "title": "RST_RSTCHECK: Including Regex",
      "type": "string"
    },
    "RST_RSTCHECK_POST_COMMANDS": {
      "$id": "#/properties/RST_RSTCHECK_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RST_RSTCHECK: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "RST_RSTCHECK_PRE_COMMANDS": {
      "$id": "#/properties/RST_RSTCHECK_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RST_RSTCHECK: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "RST_RSTCHECK_RULES_PATH": {
      "$id": "#/properties/RST_RSTCHECK_RULES_PATH",
      "description": "RST_RSTCHECK: Path where to find linter configuration file",
      "title": "RST_RSTCHECK: Custom config file path",
      "type": "string"
    },
    "RST_RSTCHECK_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/RST_RSTCHECK_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling RST_RSTCHECK and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Unsecured env variables",
      "type": "array"
    },
    "RST_RSTFMT_ARGUMENTS": {
      "$id": "#/properties/RST_RSTFMT_ARGUMENTS",
      "description": "RST_RSTFMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RSTFMT_CLI_EXECUTABLE": {
      "$id": "#/properties/RST_RSTFMT_CLI_EXECUTABLE",
      "default": [
        [
          "rstfmt"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: CLI Executable",
      "type": "array"
    },
    "RST_RSTFMT_CLI_LINT_MODE": {
      "$id": "#/properties/RST_RSTFMT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "RST_RSTFMT: Override default cli lint mode",
      "type": "string"
    },
    "RST_RSTFMT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/RST_RSTFMT_COMMAND_REMOVE_ARGUMENTS",
      "description": "RST_RSTFMT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RSTFMT_DISABLE_ERRORS": {
      "$id": "#/properties/RST_RSTFMT_DISABLE_ERRORS",
      "default": false,
      "title": "RST_RSTFMT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "RST_RSTFMT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/RST_RSTFMT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "RST_RSTFMT: Maximum number of errors allowed",
      "type": "number"
    },
    "RST_RSTFMT_FILE_EXTENSIONS": {
      "$id": "#/properties/RST_RSTFMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RST_RSTFMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/RST_RSTFMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RST_RSTFMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_RSTFMT_FILTER_REGEX_EXCLUDE",
      "title": "RST_RSTFMT: Excluding Regex",
      "type": "string"
    },
    "RST_RSTFMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_RSTFMT_FILTER_REGEX_INCLUDE",
      "title": "RST_RSTFMT: Including Regex",
      "type": "string"
    },
    "RST_RSTFMT_POST_COMMANDS": {
      "$id": "#/properties/RST_RSTFMT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RST_RSTFMT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "RST_RSTFMT_PRE_COMMANDS": {
      "$id": "#/properties/RST_RSTFMT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RST_RSTFMT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "RST_RSTFMT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/RST_RSTFMT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling RST_RSTFMT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Unsecured env variables",
      "type": "array"
    },
    "RST_RST_LINT_ARGUMENTS": {
      "$id": "#/properties/RST_RST_LINT_ARGUMENTS",
      "description": "RST_RST_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RST_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/RST_RST_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "rst-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: CLI Executable",
      "type": "array"
    },
    "RST_RST_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/RST_RST_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "RST_RST_LINT: Override default cli lint mode",
      "type": "string"
    },
    "RST_RST_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/RST_RST_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "RST_RST_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RST_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/RST_RST_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "RST_RST_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "RST_RST_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/RST_RST_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "RST_RST_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "RST_RST_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/RST_RST_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RST_RST_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/RST_RST_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RST_RST_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_RST_LINT_FILTER_REGEX_EXCLUDE",
      "title": "RST_RST_LINT: Excluding Regex",
      "type": "string"
    },
    "RST_RST_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_RST_LINT_FILTER_REGEX_INCLUDE",
      "title": "RST_RST_LINT: Including Regex",
      "type": "string"
    },
    "RST_RST_LINT_POST_COMMANDS": {
      "$id": "#/properties/RST_RST_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RST_RST_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "RST_RST_LINT_PRE_COMMANDS": {
      "$id": "#/properties/RST_RST_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RST_RST_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "RST_RST_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/RST_RST_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling RST_RST_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Unsecured env variables",
      "type": "array"
    },
    "RUBY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUBY_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RUBY descriptor",
      "type": "string"
    },
    "RUBY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUBY_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RUBY descriptor",
      "type": "string"
    },
    "RUBY_POST_COMMANDS": {
      "$id": "#/properties/RUBY_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for RUBY descriptor",
      "type": "array"
    },
    "RUBY_PRE_COMMANDS": {
      "$id": "#/properties/RUBY_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for RUBY descriptor",
      "type": "array"
    },
    "RUBY_RUBOCOP_ARGUMENTS": {
      "$id": "#/properties/RUBY_RUBOCOP_ARGUMENTS",
      "description": "RUBY_RUBOCOP: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RUBY_RUBOCOP_CLI_EXECUTABLE": {
      "$id": "#/properties/RUBY_RUBOCOP_CLI_EXECUTABLE",
      "default": [
        [
          "rubocop"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: CLI Executable",
      "type": "array"
    },
    "RUBY_RUBOCOP_CLI_LINT_MODE": {
      "$id": "#/properties/RUBY_RUBOCOP_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "RUBY_RUBOCOP: Override default cli lint mode",
      "type": "string"
    },
    "RUBY_RUBOCOP_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/RUBY_RUBOCOP_COMMAND_REMOVE_ARGUMENTS",
      "description": "RUBY_RUBOCOP: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RUBY_RUBOCOP_CONFIG_FILE": {
      "$id": "#/properties/RUBY_RUBOCOP_CONFIG_FILE",
      "default": ".ruby-lint.yml",
      "description": "RUBY_RUBOCOP: User custom config file name if different from default",
      "title": "RUBY_RUBOCOP: Custom config file name",
      "type": "string"
    },
    "RUBY_RUBOCOP_DISABLE_ERRORS": {
      "$id": "#/properties/RUBY_RUBOCOP_DISABLE_ERRORS",
      "default": false,
      "title": "RUBY_RUBOCOP: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "RUBY_RUBOCOP_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/RUBY_RUBOCOP_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "RUBY_RUBOCOP: Maximum number of errors allowed",
      "type": "number"
    },
    "RUBY_RUBOCOP_FILE_EXTENSIONS": {
      "$id": "#/properties/RUBY_RUBOCOP_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RUBY_RUBOCOP_FILE_NAME": {
      "$id": "#/properties/RUBY_RUBOCOP_FILE_NAME",
      "default": ".ruby-lint.yml",
      "description": "RUBY_RUBOCOP: User custom config file name if different from default",
      "title": "RUBY_RUBOCOP: Custom config file name",
      "type": "string"
    },
    "RUBY_RUBOCOP_FILE_NAMES_REGEX": {
      "$id": "#/properties/RUBY_RUBOCOP_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE",
      "title": "RUBY_RUBOCOP: Excluding Regex",
      "type": "string"
    },
    "RUBY_RUBOCOP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUBY_RUBOCOP_FILTER_REGEX_INCLUDE",
      "title": "RUBY_RUBOCOP: Including Regex",
      "type": "string"
    },
    "RUBY_RUBOCOP_POST_COMMANDS": {
      "$id": "#/properties/RUBY_RUBOCOP_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RUBY_RUBOCOP: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "RUBY_RUBOCOP_PRE_COMMANDS": {
      "$id": "#/properties/RUBY_RUBOCOP_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RUBY_RUBOCOP: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "RUBY_RUBOCOP_RULES_PATH": {
      "$id": "#/properties/RUBY_RUBOCOP_RULES_PATH",
      "description": "RUBY_RUBOCOP: Path where to find linter configuration file",
      "title": "RUBY_RUBOCOP: Custom config file path",
      "type": "string"
    },
    "RUBY_RUBOCOP_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/RUBY_RUBOCOP_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling RUBY_RUBOCOP and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Unsecured env variables",
      "type": "array"
    },
    "RUST_CLIPPY_ARGUMENTS": {
      "$id": "#/properties/RUST_CLIPPY_ARGUMENTS",
      "description": "RUST_CLIPPY: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RUST_CLIPPY_CLI_EXECUTABLE": {
      "$id": "#/properties/RUST_CLIPPY_CLI_EXECUTABLE",
      "default": [
        [
          "cargo-clippy"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: CLI Executable",
      "type": "array"
    },
    "RUST_CLIPPY_CLI_LINT_MODE": {
      "$id": "#/properties/RUST_CLIPPY_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "RUST_CLIPPY: Override default cli lint mode",
      "type": "string"
    },
    "RUST_CLIPPY_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/RUST_CLIPPY_COMMAND_REMOVE_ARGUMENTS",
      "description": "RUST_CLIPPY: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RUST_CLIPPY_CONFIG_FILE": {
      "$id": "#/properties/RUST_CLIPPY_CONFIG_FILE",
      "default": ".clippy.toml",
      "description": "RUST_CLIPPY: User custom config file name if different from default",
      "title": "RUST_CLIPPY: Custom config file name",
      "type": "string"
    },
    "RUST_CLIPPY_DISABLE_ERRORS": {
      "$id": "#/properties/RUST_CLIPPY_DISABLE_ERRORS",
      "default": false,
      "title": "RUST_CLIPPY: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "RUST_CLIPPY_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/RUST_CLIPPY_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "RUST_CLIPPY: Maximum number of errors allowed",
      "type": "number"
    },
    "RUST_CLIPPY_FILE_EXTENSIONS": {
      "$id": "#/properties/RUST_CLIPPY_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RUST_CLIPPY_FILE_NAME": {
      "$id": "#/properties/RUST_CLIPPY_FILE_NAME",
      "default": ".clippy.toml",
      "description": "RUST_CLIPPY: User custom config file name if different from default",
      "title": "RUST_CLIPPY: Custom config file name",
      "type": "string"
    },
    "RUST_CLIPPY_FILE_NAMES_REGEX": {
      "$id": "#/properties/RUST_CLIPPY_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RUST_CLIPPY_POST_COMMANDS": {
      "$id": "#/properties/RUST_CLIPPY_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RUST_CLIPPY: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "RUST_CLIPPY_PRE_COMMANDS": {
      "$id": "#/properties/RUST_CLIPPY_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "RUST_CLIPPY: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "RUST_CLIPPY_RULES_PATH": {
      "$id": "#/properties/RUST_CLIPPY_RULES_PATH",
      "description": "RUST_CLIPPY: Path where to find linter configuration file",
      "title": "RUST_CLIPPY: Custom config file path",
      "type": "string"
    },
    "RUST_CLIPPY_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/RUST_CLIPPY_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling RUST_CLIPPY and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Unsecured env variables",
      "type": "array"
    },
    "RUST_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUST_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RUST descriptor",
      "type": "string"
    },
    "RUST_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUST_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RUST descriptor",
      "type": "string"
    },
    "RUST_POST_COMMANDS": {
      "$id": "#/properties/RUST_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for RUST descriptor",
      "type": "array"
    },
    "RUST_PRE_COMMANDS": {
      "$id": "#/properties/RUST_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for RUST descriptor",
      "type": "array"
    },
    "R_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/R_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for R descriptor",
      "type": "string"
    },
    "R_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/R_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for R descriptor",
      "type": "string"
    },
    "R_LINTR_ARGUMENTS": {
      "$id": "#/properties/R_LINTR_ARGUMENTS",
      "description": "R_LINTR: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "R_LINTR_CLI_EXECUTABLE": {
      "$id": "#/properties/R_LINTR_CLI_EXECUTABLE",
      "default": [
        [
          "lintr"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: CLI Executable",
      "type": "array"
    },
    "R_LINTR_CLI_LINT_MODE": {
      "$id": "#/properties/R_LINTR_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "R_LINTR: Override default cli lint mode",
      "type": "string"
    },
    "R_LINTR_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/R_LINTR_COMMAND_REMOVE_ARGUMENTS",
      "description": "R_LINTR: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "R_LINTR_CONFIG_FILE": {
      "$id": "#/properties/R_LINTR_CONFIG_FILE",
      "default": ".lintr",
      "description": "R_LINTR: User custom config file name if different from default",
      "title": "R_LINTR: Custom config file name",
      "type": "string"
    },
    "R_LINTR_DISABLE_ERRORS": {
      "$id": "#/properties/R_LINTR_DISABLE_ERRORS",
      "default": false,
      "title": "R_LINTR: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "R_LINTR_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/R_LINTR_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "R_LINTR: Maximum number of errors allowed",
      "type": "number"
    },
    "R_LINTR_FILE_EXTENSIONS": {
      "$id": "#/properties/R_LINTR_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "R_LINTR_FILE_NAME": {
      "$id": "#/properties/R_LINTR_FILE_NAME",
      "default": ".lintr",
      "description": "R_LINTR: User custom config file name if different from default",
      "title": "R_LINTR: Custom config file name",
      "type": "string"
    },
    "R_LINTR_FILE_NAMES_REGEX": {
      "$id": "#/properties/R_LINTR_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "R_LINTR_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/R_LINTR_FILTER_REGEX_EXCLUDE",
      "title": "R_LINTR: Excluding Regex",
      "type": "string"
    },
    "R_LINTR_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/R_LINTR_FILTER_REGEX_INCLUDE",
      "title": "R_LINTR: Including Regex",
      "type": "string"
    },
    "R_LINTR_POST_COMMANDS": {
      "$id": "#/properties/R_LINTR_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "R_LINTR: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "R_LINTR_PRE_COMMANDS": {
      "$id": "#/properties/R_LINTR_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "R_LINTR: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "R_LINTR_RULES_PATH": {
      "$id": "#/properties/R_LINTR_RULES_PATH",
      "description": "R_LINTR: Path where to find linter configuration file",
      "title": "R_LINTR: Custom config file path",
      "type": "string"
    },
    "R_LINTR_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/R_LINTR_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling R_LINTR and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Unsecured env variables",
      "type": "array"
    },
    "R_POST_COMMANDS": {
      "$id": "#/properties/R_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for R descriptor",
      "type": "array"
    },
    "R_PRE_COMMANDS": {
      "$id": "#/properties/R_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for R descriptor",
      "type": "array"
    },
    "SALESFORCE_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_DIRECTORY",
      "default": "force-app",
      "title": "SALESFORCE_DIRECTORY: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SALESFORCE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SALESFORCE descriptor",
      "type": "string"
    },
    "SALESFORCE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SALESFORCE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SALESFORCE descriptor",
      "type": "string"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_ARGUMENTS",
      "description": "SALESFORCE_LIGHTNING_FLOW_SCANNER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_CLI_EXECUTABLE": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_CLI_EXECUTABLE",
      "default": [
        [
          "sf"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: CLI Executable",
      "type": "array"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_CLI_LINT_MODE": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Override default cli lint mode",
      "type": "string"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_COMMAND_REMOVE_ARGUMENTS",
      "description": "SALESFORCE_LIGHTNING_FLOW_SCANNER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_CONFIG_FILE": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_CONFIG_FILE",
      "default": ".flow-scanner.json",
      "description": "SALESFORCE_LIGHTNING_FLOW_SCANNER: User custom config file name if different from default",
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Custom config file name",
      "type": "string"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_DIRECTORY",
      "default": "force-app",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_DISABLE_ERRORS": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_DISABLE_ERRORS",
      "default": false,
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Maximum number of errors allowed",
      "type": "number"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_POST_COMMANDS": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_PRE_COMMANDS": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_RULES_PATH": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_RULES_PATH",
      "description": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Path where to find linter configuration file",
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Custom config file path",
      "type": "string"
    },
    "SALESFORCE_LIGHTNING_FLOW_SCANNER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SALESFORCE_LIGHTNING_FLOW_SCANNER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SALESFORCE_LIGHTNING_FLOW_SCANNER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_LIGHTNING_FLOW_SCANNER: Unsecured env variables",
      "type": "array"
    },
    "SALESFORCE_POST_COMMANDS": {
      "$id": "#/properties/SALESFORCE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for SALESFORCE descriptor",
      "type": "array"
    },
    "SALESFORCE_PRE_COMMANDS": {
      "$id": "#/properties/SALESFORCE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for SALESFORCE descriptor",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER_APEX: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_APEX_CLI_EXECUTABLE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_CLI_EXECUTABLE",
      "default": [
        [
          "sf"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_APEX: CLI Executable",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_CLI_LINT_MODE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Override default cli lint mode",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_COMMAND_REMOVE_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER_APEX: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_APEX_CONFIG_FILE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_CONFIG_FILE",
      "default": "apex-pmd-ruleset.xml",
      "description": "SALESFORCE_SFDX_SCANNER_APEX: User custom config file name if different from default",
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Custom config file name",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_DIRECTORY",
      "default": "force-app",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS",
      "default": false,
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Maximum number of errors allowed",
      "type": "number"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_POST_COMMANDS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_PRE_COMMANDS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_RULES_PATH": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_RULES_PATH",
      "description": "SALESFORCE_SFDX_SCANNER_APEX: Path where to find linter configuration file",
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Custom config file path",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_APEX_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_APEX_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SALESFORCE_SFDX_SCANNER_APEX and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_APEX: Unsecured env variables",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_AURA_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER_AURA: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_AURA_CLI_EXECUTABLE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_CLI_EXECUTABLE",
      "default": [
        [
          "sf"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_AURA: CLI Executable",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_CLI_LINT_MODE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Override default cli lint mode",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_COMMAND_REMOVE_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER_AURA: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_AURA_CONFIG_FILE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_CONFIG_FILE",
      "default": "--eslintconfig",
      "description": "SALESFORCE_SFDX_SCANNER_AURA: User custom config file name if different from default",
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Custom config file name",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_DIRECTORY",
      "default": "force-app",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS",
      "default": false,
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Maximum number of errors allowed",
      "type": "number"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_POST_COMMANDS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_PRE_COMMANDS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_RULES_PATH": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_RULES_PATH",
      "description": "SALESFORCE_SFDX_SCANNER_AURA: Path where to find linter configuration file",
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Custom config file path",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_AURA_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_AURA_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SALESFORCE_SFDX_SCANNER_AURA and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_AURA: Unsecured env variables",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_DIRECTORY",
      "default": "force-app",
      "title": "SALESFORCE_SFDX_SCANNER: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS",
      "default": false,
      "title": "SALESFORCE_SFDX_SCANNER: Linter does not make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SALESFORCE_SFDX_SCANNER: Maximum number of errors allowed",
      "type": "number"
    },
    "SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE",
      "title": "SALESFORCE_SFDX_SCANNER: Excluding Regex",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE",
      "title": "SALESFORCE_SFDX_SCANNER: Including Regex",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER_LWC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_LWC_CLI_EXECUTABLE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_CLI_EXECUTABLE",
      "default": [
        [
          "sf"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_LWC: CLI Executable",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_CLI_LINT_MODE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Override default cli lint mode",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_COMMAND_REMOVE_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER_LWC: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_LWC_CONFIG_FILE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_CONFIG_FILE",
      "default": "--eslintconfig",
      "description": "SALESFORCE_SFDX_SCANNER_LWC: User custom config file name if different from default",
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Custom config file name",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_DIRECTORY",
      "default": "force-app",
      "description": "Directory that must be found to activate linter. Use value \"any\" to always activate",
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS",
      "default": false,
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Maximum number of errors allowed",
      "type": "number"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_POST_COMMANDS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_PRE_COMMANDS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_RULES_PATH": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_RULES_PATH",
      "description": "SALESFORCE_SFDX_SCANNER_LWC: Path where to find linter configuration file",
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Custom config file path",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_LWC_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_LWC_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SALESFORCE_SFDX_SCANNER_LWC and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER_LWC: Unsecured env variables",
      "type": "array"
    },
    "SARIF_REPORTER": {
      "$id": "#/properties/SARIF_REPORTER",
      "default": false,
      "description": "Generate SARIF reports that can be used to display issues directly in GitHub UI",
      "title": "Activate SARIF reporter",
      "type": "boolean"
    },
    "SARIF_REPORTER_FILE_NAME": {
      "$id": "#/properties/SARIF_REPORTER_FILE_NAME",
      "default": "mega-linter-report.sarif",
      "description": "Override SARIF output file name",
      "title": "SARIF report file name",
      "type": "string"
    },
    "SARIF_REPORTER_LINTERS": {
      "$id": "#/properties/SARIF_REPORTER_LINTERS",
      "description": "If SARIF_REPORTER_LINTERS is set, only the linters in the list will output SARIF",
      "examples": [
        [
          "BASH_BASH_SHFMT",
          "JAVASCRIPT_STANDARD"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_linter_keys"
      },
      "title": "SARIF enabled linters",
      "type": "array"
    },
    "SCALA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SCALA_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SCALA descriptor",
      "type": "string"
    },
    "SCALA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SCALA_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SCALA descriptor",
      "type": "string"
    },
    "SCALA_POST_COMMANDS": {
      "$id": "#/properties/SCALA_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for SCALA descriptor",
      "type": "array"
    },
    "SCALA_PRE_COMMANDS": {
      "$id": "#/properties/SCALA_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for SCALA descriptor",
      "type": "array"
    },
    "SCALA_SCALAFIX_ARGUMENTS": {
      "$id": "#/properties/SCALA_SCALAFIX_ARGUMENTS",
      "description": "SCALA_SCALAFIX: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SCALA_SCALAFIX_CLI_EXECUTABLE": {
      "$id": "#/properties/SCALA_SCALAFIX_CLI_EXECUTABLE",
      "default": [
        [
          "scalafix"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: CLI Executable",
      "type": "array"
    },
    "SCALA_SCALAFIX_CLI_LINT_MODE": {
      "$id": "#/properties/SCALA_SCALAFIX_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "SCALA_SCALAFIX: Override default cli lint mode",
      "type": "string"
    },
    "SCALA_SCALAFIX_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SCALA_SCALAFIX_COMMAND_REMOVE_ARGUMENTS",
      "description": "SCALA_SCALAFIX: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SCALA_SCALAFIX_CONFIG_FILE": {
      "$id": "#/properties/SCALA_SCALAFIX_CONFIG_FILE",
      "default": ".scalafix.conf",
      "description": "SCALA_SCALAFIX: User custom config file name if different from default",
      "title": "SCALA_SCALAFIX: Custom config file name",
      "type": "string"
    },
    "SCALA_SCALAFIX_DISABLE_ERRORS": {
      "$id": "#/properties/SCALA_SCALAFIX_DISABLE_ERRORS",
      "default": false,
      "title": "SCALA_SCALAFIX: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SCALA_SCALAFIX_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SCALA_SCALAFIX_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SCALA_SCALAFIX: Maximum number of errors allowed",
      "type": "number"
    },
    "SCALA_SCALAFIX_FILE_EXTENSIONS": {
      "$id": "#/properties/SCALA_SCALAFIX_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SCALA_SCALAFIX_FILE_NAME": {
      "$id": "#/properties/SCALA_SCALAFIX_FILE_NAME",
      "default": ".scalafix.conf",
      "description": "SCALA_SCALAFIX: User custom config file name if different from default",
      "title": "SCALA_SCALAFIX: Custom config file name",
      "type": "string"
    },
    "SCALA_SCALAFIX_FILE_NAMES_REGEX": {
      "$id": "#/properties/SCALA_SCALAFIX_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE",
      "title": "SCALA_SCALAFIX: Excluding Regex",
      "type": "string"
    },
    "SCALA_SCALAFIX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SCALA_SCALAFIX_FILTER_REGEX_INCLUDE",
      "title": "SCALA_SCALAFIX: Including Regex",
      "type": "string"
    },
    "SCALA_SCALAFIX_POST_COMMANDS": {
      "$id": "#/properties/SCALA_SCALAFIX_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SCALA_SCALAFIX: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SCALA_SCALAFIX_PRE_COMMANDS": {
      "$id": "#/properties/SCALA_SCALAFIX_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SCALA_SCALAFIX: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SCALA_SCALAFIX_RULES_PATH": {
      "$id": "#/properties/SCALA_SCALAFIX_RULES_PATH",
      "description": "SCALA_SCALAFIX: Path where to find linter configuration file",
      "title": "SCALA_SCALAFIX: Custom config file path",
      "type": "string"
    },
    "SCALA_SCALAFIX_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SCALA_SCALAFIX_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SCALA_SCALAFIX and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Unsecured env variables",
      "type": "array"
    },
    "SECURED_ENV_VARIABLES": {
      "$id": "#/properties/SECURED_ENV_VARIABLES",
      "default": [
        "GITHUB_TOKEN",
        "PAT",
        "SYSTEM_ACCESSTOKEN",
        "GIT_AUTHORIZATION_BEARER",
        "CI_JOB_TOKEN",
        "GITLAB_ACCESS_TOKEN_MEGALINTER",
        "GITLAB_CUSTOM_CERTIFICATE",
        "WEBHOOK_REPORTER_BEARER_TOKEN"
      ],
      "description": "List of secured environment variables to hide when calling linters",
      "examples:": [
        [
          "GITHUB_TOKEN",
          "PAT",
          "SYSTEM_ACCESSTOKEN",
          "CI_JOB_TOKEN",
          "GITLAB_ACCESS_TOKEN_MEGALINTER",
          "GITLAB_CUSTOM_CERTIFICATE",
          "WEBHOOK_REPORTER_BEARER_TOKEN"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Secured environment variables",
      "type": "array"
    },
    "SHOW_ELAPSED_TIME": {
      "$id": "#/properties/SHOW_ELAPSED_TIME",
      "default": false,
      "description": "Displays elapsed time for each linter in reports",
      "title": "Show elapsed time",
      "type": "boolean"
    },
    "SHOW_SKIPPED_LINTERS": {
      "$id": "#/properties/SHOW_SKIPPED_LINTERS",
      "default": true,
      "description": "Displays all linters that mega-linter could run but didn't",
      "title": "Show skipped Linters",
      "type": "boolean"
    },
    "SKIP_CLI_LINT_MODES": {
      "$id": "#/properties/SKIP_CLI_LINT_MODES",
      "description": "Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: \"file,project\"). Available values: file,cli_lint_mode,project",
      "examples:": [
        [
          "file",
          "project"
        ]
      ],
      "items": {
        "enum": [
          "file",
          "list_of_files",
          "project"
        ]
      },
      "title": "List of CLI lint modes to skip",
      "type": "array"
    },
    "SNAKEMAKE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SNAKEMAKE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SNAKEMAKE descriptor",
      "type": "string"
    },
    "SNAKEMAKE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SNAKEMAKE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SNAKEMAKE descriptor",
      "type": "string"
    },
    "SNAKEMAKE_LINT_ARGUMENTS": {
      "$id": "#/properties/SNAKEMAKE_LINT_ARGUMENTS",
      "description": "SNAKEMAKE_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SNAKEMAKE_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/SNAKEMAKE_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "snakemake"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: CLI Executable",
      "type": "array"
    },
    "SNAKEMAKE_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/SNAKEMAKE_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "SNAKEMAKE_LINT: Override default cli lint mode",
      "type": "string"
    },
    "SNAKEMAKE_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SNAKEMAKE_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "SNAKEMAKE_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SNAKEMAKE_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/SNAKEMAKE_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "SNAKEMAKE_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SNAKEMAKE_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SNAKEMAKE_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SNAKEMAKE_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "SNAKEMAKE_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SNAKEMAKE_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE",
      "title": "SNAKEMAKE_LINT: Excluding Regex",
      "type": "string"
    },
    "SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE",
      "title": "SNAKEMAKE_LINT: Including Regex",
      "type": "string"
    },
    "SNAKEMAKE_LINT_POST_COMMANDS": {
      "$id": "#/properties/SNAKEMAKE_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SNAKEMAKE_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SNAKEMAKE_LINT_PRE_COMMANDS": {
      "$id": "#/properties/SNAKEMAKE_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SNAKEMAKE_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SNAKEMAKE_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SNAKEMAKE_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SNAKEMAKE_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Unsecured env variables",
      "type": "array"
    },
    "SNAKEMAKE_POST_COMMANDS": {
      "$id": "#/properties/SNAKEMAKE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for SNAKEMAKE descriptor",
      "type": "array"
    },
    "SNAKEMAKE_PRE_COMMANDS": {
      "$id": "#/properties/SNAKEMAKE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for SNAKEMAKE descriptor",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_ARGUMENTS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_ARGUMENTS",
      "description": "SNAKEMAKE_SNAKEFMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SNAKEMAKE_SNAKEFMT_CLI_EXECUTABLE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_CLI_EXECUTABLE",
      "default": [
        [
          "snakefmt"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: CLI Executable",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_CLI_LINT_MODE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "SNAKEMAKE_SNAKEFMT: Override default cli lint mode",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_COMMAND_REMOVE_ARGUMENTS",
      "description": "SNAKEMAKE_SNAKEFMT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SNAKEMAKE_SNAKEFMT_CONFIG_FILE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_CONFIG_FILE",
      "default": ".snakefmt.toml",
      "description": "SNAKEMAKE_SNAKEFMT: User custom config file name if different from default",
      "title": "SNAKEMAKE_SNAKEFMT: Custom config file name",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS",
      "default": false,
      "title": "SNAKEMAKE_SNAKEFMT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SNAKEMAKE_SNAKEFMT: Maximum number of errors allowed",
      "type": "number"
    },
    "SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_FILE_NAME": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILE_NAME",
      "default": ".snakefmt.toml",
      "description": "SNAKEMAKE_SNAKEFMT: User custom config file name if different from default",
      "title": "SNAKEMAKE_SNAKEFMT: Custom config file name",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE",
      "title": "SNAKEMAKE_SNAKEFMT: Excluding Regex",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE",
      "title": "SNAKEMAKE_SNAKEFMT: Including Regex",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_POST_COMMANDS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_PRE_COMMANDS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_RULES_PATH": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_RULES_PATH",
      "description": "SNAKEMAKE_SNAKEFMT: Path where to find linter configuration file",
      "title": "SNAKEMAKE_SNAKEFMT: Custom config file path",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SNAKEMAKE_SNAKEFMT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Unsecured env variables",
      "type": "array"
    },
    "SPELL_CSPELL_ANALYZE_FILE_NAMES": {
      "$id": "#/properties/SPELL_CSPELL_ANALYZE_FILE_NAMES",
      "default": false,
      "description": "If set to true, MegaLinter will also send file names to cspell for analysis.",
      "title": "SPELL_CSPELL: Analyze file names",
      "type": "boolean"
    },
    "SPELL_CSPELL_ARGUMENTS": {
      "$id": "#/properties/SPELL_CSPELL_ARGUMENTS",
      "description": "SPELL_CSPELL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_CSPELL_CLI_EXECUTABLE": {
      "$id": "#/properties/SPELL_CSPELL_CLI_EXECUTABLE",
      "default": [
        [
          "cspell"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: CLI Executable",
      "type": "array"
    },
    "SPELL_CSPELL_CLI_LINT_MODE": {
      "$id": "#/properties/SPELL_CSPELL_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SPELL_CSPELL: Override default cli lint mode",
      "type": "string"
    },
    "SPELL_CSPELL_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SPELL_CSPELL_COMMAND_REMOVE_ARGUMENTS",
      "description": "SPELL_CSPELL: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_CSPELL_CONFIG_FILE": {
      "$id": "#/properties/SPELL_CSPELL_CONFIG_FILE",
      "default": ".cspell.json",
      "description": "SPELL_CSPELL: User custom config file name if different from default",
      "title": "SPELL_CSPELL: Custom config file name",
      "type": "string"
    },
    "SPELL_CSPELL_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_CSPELL_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_CSPELL: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_CSPELL_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SPELL_CSPELL_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SPELL_CSPELL: Maximum number of errors allowed",
      "type": "number"
    },
    "SPELL_CSPELL_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_CSPELL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_CSPELL_FILE_NAME": {
      "$id": "#/properties/SPELL_CSPELL_FILE_NAME",
      "default": ".cspell.json",
      "description": "SPELL_CSPELL: User custom config file name if different from default",
      "title": "SPELL_CSPELL: Custom config file name",
      "type": "string"
    },
    "SPELL_CSPELL_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_CSPELL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_CSPELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_CSPELL_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_CSPELL: Excluding Regex",
      "type": "string"
    },
    "SPELL_CSPELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_CSPELL_FILTER_REGEX_INCLUDE",
      "title": "SPELL_CSPELL: Including Regex",
      "type": "string"
    },
    "SPELL_CSPELL_POST_COMMANDS": {
      "$id": "#/properties/SPELL_CSPELL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_CSPELL: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SPELL_CSPELL_PRE_COMMANDS": {
      "$id": "#/properties/SPELL_CSPELL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_CSPELL: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SPELL_CSPELL_RULES_PATH": {
      "$id": "#/properties/SPELL_CSPELL_RULES_PATH",
      "description": "SPELL_CSPELL: Path where to find linter configuration file",
      "title": "SPELL_CSPELL: Custom config file path",
      "type": "string"
    },
    "SPELL_CSPELL_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SPELL_CSPELL_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SPELL_CSPELL and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Unsecured env variables",
      "type": "array"
    },
    "SPELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SPELL descriptor",
      "type": "string"
    },
    "SPELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SPELL descriptor",
      "type": "string"
    },
    "SPELL_LYCHEE_ARGUMENTS": {
      "$id": "#/properties/SPELL_LYCHEE_ARGUMENTS",
      "description": "SPELL_LYCHEE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_LYCHEE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_LYCHEE_CLI_EXECUTABLE": {
      "$id": "#/properties/SPELL_LYCHEE_CLI_EXECUTABLE",
      "default": [
        [
          "lychee"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_LYCHEE: CLI Executable",
      "type": "array"
    },
    "SPELL_LYCHEE_CLI_LINT_MODE": {
      "$id": "#/properties/SPELL_LYCHEE_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SPELL_LYCHEE: Override default cli lint mode",
      "type": "string"
    },
    "SPELL_LYCHEE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SPELL_LYCHEE_COMMAND_REMOVE_ARGUMENTS",
      "description": "SPELL_LYCHEE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_LYCHEE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_LYCHEE_CONFIG_FILE": {
      "$id": "#/properties/SPELL_LYCHEE_CONFIG_FILE",
      "default": "lychee.toml",
      "description": "SPELL_LYCHEE: User custom config file name if different from default",
      "title": "SPELL_LYCHEE: Custom config file name",
      "type": "string"
    },
    "SPELL_LYCHEE_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_LYCHEE_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_LYCHEE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_LYCHEE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SPELL_LYCHEE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SPELL_LYCHEE: Maximum number of errors allowed",
      "type": "number"
    },
    "SPELL_LYCHEE_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_LYCHEE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_LYCHEE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_LYCHEE_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_LYCHEE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_LYCHEE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_LYCHEE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_LYCHEE_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_LYCHEE: Excluding Regex",
      "type": "string"
    },
    "SPELL_LYCHEE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_LYCHEE_FILTER_REGEX_INCLUDE",
      "title": "SPELL_LYCHEE: Including Regex",
      "type": "string"
    },
    "SPELL_LYCHEE_POST_COMMANDS": {
      "$id": "#/properties/SPELL_LYCHEE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_LYCHEE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SPELL_LYCHEE_PRE_COMMANDS": {
      "$id": "#/properties/SPELL_LYCHEE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_LYCHEE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SPELL_LYCHEE_RULES_PATH": {
      "$id": "#/properties/SPELL_LYCHEE_RULES_PATH",
      "description": "SPELL_LYCHEE: Path where to find linter configuration file",
      "title": "SPELL_LYCHEE: Custom config file path",
      "type": "string"
    },
    "SPELL_LYCHEE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SPELL_LYCHEE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SPELL_LYCHEE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SPELL_LYCHEE: Unsecured env variables",
      "type": "array"
    },
    "SPELL_MISSPELL_ARGUMENTS": {
      "$id": "#/properties/SPELL_MISSPELL_ARGUMENTS",
      "description": "SPELL_MISSPELL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_MISSPELL_CLI_EXECUTABLE": {
      "$id": "#/properties/SPELL_MISSPELL_CLI_EXECUTABLE",
      "default": [
        [
          "misspell"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: CLI Executable",
      "type": "array"
    },
    "SPELL_MISSPELL_CLI_LINT_MODE": {
      "$id": "#/properties/SPELL_MISSPELL_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SPELL_MISSPELL: Override default cli lint mode",
      "type": "string"
    },
    "SPELL_MISSPELL_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_MISSPELL_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_MISSPELL: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_MISSPELL_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SPELL_MISSPELL_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SPELL_MISSPELL: Maximum number of errors allowed",
      "type": "number"
    },
    "SPELL_MISSPELL_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_MISSPELL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_MISSPELL_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_MISSPELL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_MISSPELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_MISSPELL_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_MISSPELL: Excluding Regex",
      "type": "string"
    },
    "SPELL_MISSPELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_MISSPELL_FILTER_REGEX_INCLUDE",
      "title": "SPELL_MISSPELL: Including Regex",
      "type": "string"
    },
    "SPELL_MISSPELL_POST_COMMANDS": {
      "$id": "#/properties/SPELL_MISSPELL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_MISSPELL: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SPELL_MISSPELL_PRE_COMMANDS": {
      "$id": "#/properties/SPELL_MISSPELL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_MISSPELL: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SPELL_POST_COMMANDS": {
      "$id": "#/properties/SPELL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for SPELL descriptor",
      "type": "array"
    },
    "SPELL_PRE_COMMANDS": {
      "$id": "#/properties/SPELL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for SPELL descriptor",
      "type": "array"
    },
    "SPELL_PROSELINT_ARGUMENTS": {
      "$id": "#/properties/SPELL_PROSELINT_ARGUMENTS",
      "description": "SPELL_PROSELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_PROSELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_PROSELINT_CLI_EXECUTABLE": {
      "$id": "#/properties/SPELL_PROSELINT_CLI_EXECUTABLE",
      "default": [
        [
          "proselint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_PROSELINT: CLI Executable",
      "type": "array"
    },
    "SPELL_PROSELINT_CLI_LINT_MODE": {
      "$id": "#/properties/SPELL_PROSELINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SPELL_PROSELINT: Override default cli lint mode",
      "type": "string"
    },
    "SPELL_PROSELINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SPELL_PROSELINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "SPELL_PROSELINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_PROSELINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_PROSELINT_CONFIG_FILE": {
      "$id": "#/properties/SPELL_PROSELINT_CONFIG_FILE",
      "default": ".proselintrc",
      "description": "SPELL_PROSELINT: User custom config file name if different from default",
      "title": "SPELL_PROSELINT: Custom config file name",
      "type": "string"
    },
    "SPELL_PROSELINT_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_PROSELINT_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_PROSELINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_PROSELINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SPELL_PROSELINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SPELL_PROSELINT: Maximum number of errors allowed",
      "type": "number"
    },
    "SPELL_PROSELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_PROSELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_PROSELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_PROSELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_PROSELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_PROSELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_PROSELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_PROSELINT_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_PROSELINT: Excluding Regex",
      "type": "string"
    },
    "SPELL_PROSELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_PROSELINT_FILTER_REGEX_INCLUDE",
      "title": "SPELL_PROSELINT: Including Regex",
      "type": "string"
    },
    "SPELL_PROSELINT_POST_COMMANDS": {
      "$id": "#/properties/SPELL_PROSELINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_PROSELINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SPELL_PROSELINT_PRE_COMMANDS": {
      "$id": "#/properties/SPELL_PROSELINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_PROSELINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SPELL_PROSELINT_RULES_PATH": {
      "$id": "#/properties/SPELL_PROSELINT_RULES_PATH",
      "description": "SPELL_PROSELINT: Path where to find linter configuration file",
      "title": "SPELL_PROSELINT: Custom config file path",
      "type": "string"
    },
    "SPELL_PROSELINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SPELL_PROSELINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SPELL_PROSELINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SPELL_PROSELINT: Unsecured env variables",
      "type": "array"
    },
    "SPELL_VALE_ARGUMENTS": {
      "$id": "#/properties/SPELL_VALE_ARGUMENTS",
      "description": "SPELL_VALE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_VALE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_VALE_CLI_EXECUTABLE": {
      "$id": "#/properties/SPELL_VALE_CLI_EXECUTABLE",
      "default": [
        [
          "vale"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_VALE: CLI Executable",
      "type": "array"
    },
    "SPELL_VALE_CLI_LINT_MODE": {
      "$id": "#/properties/SPELL_VALE_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SPELL_VALE: Override default cli lint mode",
      "type": "string"
    },
    "SPELL_VALE_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SPELL_VALE_COMMAND_REMOVE_ARGUMENTS",
      "description": "SPELL_VALE: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_VALE: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_VALE_CONFIG_FILE": {
      "$id": "#/properties/SPELL_VALE_CONFIG_FILE",
      "default": ".vale.ini",
      "description": "SPELL_VALE: User custom config file name if different from default",
      "title": "SPELL_VALE: Custom config file name",
      "type": "string"
    },
    "SPELL_VALE_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_VALE_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_VALE: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_VALE_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SPELL_VALE_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SPELL_VALE: Maximum number of errors allowed",
      "type": "number"
    },
    "SPELL_VALE_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_VALE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_VALE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_VALE_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_VALE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_VALE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_VALE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_VALE_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_VALE: Excluding Regex",
      "type": "string"
    },
    "SPELL_VALE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_VALE_FILTER_REGEX_INCLUDE",
      "title": "SPELL_VALE: Including Regex",
      "type": "string"
    },
    "SPELL_VALE_POST_COMMANDS": {
      "$id": "#/properties/SPELL_VALE_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_VALE: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SPELL_VALE_PRE_COMMANDS": {
      "$id": "#/properties/SPELL_VALE_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SPELL_VALE: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SPELL_VALE_RULES_PATH": {
      "$id": "#/properties/SPELL_VALE_RULES_PATH",
      "description": "SPELL_VALE: Path where to find linter configuration file",
      "title": "SPELL_VALE: Custom config file path",
      "type": "string"
    },
    "SPELL_VALE_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SPELL_VALE_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SPELL_VALE and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SPELL_VALE: Unsecured env variables",
      "type": "array"
    },
    "SQL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SQL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SQL descriptor",
      "type": "string"
    },
    "SQL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SQL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SQL descriptor",
      "type": "string"
    },
    "SQL_POST_COMMANDS": {
      "$id": "#/properties/SQL_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for SQL descriptor",
      "type": "array"
    },
    "SQL_PRE_COMMANDS": {
      "$id": "#/properties/SQL_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for SQL descriptor",
      "type": "array"
    },
    "SQL_SQLFLUFF_ARGUMENTS": {
      "$id": "#/properties/SQL_SQLFLUFF_ARGUMENTS",
      "description": "SQL_SQLFLUFF: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQLFLUFF: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_SQLFLUFF_CLI_EXECUTABLE": {
      "$id": "#/properties/SQL_SQLFLUFF_CLI_EXECUTABLE",
      "default": [
        [
          "sqlfluff"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQLFLUFF: CLI Executable",
      "type": "array"
    },
    "SQL_SQLFLUFF_CLI_LINT_MODE": {
      "$id": "#/properties/SQL_SQLFLUFF_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SQL_SQLFLUFF: Override default cli lint mode",
      "type": "string"
    },
    "SQL_SQLFLUFF_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SQL_SQLFLUFF_COMMAND_REMOVE_ARGUMENTS",
      "description": "SQL_SQLFLUFF: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQLFLUFF: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_SQLFLUFF_CONFIG_FILE": {
      "$id": "#/properties/SQL_SQLFLUFF_CONFIG_FILE",
      "default": ".sqlfluff",
      "description": "SQL_SQLFLUFF: User custom config file name if different from default",
      "title": "SQL_SQLFLUFF: Custom config file name",
      "type": "string"
    },
    "SQL_SQLFLUFF_DISABLE_ERRORS": {
      "$id": "#/properties/SQL_SQLFLUFF_DISABLE_ERRORS",
      "default": false,
      "title": "SQL_SQLFLUFF: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SQL_SQLFLUFF_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SQL_SQLFLUFF_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SQL_SQLFLUFF: Maximum number of errors allowed",
      "type": "number"
    },
    "SQL_SQLFLUFF_FILE_EXTENSIONS": {
      "$id": "#/properties/SQL_SQLFLUFF_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQLFLUFF: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SQL_SQLFLUFF_FILE_NAMES_REGEX": {
      "$id": "#/properties/SQL_SQLFLUFF_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQLFLUFF: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SQL_SQLFLUFF_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SQL_SQLFLUFF_FILTER_REGEX_EXCLUDE",
      "title": "SQL_SQLFLUFF: Excluding Regex",
      "type": "string"
    },
    "SQL_SQLFLUFF_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SQL_SQLFLUFF_FILTER_REGEX_INCLUDE",
      "title": "SQL_SQLFLUFF: Including Regex",
      "type": "string"
    },
    "SQL_SQLFLUFF_POST_COMMANDS": {
      "$id": "#/properties/SQL_SQLFLUFF_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SQL_SQLFLUFF: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SQL_SQLFLUFF_PRE_COMMANDS": {
      "$id": "#/properties/SQL_SQLFLUFF_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SQL_SQLFLUFF: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SQL_SQLFLUFF_RULES_PATH": {
      "$id": "#/properties/SQL_SQLFLUFF_RULES_PATH",
      "description": "SQL_SQLFLUFF: Path where to find linter configuration file",
      "title": "SQL_SQLFLUFF: Custom config file path",
      "type": "string"
    },
    "SQL_SQLFLUFF_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SQL_SQLFLUFF_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SQL_SQLFLUFF and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SQL_SQLFLUFF: Unsecured env variables",
      "type": "array"
    },
    "SQL_SQL_LINT_ARGUMENTS": {
      "$id": "#/properties/SQL_SQL_LINT_ARGUMENTS",
      "description": "SQL_SQL_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_SQL_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/SQL_SQL_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "sql-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: CLI Executable",
      "type": "array"
    },
    "SQL_SQL_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/SQL_SQL_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "SQL_SQL_LINT: Override default cli lint mode",
      "type": "string"
    },
    "SQL_SQL_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SQL_SQL_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "SQL_SQL_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_SQL_LINT_CONFIG_FILE": {
      "$id": "#/properties/SQL_SQL_LINT_CONFIG_FILE",
      "default": ".sql-config.json",
      "description": "SQL_SQL_LINT: User custom config file name if different from default",
      "title": "SQL_SQL_LINT: Custom config file name",
      "type": "string"
    },
    "SQL_SQL_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/SQL_SQL_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "SQL_SQL_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SQL_SQL_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SQL_SQL_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SQL_SQL_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "SQL_SQL_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SQL_SQL_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SQL_SQL_LINT_FILE_NAME": {
      "$id": "#/properties/SQL_SQL_LINT_FILE_NAME",
      "default": ".sql-config.json",
      "description": "SQL_SQL_LINT: User custom config file name if different from default",
      "title": "SQL_SQL_LINT: Custom config file name",
      "type": "string"
    },
    "SQL_SQL_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SQL_SQL_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SQL_SQL_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SQL_SQL_LINT_FILTER_REGEX_EXCLUDE",
      "title": "SQL_SQL_LINT: Excluding Regex",
      "type": "string"
    },
    "SQL_SQL_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SQL_SQL_LINT_FILTER_REGEX_INCLUDE",
      "title": "SQL_SQL_LINT: Including Regex",
      "type": "string"
    },
    "SQL_SQL_LINT_POST_COMMANDS": {
      "$id": "#/properties/SQL_SQL_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SQL_SQL_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SQL_SQL_LINT_PRE_COMMANDS": {
      "$id": "#/properties/SQL_SQL_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SQL_SQL_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SQL_SQL_LINT_RULES_PATH": {
      "$id": "#/properties/SQL_SQL_LINT_RULES_PATH",
      "description": "SQL_SQL_LINT: Path where to find linter configuration file",
      "title": "SQL_SQL_LINT: Custom config file path",
      "type": "string"
    },
    "SQL_SQL_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SQL_SQL_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SQL_SQL_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Unsecured env variables",
      "type": "array"
    },
    "SQL_TSQLLINT_ARGUMENTS": {
      "$id": "#/properties/SQL_TSQLLINT_ARGUMENTS",
      "description": "SQL_TSQLLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_TSQLLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_TSQLLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/SQL_TSQLLINT_CLI_EXECUTABLE",
      "default": [
        [
          "tsqllint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_TSQLLINT: CLI Executable",
      "type": "array"
    },
    "SQL_TSQLLINT_CLI_LINT_MODE": {
      "$id": "#/properties/SQL_TSQLLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SQL_TSQLLINT: Override default cli lint mode",
      "type": "string"
    },
    "SQL_TSQLLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SQL_TSQLLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "SQL_TSQLLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_TSQLLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_TSQLLINT_CONFIG_FILE": {
      "$id": "#/properties/SQL_TSQLLINT_CONFIG_FILE",
      "default": ".tsqllintrc",
      "description": "SQL_TSQLLINT: User custom config file name if different from default",
      "title": "SQL_TSQLLINT: Custom config file name",
      "type": "string"
    },
    "SQL_TSQLLINT_DISABLE_ERRORS": {
      "$id": "#/properties/SQL_TSQLLINT_DISABLE_ERRORS",
      "default": false,
      "title": "SQL_TSQLLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SQL_TSQLLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SQL_TSQLLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SQL_TSQLLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "SQL_TSQLLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SQL_TSQLLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_TSQLLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SQL_TSQLLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SQL_TSQLLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_TSQLLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SQL_TSQLLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SQL_TSQLLINT_FILTER_REGEX_EXCLUDE",
      "title": "SQL_TSQLLINT: Excluding Regex",
      "type": "string"
    },
    "SQL_TSQLLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SQL_TSQLLINT_FILTER_REGEX_INCLUDE",
      "title": "SQL_TSQLLINT: Including Regex",
      "type": "string"
    },
    "SQL_TSQLLINT_POST_COMMANDS": {
      "$id": "#/properties/SQL_TSQLLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SQL_TSQLLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SQL_TSQLLINT_PRE_COMMANDS": {
      "$id": "#/properties/SQL_TSQLLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SQL_TSQLLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SQL_TSQLLINT_RULES_PATH": {
      "$id": "#/properties/SQL_TSQLLINT_RULES_PATH",
      "description": "SQL_TSQLLINT: Path where to find linter configuration file",
      "title": "SQL_TSQLLINT: Custom config file path",
      "type": "string"
    },
    "SQL_TSQLLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SQL_TSQLLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SQL_TSQLLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SQL_TSQLLINT: Unsecured env variables",
      "type": "array"
    },
    "SWIFT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SWIFT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SWIFT descriptor",
      "type": "string"
    },
    "SWIFT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SWIFT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SWIFT descriptor",
      "type": "string"
    },
    "SWIFT_POST_COMMANDS": {
      "$id": "#/properties/SWIFT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for SWIFT descriptor",
      "type": "array"
    },
    "SWIFT_PRE_COMMANDS": {
      "$id": "#/properties/SWIFT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for SWIFT descriptor",
      "type": "array"
    },
    "SWIFT_SWIFTLINT_ARGUMENTS": {
      "$id": "#/properties/SWIFT_SWIFTLINT_ARGUMENTS",
      "description": "SWIFT_SWIFTLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SWIFT_SWIFTLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SWIFT_SWIFTLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/SWIFT_SWIFTLINT_CLI_EXECUTABLE",
      "default": [
        [
          "swiftlint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "SWIFT_SWIFTLINT: CLI Executable",
      "type": "array"
    },
    "SWIFT_SWIFTLINT_CLI_LINT_MODE": {
      "$id": "#/properties/SWIFT_SWIFTLINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "SWIFT_SWIFTLINT: Override default cli lint mode",
      "type": "string"
    },
    "SWIFT_SWIFTLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/SWIFT_SWIFTLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "SWIFT_SWIFTLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SWIFT_SWIFTLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SWIFT_SWIFTLINT_CONFIG_FILE": {
      "$id": "#/properties/SWIFT_SWIFTLINT_CONFIG_FILE",
      "default": ".swiftlint.yml",
      "description": "SWIFT_SWIFTLINT: User custom config file name if different from default",
      "title": "SWIFT_SWIFTLINT: Custom config file name",
      "type": "string"
    },
    "SWIFT_SWIFTLINT_DISABLE_ERRORS": {
      "$id": "#/properties/SWIFT_SWIFTLINT_DISABLE_ERRORS",
      "default": false,
      "title": "SWIFT_SWIFTLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "SWIFT_SWIFTLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/SWIFT_SWIFTLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "SWIFT_SWIFTLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "SWIFT_SWIFTLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SWIFT_SWIFTLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SWIFT_SWIFTLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SWIFT_SWIFTLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SWIFT_SWIFTLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SWIFT_SWIFTLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SWIFT_SWIFTLINT_POST_COMMANDS": {
      "$id": "#/properties/SWIFT_SWIFTLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SWIFT_SWIFTLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "SWIFT_SWIFTLINT_PRE_COMMANDS": {
      "$id": "#/properties/SWIFT_SWIFTLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "SWIFT_SWIFTLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "SWIFT_SWIFTLINT_RULES_PATH": {
      "$id": "#/properties/SWIFT_SWIFTLINT_RULES_PATH",
      "description": "SWIFT_SWIFTLINT: Path where to find linter configuration file",
      "title": "SWIFT_SWIFTLINT: Custom config file path",
      "type": "string"
    },
    "SWIFT_SWIFTLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/SWIFT_SWIFTLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling SWIFT_SWIFTLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "SWIFT_SWIFTLINT: Unsecured env variables",
      "type": "array"
    },
    "TAP_REPORTER": {
      "$id": "#/properties/TAP_REPORTER",
      "default": false,
      "description": "General execution log mega-linter.log (same as ConsoleReporter log) + a separate log file for each processed linter",
      "title": "Activate TAP reporter",
      "type": "boolean"
    },
    "TAP_REPORTER_SUB_FOLDER": {
      "$id": "#/properties/TAP_REPORTER_SUB_FOLDER",
      "default": "tap",
      "description": "Sub-folder of reports folder containing TAP logs",
      "title": "TAP reporter sub folder",
      "type": "string"
    },
    "TEKTON_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TEKTON_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TEKTON descriptor",
      "type": "string"
    },
    "TEKTON_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TEKTON_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TEKTON descriptor",
      "type": "string"
    },
    "TEKTON_POST_COMMANDS": {
      "$id": "#/properties/TEKTON_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for TEKTON descriptor",
      "type": "array"
    },
    "TEKTON_PRE_COMMANDS": {
      "$id": "#/properties/TEKTON_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for TEKTON descriptor",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_ARGUMENTS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_ARGUMENTS",
      "description": "TEKTON_TEKTON_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TEKTON_TEKTON_LINT_CLI_EXECUTABLE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_CLI_EXECUTABLE",
      "default": [
        [
          "tekton-lint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: CLI Executable",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_CLI_LINT_MODE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "TEKTON_TEKTON_LINT: Override default cli lint mode",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "TEKTON_TEKTON_LINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TEKTON_TEKTON_LINT_CONFIG_FILE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_CONFIG_FILE",
      "default": ".tektonlintrc.yaml",
      "description": "TEKTON_TEKTON_LINT: User custom config file name if different from default",
      "title": "TEKTON_TEKTON_LINT: Custom config file name",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "TEKTON_TEKTON_LINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TEKTON_TEKTON_LINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TEKTON_TEKTON_LINT: Maximum number of errors allowed",
      "type": "number"
    },
    "TEKTON_TEKTON_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_FILE_NAME": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILE_NAME",
      "default": ".tektonlintrc.yaml",
      "description": "TEKTON_TEKTON_LINT: User custom config file name if different from default",
      "title": "TEKTON_TEKTON_LINT: Custom config file name",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE",
      "title": "TEKTON_TEKTON_LINT: Excluding Regex",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE",
      "title": "TEKTON_TEKTON_LINT: Including Regex",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_POST_COMMANDS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TEKTON_TEKTON_LINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_PRE_COMMANDS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TEKTON_TEKTON_LINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_RULES_PATH": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_RULES_PATH",
      "description": "TEKTON_TEKTON_LINT: Path where to find linter configuration file",
      "title": "TEKTON_TEKTON_LINT: Custom config file path",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TEKTON_TEKTON_LINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Unsecured env variables",
      "type": "array"
    },
    "TERRAFORM_CHECKOV_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_CHECKOV_ARGUMENTS",
      "description": "TERRAFORM_CHECKOV: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_CHECKOV: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_CHECKOV_CLI_EXECUTABLE": {
      "$id": "#/properties/TERRAFORM_CHECKOV_CLI_EXECUTABLE",
      "default": [
        [
          "checkov"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_CHECKOV: CLI Executable",
      "type": "array"
    },
    "TERRAFORM_CHECKOV_CLI_LINT_MODE": {
      "$id": "#/properties/TERRAFORM_CHECKOV_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "(removed) TERRAFORM_CHECKOV: Override default cli lint mode",
      "type": "string"
    },
    "TERRAFORM_CHECKOV_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_CHECKOV_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) TERRAFORM_CHECKOV: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TERRAFORM_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) TERRAFORM_CHECKOV: Maximum number of errors allowed",
      "type": "number"
    },
    "TERRAFORM_CHECKOV_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_CHECKOV_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_CHECKOV: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_CHECKOV_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_CHECKOV_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_CHECKOV: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_CHECKOV_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_CHECKOV_FILTER_REGEX_EXCLUDE",
      "title": "(removed) TERRAFORM_CHECKOV: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_CHECKOV_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_CHECKOV_FILTER_REGEX_INCLUDE",
      "title": "(removed) TERRAFORM_CHECKOV: Including Regex",
      "type": "string"
    },
    "TERRAFORM_CHECKOV_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_CHECKOV_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) TERRAFORM_CHECKOV: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TERRAFORM_CHECKOV_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_CHECKOV_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) TERRAFORM_CHECKOV: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TERRAFORM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TERRAFORM descriptor",
      "type": "string"
    },
    "TERRAFORM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TERRAFORM descriptor",
      "type": "string"
    },
    "TERRAFORM_KICS_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_KICS_ARGUMENTS",
      "description": "TERRAFORM_KICS: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_KICS: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_KICS_CLI_EXECUTABLE": {
      "$id": "#/properties/TERRAFORM_KICS_CLI_EXECUTABLE",
      "default": [
        [
          "kics"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_KICS: CLI Executable",
      "type": "array"
    },
    "TERRAFORM_KICS_CLI_LINT_MODE": {
      "$id": "#/properties/TERRAFORM_KICS_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "(removed) TERRAFORM_KICS: Override default cli lint mode",
      "type": "string"
    },
    "TERRAFORM_KICS_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_KICS_DISABLE_ERRORS",
      "default": false,
      "title": "(removed) TERRAFORM_KICS: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_KICS_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TERRAFORM_KICS_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "(removed) TERRAFORM_KICS: Maximum number of errors allowed",
      "type": "number"
    },
    "TERRAFORM_KICS_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_KICS_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_KICS: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_KICS_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_KICS_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "(removed) TERRAFORM_KICS: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_KICS_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_KICS_FILTER_REGEX_EXCLUDE",
      "title": "(removed) TERRAFORM_KICS: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_KICS_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_KICS_FILTER_REGEX_INCLUDE",
      "title": "(removed) TERRAFORM_KICS: Including Regex",
      "type": "string"
    },
    "TERRAFORM_KICS_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_KICS_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) TERRAFORM_KICS: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TERRAFORM_KICS_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_KICS_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "(removed) TERRAFORM_KICS: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TERRAFORM_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for TERRAFORM descriptor",
      "type": "array"
    },
    "TERRAFORM_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for TERRAFORM descriptor",
      "type": "array"
    },
    "TERRAFORM_TERRAFORM_FMT_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_ARGUMENTS",
      "description": "TERRAFORM_TERRAFORM_FMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRAFORM_FMT_CLI_EXECUTABLE": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_CLI_EXECUTABLE",
      "default": [
        [
          "terraform"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: CLI Executable",
      "type": "array"
    },
    "TERRAFORM_TERRAFORM_FMT_CLI_LINT_MODE": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "TERRAFORM_TERRAFORM_FMT: Override default cli lint mode",
      "type": "string"
    },
    "TERRAFORM_TERRAFORM_FMT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_COMMAND_REMOVE_ARGUMENTS",
      "description": "TERRAFORM_TERRAFORM_FMT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TERRAFORM_FMT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TERRAFORM_TERRAFORM_FMT: Maximum number of errors allowed",
      "type": "number"
    },
    "TERRAFORM_TERRAFORM_FMT_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TERRAFORM_FMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_EXCLUDE",
      "title": "TERRAFORM_TERRAFORM_FMT: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_INCLUDE",
      "title": "TERRAFORM_TERRAFORM_FMT: Including Regex",
      "type": "string"
    },
    "TERRAFORM_TERRAFORM_FMT_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TERRAFORM_TERRAFORM_FMT_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TERRAFORM_TERRAFORM_FMT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TERRAFORM_TERRAFORM_FMT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TERRAFORM_TERRAFORM_FMT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAFORM_FMT: Unsecured env variables",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_ARGUMENTS",
      "description": "TERRAFORM_TERRAGRUNT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRAGRUNT_CLI_EXECUTABLE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_CLI_EXECUTABLE",
      "default": [
        [
          "terragrunt"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: CLI Executable",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_CLI_LINT_MODE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_CLI_LINT_MODE",
      "default": "file",
      "enum": [
        "file",
        "project"
      ],
      "title": "TERRAFORM_TERRAGRUNT: Override default cli lint mode",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_COMMAND_REMOVE_ARGUMENTS",
      "description": "TERRAFORM_TERRAGRUNT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRAGRUNT_CONFIG_FILE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_CONFIG_FILE",
      "default": "terragrunt.hcl",
      "description": "TERRAFORM_TERRAGRUNT: User custom config file name if different from default",
      "title": "TERRAFORM_TERRAGRUNT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TERRAGRUNT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TERRAGRUNT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TERRAFORM_TERRAGRUNT: Maximum number of errors allowed",
      "type": "number"
    },
    "TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_FILE_NAME": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILE_NAME",
      "default": "terragrunt.hcl",
      "description": "TERRAFORM_TERRAGRUNT: User custom config file name if different from default",
      "title": "TERRAFORM_TERRAGRUNT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE",
      "title": "TERRAFORM_TERRAGRUNT: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE",
      "title": "TERRAFORM_TERRAGRUNT: Including Regex",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TERRAGRUNT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TERRAGRUNT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_RULES_PATH": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_RULES_PATH",
      "description": "TERRAFORM_TERRAGRUNT: Path where to find linter configuration file",
      "title": "TERRAFORM_TERRAGRUNT: Custom config file path",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TERRAFORM_TERRAGRUNT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Unsecured env variables",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_ARGUMENTS",
      "description": "TERRAFORM_TERRASCAN: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRASCAN_CLI_EXECUTABLE": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_CLI_EXECUTABLE",
      "default": [
        [
          "terrascan"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: CLI Executable",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_CLI_LINT_MODE": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "TERRAFORM_TERRASCAN: Override default cli lint mode",
      "type": "string"
    },
    "TERRAFORM_TERRASCAN_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_COMMAND_REMOVE_ARGUMENTS",
      "description": "TERRAFORM_TERRASCAN: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRASCAN_CONFIG_FILE": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_CONFIG_FILE",
      "default": "terrascan.toml",
      "description": "TERRAFORM_TERRASCAN: User custom config file name if different from default",
      "title": "TERRAFORM_TERRASCAN: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TERRASCAN_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TERRASCAN: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TERRASCAN_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TERRAFORM_TERRASCAN: Maximum number of errors allowed",
      "type": "number"
    },
    "TERRAFORM_TERRASCAN_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TERRASCAN: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TERRASCAN: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_RULES_PATH": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_RULES_PATH",
      "description": "TERRAFORM_TERRASCAN: Path where to find linter configuration file",
      "title": "TERRAFORM_TERRASCAN: Custom config file path",
      "type": "string"
    },
    "TERRAFORM_TERRASCAN_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TERRAFORM_TERRASCAN and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Unsecured env variables",
      "type": "array"
    },
    "TERRAFORM_TFLINT_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TFLINT_ARGUMENTS",
      "description": "TERRAFORM_TFLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TFLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/TERRAFORM_TFLINT_CLI_EXECUTABLE",
      "default": [
        [
          "tflint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: CLI Executable",
      "type": "array"
    },
    "TERRAFORM_TFLINT_CLI_LINT_MODE": {
      "$id": "#/properties/TERRAFORM_TFLINT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "TERRAFORM_TFLINT: Override default cli lint mode",
      "type": "string"
    },
    "TERRAFORM_TFLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TFLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "TERRAFORM_TFLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TFLINT_CONFIG_FILE": {
      "$id": "#/properties/TERRAFORM_TFLINT_CONFIG_FILE",
      "default": ".tflint.hcl",
      "description": "TERRAFORM_TFLINT: User custom config file name if different from default",
      "title": "TERRAFORM_TFLINT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TFLINT_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TFLINT_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TFLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TFLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TERRAFORM_TFLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TERRAFORM_TFLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "TERRAFORM_TFLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TFLINT_FILE_NAME": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILE_NAME",
      "default": ".tflint.hcl",
      "description": "TERRAFORM_TFLINT: User custom config file name if different from default",
      "title": "TERRAFORM_TFLINT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TFLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TFLINT_POST_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TFLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TFLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TERRAFORM_TFLINT_PRE_COMMANDS": {
      "$id": "#/properties/TERRAFORM_TFLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TERRAFORM_TFLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TERRAFORM_TFLINT_RULES_PATH": {
      "$id": "#/properties/TERRAFORM_TFLINT_RULES_PATH",
      "description": "TERRAFORM_TFLINT: Path where to find linter configuration file",
      "title": "TERRAFORM_TFLINT: Custom config file path",
      "type": "string"
    },
    "TERRAFORM_TFLINT_SECURED_ENV": {
      "$id": "#/properties/TERRAFORM_TFLINT_SECURED_ENV",
      "default": true,
      "description": "TERRAFORM_TFLINT: Allows to send the full env to **tflint --init**. Initialized with default value `true`. Set to `false` to allow `tflint --init` to access your env vars.",
      "title": "TERRAFORM_TFLINT: Secured Environment Flag",
      "type": "boolean"
    },
    "TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TERRAFORM_TFLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Unsecured env variables",
      "type": "array"
    },
    "TEXT_REPORTER": {
      "$id": "#/properties/TEXT_REPORTER",
      "default": true,
      "description": "General execution log mega-linter.log (same as ConsoleReporter log) + a separate log file for each processed linter",
      "title": "Activate text reporter",
      "type": "boolean"
    },
    "TEXT_REPORTER_SUB_FOLDER": {
      "$id": "#/properties/TEXT_REPORTER_SUB_FOLDER",
      "default": "linters_logs",
      "description": "Sub-folder of reports folder containing text logs",
      "title": "Text reporter sub folder",
      "type": "string"
    },
    "TSX_ESLINT_ARGUMENTS": {
      "$id": "#/properties/TSX_ESLINT_ARGUMENTS",
      "description": "TSX_ESLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TSX_ESLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/TSX_ESLINT_CLI_EXECUTABLE",
      "default": [
        [
          "eslint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: CLI Executable",
      "type": "array"
    },
    "TSX_ESLINT_CLI_LINT_MODE": {
      "$id": "#/properties/TSX_ESLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "TSX_ESLINT: Override default cli lint mode",
      "type": "string"
    },
    "TSX_ESLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TSX_ESLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "TSX_ESLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TSX_ESLINT_CONFIG_FILE": {
      "$id": "#/properties/TSX_ESLINT_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "TSX_ESLINT: User custom config file name if different from default",
      "title": "TSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "TSX_ESLINT_DISABLE_ERRORS": {
      "$id": "#/properties/TSX_ESLINT_DISABLE_ERRORS",
      "default": false,
      "title": "TSX_ESLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TSX_ESLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "TSX_ESLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/TSX_ESLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TSX_ESLINT_FILE_NAME": {
      "$id": "#/properties/TSX_ESLINT_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "TSX_ESLINT: User custom config file name if different from default",
      "title": "TSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "TSX_ESLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TSX_ESLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TSX_ESLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TSX_ESLINT_FILTER_REGEX_EXCLUDE",
      "title": "TSX_ESLINT: Excluding Regex",
      "type": "string"
    },
    "TSX_ESLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TSX_ESLINT_FILTER_REGEX_INCLUDE",
      "title": "TSX_ESLINT: Including Regex",
      "type": "string"
    },
    "TSX_ESLINT_POST_COMMANDS": {
      "$id": "#/properties/TSX_ESLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TSX_ESLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TSX_ESLINT_PRE_COMMANDS": {
      "$id": "#/properties/TSX_ESLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TSX_ESLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TSX_ESLINT_RULES_PATH": {
      "$id": "#/properties/TSX_ESLINT_RULES_PATH",
      "description": "TSX_ESLINT: Path where to find linter configuration file",
      "title": "TSX_ESLINT: Custom config file path",
      "type": "string"
    },
    "TSX_ESLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TSX_ESLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TSX_ESLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Unsecured env variables",
      "type": "array"
    },
    "TSX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TSX_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TSX descriptor",
      "type": "string"
    },
    "TSX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TSX_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TSX descriptor",
      "type": "string"
    },
    "TSX_POST_COMMANDS": {
      "$id": "#/properties/TSX_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for TSX descriptor",
      "type": "array"
    },
    "TSX_PRE_COMMANDS": {
      "$id": "#/properties/TSX_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for TSX descriptor",
      "type": "array"
    },
    "TYPESCRIPT_DEFAULT_STYLE": {
      "$id": "#/properties/TYPESCRIPT_DEFAULT_STYLE",
      "description": "Style of typescript formatting to apply",
      "enum": [
        "standard",
        "prettier"
      ],
      "examples": [
        "standard",
        "prettier"
      ],
      "title": "Typescript default style",
      "type": "string"
    },
    "TYPESCRIPT_ES_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_ES_ARGUMENTS",
      "description": "TYPESCRIPT_ES: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_ES_CLI_EXECUTABLE": {
      "$id": "#/properties/TYPESCRIPT_ES_CLI_EXECUTABLE",
      "default": [
        [
          "eslint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: CLI Executable",
      "type": "array"
    },
    "TYPESCRIPT_ES_CLI_LINT_MODE": {
      "$id": "#/properties/TYPESCRIPT_ES_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "TYPESCRIPT_ES: Override default cli lint mode",
      "type": "string"
    },
    "TYPESCRIPT_ES_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_ES_COMMAND_REMOVE_ARGUMENTS",
      "description": "TYPESCRIPT_ES: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_ES_CONFIG_FILE": {
      "$id": "#/properties/TYPESCRIPT_ES_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "TYPESCRIPT_ES: User custom config file name if different from default",
      "title": "TYPESCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "TYPESCRIPT_ES_DISABLE_ERRORS": {
      "$id": "#/properties/TYPESCRIPT_ES_DISABLE_ERRORS",
      "default": false,
      "title": "TYPESCRIPT_ES: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TYPESCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TYPESCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TYPESCRIPT_ES: Maximum number of errors allowed",
      "type": "number"
    },
    "TYPESCRIPT_ES_FILE_EXTENSIONS": {
      "$id": "#/properties/TYPESCRIPT_ES_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TYPESCRIPT_ES_FILE_NAME": {
      "$id": "#/properties/TYPESCRIPT_ES_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "TYPESCRIPT_ES: User custom config file name if different from default",
      "title": "TYPESCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "TYPESCRIPT_ES_FILE_NAMES_REGEX": {
      "$id": "#/properties/TYPESCRIPT_ES_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE",
      "title": "TYPESCRIPT_ES: Excluding Regex",
      "type": "string"
    },
    "TYPESCRIPT_ES_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_ES_FILTER_REGEX_INCLUDE",
      "title": "TYPESCRIPT_ES: Including Regex",
      "type": "string"
    },
    "TYPESCRIPT_ES_POST_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_ES_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TYPESCRIPT_ES: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TYPESCRIPT_ES_PRE_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_ES_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TYPESCRIPT_ES: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TYPESCRIPT_ES_RULES_PATH": {
      "$id": "#/properties/TYPESCRIPT_ES_RULES_PATH",
      "description": "TYPESCRIPT_ES: Path where to find linter configuration file",
      "title": "TYPESCRIPT_ES: Custom config file path",
      "type": "string"
    },
    "TYPESCRIPT_ES_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TYPESCRIPT_ES_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TYPESCRIPT_ES and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Unsecured env variables",
      "type": "array"
    },
    "TYPESCRIPT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TYPESCRIPT descriptor",
      "type": "string"
    },
    "TYPESCRIPT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TYPESCRIPT descriptor",
      "type": "string"
    },
    "TYPESCRIPT_POST_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for TYPESCRIPT descriptor",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_ARGUMENTS",
      "description": "TYPESCRIPT_PRETTIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_PRETTIER_CLI_EXECUTABLE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_CLI_EXECUTABLE",
      "default": [
        [
          "prettier"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: CLI Executable",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_CLI_LINT_MODE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "TYPESCRIPT_PRETTIER: Override default cli lint mode",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_COMMAND_REMOVE_ARGUMENTS",
      "description": "TYPESCRIPT_PRETTIER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_PRETTIER_CONFIG_FILE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_CONFIG_FILE",
      "default": ".prettierrc.json",
      "description": "TYPESCRIPT_PRETTIER: User custom config file name if different from default",
      "title": "TYPESCRIPT_PRETTIER: Custom config file name",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_DISABLE_ERRORS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_DISABLE_ERRORS",
      "default": false,
      "title": "TYPESCRIPT_PRETTIER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TYPESCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TYPESCRIPT_PRETTIER: Maximum number of errors allowed",
      "type": "number"
    },
    "TYPESCRIPT_PRETTIER_FILE_EXTENSIONS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE",
      "title": "TYPESCRIPT_PRETTIER: Excluding Regex",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE",
      "title": "TYPESCRIPT_PRETTIER: Including Regex",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_POST_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TYPESCRIPT_PRETTIER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_PRE_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TYPESCRIPT_PRETTIER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_RULES_PATH": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_RULES_PATH",
      "description": "TYPESCRIPT_PRETTIER: Path where to find linter configuration file",
      "title": "TYPESCRIPT_PRETTIER: Custom config file path",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TYPESCRIPT_PRETTIER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Unsecured env variables",
      "type": "array"
    },
    "TYPESCRIPT_PRE_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for TYPESCRIPT descriptor",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_ARGUMENTS",
      "description": "TYPESCRIPT_STANDARD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_STANDARD_CLI_EXECUTABLE": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_CLI_EXECUTABLE",
      "default": [
        [
          "ts-standard"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: CLI Executable",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_CLI_LINT_MODE": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "TYPESCRIPT_STANDARD: Override default cli lint mode",
      "type": "string"
    },
    "TYPESCRIPT_STANDARD_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_COMMAND_REMOVE_ARGUMENTS",
      "description": "TYPESCRIPT_STANDARD: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_STANDARD_DISABLE_ERRORS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_DISABLE_ERRORS",
      "default": false,
      "title": "TYPESCRIPT_STANDARD: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "TYPESCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "TYPESCRIPT_STANDARD: Maximum number of errors allowed",
      "type": "number"
    },
    "TYPESCRIPT_STANDARD_FILE_EXTENSIONS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_FILE_NAMES_REGEX": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE",
      "title": "TYPESCRIPT_STANDARD: Excluding Regex",
      "type": "string"
    },
    "TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE",
      "title": "TYPESCRIPT_STANDARD: Including Regex",
      "type": "string"
    },
    "TYPESCRIPT_STANDARD_POST_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TYPESCRIPT_STANDARD: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_PRE_COMMANDS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "TYPESCRIPT_STANDARD: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling TYPESCRIPT_STANDARD and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Unsecured env variables",
      "type": "array"
    },
    "UPDATED_SOURCES_REPORTER": {
      "$id": "#/properties/UPDATED_SOURCES_REPORTER",
      "title": "Activates/Deactivates updated sources reporter",
      "type": "boolean"
    },
    "UPDATED_SOURCES_REPORTER_DIR": {
      "$id": "#/properties/UPDATED_SOURCES_REPORTER_DIR",
      "title": "Sub-folder of reports folder containing updated sources",
      "type": "string"
    },
    "VALIDATE_ALL_CODEBASE": {
      "$id": "#/properties/VALIDATE_ALL_CODEBASE",
      "default": true,
      "description": "Will parse the entire repository and find all files to validate across all types. When set to false, only new or edited files will be parsed for validation.",
      "title": "Validate all code base",
      "type": "boolean"
    },
    "VBDOTNET_DOTNET_FORMAT_ARGUMENTS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_ARGUMENTS",
      "description": "VBDOTNET_DOTNET_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "VBDOTNET_DOTNET_FORMAT_CLI_EXECUTABLE": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_CLI_EXECUTABLE",
      "default": [
        [
          "dotnet"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: CLI Executable",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_CLI_LINT_MODE": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_CLI_LINT_MODE",
      "default": "project",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "VBDOTNET_DOTNET_FORMAT: Override default cli lint mode",
      "type": "string"
    },
    "VBDOTNET_DOTNET_FORMAT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_COMMAND_REMOVE_ARGUMENTS",
      "description": "VBDOTNET_DOTNET_FORMAT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "VBDOTNET_DOTNET_FORMAT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "VBDOTNET_DOTNET_FORMAT: Maximum number of errors allowed",
      "type": "number"
    },
    "VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_POST_COMMANDS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_PRE_COMMANDS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling VBDOTNET_DOTNET_FORMAT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Unsecured env variables",
      "type": "array"
    },
    "VBDOTNET_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/VBDOTNET_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for VBDOTNET descriptor",
      "type": "string"
    },
    "VBDOTNET_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/VBDOTNET_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for VBDOTNET descriptor",
      "type": "string"
    },
    "VBDOTNET_POST_COMMANDS": {
      "$id": "#/properties/VBDOTNET_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for VBDOTNET descriptor",
      "type": "array"
    },
    "VBDOTNET_PRE_COMMANDS": {
      "$id": "#/properties/VBDOTNET_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for VBDOTNET descriptor",
      "type": "array"
    },
    "XML_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/XML_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for XML descriptor",
      "type": "string"
    },
    "XML_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/XML_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for XML descriptor",
      "type": "string"
    },
    "XML_POST_COMMANDS": {
      "$id": "#/properties/XML_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for XML descriptor",
      "type": "array"
    },
    "XML_PRE_COMMANDS": {
      "$id": "#/properties/XML_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for XML descriptor",
      "type": "array"
    },
    "XML_XMLLINT_ARGUMENTS": {
      "$id": "#/properties/XML_XMLLINT_ARGUMENTS",
      "description": "XML_XMLLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "XML_XMLLINT_AUTOFORMAT": {
      "$id": "#/properties/XML_XMLLINT_AUTOFORMAT",
      "default": false,
      "title": "XML_XMLLINT: If set to `true`, it will reformat and reindent the output",
      "type": "boolean"
    },
    "XML_XMLLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/XML_XMLLINT_CLI_EXECUTABLE",
      "default": [
        [
          "xmllint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: CLI Executable",
      "type": "array"
    },
    "XML_XMLLINT_CLI_LINT_MODE": {
      "$id": "#/properties/XML_XMLLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "XML_XMLLINT: Override default cli lint mode",
      "type": "string"
    },
    "XML_XMLLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/XML_XMLLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "XML_XMLLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "XML_XMLLINT_DISABLE_ERRORS": {
      "$id": "#/properties/XML_XMLLINT_DISABLE_ERRORS",
      "default": false,
      "title": "XML_XMLLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "XML_XMLLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/XML_XMLLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "XML_XMLLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "XML_XMLLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/XML_XMLLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "XML_XMLLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/XML_XMLLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "XML_XMLLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/XML_XMLLINT_FILTER_REGEX_EXCLUDE",
      "title": "XML_XMLLINT: Excluding Regex",
      "type": "string"
    },
    "XML_XMLLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/XML_XMLLINT_FILTER_REGEX_INCLUDE",
      "title": "XML_XMLLINT: Including Regex",
      "type": "string"
    },
    "XML_XMLLINT_INDENT": {
      "$id": "#/properties/XML_XMLLINT_INDENT",
      "default": "  ",
      "title": "XML_XMLLINT: The number of indentation spaces when `XML_XMLLINT_AUTOFORMAT` is `true`",
      "type": "string"
    },
    "XML_XMLLINT_POST_COMMANDS": {
      "$id": "#/properties/XML_XMLLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "XML_XMLLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "XML_XMLLINT_PRE_COMMANDS": {
      "$id": "#/properties/XML_XMLLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "XML_XMLLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "XML_XMLLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/XML_XMLLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling XML_XMLLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Unsecured env variables",
      "type": "array"
    },
    "YAML_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for YAML descriptor",
      "type": "string"
    },
    "YAML_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for YAML descriptor",
      "type": "string"
    },
    "YAML_POST_COMMANDS": {
      "$id": "#/properties/YAML_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post commands for YAML descriptor",
      "type": "array"
    },
    "YAML_PRETTIER_ARGUMENTS": {
      "$id": "#/properties/YAML_PRETTIER_ARGUMENTS",
      "description": "YAML_PRETTIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_PRETTIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_PRETTIER_CLI_EXECUTABLE": {
      "$id": "#/properties/YAML_PRETTIER_CLI_EXECUTABLE",
      "default": [
        [
          "prettier"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_PRETTIER: CLI Executable",
      "type": "array"
    },
    "YAML_PRETTIER_CLI_LINT_MODE": {
      "$id": "#/properties/YAML_PRETTIER_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "YAML_PRETTIER: Override default cli lint mode",
      "type": "string"
    },
    "YAML_PRETTIER_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/YAML_PRETTIER_COMMAND_REMOVE_ARGUMENTS",
      "description": "YAML_PRETTIER: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_PRETTIER: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_PRETTIER_CONFIG_FILE": {
      "$id": "#/properties/YAML_PRETTIER_CONFIG_FILE",
      "default": ".prettierrc.json",
      "description": "YAML_PRETTIER: User custom config file name if different from default",
      "title": "YAML_PRETTIER: Custom config file name",
      "type": "string"
    },
    "YAML_PRETTIER_DISABLE_ERRORS": {
      "$id": "#/properties/YAML_PRETTIER_DISABLE_ERRORS",
      "default": false,
      "title": "YAML_PRETTIER: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "YAML_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/YAML_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "YAML_PRETTIER: Maximum number of errors allowed",
      "type": "number"
    },
    "YAML_PRETTIER_FILE_EXTENSIONS": {
      "$id": "#/properties/YAML_PRETTIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_PRETTIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "YAML_PRETTIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/YAML_PRETTIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_PRETTIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "YAML_PRETTIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_PRETTIER_FILTER_REGEX_EXCLUDE",
      "title": "YAML_PRETTIER: Excluding Regex",
      "type": "string"
    },
    "YAML_PRETTIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_PRETTIER_FILTER_REGEX_INCLUDE",
      "title": "YAML_PRETTIER: Including Regex",
      "type": "string"
    },
    "YAML_PRETTIER_POST_COMMANDS": {
      "$id": "#/properties/YAML_PRETTIER_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "YAML_PRETTIER: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "YAML_PRETTIER_PRE_COMMANDS": {
      "$id": "#/properties/YAML_PRETTIER_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "YAML_PRETTIER: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "YAML_PRETTIER_RULES_PATH": {
      "$id": "#/properties/YAML_PRETTIER_RULES_PATH",
      "description": "YAML_PRETTIER: Path where to find linter configuration file",
      "title": "YAML_PRETTIER: Custom config file path",
      "type": "string"
    },
    "YAML_PRETTIER_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/YAML_PRETTIER_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling YAML_PRETTIER and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "YAML_PRETTIER: Unsecured env variables",
      "type": "array"
    },
    "YAML_PRE_COMMANDS": {
      "$id": "#/properties/YAML_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "composer install",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre commands for YAML descriptor",
      "type": "array"
    },
    "YAML_V8R_ARGUMENTS": {
      "$id": "#/properties/YAML_V8R_ARGUMENTS",
      "description": "YAML_V8R: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_V8R_CLI_EXECUTABLE": {
      "$id": "#/properties/YAML_V8R_CLI_EXECUTABLE",
      "default": [
        [
          "v8r"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: CLI Executable",
      "type": "array"
    },
    "YAML_V8R_CLI_LINT_MODE": {
      "$id": "#/properties/YAML_V8R_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "YAML_V8R: Override default cli lint mode",
      "type": "string"
    },
    "YAML_V8R_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/YAML_V8R_COMMAND_REMOVE_ARGUMENTS",
      "description": "YAML_V8R: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_V8R_CONFIG_FILE": {
      "$id": "#/properties/YAML_V8R_CONFIG_FILE",
      "default": ".v8rrc.yml",
      "description": "YAML_V8R: User custom config file name if different from default",
      "title": "YAML_V8R: Custom config file name",
      "type": "string"
    },
    "YAML_V8R_DISABLE_ERRORS": {
      "$id": "#/properties/YAML_V8R_DISABLE_ERRORS",
      "default": false,
      "title": "YAML_V8R: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "YAML_V8R_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/YAML_V8R_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "YAML_V8R: Maximum number of errors allowed",
      "type": "number"
    },
    "YAML_V8R_FILE_EXTENSIONS": {
      "$id": "#/properties/YAML_V8R_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "YAML_V8R_FILE_NAMES_REGEX": {
      "$id": "#/properties/YAML_V8R_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "YAML_V8R_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_V8R_FILTER_REGEX_EXCLUDE",
      "title": "YAML_V8R: Excluding Regex",
      "type": "string"
    },
    "YAML_V8R_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_V8R_FILTER_REGEX_INCLUDE",
      "title": "YAML_V8R: Including Regex",
      "type": "string"
    },
    "YAML_V8R_POST_COMMANDS": {
      "$id": "#/properties/YAML_V8R_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "YAML_V8R: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "YAML_V8R_PRE_COMMANDS": {
      "$id": "#/properties/YAML_V8R_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "YAML_V8R: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "YAML_V8R_RULES_PATH": {
      "$id": "#/properties/YAML_V8R_RULES_PATH",
      "description": "YAML_V8R: Path where to find linter configuration file",
      "title": "YAML_V8R: Custom config file path",
      "type": "string"
    },
    "YAML_V8R_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/YAML_V8R_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling YAML_V8R and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Unsecured env variables",
      "type": "array"
    },
    "YAML_YAMLLINT_ARGUMENTS": {
      "$id": "#/properties/YAML_YAMLLINT_ARGUMENTS",
      "description": "YAML_YAMLLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_YAMLLINT_CLI_EXECUTABLE": {
      "$id": "#/properties/YAML_YAMLLINT_CLI_EXECUTABLE",
      "default": [
        [
          "yamllint"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: CLI Executable",
      "type": "array"
    },
    "YAML_YAMLLINT_CLI_LINT_MODE": {
      "$id": "#/properties/YAML_YAMLLINT_CLI_LINT_MODE",
      "default": "list_of_files",
      "enum": [
        "file",
        "list_of_files",
        "project"
      ],
      "title": "YAML_YAMLLINT: Override default cli lint mode",
      "type": "string"
    },
    "YAML_YAMLLINT_COMMAND_REMOVE_ARGUMENTS": {
      "$id": "#/properties/YAML_YAMLLINT_COMMAND_REMOVE_ARGUMENTS",
      "description": "YAML_YAMLLINT: User custom arguments to remove before calling linter",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Custom remove arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_YAMLLINT_CONFIG_FILE": {
      "$id": "#/properties/YAML_YAMLLINT_CONFIG_FILE",
      "default": ".yamllint.yml",
      "description": "YAML_YAMLLINT: User custom config file name if different from default",
      "title": "YAML_YAMLLINT: Custom config file name",
      "type": "string"
    },
    "YAML_YAMLLINT_DISABLE_ERRORS": {
      "$id": "#/properties/YAML_YAMLLINT_DISABLE_ERRORS",
      "default": false,
      "title": "YAML_YAMLLINT: Linter doesn't make MegaLinter fail even if errors are found",
      "type": "boolean"
    },
    "YAML_YAMLLINT_DISABLE_ERRORS_IF_LESS_THAN": {
      "$id": "#/properties/YAML_YAMLLINT_DISABLE_ERRORS_IF_LESS_THAN",
      "default": 0,
      "title": "YAML_YAMLLINT: Maximum number of errors allowed",
      "type": "number"
    },
    "YAML_YAMLLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/YAML_YAMLLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "YAML_YAMLLINT_FILE_NAME": {
      "$id": "#/properties/YAML_YAMLLINT_FILE_NAME",
      "default": ".yaml-lint.yml",
      "description": "YAML_YAMLLINT: User custom config file name if different from default",
      "title": "YAML_YAMLLINT: Custom config file name",
      "type": "string"
    },
    "YAML_YAMLLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/YAML_YAMLLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "YAML_YAMLLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_YAMLLINT_FILTER_REGEX_EXCLUDE",
      "title": "YAML_YAMLLINT: Excluding Regex",
      "type": "string"
    },
    "YAML_YAMLLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_YAMLLINT_FILTER_REGEX_INCLUDE",
      "title": "YAML_YAMLLINT: Including Regex",
      "type": "string"
    },
    "YAML_YAMLLINT_POST_COMMANDS": {
      "$id": "#/properties/YAML_YAMLLINT_POST_COMMANDS",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "YAML_YAMLLINT: Define or override a list of bash commands to run after the linter",
      "type": "array"
    },
    "YAML_YAMLLINT_PRE_COMMANDS": {
      "$id": "#/properties/YAML_YAMLLINT_PRE_COMMANDS",
      "examples": [
        [
          {
            "command": "tflint --init",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "YAML_YAMLLINT: Define or override a list of bash commands to run before the linter",
      "type": "array"
    },
    "YAML_YAMLLINT_RULES_PATH": {
      "$id": "#/properties/YAML_YAMLLINT_RULES_PATH",
      "description": "YAML_YAMLLINT: Path where to find linter configuration file",
      "title": "YAML_YAMLLINT: Custom config file path",
      "type": "string"
    },
    "YAML_YAMLLINT_UNSECURED_ENV_VARIABLES": {
      "$id": "#/properties/YAML_YAMLLINT_UNSECURED_ENV_VARIABLES",
      "default": [],
      "description": "List of env variables explicitly not filtered before calling YAML_YAMLLINT and its pre/post commands",
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Unsecured env variables",
      "type": "array"
    }
  },
  "required": [],
  "title": "Command",
  "type": "object"
}
