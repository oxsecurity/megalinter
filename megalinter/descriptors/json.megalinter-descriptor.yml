descriptor_id: JSON
descriptor_type: format
descriptor_flavors:
  - all_flavors # Any project can contain JSON
  - ci_light
  - cupcake
  - formatters
file_extensions:
  - ".json"
linters:
  # JSONLINT
  - linter_name: jsonlint
    linter_text: |
      **jsonlint** is a comprehensive JSON validation tool that provides command-line interface for ensuring JSON files conform to specifications and maintain proper structure. It serves as the essential validator for JSON data integrity across web applications, APIs, and configuration systems.

      **Key Features:**

      - **Pure JavaScript Implementation**: Native JavaScript JSON parser ensuring accurate validation without external dependencies
      - **Strict JSON Compliance**: Validates against official JSON specification to ensure maximum compatibility
      - **Syntax Error Detection**: Identifies malformed JSON structures, missing brackets, invalid characters, and formatting issues
      - **Fast Validation**: High-performance parsing suitable for large JSON files and batch processing
      - **Detailed Error Reporting**: Clear error messages with line and column information for easy debugging
      - **Configurable Options**: Flexible validation options through .jsonlintrc configuration files
      - **Batch Processing**: Efficient validation of multiple JSON files in a single command
      - **Cross-Platform**: Consistent validation behavior across Windows, macOS, and Linux environments
    linter_url: https://github.com/prantlf/jsonlint
    linter_repo: https://github.com/prantlf/jsonlint
    linter_spdx_license: MIT
    linter_rules_url: https://github.com/prantlf/jsonlint#configuration
    linter_rules_configuration_url: https://github.com/prantlf/jsonlint#configuration
    cli_lint_mode: list_of_files
    cli_config_arg_name: --config
    config_file_name: .jsonlintrc
    cli_lint_extra_args:
      - --quiet
    examples:
      - "jsonlint myfile1.json myfile2.json"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=@prantlf/jsonlint
          ARG NPM_PRANTLF_JSONLINT_VERSION=16.0.0
      npm:
        - "@prantlf/jsonlint@${NPM_PRANTLF_JSONLINT_VERSION}"
  # ESLINT-PLUGIN-JSONC
  - class: EslintLinter
    disabled: true
    disabled_reason: "Bug in eslint-plugin-jsonc: https://github.com/ota-meshi/eslint-plugin-jsonc/issues/328"
    linter_name: eslint-plugin-jsonc
    linter_spdx_license: MIT
    can_output_sarif: true
    file_extensions:
      - ".json"
      - ".json5"
      - ".jsonc"
    linter_url: https://ota-meshi.github.io/eslint-plugin-jsonc/
    linter_repo: https://github.com/ota-meshi/eslint-plugin-jsonc
    linter_text: |
      **eslint-plugin-jsonc** uses eslint to lint [**json**](https://www.json.org/), [**jsonc**](https://github.com/microsoft/node-jsonc-parser) and [**json5**](https://json5.org/) (extended JSON with comments & more).

      - To override default configuration, create a `.eslintrc-json.json` [custom configuration file applicable to your project](https://github.com/ota-meshi/eslint-plugin-jsonc#configuration)
      - If you have `.json` files with comments in your project, you may disable `jsonlint` to avoid false positive errors, by adding the following content in your `.mega-linter.yml` configuration file

      ```yaml
      DISABLE_LINTERS:
        - JSON_JSONLINT
      ```

      - If you have your own local `.eslintrc.json` (or `.yaml` or `.js` equivalent) config in your project, you must
        - add `JSON_ESLINT_PLUGIN_JSONC_FILE_NAME: .eslintrc.json` (or `.yaml` or `.js` equivalent) in your `.mega-linter.yml` config file
        - add `overrides` property in it

          <details>
          <summary>See code</summary>

          <pre>
            <code>
            {
                "overrides": [
                    {
                        "files": ["*.json"],
                        "extends": [
                            "plugin:jsonc/recommended-with-json"
                        ],
                        "parser": "jsonc-eslint-parser",
                            "parserOptions": {
                                "jsonSyntax": "JSON"
                        }
                    },
                    {
                        "files": ["*.jsonc"],
                        "extends": [
                            "plugin:jsonc/recommended-with-jsonc"
                        ],
                        "parser": "jsonc-eslint-parser",
                            "parserOptions": {
                                "jsonSyntax": "JSONC"
                        }
                    },
                    {
                        "files": ["*.json5"],
                        "extends": [
                            "plugin:jsonc/recommended-with-json5"
                        ],
                        "parser": "jsonc-eslint-parser",
                            "parserOptions": {
                                "jsonSyntax": "JSON5"
                        }
                    }
                ]
            }
            </code>
          </pre>
          </details>
    linter_rules_url: https://ota-meshi.github.io/eslint-plugin-jsonc/rules/
    linter_banner_image_url: https://d33wubrfki0l68.cloudfront.net/3b5ac7586466159bb6f237b633bfc4f5a8d5acf8/ee0a1/assets/img/posts/eslint-collective.png
    linter_rules_configuration_url: https://eslint.org/docs/latest/use/configure
    linter_rules_inline_disable_url: https://eslint.org/docs/latest/use/configure/rules#disabling-rules
    linter_rules_ignore_config_url: https://eslint.org/docs/latest/user-guide/configuring/ignoring-code#the-eslintignore-file
    linter_megalinter_ref_url: https://eslint.org/docs/latest/use/integrations#source-control
    cli_lint_mode: list_of_files
    cli_executable: eslint
    config_file_name: .eslintrc-json.json
    cli_config_extra_args:
      - "--no-eslintrc"
    cli_lint_extra_args:
      - "--no-ignore"
    ignore_file_name: .eslintignore
    cli_lint_ignore_arg_name: --ignore-path
    cli_lint_fix_arg_name: "--fix"
    cli_sarif_args:
      - --format
      - "@microsoft/eslint-formatter-sarif"
      - -o
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "âœ– ([0-9]+) problem"
    cli_executable_version: "npm"
    cli_version_arg_name: ""
    cli_version_extra_args: ["list", "eslint-plugin-jsonc", "--prefix", "/node-deps"]
    examples:
      - "eslint myfile.json"
      - "eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json"
      - "eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json5"
      - "eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.jsonc"
      - "eslint --fix -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=eslint
          ARG NPM_ESLINT_VERSION=8.57.1
        - |-
          # renovate: datasource=npm depName=eslint-plugin-jsonc
          ARG NPM_ESLINT_PLUGIN_JSONC_VERSION=2.20.0
        - |-
          # renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif
          ARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0
      npm:
        - eslint@${NPM_ESLINT_VERSION}
        - eslint-plugin-jsonc@${NPM_ESLINT_PLUGIN_JSONC_VERSION}
        - "@microsoft/eslint-formatter-sarif@${NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION}"
    ide:
      vscode:
        - name: vscode-eslint
          url: https://github.com/ota-meshi/eslint-plugin-jsonc#visual-studio-code
    # V8R
  - linter_name: v8r
    linter_url: https://github.com/chris48s/v8r
    linter_repo: https://github.com/chris48s/v8r
    linter_spdx_license: MIT
    linter_speed: 1
    linter_text: |
      **v8r** is a command-line validator for JSON, YAML, and TOML files that automatically detects and applies appropriate schemas from the Schema Store based on filename patterns, providing intelligent validation without manual schema configuration.

      **Key Features:**

      - **Automatic Schema Detection**: Uses [Schema Store](https://www.schemastore.org/) to intelligently match files with appropriate schemas based on filename patterns
      - **Multi-Format Support**: Validates JSON, YAML, and TOML files with consistent interface across formats
      - **Zero Configuration**: Works out-of-the-box for common configuration files without requiring explicit schema specification
      - **Schema Store Integration**: Leverages the extensive collection of schemas from schemastore.org for popular tools and frameworks
      - **Detailed Error Reporting**: Provides clear, actionable validation error messages with line and column information
    linter_rules_url: https://www.schemastore.org/
    linter_megalinter_ref_url: "no"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--ignore-errors"
    cli_help_arg_name: "--help"
    test_folder: json_schema
    examples:
      - "v8r --ignore-errors myfile.json"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=v8r
          ARG NPM_V8R_VERSION=5.0.0
      npm:
        - v8r@${NPM_V8R_VERSION}
    ide:
      eclipse:
        - name: native support
          url: https://www.eclipse.org/
      idea:
        - name: native support
          url: https://www.jetbrains.com/products/#type=ide
      vim:
        - name: vison
          url: https://github.com/Quramy/vison
      vscode:
        - name: native support
          url: https://code.visualstudio.com/
  # PRETTIER
  - linter_name: prettier
    linter_text: |
      **Prettier** is the industry-standard opinionated code formatter with excellent JSON support that automatically formats JSON files for consistency and readability. It brings professional formatting standards to JSON data across configuration files, APIs, and data structures.

      **Key Features:**

      - **JSON-Specific Formatting**: Specialized handling of JSON syntax with proper indentation, spacing, and structure
      - **Consistent Output**: Deterministic formatting ensures identical results across different environments and developers
      - **Parse Safety**: AST-based processing validates JSON syntax while formatting, catching errors during formatting
      - **Opinionated Approach**: Zero-configuration setup with sensible defaults optimized for JSON readability
      - **Fast Performance**: High-speed formatting suitable for large JSON files
      - **Nested Structure Handling**: Intelligent formatting of complex nested objects and arrays for optimal readability
      - **Team Standardization**: Eliminates JSON formatting debates and ensures uniform data structure presentation
      - **Configuration Flexibility**: Supports project-specific formatting rules through .prettierrc when customization is needed
    is_formatter: true
    linter_url: https://prettier.io/
    linter_repo: https://github.com/prettier/prettier
    linter_spdx_license: MIT
    linter_rules_url: https://prettier.io/docs/en/options.html
    linter_rules_configuration_url: https://prettier.io/docs/en/configuration.html
    linter_rules_inline_disable_url: https://prettier.io/docs/en/ignore.html#javascript
    linter_banner_image_url: https://github.com/standard/standard/raw/master/sticker.png
    config_file_name: ".prettierrc.json"
    cli_config_arg_name: "--config"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--check"
    cli_lint_fix_arg_name: "--write" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--check"
    test_folder: json_prettier
    examples:
      - "prettier --check myfile.json"
      - "prettier --config .prettierrc.json --check myfile.json"
      - "prettier --config .prettierrc.json --write myfile.json" # format
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=prettier
          ARG NPM_PRETTIER_VERSION=3.6.2
      npm:
        - "prettier@${NPM_PRETTIER_VERSION}"
    ide:
      emacs:
        - name: prettier-emacs
          url: https://github.com/prettier/prettier-emacs
        - name: prettier.el
          url: https://github.com/jscheid/prettier.el
        - name: apheleia
          url: https://github.com/raxod502/apheleia
      idea:
        - name: Prettier
          url: https://plugins.jetbrains.com/plugin/10456-prettier
          id: intellij.prettierJS
      sublime:
        - name: JsPrettier
          url: https://packagecontrol.io/packages/JsPrettier
      vim:
        - name: vim-prettier
          url: https://github.com/prettier/vim-prettier
      visual_studio:
        - name: JavaScriptPrettier
          url: https://github.com/madskristensen/JavaScriptPrettier
      vscode:
        - name: prettier-vscode
          url: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
  # npm-package-json-lint
  - linter_name: npm-package-json-lint
    linter_text: |
      **npm-package-json-lint** is a specialized linter designed specifically for npm package.json files that ensures consistency, correctness, and adherence to best practices in Node.js project configuration. It serves as an essential tool for maintaining professional npm package standards.

      **Key Features:**

      - **Package.json Focused**: Specialized validation specifically for npm package.json structure and content
      - **Comprehensive Rule Set**: Extensive collection of rules covering dependencies, metadata, scripts, and package configuration
      - **Best Practices Enforcement**: Validates against npm and Node.js ecosystem best practices and conventions
      - **Configurable Validation**: Highly customizable rules through .npmpackagejsonlintrc.json configuration files
      - **Dependency Analysis**: Checks for missing dependencies, version format consistency, and dependency organization
      - **Metadata Validation**: Ensures required fields like name, version, description are present and properly formatted
      - **Script Analysis**: Validates npm scripts for common patterns and potential issues
      - **Multi-Project Support**: Handles monorepos and complex project structures with hierarchical configuration
    linter_url: https://npmpackagejsonlint.org/
    linter_repo: https://github.com/tclindner/npm-package-json-lint
    linter_spdx_license: MIT
    linter_rules_url: https://npmpackagejsonlint.org/docs/rules
    linter_rules_configuration_url: https://npmpackagejsonlint.org/docs/configuration
    linter_rules_ignore_config_url: https://npmpackagejsonlint.org/docs/ignore
    linter_image_url: https://npmpackagejsonlint.org/img/logo.svg
    linter_megalinter_ref_url: https://npmpackagejsonlint.org/docs/integrations#megalinter
    descriptor_flavors:
      - cupcake
      - dotnet
      - dotnetweb
      - javascript
      - salesforce
    file_names_regex:
      - "package\\.json"
    active_only_if_file_found:
      - "package.json"
    cli_lint_mode: project
    cli_executable: npmPkgJsonLint
    cli_config_arg_name: --configFile
    config_file_name: .npmpackagejsonlintrc.json
    ignore_file_name: .npmpackagejsonlintignore
    cli_lint_extra_args:
      - --quiet
    cli_lint_extra_args_after:
      - "."
    cli_help_arg_name: --help
    test_folder: npm_package_json_lint
    examples:
      - "npmPkgJsonLint ."
      - "npmPkgJsonLint --configFile .npmpackagejsonlintrc.json ."
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=npm-package-json-lint
          ARG NPM_PACKAGE_JSON_LINT_VERSION=8.0.0
        - |-
          # renovate: datasource=npm depName=npm-package-json-lint-config-default
          ARG NPM_PACKAGE_JSON_LINT_CONFIG_DEFAULT_VERSION=7.0.1
      npm:
        - "npm-package-json-lint@${NPM_PACKAGE_JSON_LINT_VERSION}"
        - "npm-package-json-lint-config-default@${NPM_PACKAGE_JSON_LINT_CONFIG_DEFAULT_VERSION}"
