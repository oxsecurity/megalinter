descriptor_id: TYPESCRIPT
descriptor_type: language
descriptor_flavors:
  - cupcake
  - dotnetweb
  - formatters
  - javascript
file_extensions:
  - ".ts"
install:
  dockerfile:
    - |-
      # renovate: datasource=npm depName=typescript
      ARG NPM_TYPESCRIPT_VERSION=5.8.3
  npm:
    - typescript@${NPM_TYPESCRIPT_VERSION}
linters:
  # ESLINT
  - class: EslintLinter
    linter_name: eslint
    name: TYPESCRIPT_ES
    can_output_sarif: true
    linter_spdx_license: MIT
    linter_text: |
      **TypeScript ESLint** enables ESLint to run on TypeScript code, bringing together the best of both tools to help you write high-quality TypeScript applications.

      **Key Features:**

      - **TypeScript Parser**: Allows ESLint to parse TypeScript syntax natively, understanding decorators, interfaces, enums, and modern TypeScript features
      - **Type-Aware Linting**: Leverages TypeScript's type information for advanced static analysis that can catch type-related errors and enforce type safety
      - **100+ TypeScript-Specific Rules**: Comprehensive rule set covering TypeScript best practices, type definitions, naming conventions, and code quality
      - **Seamless Integration**: Drop-in replacement for standard ESLint with TypeScript projects, maintaining all existing ESLint functionality
      - **Multiple Configuration Presets**: Recommended, strict, and stylistic configurations for different project requirements
      - **Performance Optimized**: Efficient parsing and linting designed for large TypeScript codebases with minimal performance impact

      ESLint requires a custom configuration file applicable to your project. You can create it by typing `npx eslint --init` in the root of your repository
    linter_url: https://typescript-eslint.io/
    linter_repo: https://github.com/typescript-eslint/typescript-eslint
    linter_rules_url: https://typescript-eslint.io/rules/
    linter_banner_image_url: https://typescript-eslint.io/img/logo.svg
    linter_rules_configuration_url: https://typescript-eslint.io/getting-started/#configuration-values
    linter_rules_inline_disable_url: https://eslint.org/docs/latest/use/configure/rules#disabling-rules
    linter_rules_ignore_config_url: https://eslint.org/docs/latest/use/configure/ignore#the-eslintignore-file
    linter_megalinter_ref_url: https://eslint.org/docs/latest/use/integrations#source-control
    active_only_if_file_found:
      - ".eslintrc.json"
      - ".eslintrc.yml"
      - ".eslintrc.yaml"
      - ".eslintrc.js"
      - ".eslintrc.cjs"
      - "package.json:eslintConfig"
    cli_lint_mode: list_of_files
    config_file_name: .eslintrc.json
    cli_config_extra_args:
      - "--no-eslintrc"
    cli_lint_extra_args:
      - "--no-ignore"
    ignore_file_name: .eslintignore
    cli_lint_ignore_arg_name: --ignore-path
    cli_lint_fix_arg_name: "--fix"
    cli_sarif_args:
      - --format
      - "@microsoft/eslint-formatter-sarif"
      - -o
      - "{{SARIF_OUTPUT_FILE}}"
    cli_lint_errors_count: regex_sum
    cli_lint_errors_regex: "âœ– ([0-9]+) problem"
    examples:
      - "eslint myfile.ts"
      - "eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts"
      - "eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=eslint
          ARG NPM_ESLINT_VERSION=8.57.1
        - |-
          # renovate: datasource=npm depName=eslint-config-airbnb
          ARG NPM_ESLINT_CONFIG_AIRBNB_VERSION=19.0.4
        - |-
          # renovate: datasource=npm depName=eslint-config-prettier
          ARG NPM_ESLINT_CONFIG_PRETTIER_VERSION=10.1.5
        - |-
          # renovate: datasource=npm depName=eslint-config-standard
          ARG NPM_ESLINT_CONFIG_STANDARD_VERSION=17.1.0
        - |-
          # renovate: datasource=npm depName=eslint-plugin-import
          ARG NPM_ESLINT_PLUGIN_IMPORT_VERSION=2.32.0
        - |-
          # renovate: datasource=npm depName=eslint-plugin-jest
          ARG NPM_ESLINT_PLUGIN_JEST_VERSION=29.0.1
        - |-
          # renovate: datasource=npm depName=eslint-plugin-n
          ARG NPM_ESLINT_PLUGIN_N_VERSION=16.6.2
        - |-
          # renovate: datasource=npm depName=eslint-plugin-prettier
          ARG NPM_ESLINT_PLUGIN_PRETTIER_VERSION=5.5.1
        - |-
          # renovate: datasource=npm depName=eslint-plugin-promise
          ARG NPM_ESLINT_PLUGIN_PROMISE_VERSION=6.6.0
        - |-
          # renovate: datasource=npm depName=@babel/eslint-parser
          ARG NPM_BABEL_ESLINT_PARSER_VERSION=7.28.0
        - |-
          # renovate: datasource=npm depName=prettier
          ARG NPM_PRETTIER_VERSION=3.6.2
        - |-
          # renovate: datasource=npm depName=prettyjson
          ARG NPM_PRETTYJSON_VERSION=1.2.5
        - |-
          # renovate: datasource=npm depName=@typescript-eslint/eslint-plugin
          ARG NPM_TYPESCRIPT_ESLINT_ESLINT_PLUGIN_VERSION=8.37.0
        - |-
          # renovate: datasource=npm depName=@typescript-eslint/parser
          ARG NPM_TYPESCRIPT_ESLINT_PARSER_VERSION=8.37.0
        - |-
          # renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif
          ARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0
      npm:
        - eslint@${NPM_ESLINT_VERSION}
        - eslint-config-airbnb@${NPM_ESLINT_CONFIG_AIRBNB_VERSION}
        - eslint-config-prettier@${NPM_ESLINT_CONFIG_PRETTIER_VERSION}
        - eslint-config-standard@${NPM_ESLINT_CONFIG_STANDARD_VERSION}
        - eslint-plugin-import@${NPM_ESLINT_PLUGIN_IMPORT_VERSION}
        - eslint-plugin-jest@${NPM_ESLINT_PLUGIN_JEST_VERSION}
        - eslint-plugin-n@${NPM_ESLINT_PLUGIN_N_VERSION}
        - eslint-plugin-prettier@${NPM_ESLINT_PLUGIN_PRETTIER_VERSION}
        - eslint-plugin-promise@${NPM_ESLINT_PLUGIN_PROMISE_VERSION}
        - "@babel/eslint-parser@${NPM_BABEL_ESLINT_PARSER_VERSION}"
        - prettier@${NPM_PRETTIER_VERSION}
        - prettyjson@${NPM_PRETTYJSON_VERSION}
        - "@typescript-eslint/eslint-plugin@${NPM_TYPESCRIPT_ESLINT_ESLINT_PLUGIN_VERSION}"
        - "@typescript-eslint/parser@${NPM_TYPESCRIPT_ESLINT_PARSER_VERSION}"
        - "@microsoft/eslint-formatter-sarif@${NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION}"
    ide:
      brackets:
        - name: brackets-eslint
          url: https://github.com/brackets-userland/brackets-eslint
      eclipse:
        - name: Tern-Linter-ESLint
          url: https://github.com/angelozerr/tern.java/wiki/Tern-Linter-ESLint
      emacs:
        - name: flycheck
          url: http://www.flycheck.org/en/latest/languages.html#javascript
      idea:
        - name: ESLint Plugin
          url: https://plugins.jetbrains.com/plugin/7494-eslint
          id: com.wix.eslint
      sublime:
        - name: SublimeLinter-eslint
          url: https://github.com/roadhump/SublimeLinter-eslint
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
        - name: Syntastic
          url: https://github.com/vim-syntastic/syntastic/tree/master/syntax_checkers/javascript
      vscode:
        - name: vscode-eslint
          url: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
  # STANDARD
  - class: TypeScriptStandardLinter
    linter_name: ts-standard
    linter_text: |
      **TypeScript Standard Style** is the TypeScript edition of the popular JavaScript Standard Style that brings zero-configuration linting and formatting to TypeScript projects. It extends the proven JavaScript Standard rules with TypeScript-specific enhancements and type-aware analysis.

      **Key Features:**

      - **Zero Configuration**: No setup files or configuration required - install and run immediately
      - **TypeScript-Aware**: Built-in understanding of TypeScript syntax, types, interfaces, and modern features
      - **Automatic Fixing**: Built-in `--fix` option automatically corrects most style violations and type issues
      - **Standard Rules**: Maintains the same proven style rules as JavaScript Standard (2-space indent, single quotes, no semicolons)
      - **Type Safety**: Enforces TypeScript best practices and type safety patterns
      - **Fast Performance**: Quick analysis suitable for large TypeScript codebases
      - **Wide Adoption**: Used by TypeScript projects that prefer the Standard style approach over ESLint configurations
      - **Consistent Output**: Deterministic formatting across different development environments and team members
    name: TYPESCRIPT_STANDARD
    linter_spdx_license: MIT
    activation_rules:
      - type: variable
        variable: TYPESCRIPT_STANDARD
        expected_value: ts-standard
        default_value: ts-standard
    linter_url: https://standardjs.com/
    linter_repo: https://github.com/standard/ts-standard
    linter_rules_url: https://standardjs.com/rules.html
    linter_rules_configuration_url: https://github.com/standard/ts-standard#readme
    linter_rules_inline_disable_url: https://standardjs.com/#how-do-i-disable-a-rule
    linter_banner_image_url: https://github.com/standard/standard/raw/master/sticker.png
    cli_lint_mode: list_of_files
    cli_lint_fix_arg_name: "--fix"
    examples:
      - "ts-standard myfile.ts"
      - "ts-standard --fix myfile.ts"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=ts-standard
          ARG NPM_TS_STANDARD_VERSION=12.0.2
      npm:
        - ts-standard@${NPM_TS_STANDARD_VERSION}
    ide:
      idea:
        - name: native support
          url: https://blog.jetbrains.com/webstorm/2017/01/webstorm-2017-1-eap-171-2272/
      sublime:
        - name: SublimeLinter-contrib-standard
          url: https://packagecontrol.io/packages/SublimeLinter-contrib-standard
        - name: StandardFormat
          url: https://packagecontrol.io/packages/StandardFormat
      vscode:
        - name: https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard
          url: vscode-standard
  # PRETTIER
  - linter_name: prettier
    linter_text: |
      **Prettier** is the industry-leading opinionated code formatter with first-class TypeScript support that automatically formats TypeScript code to ensure consistency and readability. It handles TypeScript's complex syntax including generics, decorators, and type annotations with intelligent formatting rules.

      **Key Features:**

      - **TypeScript-Native**: Deep understanding of TypeScript syntax, types, interfaces, generics, and decorators
      - **Type Annotation Preservation**: Carefully formats complex type definitions while maintaining readability
      - **Opinionated Formatting**: Zero-configuration approach with sensible defaults optimized for TypeScript development
      - **Parse Safety**: AST-based processing ensures formatted code maintains semantic equivalence to the original
      - **Modern TypeScript Support**: Full compatibility with latest TypeScript features and syntax
      - **Consistent Output**: Deterministic formatting produces identical results across different development environments
      - **Fast Performance**: High-speed formatting suitable for large TypeScript codebases
      - **Team Standardization**: Eliminates formatting debates and ensures uniform TypeScript code style across teams
    is_formatter: true
    linter_spdx_license: MIT
    activation_rules:
      - type: variable
        variable: TYPESCRIPT_DEFAULT_STYLE
        expected_value: prettier
        default_value: standard
    linter_url: https://prettier.io/
    linter_repo: https://github.com/prettier/prettier
    linter_rules_url: https://prettier.io/docs/en/options.html
    linter_rules_configuration_url: https://prettier.io/docs/en/configuration.html
    linter_rules_inline_disable_url: https://prettier.io/docs/en/ignore.html#javascript
    linter_banner_image_url: https://unpkg.com/prettier-logo@1.0.3/images/prettier-banner-light.svg
    config_file_name: ".prettierrc.json"
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--config"
    cli_lint_extra_args:
      - "--check"
    cli_lint_fix_arg_name: "--write" # Workaround for MegaLinter
    cli_lint_fix_remove_args:
      - "--check"
    test_folder: typescript_prettier
    test_variables:
      TYPESCRIPT_DEFAULT_STYLE: prettier
    examples:
      - "prettier --check myfile.ts"
      - "prettier --config .prettierrc.json --check myfile.ts"
      - "prettier --config .prettierrc.json --write myfile.ts" # format
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=prettier
          ARG NPM_PRETTIER_VERSION=3.6.2
      npm:
        - "prettier@${NPM_PRETTIER_VERSION}"
    ide:
      emacs:
        - name: prettier-emacs
          url: https://github.com/prettier/prettier-emacs
        - name: prettier.el
          url: https://github.com/jscheid/prettier.el
        - name: apheleia
          url: https://github.com/raxod502/apheleia
      idea:
        - name: Prettier
          url: https://plugins.jetbrains.com/plugin/10456-prettier
          id: intellij.prettierJS
      sublime:
        - name: JsPrettier
          url: https://packagecontrol.io/packages/JsPrettier
      vim:
        - name: vim-prettier
          url: https://github.com/prettier/vim-prettier
      visual_studio:
        - name: JavaScriptPrettier
          url: https://github.com/madskristensen/JavaScriptPrettier
      vscode:
        - name: prettier-vscode
          url: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
