descriptor_id: YAML
descriptor_type: format
descriptor_flavors:
  - all_flavors # Any project can contain YAML
  - ci_light
  - cupcake
file_extensions:
  - ".yml"
  - ".yaml"
linters:
  # PRETTIER
  - linter_name: prettier
    linter_text: |
      **Prettier** is the industry-standard opinionated code formatter that brings consistency to YAML files by enforcing a unified style across projects. It eliminates formatting debates by automatically reformatting code according to its proven formatting principles.

      **Key Features:**

      - **Opinionated Formatting**: Zero-configuration approach with sensible defaults that work well for most projects
      - **Consistent Output**: Deterministic formatting ensures identical results regardless of environment or developer
      - **YAML Optimization**: Specialized handling of YAML syntax including proper indentation, spacing, and structure
      - **Multi-Language Support**: Part of a comprehensive formatting ecosystem covering 20+ languages
      - **Parse Safety**: Validates that formatted code maintains semantic equivalence to the original
      - **Configuration Flexibility**: Supports project-specific settings through .prettierrc files when customization is needed
      - **Fast Performance**: High-speed formatting suitable for large YAML files
      - **Team Standardization**: Eliminates style discussions and ensures consistent formatting across team members
    is_formatter: true
    linter_url: https://prettier.io/
    linter_repo: https://github.com/prettier/prettier
    linter_spdx_license: MIT
    linter_rules_url: https://prettier.io/docs/en/options.html
    linter_rules_configuration_url: https://prettier.io/docs/en/configuration.html
    linter_rules_inline_disable_url: https://prettier.io/docs/en/ignore.html#yaml
    linter_banner_image_url: https://github.com/standard/standard/raw/master/sticker.png
    config_file_name: ".prettierrc.json"
    cli_config_arg_name: "--config"
    cli_lint_mode: list_of_files
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "\\[error\\]"
    cli_lint_warnings_count: regex_count
    cli_lint_warnings_regex: "\\[warn\\]"
    cli_lint_extra_args:
      - "--check"
    cli_lint_fix_arg_name: "--write"
    cli_lint_fix_remove_args:
      - "--check"
    examples:
      - "prettier --check myfile.yml"
      - "prettier --config .prettierrc.json --check myfile.yml"
      - "prettier --config .prettierrc.json --write myfile.yml" # format
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=prettier
          ARG NPM_PRETTIER_VERSION=3.6.2
      npm:
        - "prettier@${NPM_PRETTIER_VERSION}"
    ide:
      emacs:
        - name: prettier-emacs
          url: https://github.com/prettier/prettier-emacs
        - name: prettier.el
          url: https://github.com/jscheid/prettier.el
        - name: apheleia
          url: https://github.com/raxod502/apheleia
      idea:
        - name: Prettier
          url: https://plugins.jetbrains.com/plugin/10456-prettier
          id: intellij.prettierJS
      sublime:
        - name: JsPrettier
          url: https://packagecontrol.io/packages/JsPrettier
      vim:
        - name: vim-prettier
          url: https://github.com/prettier/vim-prettier
      visual_studio:
        - name: JavaScriptPrettier
          url: https://github.com/madskristensen/JavaScriptPrettier
      vscode:
        - name: prettier-vscode
          url: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
  # YAMLLINT
  - linter_name: yamllint
    linter_text: |
      **yamllint** is a linter for YAML files that checks for syntax validity, key repetition, lines length, trailing spaces, indentation, and other common YAML issues. It helps ensure YAML files are well-formed, follow consistent formatting conventions, and avoid common pitfalls.

      **Key Features:**

      - **Syntax validity checking** to catch malformed YAML documents
      - **Key repetition detection** preventing duplicate keys in mappings
      - **Line length validation** ensuring consistent formatting standards
      - **Trailing whitespace detection** for cleaner file maintenance
      - **Indentation validation** enforcing consistent YAML structure
      - **Document structure analysis** checking for proper YAML document format
      - **Custom rule configuration** via `.yamllint.yml` configuration files
      - **Multiple output formats** including standard and colored output
      - **Inline comment disabling** for granular rule control
      - **Performance optimized** for handling large YAML files efficiently
      - **Strict mode support** for maximum validation rigor
    linter_url: https://yamllint.readthedocs.io/
    linter_repo: https://github.com/adrienverge/yamllint
    linter_spdx_license: GPL-3.0
    linter_speed: 3
    linter_rules_url: https://yamllint.readthedocs.io/en/stable/rules.html
    linter_rules_configuration_url: https://yamllint.readthedocs.io/en/stable/configuration.html#configuration
    linter_rules_inline_disable_url: https://yamllint.readthedocs.io/en/stable/disable_with_comments.html
    linter_megalinter_ref_url: "no"
    config_file_name: ".yamllint.yml"
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - --format
      - standard
    cli_lint_errors_count: regex_count
    cli_lint_errors_regex: "[0-9]+:[0-9]+:?\\s*(?:\\[?warning\\]?|\\[?error\\]?)|(?:::warning file=|::error file=)"
    examples:
      - "yamllint myfile.yaml"
      - "yamllint -c .yamllint.yml myfile.yaml"
      - "yamllint --strict"
      - "yamllint --no-warnings"
    install:
      dockerfile:
        - |-
          # renovate: datasource=pypi depName=yamllint
          ARG PIP_YAMLLINT_VERSION=1.37.1
      pip:
        - yamllint==${PIP_YAMLLINT_VERSION}
    ide:
      emacs:
        - name: flycheck
          url: https://github.com/krzysztof-magosa/flycheck-yamllint
      vim:
        - name: ale
          url: https://github.com/w0rp/ale
  # V8R
  - linter_name: v8r
    linter_url: https://github.com/chris48s/v8r
    linter_repo: https://github.com/chris48s/v8r
    linter_spdx_license: MIT
    linter_speed: 1
    linter_text: |
      **v8r** is a command-line validator for JSON, YAML, and TOML files that automatically detects and applies appropriate schemas from the Schema Store based on filename patterns, providing intelligent validation without manual schema configuration.

      **Key Features:**

      - **Automatic Schema Detection**: Uses Schema Store to intelligently match files with appropriate schemas based on filename patterns
      - **Multi-Format Support**: Validates JSON, YAML, and TOML files with consistent interface across formats
      - **Zero Configuration**: Works out-of-the-box for common configuration files without requiring explicit schema specification
      - **Schema Store Integration**: Leverages the extensive collection of schemas from schemastore.org for popular tools and frameworks
      - **Detailed Error Reporting**: Provides clear, actionable validation error messages with line and column information
    linter_rules_url: https://www.schemastore.org/
    linter_megalinter_ref_url: "no"
    config_file_name: ".v8rrc.yml"
    cli_config_arg_name: ""
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "--ignore-errors"
    cli_help_arg_name: "--help"
    test_folder: yaml_schema
    examples:
      - "v8r --ignore-errors myfile.yml"
      - "v8r --ignore-errors myfile.yaml"
    install:
      dockerfile:
        - |-
          # renovate: datasource=npm depName=v8r
          ARG NPM_V8R_VERSION=5.0.0
      npm:
        - v8r@${NPM_V8R_VERSION}
    ide:
      eclipse:
        - name: native support
          url: https://www.eclipse.org/
      idea:
        - name: native support
          url: https://www.jetbrains.com/products/#type=ide
      vim:
        - name: vison
          url: https://github.com/Quramy/vison
      vscode:
        - name: native support
          url: https://code.visualstudio.com/
