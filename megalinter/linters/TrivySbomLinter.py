#!/usr/bin/env python3
"""
Use Trivy to generate SBOM (Software bill of materials)
"""

import json
import logging
import os

from megalinter import Linter
from megalinter.constants import (
    DEFAULT_SARIF_SCHEMA_URI,
    DEFAULT_SARIF_VERSION,
    ML_DOC_URL_DESCRIPTORS_ROOT,
)


class TrivySbomLinter(Linter):
    # Get syft json output and build SARIF output from it
    def manage_sarif_output(self, _return_stdout):
        if self.can_output_sarif is True and self.output_sarif is True:
            json_output_file = f"{self.sarif_output_file}.trivy-sbom.json"
            if os.path.isfile(json_output_file):
                with open(json_output_file, "r", encoding="utf-8") as json_file:
                    json_file_str = json_file.read()
                    if logging.getLogger().isEnabledFor(logging.DEBUG):
                        logging.debug(
                            "Trivy SBOM initial output file: " + json_file_str
                        )
                    trivy_result_sbom = json.loads(json_file_str)
                sarif_obj = {
                    "$schema": DEFAULT_SARIF_SCHEMA_URI,
                    "properties": {
                        "comment": "Generated by MegaLinter for TrivySBOM",
                        "docUrl": f"{ML_DOC_URL_DESCRIPTORS_ROOT}/descriptors/repository_trivy_sbom/",
                        "isSBOM": True,
                    },
                    "runs": [
                        {
                            "tool": {
                                "driver": {
                                    "informationUri": "https://github.com/aquasecurity/trivy",
                                    "name": "trivy",
                                    "rules": [],
                                }
                            },
                            "properties": {"megalinter": {"sbom": trivy_result_sbom}},
                            "results": [],
                        }
                    ],
                    "version": DEFAULT_SARIF_VERSION,
                }
                with open(self.sarif_output_file, "w", encoding="utf-8") as outfile:
                    json.dump(sarif_obj, outfile, indent=4, sort_keys=False)
                    outfile.write("\n")
