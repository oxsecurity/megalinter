{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Verify your code consistency with an open-source tool.Powered by OX Security. <p>MegaLinter is an Open-Source tool for CI/CD workflows that analyzes the consistency of your code, IAC, configuration, and scripts in your repository sources, to ensure all your projects sources are clean and formatted whatever IDE/toolbox is used by their developers, powered by OX Security.</p> <p>Supporting 65 languages, 23 formats, 20 tooling formats and ready to use out of the box, as a GitHub action or any CI system, highly configurable and free for all uses.</p> <p>MegaLinter has native integrations with many of the major CI/CD tools of the market.</p> <p> </p> <p></p> <p>Upgrade to MegaLinter v8 :)</p> <p></p>"},{"location":"#why-megalinter","title":"Why MegaLinter","text":"<p>Projects need to contain clean code, in order to avoid technical debt, that makes evolutive maintenance harder and time consuming.</p> <p>By using code formatters and code linters, you ensure that your code base is easier to read and respects best practices, from the kick-off to each step of the project lifecycle</p> <p>Not all developers have the good habit to use linters in their IDEs, making code reviews harder and longer to process</p> <p>By using MegaLinter, you'll enjoy the following benefits for you and your team:</p> <ul> <li>At each pull request it will automatically analyze all updated code in all languages</li> <li>Reading error logs, developers learn best practices of the language they're using</li> <li>MegaLinter documentation provides the list of IDE plugins integrating each linter, so developers know which linter and plugins to install</li> <li>MegaLinter is ready out of the box after a quick setup</li> <li>Formatting and fixes can be automatically applied on the git branch or provided in reports</li> <li>This tool is 100% open-source and free for all uses (personal, professional, public and private repositories)</li> <li>MegaLinter can run on any CI tool and be run locally: no need to authorize an external application, and your code base never leaves your tooling ecosystem</li> </ul>"},{"location":"#supported-linters","title":"Supported Linters","text":"<p>All linters are integrated in the MegaLinter docker image, which is frequently upgraded with their latest versions</p>"},{"location":"#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT C clang-formatC_CLANG_FORMAT CLOJURE clj-kondoCLOJURE_CLJ_KONDO CLOJURE cljstyleCLOJURE_CLJSTYLE COFFEE coffeelintCOFFEE_COFFEELINT C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT C++ (CPP) clang-formatCPP_CLANG_FORMAT C# (CSHARP) dotnet-formatCSHARP_DOTNET_FORMAT C# (CSHARP) csharpierCSHARP_CSHARPIER C# (CSHARP) roslynatorCSHARP_ROSLYNATOR DART dartanalyzerDART_DARTANALYZER GO golangci-lintGO_GOLANGCI_LINT GO reviveGO_REVIVE GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT JAVA checkstyleJAVA_CHECKSTYLE JAVA pmdJAVA_PMD JAVASCRIPT eslintJAVASCRIPT_ES JAVASCRIPT standardJAVASCRIPT_STANDARD JAVASCRIPT prettierJAVASCRIPT_PRETTIER JSX eslintJSX_ESLINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT LUA luacheckLUA_LUACHECK LUA seleneLUA_SELENE LUA styluaLUA_STYLUA MAKEFILE checkmakeMAKEFILE_CHECKMAKE PERL perlcriticPERL_PERLCRITIC PHP phpcsPHP_PHPCS PHP phpstanPHP_PHPSTAN PHP psalmPHP_PSALM PHP phplintPHP_PHPLINT PHP php-cs-fixerPHP_PHPCSFIXER POWERSHELL powershellPOWERSHELL_POWERSHELL POWERSHELL powershell_formatterPOWERSHELL_POWERSHELL_FORMATTER PYTHON pylintPYTHON_PYLINT PYTHON blackPYTHON_BLACK PYTHON flake8PYTHON_FLAKE8 PYTHON isortPYTHON_ISORT PYTHON banditPYTHON_BANDIT PYTHON mypyPYTHON_MYPY PYTHON pyrightPYTHON_PYRIGHT PYTHON ruffPYTHON_RUFF PYTHON ruff-formatPYTHON_RUFF_FORMAT R lintrR_LINTR RAKU rakuRAKU_RAKU RUBY rubocopRUBY_RUBOCOP RUST clippyRUST_CLIPPY SALESFORCE sfdx-scanner-apexSALESFORCE_SFDX_SCANNER_APEX SALESFORCE sfdx-scanner-auraSALESFORCE_SFDX_SCANNER_AURA SALESFORCE sfdx-scanner-lwcSALESFORCE_SFDX_SCANNER_LWC SALESFORCE lightning-flow-scannerSALESFORCE_LIGHTNING_FLOW_SCANNER SCALA scalafixSCALA_SCALAFIX SQL sqlfluffSQL_SQLFLUFF SQL tsqllintSQL_TSQLLINT SWIFT swiftlintSWIFT_SWIFTLINT TSX eslintTSX_ESLINT TYPESCRIPT eslintTYPESCRIPT_ES TYPESCRIPT ts-standardTYPESCRIPT_STANDARD TYPESCRIPT prettierTYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-formatVBDOTNET_DOTNET_FORMAT"},{"location":"#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON eslint-plugin-jsoncJSON_ESLINT_PLUGIN_JSONC JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT LATEX chktexLATEX_CHKTEX MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN remark-lintMARKDOWN_REMARK_LINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT RST rst-lintRST_RST_LINT RST rstcheckRST_RSTCHECK RST rstfmtRST_RSTFMT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL ARM arm-ttkARM_ARM_TTK BICEP bicep_linterBICEP_BICEP_LINTER CLOUDFORMATION cfn-lintCLOUDFORMATION_CFN_LINT DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lintGHERKIN_GHERKIN_LINT KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE PUPPET puppet-lintPUPPET_PUPPET_LINT SNAKEMAKE snakemakeSNAKEMAKE_LINT SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT TERRAFORM tflintTERRAFORM_TFLINT TERRAFORM terrascanTERRAFORM_TERRASCAN TERRAFORM terragruntTERRAFORM_TERRAGRUNT TERRAFORM terraform-fmtTERRAFORM_TERRAFORM_FMT"},{"location":"#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY devskimREPOSITORY_DEVSKIM REPOSITORY dustilockREPOSITORY_DUSTILOCK REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY kicsREPOSITORY_KICS REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased-beta-main-branch-content","title":"[Unreleased] (beta, main branch content)","text":"<p>Note: Can be used with <code>oxsecurity/megalinter@beta</code> in your GitHub Action mega-linter.yml file, or with <code>oxsecurity/megalinter:beta</code> docker image</p> <ul> <li>Core</li> </ul> <ul> <li>New linters</li> </ul> <ul> <li>Disabled linters</li> </ul> <ul> <li>Media</li> </ul> <ul> <li>Linters enhancements</li> </ul> <ul> <li>Fixes</li> </ul> <ul> <li>Reporters</li> </ul> <ul> <li>Doc</li> </ul> <ul> <li>Flavors</li> </ul> <ul> <li>CI</li> </ul> <ul> <li>mega-linter-runner</li> </ul> <ul> <li>Linter versions upgrades (N)</li> </ul>"},{"location":"CHANGELOG/#v870-2024-05-04","title":"[v8.7.0] - 2024-05-04","text":"<ul> <li>Core<ul> <li>Replace pychalk (not maintained for 7 years) by termcolor, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/5316</li> <li>Update make scripts so they also work on Windows, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/5316</li> <li>Align number columns of markdown tables in reports, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4835</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>Add new CSharpier supported file extensions, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/5292</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Exclude from sanitization the regular expressions that have awful performances, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/5308</li> <li>New variable SKIP_LINTER_OUTPUT_SANITIZATION to skip sanitization to improve performances if you are on a private repository with secured access, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/5308</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (27)<ul> <li>ansible-lint from 25.2.1 to 25.4.0 </li> <li>bicep_linter from 0.34.44 to 0.35.1 </li> <li>cfn-lint from 1.34.1 to 1.34.2 </li> <li>checkov from 3.2.404 to 3.2.413 </li> <li>checkstyle from 10.23.0 to 10.23.1 </li> <li>csharpier from 0.30.6 to 1.0.1 </li> <li>cspell from 8.19.2 to 8.19.4 </li> <li>gitleaks from 8.24.3 to 8.25.1 </li> <li>golangci-lint from 1.64.8 to 2.1.5 </li> <li>lightning-flow-scanner from 3.4.0 to 3.8.0 </li> <li>phpstan from 2.1.12 to 2.1.14 </li> <li>pmd from 7.12.0 to 7.13.0 </li> <li>powershell from 7.5.0 to 7.5.1 </li> <li>protolint from 0.53.0 to 0.54.1 </li> <li>psalm from 6.10.1 to 6.10.2 </li> <li>rubocop from 1.75.3 to 1.75.4 </li> <li>ruff from 0.11.6 to 0.11.8 </li> <li>ruff-format from 0.11.6 to 0.11.8 </li> <li>secretlint from 9.3.1 to 9.3.2 </li> <li>stylelint from 16.19.0 to 16.19.1 </li> <li>terragrunt from 0.77.22 to 0.78.0 </li> <li>tflint from 0.56.0 to 0.57.0 </li> <li>trivy from 0.61.1 to 0.62.0 </li> <li>trivy-sbom from 0.61.1 to 0.62.0 </li> <li>v8r from 4.3.0 to 4.4.0 </li> <li>yamllint from 1.37.0 to 1.37.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v860-2024-04-27","title":"[v8.6.0] - 2024-04-27","text":"<ul> <li>Core<ul> <li>New config property ENABLE_ERRORS_LINTERS. If set, only the listed linters will be considered as blocking</li> </ul> </li> </ul> <ul> <li>New linters<ul> <li>Add cppcheck linter, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/5224</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>Integrating MegaLinter to Automate Linting Across Multiple Codebases. A Technical Description, by Thorsten Foltz</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>editorconfig_checker Changes default EditorConfig-Checker config filename by @llaville in https://github.com/oxsecurity/megalinter/issues/5061</li> <li>TruffleHog: Ignore .git by default if not already done using --exclude-paths option</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Sanitize all linter outputs by default, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/5266</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Add j2lint to plugins, by @wesley-dean in https://github.com/oxsecurity/megalinter/pull/5151</li> <li>Add fmlint (frontmatter linter) to plugins list by @wesley-dean in https://github.com/oxsecurity/megalinter/pull/5257</li> <li>Remove trailing spaces by @parkerbxyz in https://github.com/oxsecurity/megalinter/pull/5185</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Initial Renovate automerge configuration, by @echoix in https://github.com/oxsecurity/megalinter/pull/5057</li> <li>Set update schedule for checkov updates, by @echoix in https://github.com/oxsecurity/megalinter/pull/5064</li> <li>Always upgrade packages from base image for updated security fixes, by @echoix in https://github.com/oxsecurity/megalinter/pull/5152</li> <li>build-command: Unshallow pull or full pull before committing changes, by @echoix in https://github.com/oxsecurity/megalinter/pull/5201</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (50)<ul> <li>ansible-lint from 25.1.3 to 25.2.1</li> <li>bicep_linter from 0.34.1 to 0.34.44</li> <li>cfn-lint from 1.32.0 to 1.34.1</li> <li>checkov from 3.2.390 to 3.2.404</li> <li>checkstyle from 10.21.4 to 10.23.0</li> <li>clippy from 0.1.85 to 0.1.86</li> <li>clj-kondo from 2025.02.20 to 2025.04.07</li> <li>cpplint from 2.0.0 to 2.0.2</li> <li>cspell from 8.17.5 to 8.19.2</li> <li>dartanalyzer from 3.7.2 to 3.7.3</li> <li>devskim from 1.0.52 to 1.0.56</li> <li>dotnet-format from 9.0.104 to 9.0.105</li> <li>flake8 from 7.1.2 to 7.2.0</li> <li>gitleaks from 8.24.2 to 8.24.3</li> <li>grype from 0.90.0 to 0.91.2</li> <li>kics from 2.1.6 to 2.1.7</li> <li>kubescape from 3.0.32 to 3.0.34</li> <li>lightning-flow-scanner from 3.2.0 to 3.4.0</li> <li>ls-lint from 2.2.3 to 2.3.0</li> <li>phplint from 9.5.6 to 9.6.2</li> <li>php-cs-fixer from 3.73.1 to 3.75.0</li> <li>phpcs from 3.12.0 to 3.12.2</li> <li>phpstan from 2.1.8 to 2.1.12</li> <li>pmd from 7.11.0 to 7.12.0</li> <li>psalm from Psalm.6.9.4@ to Psalm.6.10.1@</li> <li>pyright from 1.1.397 to 1.1.400</li> <li>revive from 1.7.0 to 1.9.0</li> <li>rubocop from 1.74.0 to 1.75.3</li> <li>ruff from 0.11.2 to 0.11.6</li> <li>ruff-format from 0.11.2 to 0.11.6</li> <li>secretlint from 9.2.0 to 9.3.1</li> <li>sfdx-scanner-apex from 4.10.0 to 4.11.0</li> <li>sfdx-scanner-aura from 4.10.0 to 4.11.0</li> <li>sfdx-scanner-lwc from 4.10.0 to 4.11.0</li> <li>spectral from 6.14.3 to 6.15.0</li> <li>sqlfluff from 3.3.1 to 3.4.0</li> <li>stylelint from 16.16.0 to 16.19.0</li> <li>swiftlint from 0.58.2 to 0.59.1</li> <li>syft from 1.21.0 to 1.23.1</li> <li>terraform-fmt from 1.11.2 to 1.11.4</li> <li>terragrunt from 0.76.6 to 0.77.22</li> <li>tflint from 0.55.1 to 0.56.0</li> <li>trivy from 0.60.0 to 0.61.1</li> <li>trivy-sbom from 0.60.0 to 0.61.1</li> <li>trufflehog from 3.88.18 to 3.88.25</li> <li>v8r from 4.2.1 to 4.3.0</li> <li>vale from 3.9.4 to 3.11.2</li> <li>yamllint from 1.36.2 to 1.37.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v850-2024-03-23","title":"[v8.5.0] - 2024-03-23","text":"<ul> <li>Core<ul> <li>Addition of warnings to reporters and logic changes to surface warnings even when there are no errors. Addition of <code>cli_lint_warning_count</code> / <code>cli_lint_warning_regex</code> variables to the JSON schema. #4476, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4556</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>kubescape Remove downgraded_version from kubescape, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4712</li> <li>npm-groovy-lint: Undowngrade npm-groovy-lint as there is a new release with issue fixed by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4834</li> <li>syft: Add SBOM file by default in report folder + remove useless debug statement</li> <li>trivy-sbom: Add SBOM file by default in report folder + remove useless debug statement</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Use npm to install pyright</li> <li>Undowngrade npm-groovy-lint as there is a new release with issue fix</li> <li>jscpd: remove forced <code>--exitCode 1</code> to fix https://github.com/oxsecurity/megalinter/issues/4631</li> <li>Use --with-all-dependencies to install phpcs-fixer, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4672</li> <li>Remove Composer config PHP 8.3 compatibility platform for PSALM 6.0, by @llaville in https://github.com/oxsecurity/megalinter/pull/4930</li> <li>Fix lychee upgrade issue (lycheeignore upgrade), by @wesley-dean in https://github.com/oxsecurity/megalinter/pull/4964</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Remove reference to R2DevOps jobs as it has been discontinued (see #4678)</li> <li>Improve contributing doc by adding reference to <code>source .venv/Scripts/activate</code> on Windows</li> <li>Better apk package url, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4707</li> <li>Better package version docs, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4721</li> <li>Correct default SARIF_REPORTER_FILE_NAME, by @yxtay in https://github.com/oxsecurity/megalinter/pull/4783</li> <li>Use github private email for megalinter-bot, by @yxtay in https://github.com/oxsecurity/megalinter/pull/4786</li> <li>Update plugins.md to add raw link to JSON schema, by @wesley-dean in https://github.com/oxsecurity/megalinter/pull/4932</li> </ul> </li> </ul> <ul> <li>Flavors<ul> <li>Add syft in all flavors</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Update .devcontainer configuration, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4843</li> <li>Configure Renovate for gem, cargo, pip and npm dependencies, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4673</li> <li>Configure Renovate for composer dependencies,  by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4916</li> <li>Use packagist data source, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4922</li> <li>Bring back codecov, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4836</li> </ul> </li> </ul> <ul> <li>Plugins<ul> <li>Add docker-compose-linter (dclint) to plugins list, by @wesley-dean in https://github.com/oxsecurity/megalinter/pull/4962</li> <li>Add repolinter to the list of plugins, by @wesley-dean in https://github.com/oxsecurity/megalinter/pull/4972</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (55)<ul> <li>ansible-lint from 25.1.1 to 25.1.3</li> <li>bandit from 1.8.2 to 1.8.3</li> <li>bicep_linter from 0.33.13 to 0.34.1</li> <li>cfn-lint from 1.22.7 to 1.32.0</li> <li>checkov from 3.2.360 to 3.2.390</li> <li>checkstyle from 10.21.2 to 10.21.4</li> <li>clippy from 0.1.84 to 0.1.85</li> <li>clj-kondo from 2025.01.16 to 2025.02.20</li> <li>cspell from 8.17.3 to 8.17.5</li> <li>dartanalyzer from 3.6.2 to 3.7.2</li> <li>detekt from 1.23.7 to 1.23.8</li> <li>dotnet-format from 9.0.102 to 9.0.104</li> <li>editorconfig-checker from 3.2.0 to 3.2.1</li> <li>flake8 from 7.1.1 to 7.1.2</li> <li>gitleaks from 8.23.3 to 8.24.2</li> <li>golangci-lint from 1.63.4 to 1.64.8</li> <li>grype from 0.87.0 to 0.90.0</li> <li>isort from 6.0.0 to 6.0.1</li> <li>kics from 2.1.3 to 2.1.6</li> <li>kubescape from 2.9.0 to 3.0.32</li> <li>lightning-flow-scanner from 2.43.0 to 3.2.0</li> <li>mypy from 1.14.1 to 1.15.0</li> <li>npm-groovy-lint from 15.0.0 to 15.1.0</li> <li>php-cs-fixer from 3.68.5 to 3.73.1</li> <li>phpcs from 3.11.3 to 3.12.0</li> <li>phpstan from 2.1.2 to 2.1.8</li> <li>pmd from 7.9.0 to 7.11.0</li> <li>prettier from 3.4.2 to 3.5.3</li> <li>protolint from 0.52.0 to 0.53.0</li> <li>psalm from Psalm.6.1.0@ to Psalm.6.9.4@</li> <li>puppet-lint from 4.2.4 to 4.3.0</li> <li>pylint from 3.3.4 to 3.3.6</li> <li>pyright from 1.1.393 to 1.1.397</li> <li>revive from 1.6.0 to 1.7.0</li> <li>roslynator from 0.10.0.0 to 0.10.1.0</li> <li>rubocop from 1.71.0 to 1.74.0</li> <li>ruff-format from 0.9.4 to 0.11.2</li> <li>ruff from 0.9.4 to 0.11.2</li> <li>scalafix from 0.14.0 to 0.14.2</li> <li>secretlint from 9.0.0 to 9.2.0</li> <li>sfdx-scanner-apex from 4.9.0 to 4.10.0</li> <li>sfdx-scanner-aura from 4.9.0 to 4.10.0</li> <li>sfdx-scanner-lwc from 4.9.0 to 4.10.0</li> <li>shfmt from 3.10.0 to 3.11.0</li> <li>snakefmt from 0.10.2 to 0.11.0</li> <li>spectral from 6.14.2 to 6.14.3</li> <li>sqlfluff from 3.3.0 to 3.3.1</li> <li>stylelint from 16.14.1 to 16.16.0</li> <li>syft from 1.19.0 to 1.21.0</li> <li>terraform-fmt from 1.10.3 to 1.11.2</li> <li>terragrunt from 0.71.1 to 0.76.6</li> <li>trivy-sbom from 0.59.0 to 0.60.0</li> <li>trivy from 0.59.0 to 0.60.0</li> <li>trufflehog from 3.88.4 to 3.88.14</li> <li>yamllint from 1.35.1 to 1.36.2</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v842-2024-02-02","title":"[v8.4.2] - 2024-02-02","text":"<ul> <li>Media<ul> <li>New video (Brazilian) MegaLinter: Como Automatizar a Qualidade do C\u00f3digo para Todas Plataformas , by Codando TV</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix .NET linters issue: Add --allow-roll-forward to dotnet tool install commands, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4619</li> <li>GH-4610 : PHP CS Fixer linter version available is not correct since running on PHP 8.4 runtime, by @llaville in https://github.com/oxsecurity/megalinter/pull/4611</li> <li>Allow cspell to work with CLI_LINT_MODE=project</li> <li>Downgrade npm-groovy-lint until it's fixed, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4628</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (31)<ul> <li>ansible-lint from 25.1.0 to 25.1.1</li> <li>black from 24.10.0 to 25.1.0</li> <li>cfn-lint from 1.22.7 to 1.23.1</li> <li>checkov from 3.2.357 to 3.2.360</li> <li>cspell from 8.17.2 to 8.17.3</li> <li>dartanalyzer from 3.6.1 to 3.6.2</li> <li>devskim from 1.0.51 to 1.0.52</li> <li>editorconfig-checker from 3.1.2 to 3.2.0</li> <li>gitleaks from 8.23.2 to 8.23.3</li> <li>isort from 5.13.2 to 6.0.0</li> <li>lightning-flow-scanner from 2.39.0 to 2.43.0</li> <li>npm-groovy-lint from 15.0.2 to 15.0.0</li> <li>php-cs-fixer from 3.68.0 to 3.68.5</li> <li>powershell from 7.4.6 to 7.5.0</li> <li>powershell_formatter from 7.4.6 to 7.5.0</li> <li>psalm from Psalm.6.0.0@ to Psalm.6.1.0@</li> <li>pylint from 3.3.3 to 3.3.4</li> <li>pyright from 1.1.392 to 1.1.393</li> <li>raku from 2024.10 to 2024.12</li> <li>roslynator from 0.9.3.0 to 0.10.0.0</li> <li>rubocop from 1.71.0 to 1.71.1</li> <li>ruff-format from 0.9.3 to 0.9.4</li> <li>ruff from 0.9.3 to 0.9.4</li> <li>sfdx-scanner-apex from 4.8.0 to 4.9.0</li> <li>sfdx-scanner-aura from 4.8.0 to 4.9.0</li> <li>sfdx-scanner-lwc from 4.8.0 to 4.9.0</li> <li>tflint from 0.55.0 to 0.55.1</li> <li>trivy-sbom from 0.58.2 to 0.59.0</li> <li>trivy from 0.58.2 to 0.59.0</li> <li>trufflehog from 3.88.2 to 3.88.4</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v841-2024-01-28","title":"[v8.4.1] - 2024-01-28","text":"<ul> <li>Quick fix about PRE_COMMANDS crash (see https://github.com/oxsecurity/megalinter/issues/4591)</li> </ul> <ul> <li>Linter versions upgrades (2)<ul> <li>checkstyle from 10.21.1 to 10.21.2</li> <li>stylelint from 16.14.0 to 16.14.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v840-2024-01-26","title":"[v8.4.0] - 2024-01-26","text":"<ul> <li>Core<ul> <li>PHP Linters use now the <code>bartlett/sarif-php-converters</code> first official release 1.0.0 to generate SARIF reports, by @llaville in https://github.com/oxsecurity/megalinter/pull/4357</li> <li>Upgrade PHP engine from 8.3 to 8.4 and allow Psalm 5.26 to run on this context (by @llaville)</li> <li>Linters can specify in the pre/post commands with a <code>run_before_linters</code> / <code>run_after_linters</code> parameter whether the command is to be executed before/after the execution of the linters themselves (by @bdovaz in #4482)</li> <li>Bump python version to 3.12.8, by @echoix in https://github.com/oxsecurity/megalinter/pull/4372</li> <li>Update to .NET 9, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4488</li> <li>Upgrade PHP engine from 8.3 to 8.4, by @llaville in https://github.com/oxsecurity/megalinter/pull/4524</li> </ul> </li> </ul> <ul> <li>New linters<ul> <li>Reactivate clj-style (Clojure formatter) since its bug is fixed, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4369</li> <li>New python formatter: PYTHON_RUFF_FORMAT, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/4329</li> </ul> </li> </ul> <ul> <li>Disabled linters<ul> <li>Snakemake has been disabled, because its dependency datrie not maintained, and issue open in snakemake repo since july is still pending</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>Add support to phpstan/extension-installer Composer plugin for automatic installation of PHPStan extensions, by @llaville in https://github.com/oxsecurity/megalinter/pull/4337<ul> <li>Learn more about context on GH-4328</li> </ul> </li> <li>Allow Terrascan to lint in file lint mode, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4498</li> <li>Add sarif output to golangci-lint, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4557</li> </ul> </li> </ul> <ul> <li>Plugins<ul> <li>Add prettier for markdown, by Qin Li</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>swiftlint Fix swiftlint error where linter is unable to find lintable files. Fixes #440, by @Noraldeno in https://github.com/oxsecurity/megalinter/pull/4427</li> <li>jscpd url fixes, by @alexanderbazhenoff in https://github.com/oxsecurity/megalinter/pull/4352</li> <li>Don't call get_pr_data if GitLeaks linter is not active, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4469</li> <li>Fix linter disabled reason usage, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4466</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Add contributing docs on venv, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4479</li> <li>Add disabled linter badge, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4477</li> <li>Add AzureCommentReporter instructions, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/4480</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Fix up gitpod config and workflow to support uv 0.5.0+ by @echoix in #4373</li> <li>Use uv.lock file to build docker images, by @echoix in https://github.com/oxsecurity/megalinter/pull/4374</li> <li>Update Renovate schedules for uv and sfdx-hardis, by @echoix in https://github.com/oxsecurity/megalinter/pull/4568</li> <li>Variabilize version and use renovate for updates for the following linters:<ul> <li>all GO linters</li> <li>all REPOSITORY linters</li> <li>arm-ttk</li> <li>bash-shfmt</li> <li>bicep</li> <li>clj-kondo</li> <li>cljstyle</li> <li>csharpier</li> <li>dart</li> <li>ktlint</li> <li>kubescape</li> <li>lychee</li> <li>luacheck</li> <li>markdown-link-check</li> <li>perlcritic</li> <li>raku</li> <li>tsqllint</li> </ul> </li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (66)<ul> <li>actionlint from 1.7.6 to 1.7.7</li> <li>ansible-lint from 24.12.2 to 25.1.0</li> <li>banditto 1.8.2</li> <li>bash-exec from 5.2.26 to 5.2.37</li> <li>bicep_linter from to 0.33.13</li> <li>cfn-lint 1.22.7</li> <li>checkov from to 3.2.357</li> <li>checkstyle from 10.20.1 to 10.21.1</li> <li>clang-format from 17.0.6 to 19.1.4</li> <li>clippy 0.1.84</li> <li>clj-kondo from 2024.11.14 to 2025.01.16</li> <li>cljstyle from 0.15.0 to 0.17.642</li> <li>csharpier from 0.30.2 to 0.30.6</li> <li>cspell from 8.16.0 to 8.17.2</li> <li>devskim from 1.0.44 to 1.0.51</li> <li>djlint from 1.36.1 to 1.36.4</li> <li>dotnet-format from 8.0.111 to 9.0.102</li> <li>editorconfig-checker from 3.0.3 to 3.1.2</li> <li>git_diff from 2.45.2 to 2.47.2</li> <li>gitleaks from 8.21.2 to 8.23.2</li> <li>golangci-lint from 1.62.0 to 1.63.4</li> <li>grype from 0.79.5 to 0.87.0</li> <li>helm from 3.14.3 to 3.16.3</li> <li>ktlint from 1.4.1 to 1.5.0</li> <li>lightning-flow-scanner from 2.36.0 to 2.39.0</li> <li>lychee from 0.17.0 to 0.18.0</li> <li>markdownlint from 0.43.0 to 0.44.0</li> <li>mypy from 1.13.0 to 1.14.0</li> <li>mypy from 1.14.0 to 1.14.1</li> <li>php-cs-fixer from 3.64.0 to 7.4.0</li> <li>phpcs from 3.11.1 to 3.11.3</li> <li>phplint from 9.5.4 to 9.5.6</li> <li>phpstan from 2.0.2 to 2.1.2</li> <li>pmd from 7.7.0 to 7.9.0</li> <li>powershell from 7.4.2 to 7.4.6</li> <li>powershell_formatter from 7.4.2 to 7.4.6</li> <li>prettier from 3.3.3 to 3.4.2</li> <li>protolint from 0.50.5 to 0.52.0</li> <li>psalm from Psalm.5.26.1@ to Psalm.6.0.0@</li> <li>pylint from 3.3.1 to 3.3.3</li> <li>pyright from 1.1.389 to 1.1.392</li> <li>raku from 2020.10 to 2024.10</li> <li>revive from 1.5.1 to 1.6.0</li> <li>rubocop from 1.68.0 to 1.71.0</li> <li>ruff-format from 0.8.6 to 0.9.3</li> <li>ruff from 0.8.0 to 0.9.3</li> <li>scalafix from 0.13.0 to 0.14.0</li> <li>selene from 0.27.1 to 0.28.0</li> <li>sfdx-scanner-apex from 4.7.0 to 4.8.0</li> <li>sfdx-scanner-aura from 4.7.0 to 4.8.0</li> <li>sfdx-scanner-lwc from 4.7.0 to 4.8.0</li> <li>snakemake from 8.25.3 to 8.27.1</li> <li>sqlfluff from 3.2.5 to 3.3.0</li> <li>stylelint from 16.10.0 to 16.14.0</li> <li>swiftlint from 0.57.0 to 0.58.2</li> <li>syft from 1.17.0 to 1.19.0</li> <li>terraform-fmt from 1.10.0 to 1.10.3</li> <li>terraform-fmt from 1.9.8 to 1.10.0</li> <li>terragrunt from 0.68.14 to 0.69.13</li> <li>tflint from 0.54.0 to 0.55.0</li> <li>trivy-sbom from 0.57.1 to 0.58.2</li> <li>trivy from 0.57.1 to 0.58.2</li> <li>trufflehog from 3.84.1 to 3.88.2</li> <li>v8r from 4.2.0 to 4.2.1</li> <li>vale from 3.9.1 to 3.9.4</li> <li>xmllint from 21207 to 21304</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v830-2024-11-23","title":"[v8.3.0] - 2024-11-23","text":"<ul> <li>Core<ul> <li>Display command log (truncated to 250 chars) even when LOG_LEVEL is not DEBUG</li> <li>Allow to replace an ENV var value with the value of another ENV var before calling a PRE_COMMAND (helps for tflint run from GitHub Enterprise)</li> <li>Fix handling of git submodule paths</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>trivy: retry in case of BLOB_UNKNOWN  while downloading vulnerability list</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>Fix UpdatedSourcesReporter when <code>APPLY_FIXES</code> is list (array)</li> <li>Fix AzureCommentReporter when the repo is not found: fallback using BUILD_REPOSITORY_ID. (+ disable space replacement in repo name with <code>AZURE_COMMENT_REPORTER_REPLACE_WITH_SPACES: false</code>)</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Fix Docker mirroring job for release context</li> <li>Remove max parallel jobs for release linters workflow</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (13)<ul> <li>cfn-lint from 1.19.0 to 1.20.0</li> <li>checkov from 3.2.298 to 3.2.311</li> <li>csharpier from 0.29.2 to 0.30.2</li> <li>markdownlint from 0.42.0 to 0.43.0</li> <li>phpstan from 2.0.1 to 2.0.2</li> <li>ruff from 0.7.4 to 0.8.0</li> <li>spectral from 6.14.1 to 6.14.2</li> <li>stylua from 0.20.0 to 2.0.0</li> <li>syft from 1.16.0 to 1.17.0</li> <li>trivy-sbom from 0.57.0 to 0.57.1</li> <li>trivy from 0.57.0 to 0.57.1</li> <li>trufflehog from 3.83.7 to 3.84.1</li> <li>vale from 3.9.0 to 3.9.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v820-2024-11-17","title":"[v8.2.0] - 2024-11-17","text":"<ul> <li>Media<ul> <li>10 MegaLinter Tips and Tricks Unlock its Full Potential by Wes Dean</li> <li>MegaLinter Performance Tuning for Maximum Efficiency by Wes Dean</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>detekt Enable SARIF output + count errors</li> <li>lintr: Support files in subdirectories, fix unit tests</li> <li>phpcs: Activate APPLY_FIXES</li> <li>Salesforce linters: Add SF_CLI_DISABLE_AUTOUPDATE for SF CLI JIT plugins</li> <li>trivy: handle retry if <code>failed to download Java DB</code> is detected</li> <li>tsqllint Re-enabled after .net 8 and security updates</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Add message in PR comment if FAIL_IF_UPDATED_SOURCES is triggered</li> <li>Fix linting errors in GitHub Actions template</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>UpdatedSourcesReporter will git commit &amp; push fixed files to source branch if APPLY_FIXES is set</li> <li>Fix AzureCommentReporter not adding comments to PR</li> <li>Fix AzureCommentReporter fails when target repo contains spaces</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Updated documentation with Azure central pipeline use case</li> <li>Update DevSkim documentation to show a valid exclusion config file</li> <li>Note about <code>risky</code> rules and how to fix rule violations with PHP-CS-Fixer</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Also prune volumes before pulling and pushing to docker hub</li> <li>Externalize mirroring from ghcr.io to docker hub in another workflow to avoid memory issues</li> <li>Squash docker images to have less layers and size</li> <li>Comment jobs related to GitHub Worker images, as CodeTotal is not actively maintained</li> <li>Make gitpod workflow not blocking until uv install is fixed</li> <li>Update stale comment</li> <li>Try several times to embed trivy db during Docker build, as a workaround to the random failures</li> <li>Wait 10 secondes instead of 1 before retrying a failing test method, to avoid race conditions</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades (104)<ul> <li>actionlint from 1.7.3 to 1.7.4</li> <li>ansible-lint from 24.9.2 to 24.10.0</li> <li>bicep_linter from 0.30.23 to 0.31.92</li> <li>cfn-lint from 1.16.1 to 1.19.0</li> <li>checkov from 3.2.257 to 3.2.298</li> <li>checkstyle from 10.18.2 to 10.20.1</li> <li>clippy from 0.1.81 to 0.1.82</li> <li>clj-kondo from 2024.09.27 to 2024.11.14</li> <li>cspell from 8.15.1 to 8.16.0</li> <li>devskim from 1.0.33 to 1.0.44</li> <li>djlint from 1.35.2 to 1.36.1</li> <li>dotnet-format from 8.0.110 to 8.0.111</li> <li>gitleaks from 8.20.1 to 8.21.2</li> <li>golangci-lint from 1.61.0 to 1.62.0</li> <li>ktlint from 1.3.1 to 1.4.1</li> <li>lightning-flow-scanner from 2.34.0 to 2.36.0</li> <li>lychee from 0.16.1 to 0.17.0</li> <li>mypy from 1.11.2 to 1.13.0</li> <li>perlcritic from 1.152 to 1.156</li> <li>phpcs from 3.10.3 to 3.11.1</li> <li>phplint from 9.5.3 to 9.5.4</li> <li>phpstan from 1.12.6 to 2.0.1</li> <li>pmd from 7.6.0 to 7.7.0</li> <li>pyright from 1.1.384 to 1.1.389</li> <li>revive from 1.4.0 to 1.5.1</li> <li>roslynator from 0.9.1.0 to 0.9.3.0</li> <li>rubocop from 1.66.1 to 1.68.0</li> <li>ruff from 0.6.9 to 0.7.4</li> <li>secretlint from 8.4.0 to 9.0.0</li> <li>sfdx-scanner-apex from 4.6.0 to 4.7.0</li> <li>sfdx-scanner-aura from 4.6.0 to 4.7.0</li> <li>sfdx-scanner-lwc from 4.6.0 to 4.7.0</li> <li>shfmt from 3.9.0 to 3.10.0</li> <li>snakemake from 8.21.0 to 8.25.3</li> <li>spectral from 6.13.1 to 6.14.1</li> <li>sqlfluff from 3.2.3 to 3.2.5</li> <li>syft from 1.14.0 to 1.16.0</li> <li>terraform-fmt from 1.9.5 to 1.9.8</li> <li>terragrunt from 0.67.5 to 0.68.14</li> <li>tflint from 0.53.0 to 0.54.0</li> <li>trivy-sbom from 0.56.2 to 0.57.0</li> <li>trivy from 0.56.2 to 0.57.0</li> <li>trufflehog from 3.82.11 to 3.83.7</li> <li>tsqllint from 1.15.3.0 to 1.16.0.0</li> <li>v8r from 4.1.0 to 4.2.0</li> <li>vale from 3.7.1 to 3.9.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v810-2024-10-13","title":"[v8.1.0] - 2024-10-13","text":"<ul> <li>Core<ul> <li>Allow to tag PRE_COMMANDS to run them before loading plugins, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3944</li> <li>Replace usage of setup.py with a pyproject.toml package install, by @echoix in #3893</li> <li>Allow to add custom messages at the end of PR / MR MegaLinter Summary using variable JOB_SUMMARY_ADDITIONAL_MARKDOWN</li> </ul> </li> </ul> <ul> <li>New linters<ul> <li>New LUA linter: selene, by @AlejandroSuero in https://github.com/oxsecurity/megalinter/pull/3978</li> <li>New LUA formatter: stylua, by @AlejandroSuero in https://github.com/oxsecurity/megalinter/pull/3985</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>Trivy<ul> <li>Embed vulnerability database in Docker Image for running trivy on internet-free network</li> <li>Retry 5 times after 3 seconds in case of TooManyRequests when downloading vulnerability database</li> <li>If the retries did not succeed, call trivy with <code>--skip-db-update --skip-check-update</code> (not ideal but better than nothing)</li> </ul> </li> <li>Bash/Perl: Support shell scripts with no extension and only support perl shebangs at the beginning of a file in https://github.com/oxsecurity/megalinter/pull/4076</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>APPLY_FIXES and for PHP_PHPCSFIXER linter, by @llaville in #3963</li> <li>Add debug traces to investigate reporters activation</li> <li>Add more traces for ApiReporter</li> <li>Activate ApiReporter by default</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>Fix ApiReporter not called in MegaLinter flavors</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Fix Grafana Home Dashboard to add missing criteria</li> <li>Update PRE_COMMANDS documentation to describe all properties</li> <li>Update Grafana documentation to fix secrets typo</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Free space in release job to avoid no space left on device, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3914</li> <li>Add <code>pytest-rerunfailures</code> to improve CI control jobs success, by @AlejandroSuero in https://github.com/oxsecurity/megalinter/pull/3993</li> <li>Send GITHUB_TOKEN to trivy-action</li> <li>Workaround to avoid to reach Docker Hub rate limits: Build &amp; push first on ghcr.io, then login to docker hub, then push to docker hub</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.7.1 to 1.7.3</li> <li>ansible-lint from 24.7.0 to 24.9.2</li> <li>bandit from 1.7.9 to 1.7.10</li> <li>bicep_linter from 0.29.47 to 0.30.23</li> <li>black from 24.8.0 to 24.10.0</li> <li>cfn-lint from 1.10.3 to 1.16.1</li> <li>checkov from 3.2.232 to 3.2.257</li> <li>checkstyle from 10.17.0 to 10.18.2</li> <li>clippy from 0.1.80 to 0.1.81</li> <li>clj-kondo from 2024.08.01 to 2024.09.27</li> <li>cpplint from 1.6.1 to 2.0.0</li> <li>csharpier from 0.29.0 to 0.29.2</li> <li>cspell from 8.14.1 to 8.15.1</li> <li>detekt from 1.23.6 to 1.23.7</li> <li>djlint from 1.34.1 to 1.35.2</li> <li>dotnet-format from 8.0.108 to 8.0.110</li> <li>eslint from 8.57.0 to 8.57.1</li> <li>gitleaks from 8.18.4 to 8.20.1</li> <li>golangci-lint from 1.60.1 to 1.61.0</li> <li>kics from 2.1.2 to 2.1.3</li> <li>lightning-flow-scanner from 2.33.0 to 2.34.0</li> <li>lychee from 0.15.1 to 0.16.1</li> <li>markdownlint from 0.41.0 to 0.42.0</li> <li>mypy from 1.11.1 to 1.11.2</li> <li>npm-groovy-lint from 14.6.0 to 15.0.2</li> <li>php-cs-fixer from 3.62.0 to 3.64.0</li> <li>phpcs from 3.10.2 to 3.10.3</li> <li>phplint from 9.4.1 to 9.5.3</li> <li>phpstan from 1.11.11 to 1.12.6</li> <li>pmd from 7.4.0 to 7.6.0</li> <li>psalm from Psalm.5.25.0@ to Psalm.5.26.1@</li> <li>pylint from 3.2.6 to 3.3.1</li> <li>pyright from 1.1.376 to 1.1.384</li> <li>revive from 1.3.9 to 1.4.0</li> <li>roslynator from 0.8.9.0 to 0.9.1.0</li> <li>rubocop from 1.65.1 to 1.66.1</li> <li>ruff from 0.6.1 to 0.6.9</li> <li>scalafix from 0.12.1 to 0.13.0</li> <li>secretlint from 8.2.4 to 8.4.0</li> <li>sfdx-scanner-apex from 4.4.0 to 4.6.0</li> <li>sfdx-scanner-aura from 4.4.0 to 4.6.0</li> <li>sfdx-scanner-lwc from 4.4.0 to 4.6.0</li> <li>shfmt from 3.8.0 to 3.9.0</li> <li>snakemake from 8.18.1 to 8.21.0</li> <li>spectral from 6.11.1 to 6.13.1</li> <li>sqlfluff from 3.1.0 to 3.2.3</li> <li>standard from 17.1.0 to 17.1.2</li> <li>stylelint from 16.8.2 to 16.10.0</li> <li>swiftlint from 0.56.1 to 0.57.0</li> <li>syft from 1.11.0 to 1.14.0</li> <li>terraform-fmt from 1.9.4 to 1.9.5</li> <li>terragrunt from 0.66.8 to 0.67.5</li> <li>terrascan from 1.18.11 to 1.19.9</li> <li>trivy-sbom from 0.54.1 to 0.56.2</li> <li>trivy from 0.54.1 to 0.56.2</li> <li>trufflehog from 3.81.10 to 3.82.8</li> <li>v8r from 4.0.1 to 4.1.0</li> <li>vale from 3.7.0 to 3.7.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v800-2024-08-19","title":"[v8.0.0] - 2024-08-19","text":"<ul> <li>Reporters<ul> <li>New ApiReporter (can be used to build Grafana dashboards), by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3540</li> </ul> </li> </ul> <ul> <li>Removed deprecated linters, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3854<ul> <li>CSS_SCSSLINT: Project discontinued and advising to use stylelint</li> <li>OPENAPI_SPECTRAL: Replaced by API_SPECTRAL (same linter but more formats handled)</li> <li>SQL_SQL_LINT: Project no longer maintained</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Hide to linters by default all environment variables that contain TOKEN, USERNAME or PASSWORD, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3881</li> <li>Allow to override CLI_LINT_MODE when defined as project, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3772</li> <li>Allow to use absolute paths for LINTER_RULES_PATH, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3775</li> <li>Allow to update variables from PRE/POST Commands using <code>output_variables</code> property, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3861</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>MegaLinter: un linter pour les gouverner tous (FR), by Guillaume Arnaud from WeScale</li> <li>MegaLinter, by St\u00e9phane Robert, from 3DS OutScale</li> <li>30 Seconds to Setup MegaLinter: Your Go-To Tool for Automated Code Quality, by Peng Cao |</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>bandit Call bandit with quiet mode to generate less logs, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3892</li> <li>grype Count number of errors returned by Grype,  by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3906</li> <li>yamllint Fix yamllint default format to avoid special characters or GitHub sections in text logs, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3898</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>terrascan fixed errors and removed redundant code, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3767</li> <li>dotnet-format various performance improvements and ability to specify sln or proj paths, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3741</li> <li>swiftlint Remove deprecated argument --path</li> <li>Salesforce linters: Disable SF CLI auto update warning, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3883</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Add images and links to Git, CI/CD &amp; other tools integrations at the beginning of the README, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3885</li> <li>Create README animated GIF presentation of MegaLinter, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3910</li> <li>Format mkdocs search index in place, by @echoix in https://github.com/oxsecurity/megalinter/pull/3890</li> <li>Use consistent spelling of 'flavor', by @InputUsername in https://github.com/oxsecurity/megalinter/pull/3789</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Fix docker warnings, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3853<ul> <li>FromAsCasing: 'as' and 'FROM' keywords' casing do not match</li> <li>NoEmptyContinuation: Empty continuation line</li> <li>SecretsUsedInArgOrEnv: Do not use ARG or ENV instructions for sensitive data</li> </ul> </li> <li>Port Beta workflows to use docker/metadata-action, by @echoix in https://github.com/oxsecurity/megalinter/pull/3860</li> <li>AutoUpdate linters: Always create a PR if the job has been started manually, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3863</li> <li>Add <code>skip_checkout: true</code> to default MegaLinter GitHub Action template</li> <li>Remove path filters in deploy-DEV workflow as it is a required check by @echoix in https://github.com/oxsecurity/megalinter/pull/3894</li> </ul> </li> </ul> <ul> <li>mega-linter-runner<ul> <li>Add new rules to upgrade to MegaLinter v8, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3896</li> <li>Replace glob-promise by glob library, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3902<ul> <li>Minimum NodeJs version is now 20.x</li> </ul> </li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 24.6.1 to 24.7.0</li> <li>bicep_linter from 0.28.1 to 0.29.47</li> <li>black from 24.4.2 to 24.8.0</li> <li>cfn-lint from 1.5.0 to 1.10.3</li> <li>checkov from 3.2.174 to 3.2.232</li> <li>clippy from 0.1.79 to 0.1.80</li> <li>clj-kondo from 2024.05.24 to 2024.08.01</li> <li>csharpier from 0.28.2 to 0.29.0</li> <li>cspell from 8.10.4 to 8.14.1</li> <li>dotnet-format from 8.0.106 to 8.0.108</li> <li>flake8 from 7.1.0 to 7.1.1</li> <li>golangci-lint from 1.59.1 to 1.60.1</li> <li>grype from 0.79.2 to 0.79.5</li> <li>jsonlint from 14.0.3 to 16.0.0</li> <li>kics from 2.1.1 to 2.1.2</li> <li>kubeconform from 0.6.6 to 0.6.7</li> <li>lightning-flow-scanner from 2.28.0 to 2.33.0</li> <li>mypy from 1.10.1 to 1.11.1</li> <li>php-cs-fixer from 3.59.3 to 3.62.0</li> <li>phpcs from 3.10.1 to 3.10.2</li> <li>phpstan from 1.11.9 to 1.11.11</li> <li>pmd from 7.3.0 to 7.4.0</li> <li>prettier from 3.3.2 to 3.3.3</li> <li>protolint from 0.50.2 to 0.50.5</li> <li>pylint from 3.2.5 to 3.2.6</li> <li>pyright from 1.1.370 to 1.1.376</li> <li>revive from 1.3.7 to 1.3.9</li> <li>rstcheck from 6.2.1 to 6.2.4</li> <li>rubocop from 1.64.1 to 1.65.1</li> <li>ruff from 0.5.1 to 0.6.1</li> <li>sfdx-scanner-apex from 4.3.2 to 4.4.0</li> <li>sfdx-scanner-aura from 4.3.2 to 4.4.0</li> <li>sfdx-scanner-lwc from 4.3.2 to 4.4.0</li> <li>snakemake from 8.15.2 to 8.18.1</li> <li>stylelint from 16.6.1 to 16.8.2</li> <li>swiftlint from 0.55.1 to 0.56.1</li> <li>syft from 1.8.0 to 1.11.0</li> <li>terraform-fmt from 1.9.0 to 1.9.4</li> <li>terragrunt from 0.59.6 to 0.66.8</li> <li>tflint from 0.52.0 to 0.53.0</li> <li>trivy-sbom from 0.53.0 to 0.54.1</li> <li>trivy from 0.53.0 to 0.54.1</li> <li>trufflehog from 3.79.0 to 3.81.9</li> <li>v8r from 3.1.0 to 4.0.1</li> <li>vale from 3.6.0 to 3.7.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v7130-2024-07-06","title":"[v7.13.0] - 2024-07-06","text":"<ul> <li>New linters<ul> <li>Add ls-lint, file and folder linter, by @scolladon in https://github.com/oxsecurity/megalinter/pull/3681</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Handle renovate version comments in build script, by @echoix in https://github.com/oxsecurity/megalinter/pull/3617 ,  https://github.com/oxsecurity/megalinter/pull/3627 , https://github.com/oxsecurity/megalinter/pull/3643 , https://github.com/oxsecurity/megalinter/pull/3699 , https://github.com/oxsecurity/megalinter/pull/3700</li> <li>Update base image to python:3.12.4-alpine3.20</li> <li>Use <code>dotnet8-sdk</code> available in the main repository, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3696</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>Introducing MegaLinter: Streamlining Code Quality Checks Across Multiple Languages, by Cloud Tuned</li> <li>Infrastructure as Code GitHub Codespace Template, by Luke Murray</li> <li>Video: How to: Secrets scanning, by Hackitect's playground</li> </ul> </li> </ul> <ul> <li>Linters enhancements<ul> <li>Add SARIF support (v2) for all PHP linters by @llaville in https://github.com/oxsecurity/megalinter/pull/3745 , https://github.com/oxsecurity/megalinter/pull/3729</li> <li>Add python package Pygments to rst-lint venv, by @bobidle in https://github.com/oxsecurity/megalinter/pull/3631</li> <li>CSharpier added ability to override config filename and path, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3664</li> <li>xmllint added support for <code>xsd</code> files, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3665</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Improve support for single argument in <code>get_list_args</code> function, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3589</li> <li>ansible-lint Improved activation by checking for <code>.ansible-lint</code> config file, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3697</li> <li>DevSkim fixed fatal errors when scanning and ability to override config path, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3673</li> <li>GitLeaks add missing schema properties, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3675</li> <li>Powershell Error table truncation improvements, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3620</li> <li>Powershell added missing schema property <code>POWERSHELL_POWERSHELL_FORMATTER_OUTPUT_ENCODING</code>, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3678</li> <li>syft use <code>scan</code> instead of deprecated <code>packages</code> arg, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3613</li> <li>tflint added missing schema property <code>TERRAFORM_TFLINT_SECURED_ENV</code>, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3679</li> <li>tflint fixed deprecated argument and other improvements to default <code>.tflint.hcl</code> template, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3688</li> <li>xmllint added missing schema properties <code>XML_XMLLINT_AUTOFORMAT</code> and <code>XML_XMLLINT_INDENT</code>, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3677</li> <li>yamllint fix error/warning count to work with different log output formats, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3612</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Update documentation icons by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3625</li> </ul> </li> </ul> <ul> <li>Flavors<ul> <li>Add gherkin-lint in c_cpp flavor, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3698</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Bump actions/checkout from 3 to 4, by @KristjanESPERANTO in https://github.com/oxsecurity/megalinter/pull/2994</li> <li>Reduce dependabot PR frequency to weekly by @echoix in https://github.com/oxsecurity/megalinter/pull/3642</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 24.2.3 to 24.6.1</li> <li>bandit from 1.7.8 to 1.7.9</li> <li>bash-exec from 5.2.21 to 5.2.26</li> <li>bicep_linter from 0.27.1 to 0.28.1</li> <li>cfn-lint from 0.87.4 to 1.5.0</li> <li>checkov from 3.2.122 to 3.2.174</li> <li>clang-format from 17.0.5 to 17.0.6</li> <li>clippy from 0.1.78 to 0.1.79</li> <li>cspell from 8.8.3 to 8.10.4</li> <li>editorconfig-checker from 3.0.1 to 3.0.3</li> <li>flake8 from 7.0.0 to 7.1.0</li> <li>git_diff from 2.43.4 to 2.45.2</li> <li>gitleaks from 8.18.2 to 8.18.4</li> <li>golangci-lint from 1.59.0 to 1.59.1</li> <li>grype from 0.78.0 to 0.79.2</li> <li>helm from 3.14.2 to 3.14.3</li> <li>jscpd from 4.0.4 to 4.0.5</li> <li>kics from 2.0.1 to 2.1.1</li> <li>ktlint from 1.2.1 to 1.3.1</li> <li>lightning-flow-scanner from 2.26.0 to 2.28.0</li> <li>markdown-table-formatter from 1.6.0 to 1.6.1</li> <li>mypy from 1.10.0 to 1.10.1</li> <li>npm-package-json-lint from 7.1.0 to 8.0.0</li> <li>php-cs-fixer from 3.58.1 to 3.59.3</li> <li>phplint from 9.3.1 to 9.4.1</li> <li>phpstan from 1.11.3 to 1.11.7</li> <li>pmd from 7.1.0 to 7.3.0</li> <li>prettier from 3.3.0 to 3.3.2</li> <li>protolint from 0.49.7 to 0.50.2</li> <li>psalm from Psalm.5.24.0@ to Psalm.5.25.0@</li> <li>pylint from 3.2.2 to 3.2.5</li> <li>pyright from 1.1.365 to 1.1.370</li> <li>ruff from 0.4.10 to 0.5.1</li> <li>sfdx-scanner-apex from 3.25.0 to 4.3.2</li> <li>sfdx-scanner-aura from 3.25.0 to 4.3.2</li> <li>sfdx-scanner-lwc from 3.25.0 to 4.3.2</li> <li>snakemake from 8.12.0 to 8.15.2</li> <li>sqlfluff from 3.0.7 to 3.1.0</li> <li>swiftlint from 0.54.0 to 0.55.1</li> <li>syft from 1.5.0 to 1.8.0</li> <li>terraform-fmt from 1.8.4 to 1.9.0</li> <li>terragrunt from 0.58.13 to 0.59.6</li> <li>tflint from 0.51.1 to 0.52.0</li> <li>trivy-sbom from 0.51.4 to 0.53.0</li> <li>trivy from 0.51.4 to 0.53.0</li> <li>trufflehog from 3.77.0 to 3.79.0</li> <li>v8r from 3.0.0 to 3.1.0</li> <li>vale from 3.4.2 to 3.6.0</li> <li>xmllint from 21108 to 21207</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v7120-2024-06-02","title":"[v7.12.0] - 2024-06-02","text":"<ul> <li>Core<ul> <li>Add new logs (at debug level) on each linter activation/deactivation</li> <li>Clean MegaLinter own CVE exceptions and order the remaining ones with links to related issues</li> <li>Upgrade to Java 21 except for npm-groovy-lint that requires Java 17</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>Add blog post 5 ways MegaLinter upped our DevSecOps game to the list of English articles by @wesley-dean-flexion in https://github.com/oxsecurity/megalinter/pull/3596</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Add PHP fixer by @llaville in https://github.com/oxsecurity/megalinter/pull/3598</li> <li><code>API_SPECTRAL</code> was added as replacement for <code>OPENAPI_SPECTRAL</code> (deprecated), supporting AsyncAPI and OpenAPI by default. Uses Spectral's standard config file name <code>.spectral.yaml</code> instead of <code>.openapirc.yml</code> with a default config with rulesets for AsyncAPI and OpenAPI enabled. Fixes #3387</li> <li>Disable SQL_TSQLLINT until security issues are solved. Related to https://github.com/tsqllint/tsqllint/issues/333</li> <li>PHP linters (PHP_PHPCS, PHP_PHPLINT, PHP_PHPSTAN) add support to SARIF report output format with help of https://github.com/llaville/sarif-php-sdk</li> <li>Php psalm improvement by @llaville in https://github.com/oxsecurity/megalinter/pull/3541</li> <li><code>KOTLIN_KTLINT</code> now supports <code>list_of_files</code> mode, and has better error counting</li> <li>Upgrade <code>KOTLIN_DETEKT</code> and make it work with cli_lint_mode = project</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Change <code>golangci-lint</code> lint mode to <code>project</code>, by @wandering-tales in https://github.com/oxsecurity/megalinter/pull/3509</li> <li>Disable sql-lint as it is no longer maintained</li> <li>Add new entries <code>findUnusedCode</code> and <code>findUnusedBaselineEntry</code> in default <code>psalm.xml</code> configuration file for PHP_PSALM linter. Related to https://github.com/oxsecurity/megalinter/issues/3538</li> <li>fix(pylint): overgeneral-exceptions fully qualified name by @gardar in https://github.com/oxsecurity/megalinter/pull/3576</li> <li>Update <code>ktlint</code> descriptor to support <code>list_of_files</code> and better error counting by @Yann-J in https://github.com/oxsecurity/megalinter/pull/3575</li> <li>Sync PowerShell version in arm.megalinter-descriptor.yml by @echoix in https://github.com/oxsecurity/megalinter/pull/3586</li> <li>Adjust find commands to clean up files in same step by @echoix in https://github.com/oxsecurity/megalinter/pull/3588</li> <li>Upgrade KOTLIN_DETEKT and make it work with cli_lint_mode = project by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3590</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Handle disabled_reason property in descriptors</li> <li>Sort enums in json schema, by @echoix in https://github.com/oxsecurity/megalinter/pull/3595</li> </ul> </li> </ul> <ul> <li>Flavors</li> </ul> <ul> <li>CI<ul> <li>Build: take in account disabled linters for workflow auto-update</li> <li>Remove useless package-lock.json that was in python tests folder</li> <li>Fix SARIF_REPORTER that was wrongly sent to <code>true</code> to format &amp; fix test methods</li> <li>Build: Write ARG lines at the top of Dockerfiles if they are used by FROM variables</li> <li>Remove Github Actions Workflow telemetry to improve performances</li> <li>Update Docker image for Gitpod to run on Ubuntu Noble, by @echoix</li> <li>Update makefile bootstrap config (gitpod or local) to use uv for package installation, by @echoix</li> <li>Use uv to install Python deps for CI by @echoix in https://github.com/oxsecurity/megalinter/pull/3561</li> <li>Use a single find command to delete pycache files by @echoix in https://github.com/oxsecurity/megalinter/pull/3562</li> <li>Sort schema enums by @echoix in https://github.com/oxsecurity/megalinter/pull/3595</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.27 to 1.7.1</li> <li>ansible-lint from 24.2.2 to 24.2.3</li> <li>bicep_linter from 0.26.170 to 0.27.1</li> <li>black from 24.4.0 to 24.4.2</li> <li>cfn-lint from 0.86.4 to 0.87.4</li> <li>checkov from 3.2.74 to 3.2.122</li> <li>checkstyle from 10.15.0 to 10.17.0</li> <li>clippy from 0.1.77 to 0.1.78</li> <li>clj-kondo from 2024.03.13 to 2024.05.24</li> <li>csharpier from 0.28.1 to 0.28.2</li> <li>cspell from 8.7.0 to 8.8.3</li> <li>detekt from 1.23.5 to 1.23.6</li> <li>dotnet-format from 8.0.104 to 8.0.106</li> <li>editorconfig-checker from 2.7.2 to 3.0.1</li> <li>git_diff from 2.43.0 to 2.43.4</li> <li>golangci-lint from 1.57.2 to 1.59.0</li> <li>grype from 0.77.0 to 0.78.0</li> <li>jscpd from 3.5.10 to 4.0.4</li> <li>kics from 2.0.0 to 2.0.1</li> <li>kubeconform from 0.6.4 to 0.6.6</li> <li>lightning-flow-scanner from 2.22.0 to 2.24.0</li> <li>luacheck from 1.1.2 to 1.2.0</li> <li>lychee from 0.14.3 to 0.15.1</li> <li>markdown-link-check from 3.12.1 to 3.12.2</li> <li>markdown-table-formatter from 1.5.0 to 1.6.0</li> <li>markdownlint from 0.39.0 to 0.41.0</li> <li>mypy from 1.9.0 to 1.10.0</li> <li>npm-groovy-lint from 14.4.1 to 14.6.0</li> <li>phpcs from 3.9.1 to 3.10.1</li> <li>phplint from 9.1.2 to 9.3.1</li> <li>phpstan from 1.10.67 to 1.11.0 to 1.11.3</li> <li>pmd from 6.55.0 to 7.1.0</li> <li>powershell from 7.4.1 to 7.4.2</li> <li>powershell_formatter from 7.4.1 to 7.4.2</li> <li>prettier from 3.2.5 to 3.3.0</li> <li>proselint from 0.13.0 to 0.14.0</li> <li>protolint from 0.49.6 to 0.49.7</li> <li>psalm from Psalm.5.23.1@ to Psalm.5.24.0@</li> <li>pylint from 3.1.0 to 3.2.2</li> <li>pyright from 1.1.359 to 1.1.365</li> <li>roslynator from 0.8.6.0 to 0.8.9.0</li> <li>rubocop from 1.63.3 to 1.64.1</li> <li>ruff from 0.4.1 to 0.4.7</li> <li>scalafix from 0.12.0 to 0.12.1</li> <li>secretlint from 8.2.3 to 8.2.4</li> <li>sfdx-scanner-apex from 3.23.0 to 3.25.0</li> <li>sfdx-scanner-aura from 3.23.0 to 3.25.0</li> <li>sfdx-scanner-lwc from 3.23.0 to 3.25.0</li> <li>snakefmt from 0.10.1 to 0.10.2</li> <li>snakemake from 8.10.8 to 8.12.0</li> <li>sqlfluff from 3.0.5 to 3.0.7</li> <li>stylelint from 16.4.0 to 16.6.1</li> <li>syft from 1.2.0 to 1.5.0</li> <li>tekton-lint from 1.0.2 to 1.1.0</li> <li>terraform-fmt from 1.8.1 to 1.8.4</li> <li>terragrunt from 0.57.5 to 0.58.10</li> <li>tflint from 0.50.3 to 0.51.1</li> <li>trivy-sbom from 0.50.2 to 0.51.4</li> <li>trivy from 0.50.2 to 0.51.4</li> <li>trufflehog from 3.73.0 to 3.77.0</li> <li>vale from 3.4.0 to 3.4.2</li> <li>xmllint from 21107 to 21108</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v7111-2024-04-23","title":"[v7.11.1] - 2024-04-23","text":"<ul> <li>Fixes<ul> <li>Implement fallback in case git diff does not work with merge-base</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>stylelint from 16.3.1 to 16.4.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v7110-2024-04-23","title":"[v7.11.0] - 2024-04-23","text":"<ul> <li>Core<ul> <li>Allow to override the number of parallel cores used, with variable PARALLEL_PROCESS_NUMBER, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3428</li> <li>Upgrade base python image from 3.12.2-alpine3.19 to 3.12.3-alpine3.19</li> <li>Upgrade PHP 8.1 to 8.3 by @llaville in https://github.com/oxsecurity/megalinter/pull/3464</li> <li>Add descriptor pre / post commands, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/3468</li> <li>Allow merge lists with EXTENDS, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/3469</li> </ul> </li> </ul> <ul> <li>Media</li> </ul> <ul> <li>New linters<ul> <li>Add Kotlin detekt linter, by @enciyo in https://github.com/oxsecurity/megalinter/pull/3408</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>Add ruff sarif support, by @Skitionek in https://github.com/oxsecurity/megalinter/pull/3486</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix listing of modified files, by @vkucera in https://github.com/oxsecurity/megalinter/pull/3472. Fixes https://github.com/oxsecurity/megalinter/issues/2125.</li> <li>Fix conflict between prettier and yamllint about spaces, by @apeyrat in https://github.com/oxsecurity/megalinter/pull/3426</li> <li>Ensure trufflehog does not auto-update itself,  by @wandering-tales in https://github.com/oxsecurity/megalinter/pull/3430</li> <li>Salesforce linters: use sf + default Flow Scanner rules, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3435</li> <li>Disable JSON_ESLINT_PLUGIN_JSONC until https://github.com/ota-meshi/eslint-plugin-jsonc/issues/328 is fixed</li> <li>Upgrade tar in mega-linter-runner</li> <li>secretlint: remove default <code>.secretlintignore</code> that was never used but <code>.gitignore</code> is used instead. Fixes #3328</li> <li>Add jpeg, xlsx to .gitleaks.toml, by @rasa in https://github.com/oxsecurity/megalinter/pull/3434</li> <li>Fix Json Schema, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3470</li> <li>Remove <code>TEMPLATES/.secretlintignore</code>, by @pjungermann in https://github.com/oxsecurity/megalinter/pull/3476</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Update R2DevOps logo, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3436</li> <li>Update Roslynator repo url and logo, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3444</li> <li>Fix clang-format documentation links to point to the correct version. Fixes #3452, by @daltonv in https://github.com/oxsecurity/megalinter/pull/3453</li> <li>Add copy to clipboard button in code block (documentation), by @nikkii86 in https://github.com/oxsecurity/megalinter/pull/3491</li> </ul> </li> </ul> <ul> <li>Flavors<ul> <li>Add C &amp; C++ linters in Python flavor by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3456</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Make SPELL_LYCHEE non blocking for internal CI jobs</li> <li>Remove old unused automerge workflows by @echoix in https://github.com/oxsecurity/megalinter/pull/3432</li> <li>Add consistent python3/python handling at build.sh, by @pjungermann in https://github.com/oxsecurity/megalinter/pull/3475</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 24.2.0 to 24.2.2</li> <li>bicep_linter from 0.25.53 to 0.26.170</li> <li>black from 24.2.0 to 24.4.0</li> <li>cfn-lint from 0.86.0 to 0.86.4</li> <li>checkov from 3.2.34 to 3.2.74</li> <li>checkstyle from 10.14.0 to 10.15.0</li> <li>clippy from 0.1.76 to 0.1.77</li> <li>clj-kondo from 2024.03.05 to 2024.03.13</li> <li>csharpier from 0.27.3 to 0.28.1</li> <li>cspell from 8.6.0 to 8.7.0</li> <li>devskim from 1.0.32 to 1.0.33</li> <li>dotnet-format from 8.0.102 to 8.0.104</li> <li>eslint-plugin-jsonc from 2.13.0 to 2.15.1</li> <li>golangci-lint from 1.56.2 to 1.57.2</li> <li>grype from 0.74.7 to 0.77.0</li> <li>kics from 1.7.13 to 2.0.0</li> <li>lightning-flow-scanner from 2.18.0 to 2.22.0</li> <li>markdown-link-check from 3.11.2 to 3.12.1</li> <li>npm-groovy-lint from 14.2.3 to 14.4.1</li> <li>phpcs from 3.9.0 to 3.9.1</li> <li>phpstan from 1.10.60 to 1.10.67</li> <li>protolint from 0.48.0 to 0.49.6</li> <li>psalm from Psalm.5.23.0@ to Psalm.5.23.1@</li> <li>pyright from 1.1.353 to 1.1.359</li> <li>roslynator from 0.8.3.0 to 0.8.6.0</li> <li>rstcheck from 6.2.0 to 6.2.1</li> <li>rubocop from 1.62.0 to 1.63.3</li> <li>ruff from 0.3.2 to 0.4.1</li> <li>secretlint from 8.1.2 to 8.2.3</li> <li>sfdx-scanner-apex from 3.21.0 to 3.23.0</li> <li>sfdx-scanner-aura from 3.21.0 to 3.23.0</li> <li>sfdx-scanner-lwc from 3.21.0 to 3.23.0</li> <li>snakefmt from 0.10.0 to 0.10.1</li> <li>snakemake from 8.5.5 to 8.10.8</li> <li>spectral from 6.11.0 to 6.11.1</li> <li>sqlfluff from 2.3.5 to 3.0.5</li> <li>stylelint from 16.2.1 to 16.3.1</li> <li>syft from 1.0.1 to 1.2.0</li> <li>tekton-lint from 1.0.0 to 1.0.2</li> <li>terraform-fmt from 1.7.4 to 1.8.1</li> <li>terragrunt from 0.55.13 to 0.57.5</li> <li>trivy-sbom from 0.49.1 to 0.50.2</li> <li>trivy from 0.49.1 to 0.50.2</li> <li>trufflehog from 3.69.0 to 3.73.0</li> <li>vale from 3.2.2 to 3.4.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v7100-2024-03-10","title":"[v7.10.0] - 2024-03-10","text":"<ul> <li>Core<ul> <li>Update dotnet linters to .NET 8, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/3182</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>How to use MegaLinter with Jenkins, by Darin Pope / Cloudbees</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Trivy: use <code>misconfig</code> instead of the deprecated <code>config</code> scanner, updating the default arguments, by @pjungermann in https://github.com/oxsecurity/megalinter/pull/3376</li> <li>Update calls to sfdx-scanner to output a CSV file for Aura &amp; LWC, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3398</li> <li>Kics: fixed error count in the summary table, by @TommyE123 in https://github.com/oxsecurity/megalinter/pull/3402</li> <li>Fix issue with EXTENDS using private repository by sending GITHUB_TOKEN as HTTP auth header, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3404</li> <li>Fix SPELL_VALE_CONFIG_FILE not working (handle the override of linter CONFIG_FILE if the linter is activated only if some files are found), by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3409</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Enable dependabot updates for devcontainer and other Docker directories, by @echoix in https://github.com/oxsecurity/megalinter/pull/3390</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Removed obsolete warning for semgrep as the issue has been fixed, by @Jayllyz in https://github.com/oxsecurity/megalinter/pull/3374</li> <li>docs: fix docs in TrivySbomLinter.py, by @pjungermann in https://github.com/oxsecurity/megalinter/pull/3377S</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.26 to 1.6.27</li> <li>bandit from 1.7.7 to 1.7.8</li> <li>bicep_linter from 0.25.3 to 0.25.53</li> <li>black from 24.1.1 to 24.2.0</li> <li>cfn-lint from 0.85.1 to 0.86.0</li> <li>checkov from 3.2.20 to 3.2.21</li> <li>checkstyle from 10.13.0 to 10.14.0</li> <li>clj-kondo from 2023.12.15 to 2024.03.05</li> <li>csharpier from 0.27.2 to 0.27.3</li> <li>cspell from 8.3.2 to 8.6.0</li> <li>devskim from 1.0.28 to 1.0.32</li> <li>dotnet-format from 7.0.115 to 8.0.102</li> <li>eslint from 8.56.0 to 8.57.0</li> <li>golangci-lint from 1.56.1 to 1.56.2</li> <li>grype from 0.74.5 to 0.74.7</li> <li>helm from 3.13.2 to 3.14.2</li> <li>kics from 1.7.12 to 1.7.13</li> <li>ktlint from 1.1.1 to 1.2.1</li> <li>lightning-flow-scanner from 2.16.0 to 2.18.0</li> <li>mypy from 1.8.0 to 1.9.0</li> <li>npm-groovy-lint from 14.2.1 to 14.2.3</li> <li>phpcs from 3.8.1 to 3.9.0</li> <li>phpstan from 1.10.57 to 1.10.60</li> <li>powershell from 7.4.0 to 7.4.1</li> <li>powershell_formatter from 7.4.0 to 7.4.1</li> <li>protolint from 0.47.5 to 0.48.0</li> <li>psalm from Psalm.5.21.1@ to Psalm.5.23.0@</li> <li>pylint from 3.0.3 to 3.1.0</li> <li>pyright from 1.1.350 to 1.1.353</li> <li>rubocop from 1.60.2 to 1.62.0</li> <li>ruff from 0.2.1 to 0.3.2</li> <li>scalafix from 0.11.1 to 0.12.0</li> <li>secretlint from 8.1.1 to 8.1.2</li> <li>shellcheck from 0.9.0 to 0.10.0</li> <li>snakemake from 8.4.8 to 8.5.5</li> <li>syft from 0.104.0 to 1.0.1</li> <li>terraform-fmt from 1.7.3 to 1.7.4</li> <li>terragrunt from 0.55.1 to 0.55.13</li> <li>trufflehog from 3.67.5 to 3.69.0</li> <li>vale from 3.0.5 to 3.2.2</li> <li>xmllint from 21106 to 21107</li> <li>yamllint from 1.34.0 to 1.35.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v790-2024-02-11","title":"[v7.9.0] - 2024-02-11","text":"<ul> <li>Core<ul> <li>Upgrade actions/checkout and stefanzweifel/git-auto-commit-action in generator template workflow, by @Jayllyz in #3327</li> <li>Upgrade base python image to python:3.12.2-alpine3.19</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Format powershell linter output into terminal-wide table, and count errors, by @efrecon in #3318</li> <li>Allow active_only_if_file_found to work in specified subdirectory (_DIRECTORY), fixes #2873, by @TimothyEarley in #3323</li> <li>Activate CI servers reporters only if we find a related default env variable, by @nvuillam in #3321</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Update copyright year to 2024, by @Jayllyz in #3339</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Free more disk space before docker build</li> <li>Upgrade peter-evans/create-pull-request from v5 to v6 in GitHub Actions workflows</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.22.2 to 24.2.0</li> <li>bandit from 1.7.6 to 1.7.7</li> <li>bicep_linter from 0.24.24 to 0.25.3</li> <li>black from 23.12.1 to 24.1.1</li> <li>cfn-lint from 0.84.0 to 0.85.1</li> <li>checkov from 3.1.67 to 3.2.20</li> <li>checkstyle from 10.12.7 to 10.13.0</li> <li>clippy from 0.1.75 to 0.1.76</li> <li>csharpier from 0.27.0 to 0.27.2</li> <li>eslint-plugin-jsonc from 2.12.2 to 2.13.0</li> <li>gitleaks from 8.18.1 to 8.18.2</li> <li>golangci-lint from 1.55.2 to 1.56.1</li> <li>grype from 0.63.1 to 0.74.5</li> <li>lychee from 0.14.1 to 0.14.3</li> <li>markdownlint from 0.38.0 to 0.39.0</li> <li>npm-groovy-lint from 14.2.0 to 14.2.1</li> <li>phplint from 9.1.0 to 9.1.2</li> <li>phpstan from 1.10.56 to 1.10.57</li> <li>prettier from 3.2.4 to 3.2.5</li> <li>psalm from Psalm.5.20.0@ to Psalm.5.21.1@</li> <li>puppet-lint from 4.2.3 to 4.2.4</li> <li>pyright from 1.1.347 to 1.1.350</li> <li>revive from 1.3.6 to 1.3.7</li> <li>roslynator from 0.8.2.0 to 0.8.3.0</li> <li>rubocop from 1.60.1 to 1.60.2</li> <li>ruff from 0.1.14 to 0.2.1</li> <li>secretlint from 8.1.0 to 8.1.1</li> <li>sfdx-scanner-apex from 3.20.0 to 3.21.0</li> <li>sfdx-scanner-aura from 3.20.0 to 3.21.0</li> <li>sfdx-scanner-lwc from 3.20.0 to 3.21.0</li> <li>shfmt from 3.7.0 to 3.8.0</li> <li>snakefmt from 0.9.0 to 0.10.0</li> <li>snakemake from 8.2.3 to 8.4.8</li> <li>stylelint from 16.2.0 to 16.2.1</li> <li>syft from 0.101.1 to 0.104.0</li> <li>terraform-fmt from 1.7.0 to 1.7.3</li> <li>terragrunt from 0.54.20 to 0.55.1</li> <li>tflint from 0.50.1 to 0.50.3</li> <li>trivy-sbom from 0.48.3 to 0.49.1</li> <li>trivy from 0.48.3 to 0.49.1</li> <li>trufflehog from 3.63.10 to 3.67.5</li> <li>v8r from 2.1.0 to 3.0.0</li> <li>yamllint from 1.33.0 to 1.34.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v780-2024-01-21","title":"[v7.8.0] - 2024-01-21","text":"<ul> <li>Reporters<ul> <li>New reporter MARKDOWN_SUMMARY_REPORTER, allows saving MegaLinter results summary as a markdown file. This file can be further utilised to add comments on the pull request (PR) from Jenkins and other continuous integration (CI) tools by @saishivarcr in https://github.com/oxsecurity/megalinter/pull/3250</li> <li>New reporter BITBUCKET_COMMENT_REPORTER allowing to post MegaLinter results as comments on Bitbucket pull requests  by @saishivarcr in https://github.com/oxsecurity/megalinter/pull/3256</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>mega-linter-runner: Remove container by default, except of <code>no-remove-container</code> option is sent by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3203</li> <li>Upgrade base image from python:3.11.6-alpine3.18 to python:3.11.7-alpine3.18, by @echoix in #3212</li> <li>Upgrade to python 3.12.0 by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3006</li> <li>Upgrade actions/upload-artifact@v3 to actions/upload-artifact@v4 in default workflows by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3225</li> <li>mega-linter-runner: Improve check if running as script or module, by @echoix in #3233</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>(FR) MegaLinter presentation at DevCon 20 / Programmez Magazine, by Nicolas Vuillamy</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>tekton-lint is now published as @ibm/tekton-lint, by @echoix in #3210</li> <li>PHP PHIVE: Use keys.openpgp.org and fingerprint for phive key verification, by @echoix in #3230</li> <li>Undowngrade sass linters, by @echoix in #3260</li> <li>Upgrade lychee default configuration to handle breaking change between 0.13.0 and 0.14.0</li> <li>Hadolint: support both <code>Containerfile</code> and <code>Dockerfile</code> by @sanmai-NL in https://github.com/oxsecurity/megalinter/pull/3217</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Upgrade url to PHP CodeSniffer, as now the original repo is not maintained anymore by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3201</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Use docker/metadata-action for deploy-DEV.yml workflow, by @echoix in #3193</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.22.1 to 6.22.2</li> <li>bash-exec from 5.2.15 to 5.2.21</li> <li>bicep_linter from 0.23.1 to 0.24.24 on 2023-12-14</li> <li>black from 23.11.0 to 23.12.1 on 2023-12-23</li> <li>cfn-lint from 0.83.4 to 0.84.0</li> <li>checkov from 3.1.27 to 3.1.67</li> <li>checkstyle from 10.12.6 to 10.12.7</li> <li>clippy from 0.1.74 to 0.1.75 on 2023-12-28</li> <li>clj-kondo from 2023.10.20 to 2023.12.15 on 2023-12-15</li> <li>csharpier from 0.26.4 to 0.27.0</li> <li>cspell from 8.1.3 to 8.3.2</li> <li>devskim from 1.0.23 to 1.0.28</li> <li>djlint from 1.34.0 to 1.34.1 on 2023-12-22</li> <li>dotnet-format from 7.0.114 to 7.0.115</li> <li>eslint-plugin-jsonc from 2.10.0 to 2.12.2</li> <li>eslint from 8.55.0 to 8.56.0 on 2023-12-16</li> <li>flake8 from 6.1.0 to 7.0.0</li> <li>git_diff from 2.40.1 to 2.43.0</li> <li>helm from 3.11.3 to 3.13.2</li> <li>isort from 5.13.0 to 5.13.2 on 2023-12-13</li> <li>kics from 1.7.11 to 1.7.12 on 2023-12-22</li> <li>ktlint from 1.0.1 to 1.1.1</li> <li>lychee from 0.13.0 to 0.14.1</li> <li>mypy from 1.7.1 to 1.8.0 on 2023-12-22</li> <li>npm-groovy-lint from 13.0.2 to 14.2.0</li> <li>phpcs from 3.8.0 to 3.8.1</li> <li>phplint from 9.0.6 to 9.1.0 on 2023-12-17</li> <li>phpstan from 1.10.48 to 1.10.56</li> <li>prettier from 3.1.0 to 3.2.4</li> <li>protolint from 0.46.3 to 0.47.5</li> <li>psalm from Psalm.5.17.0@ to Psalm.5.20.0@</li> <li>pylint from 3.0.2 to 3.0.3 on 2023-12-13</li> <li>pyright from 1.1.339 to 1.1.347</li> <li>revive from 1.3.4 to 1.3.6</li> <li>roslynator from 0.8.1.0 to 0.8.2.0</li> <li>rubocop from 1.58.0 to 1.60.1</li> <li>ruff from 0.1.7 to 0.1.14 on 2023-12-13</li> <li>secretlint from 8.0.0 to 8.1.0 on 2023-12-28</li> <li>sfdx-scanner-apex from 3.19.0 to 3.20.0</li> <li>sfdx-scanner-aura from 3.19.0 to 3.20.0</li> <li>sfdx-scanner-lwc from 3.19.0 to 3.20.0</li> <li>snakefmt from 0.8.5 to 0.9.0</li> <li>snakemake from 7.32.4 to 8.2.3</li> <li>stylelint from 15.11.0 to 16.2.0</li> <li>syft from 0.98.0 to 0.101.1 on 2023-12-22</li> <li>tekton-lint from 0.6.0 to 1.0.0</li> <li>terraform-fmt from 1.6.5 to 1.7.0</li> <li>terragrunt from 0.54.0 to 0.54.20</li> <li>terrascan from 1.18.3 to 1.18.8 on 2023-12-16</li> <li>terrascan from 1.18.8 to 1.18.11 on 2023-12-30</li> <li>tflint from 0.49.0 to 0.50.0 on 2023-12-30</li> <li>tflint from 0.50.0 to 0.50.1</li> <li>trivy-sbom from 0.48.0 to 0.48.1 on 2023-12-18</li> <li>trivy-sbom from 0.48.1 to 0.48.2</li> <li>trivy-sbom from 0.48.2 to 0.48.3</li> <li>trivy from 0.48.0 to 0.48.1 on 2023-12-18</li> <li>trivy from 0.48.1 to 0.48.2</li> <li>trivy from 0.48.2 to 0.48.3</li> <li>trufflehog from 3.63.2 to 3.63.3 on 2023-12-14</li> <li>trufflehog from 3.63.3 to 3.63.4 on 2023-12-15</li> <li>trufflehog from 3.63.4 to 3.63.6 on 2023-12-22</li> <li>trufflehog from 3.63.6 to 3.63.7 on 2023-12-23</li> <li>trufflehog from 3.63.7 to 3.63.9</li> <li>trufflehog from 3.63.9 to 3.63.10</li> <li>vale from 2.30.0 to 3.0.5</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v770-2023-12-09","title":"[v7.7.0] - 2023-12-09","text":"<ul> <li>Core<ul> <li>Update base java apk package to openjdk 17 by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3160</li> <li>Update dotnet linters to .NET 7 by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2402</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>Try using MegaLinter (article in japanese) by Takashi Minayaga</li> </ul> </li> </ul> <ul> <li>New linters<ul> <li>Add clang-format c &amp; cpp formatting linter including \"apply fix\" support</li> <li>Add Roslynator C# linter by @bdovaz in https://github.com/oxsecurity/megalinter/pull/3155</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Call jscpd with <code>--gitignore</code> to ignore copy-pastes in files matching <code>.gitignore</code></li> <li>cpplint: Dynamically add the list of extensions from list of files in --extensions parameter</li> <li>Fix mkdocs generation + CI control job by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3135</li> <li>Add semgrep ruleset to validation schema by @wesley-dean-flexion in https://github.com/oxsecurity/megalinter/pull/3164</li> <li>Downgrade stylelint to avoid crash with not v16 compliant dependencies</li> <li>Fix count of yaml-lint errors</li> <li>Remove openssl reinstall, as base image has updated version from alpine 3.18.5 by @echoix in https://github.com/oxsecurity/megalinter/pull/3181</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Add arguments to make use of pytest-xdist, by @echoix</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.22.0 to 6.22.1</li> <li>bandit from 1.7.5 to 1.7.6</li> <li>cfn-lint from 0.83.3 to 0.83.4</li> <li>checkov from 3.0.39 to 3.1.25</li> <li>checkstyle from 10.12.5 to 10.12.6</li> <li>csharpier from 0.26.2 to 0.26.4</li> <li>cspell from 8.0.0 to 8.1.3</li> <li>dotnet-format from 6.0.417 to 7.0.114</li> <li>eslint from 8.54.0 to 8.55.0</li> <li>gitleaks from 8.18.0 to 8.18.1</li> <li>isort from 5.12.0 to 5.13.0</li> <li>lightning-flow-scanner from 2.15.0 to 2.16.0</li> <li>luacheck from 1.1.1 to 1.1.2</li> <li>markdown-table-formatter from 1.4.0 to 1.5.0</li> <li>markdownlint from 0.37.0 to 0.38.0</li> <li>mypy from 1.7.0 to 1.7.1</li> <li>npm-groovy-lint from 12.1.0 to 13.0.2</li> <li>phpcs from 3.7.2 to 3.8.0</li> <li>phplint from 9.0.4 to 9.0.6</li> <li>phpstan from 1.10.42 to 1.10.48</li> <li>psalm from Psalm.5.15.0@ to Psalm.5.17.0@</li> <li>puppet-lint from 4.2.1 to 4.2.3</li> <li>pyright from 1.1.336 to 1.1.339</li> <li>roslynator from 0.8.0.0 to 0.8.1.0</li> <li>rubocop from 1.57.2 to 1.58.0</li> <li>ruff from 0.1.6 to 0.1.7</li> <li>secretlint from 7.1.0 to 8.0.0</li> <li>semgrep from 1.50.0 to 1.52.0</li> <li>sfdx-scanner-apex from 3.18.0 to 3.19.0</li> <li>sfdx-scanner-aura from 3.18.0 to 3.19.0</li> <li>sfdx-scanner-lwc from 3.18.0 to 3.19.0</li> <li>syft from 0.97.1 to 0.98.0</li> <li>terraform-fmt from 1.6.4 to 1.6.5</li> <li>terragrunt from 0.53.4 to 0.54.0</li> <li>trivy from 0.47.0 to 0.48.0</li> <li>trufflehog from 3.63.0 to 3.63.2</li> <li>vale from 2.29.7 to 2.30.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v760-2023-11-19","title":"[v7.6.0] - 2023-11-19","text":"<ul> <li>Major enhancements<ul> <li>New flavor c_cpp: New flavor for pure C/C++ projects, by @daltonv in https://github.com/oxsecurity/megalinter/pull/3067</li> <li>New flavor formatters: Contains only formatter linters, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3071</li> <li>Add Salesforce Lightning Flow Scanner, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3092</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Allow to use value <code>any</code> to always activate a linter who as a _DIRECTORY variable. Example: <code>KUBERNETES_DIRECTORY: any</code>, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3058</li> <li>Update base Docker image to <code>python:3.11.6-alpine3.18</code></li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix issue Gitleaks <code>--no-git</code> does not work anymore, #2945, in #3112</li> <li>Fix way to install powershell on Alpine linux image</li> <li>Fix issue with VS Code devcontainer not building #3114</li> <li>Fix Default Workflow to handle latest ActionLint rules, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3130</li> <li>Write checkov SARIF report <code>results_sarif.sarif</code> in <code>REPORT_FOLDER</code>, by @gmeligio in https://github.com/oxsecurity/megalinter/pull/3121</li> <li>Updated lintr config template to use <code>linters_with_defaults()</code> (formerly <code>with_defaults()</code>)</li> <li>Fix csharp installation dependencies, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3075</li> <li>Fix powershell installation by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3126</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Update lintr links to their current locations, by @echoix in #3122</li> <li>Update Pylint links to their current locations, by @echoix in #3116</li> <li>Add R2DevOps way to setup MegaLinter on Gitlab, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/3129</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Upgrade pymdown-extensions and markdown, by @BryanQuigley in #3053</li> <li>Use docker/metadata-action for some internal CI, by @echoix in #3110</li> <li>Call docker buildx prune instead of docker builder prune, by @echoix in #3127</li> <li>Set schedule earlier for auto-update-linters.yml, allow manual runs, by @echoix in https://github.com/oxsecurity/megalinter/pull/3066</li> <li>Add mike to dev/requirements.txt, by @echoix in https://github.com/oxsecurity/megalinter/pull/3070</li> <li>Modernize dependabot.yml in correct directories, by @echoix in https://github.com/oxsecurity/megalinter/pull/3093</li> <li>Fix devcontainer Dockerfile typo (fixes #3114) by @daltonv in https://github.com/oxsecurity/megalinter/pull/3115</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.21.1 to 6.22.0</li> <li>bicep_linter from 0.22.6 to 0.23.1</li> <li>black from 23.10.1 to 23.11.0</li> <li>cfn-lint from 0.83.0 to 0.83.3</li> <li>checkov from 3.0.12 to 3.0.39</li> <li>checkstyle from 10.12.4 to 10.12.5</li> <li>clippy from 0.1.73 to 0.1.74</li> <li>csharpier from 0.25.0 to 0.26.2</li> <li>cspell from 7.3.8 to 8.0.0</li> <li>dotnet-format from 6.0.416 to 6.0.417</li> <li>eslint from 8.52.0 to 8.54.0</li> <li>golangci-lint from 1.55.1 to 1.55.2</li> <li>kics from 1.7.10 to 1.7.11</li> <li>kubeconform from 0.6.3 to 0.6.4</li> <li>mypy from 1.6.1 to 1.7.0</li> <li>npm-groovy-lint from 11.1.1 to 12.1.0</li> <li>npm-package-json-lint from 7.0.0 to 7.1.0</li> <li>phpstan from 1.10.39 to 1.10.42</li> <li>powershell from 7.3.9 to 7.4.0</li> <li>powershell_formatter from 7.3.9 to 7.4.0</li> <li>prettier from 3.0.3 to 3.1.0</li> <li>protolint from 0.46.2 to 0.46.3</li> <li>pyright from 1.1.333 to 1.1.336</li> <li>ruff from 0.1.3 to 0.1.6</li> <li>secretlint from 7.0.7 to 7.1.0</li> <li>semgrep from 1.46.0 to 1.50.0</li> <li>sfdx-scanner-apex from 3.17.0 to 3.18.0</li> <li>sfdx-scanner-aura from 3.17.0 to 3.18.0</li> <li>sfdx-scanner-lwc from 3.17.0 to 3.18.0</li> <li>swiftlint from 0.53.0 to 0.54.0</li> <li>syft from 0.94.0 to 0.97.1</li> <li>terraform-fmt from 1.6.2 to 1.6.4</li> <li>terragrunt from 0.53.0 to 0.53.4</li> <li>tflint from 0.48.0 to 0.49.0</li> <li>trivy-sbom from 0.46.1 to 0.47.0</li> <li>trivy from 0.46.1 to 0.47.0</li> <li>trufflehog from 3.61.0 to 3.63.0</li> <li>vale from 2.29.5 to 2.29.7</li> <li>xmllint from 21104 to 21106</li> <li>yamllint from 1.32.0 to 1.33.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v750-2023-10-29","title":"[v7.5.0] - 2023-10-29","text":"<ul> <li>Core<ul> <li>mega-linter-runner: Convert to ES6 and upgrade npm dependencies. Node 18 minimum version is now required.</li> <li>Allow to define <code>COMPILER_ONLY</code> virtual package as cargo dependency in descriptors to embed rust compiler in the Dockerfile</li> <li>Optimize <code>@generated</code> marker scanning (#2654)</li> <li>Upgrade to python 3.12.0</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>Achieve Code Consistency: MegaLinter Integration in Azure DevOps, by Don Koning on Microsoft Tech Community</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>build.py: Remove exclusivity between pip, gem &amp; cargo packages</li> <li>Salesforce linters: Switch sfdx-cli to @salesforce/cli</li> <li>Fixed issue with <code>actionlint</code> throwing an error on <code>if</code> statements in the generated workflow file</li> <li>Added default <code>.devskim.json</code> to mitigate errors introduced when no config exists</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Display list of articles from newest to oldest</li> <li>Fix incorrect environment variable in djlint docs</li> <li>Improve lychee documentation to add an example of <code>.lycheeignore</code></li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Add the other maintainers globally to the CODEOWNERS file (#3008)</li> <li>Free disk space earlier in the process to avoid failure during docker build</li> <li>Set flavors-stats.json as a generated file in .gitattributes (#3023)</li> <li>Update and fix our ChatOps automations to only run on pull request comments, by @echoix in #3034</li> <li>Use App::cpm to install perlcritic faster, and clean <code>.perl-cpm</code> cache, by @echoix in #3036</li> <li>Add failure message in ChatOps build-command and Slash dispatcher, by @echoix in #3037</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.20.0 6.21.1</li> <li>bicep_linter from 0.21.1 to 0.22.6</li> <li>black from 23.9.1 to 23.10.1</li> <li>cfn-lint from 0.80.2 to 0.83.0</li> <li>checkov from 2.4.48 to 3.0.12</li> <li>checkstyle from 10.12.3 to 10.12.4</li> <li>clippy from 0.1.72 to 0.1.73</li> <li>clj-kondo from 2023.09.07 to 2023.10.20</li> <li>cspell from 7.3.6 to 7.3.8</li> <li>devskim from 1.0.22 to 1.0.23</li> <li>dotnet-format from 6.0.414 to 6.0.416</li> <li>editorconfig-checker from 2.7.1 to 2.7.2</li> <li>eslint-plugin-jsonc from 2.9.0 to 2.10.0</li> <li>eslint from 8.49.0 to 8.52.0</li> <li>golangci-lint from 1.54.2 to 1.55.1</li> <li>kics from 1.7.8 to 1.7.10</li> <li>ktlint from 1.0.0 to 1.0.1</li> <li>mypy from 1.5.1 to 1.6.1</li> <li>perlcritic from 1.150 to 1.152</li> <li>phpstan from 1.10.35 to 1.10.39</li> <li>powershell from 7.3.7 to 7.3.9</li> <li>powershell_formatter from 7.3.7 to 7.3.9</li> <li>protolint from 0.46.0 to 0.46.2</li> <li>puppet-lint from 4.2.0 to 4.2.1</li> <li>pylint from 2.17.5 to 3.0.2</li> <li>pyright from 1.1.327 to 1.1.333</li> <li>rubocop from 1.56.3 to 1.57.2</li> <li>ruff from 0.1.2 to 0.1.3</li> <li>ruff from 0.0.290 to 0.1.2</li> <li>semgrep from 1.41.0 to 1.46.0</li> <li>sfdx-scanner-apex from 3.16.0 to 3.17.0</li> <li>sfdx-scanner-aura from 3.16.0 to 3.17.0</li> <li>sfdx-scanner-lwc from 3.16.0 to 3.17.0</li> <li>snakefmt from 0.8.4 to 0.8.5</li> <li>sqlfluff from 2.3.2 to 2.3.5</li> <li>stylelint from 15.10.3 to 15.11.0</li> <li>swiftlint from 0.52.4 to 0.53.0</li> <li>syft from 0.91.0 to 0.94.0</li> <li>terraform-fmt from 1.5.7 to 1.6.2</li> <li>terragrunt from 0.51.4 to 0.53.0</li> <li>trivy-sbom from 0.45.1 to 0.46.1</li> <li>trivy from 0.45.1 to 0.46.1</li> <li>trufflehog from 3.56.1 to 3.61.0</li> <li>v8r from 2.0.0 to 2.1.0</li> <li>vale from 2.29.0 to 2.29.5</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v740-2023-09-22","title":"[v7.4.0] - 2023-09-22","text":"<ul> <li>Core<ul> <li>Upgrade python to 3.11.5</li> </ul> </li> </ul> <ul> <li>Media<ul> <li>Maximize your code consistency with Megalinter by Tor Ivar Asb\u00f8lmo on codewithme.cloud</li> <li>MegaLinter in Azure DevOps by James Cook</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix IGNORE_GITIGNORED_FILES not working anymore , by @iisisrael</li> <li>Fix v7 issue when using MEGALINTER_FILES_TO_LINT ( thanks @pfiaux !)</li> <li>Fix Ignore symlink files when VALIDATE_ALL_CODEBASE is false</li> <li>Fix rstcheck options &amp; install</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Secretlint logo - reduce size to 150 and remove background</li> <li>Replace <code>https://megalinter.io/flavors</code> with <code>https://megalinter.io/latest/flavors</code> to avoid lychee 404 error</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Workflow job name changed from <code>build</code> to <code>megalinter</code> to prevent conflicts with other workflows</li> <li>Add support for master branch in TEMPLATES/mega-linter.yml, by @rasa</li> </ul> </li> </ul> <ul> <li>Deprecations<ul> <li>Deprecate SCSS LINT as not maintained anymore (https://github.com/sds/scss-lint#notice-consider-other-tools-before-adopting-scss-lint)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.25 to 1.6.26</li> <li>ansible-lint from 6.17.2 to 6.20.0</li> <li>bicep_linter from 0.20.4 to 0.21.1</li> <li>black from 23.7.0 to 23.9.1</li> <li>cfn-lint from 0.79.6 to 0.80.2</li> <li>checkov from 2.3.360 to 2.4.10</li> <li>checkstyle from 10.12.2 to 10.12.3</li> <li>chktex from 1.7.6 to 1.7.8</li> <li>clippy from 0.1.71 to 0.1.72</li> <li>clj-kondo from 2023.07.13 to 2023.09.07</li> <li>cspell from 6.31.3 to 7.3.6</li> <li>devskim from 1.0.18 to 1.0.22</li> <li>djlint from 1.32.1 to 1.34.0</li> <li>dotnet-format from 6.0.413 to 6.0.414</li> <li>editorconfig-checker from 2.7.0 to 2.7.1</li> <li>eslint from 8.46.0 to 8.49.0</li> <li>git_diff from 2.38.5 to 2.40.1</li> <li>gitleaks from 8.17.0 to 8.18.0</li> <li>golangci-lint from 1.54.0 to 1.54.2</li> <li>helm from 3.10.2 to 3.11.3</li> <li>jscpd from 3.5.9 to 3.5.10</li> <li>kics from 1.7.5 to 1.7.8</li> <li>ktlint from 0.50.0 to 1.0.0</li> <li>kubescape from 2.3.6 to 2.9.0</li> <li>markdownlint from 0.35.0 to 0.36.0</li> <li>mypy from 1.4.1 to 1.5.1</li> <li>phpstan from 1.10.28 to 1.10.35</li> <li>powershell from 7.3.6 to 7.3.7</li> <li>powershell_formatter from 7.3.6 to 7.3.7</li> <li>prettier from 3.0.1 to 3.0.3</li> <li>protolint from 0.45.0 to 0.46.0</li> <li>psalm from Psalm.5.14.1@ to Psalm.5.15.0@</li> <li>puppet-lint from 4.0.1 to 4.2.0</li> <li>pyright from 1.1.321 to 1.1.327</li> <li>revive from 1.3.2 to 1.3.4</li> <li>rstcheck from 6.1.2 to 6.2.0</li> <li>rstfmt from 0.0.13 to 0.0.14</li> <li>rubocop from 1.56.0 to 1.56.3</li> <li>ruff from 0.0.284 to 0.0.290</li> <li>scalafix from 0.11.0 to 0.11.1</li> <li>semgrep from 1.34.1 to 1.41.0</li> <li>sfdx-scanner-apex from 3.15.0 to 3.16.0</li> <li>sfdx-scanner-aura from 3.15.0 to 3.16.0</li> <li>sfdx-scanner-lwc from 3.15.0 to 3.16.0</li> <li>snakemake from 7.32.3 to 7.32.4</li> <li>spectral from 6.10.1 to 6.11.0</li> <li>sqlfluff from 2.2.1 to 2.3.2</li> <li>stylelint from 15.10.2 to 15.10.3</li> <li>syft from 0.86.1 to 0.91.0</li> <li>terraform-fmt from 1.5.4 to 1.5.7</li> <li>terragrunt from 0.48.6 to 0.51.3</li> <li>terrascan from 1.18.2 to 1.18.3</li> <li>tflint from 0.47.0 to 0.48.0</li> <li>trivy-sbom from 0.44.0 to 0.45.1</li> <li>trivy from 0.44.0 to 0.45.1</li> <li>trufflehog from 3.47.0 to 3.56.1</li> <li>vale from 2.28.1 to 2.29.0</li> <li>xmllint from 21004 to 21104</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v730-2023-08-10","title":"[v7.3.0] - 2023-08-10","text":"<ul> <li>Features<ul> <li>Allow to define linter_key_COMMAND_REMOVE_ARGUMENTS to remove a command line argument internally added by MegaLinter</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Replace <code>https://megalinter.io/config-file</code> by <code>https://megalinter.io/latest/config-file</code> to avoid lychee 404 detection</li> <li>Improve docs for posting comments to PRs in GitHub Enterprise</li> </ul> </li> </ul> <ul> <li>CodeTotal<ul> <li>Redis reporter: Return URL of linter icons when available, in property <code>iconPngUrl</code></li> <li>Allow to run CodeTotal with a single command <code>npx mega-linter-runner@latest --codetotal</code> , that opens CodeTotal in Web Browser once started</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>bicep_linter from 0.19.5 to 0.20.4</li> <li>cfn-lint from 0.79.2 to 0.79.6</li> <li>checkov from 2.3.343 to 2.3.360</li> <li>checkstyle from 10.12.1 to 10.12.2</li> <li>cspell from 6.31.2 to 6.31.3</li> <li>devskim from 1.0.1 to 1.0.18</li> <li>dotnet-format from 6.0.412 to 6.0.413</li> <li>eslint from 8.45.0 to 8.46.0</li> <li>flake8 from 6.0.0 to 6.1.0</li> <li>golangci-lint from 1.53.3 to 1.54.0</li> <li>kics from 1.7.4 to 1.7.5</li> <li>phpstan from 1.10.26 to 1.10.28</li> <li>prettier from 3.0.0 to 3.0.1</li> <li>psalm from Psalm.5.13.1@ to Psalm.5.14.1@</li> <li>puppet-lint from 4.0.0 to 4.0.1</li> <li>pyright from 1.1.318 to 1.1.321</li> <li>rubocop from 1.55.0 to 1.56.0</li> <li>ruff from 0.0.280 to 0.0.284</li> <li>secretlint from 7.0.3 to 7.0.7</li> <li>semgrep from 1.33.2 to 1.34.1</li> <li>sfdx-scanner-apex from 3.14.0 to 3.15.0</li> <li>sfdx-scanner-aura from 3.14.0 to 3.15.0</li> <li>sfdx-scanner-lwc from 3.14.0 to 3.15.0</li> <li>snakemake from 7.31.0 to 7.32.3</li> <li>spectral from 6.10.0 to 6.10.1</li> <li>sqlfluff from 2.1.4 to 2.2.1</li> <li>syft from 0.85.0 to 0.86.1</li> <li>terraform-fmt from 1.5.3 to 1.5.4</li> <li>terragrunt from 0.48.4 to 0.48.6</li> <li>terrascan from 1.18.1 to 1.18.2</li> <li>trivy-sbom from 0.43.1 to 0.44.0</li> <li>trivy from 0.43.1 to 0.44.0</li> <li>trufflehog from 3.45.1 to 3.47.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v721-2023-07-26","title":"[v7.2.1] - 2023-07-26","text":"<ul> <li>Fixes<ul> <li>Fix TAP reporter (3 real dots instead if 3 dots character)</li> <li>Call trufflehog with <code>--only-verified</code> to avoid false positives in .git/config</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.78.2 to 0.79.2</li> <li>checkov from 2.3.340 to 2.3.343</li> <li>pylint from 2.17.4 to 2.17.5</li> <li>rubocop from 1.54.2 to 1.55.0</li> <li>snakemake from 7.30.2 to 7.31.0</li> <li>spectral from 6.8.0 to 6.10.0</li> <li>sqlfluff from 2.1.3 to 2.1.4</li> <li>trufflehog from 3.44.0 to 3.45.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v720-2023-07-25","title":"[v7.2.0] - 2023-07-25","text":"<ul> <li>New linters<ul> <li>Add Lychee - links and email addresses checker, by @DariuszPorowski in #2673</li> <li>Add grype security linter</li> <li>Add trufflehog security linter</li> </ul> </li> </ul> <ul> <li>New flavor dotnetweb: dotnet flavor linters + Javascript &amp; Typescript linters</li> </ul> <ul> <li>Media<ul> <li>8 Tools to Scan Node.js Applications for Security Vulnerability, by Chandan Kumar on GeekFlare.com</li> <li>Shift Left Just Become Easier (Black Hat Arsenal Session)</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>MegaLinter Server for CodeTotal</li> <li>Improvements to Gitpod workspace and addition of Makefile for automation, by @ThomasSanson in https://github.com/oxsecurity/megalinter/pull/2737</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Handle reporter crashes without making all ML crash</li> <li>Devskim: Remove default --ignore-globs argument</li> <li>mypy: Use /tmp as cache folder by default with ENV MYPY_CACHE_DIR=/tmp in Dockerfile</li> <li>Fix <code>hadolint</code> to use its default configuration file properly, by @KihyeokK in https://github.com/oxsecurity/megalinter/pull/2763</li> <li>Remove linters not in flavor before calling reporters</li> <li>Undowngrade devskim, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2748</li> <li>Add ts-standard linter for ts standard, by @janderssonse in https://github.com/oxsecurity/megalinter/pull/2746</li> <li>Remove additional <code>--update</code> for apk in Dockerfile by @PeterDaveHello in https://github.com/oxsecurity/megalinter/pull/2619</li> <li>Fix V8R config arg usage (#2756), by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2819</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>New Redis reporter (beta)</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Clean docker build cache to avoid no space left on device during Build Dev job</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.24 to 1.6.25</li> <li>ansible-lint from 6.16.2 to 6.17.2</li> <li>bicep_linter from 0.17.1 to 0.19.5</li> <li>black from 23.3.0 to 23.7.0</li> <li>cfn-lint from 0.77.10 to 0.78.2</li> <li>checkov from 2.3.285 to 2.3.340</li> <li>checkstyle from 10.12.0 to 10.12.1</li> <li>clippy from 0.1.70 to 0.1.71</li> <li>clj-kondo from 2023.05.26 to 2023.07.13</li> <li>csharpier from 0.24.2 to 0.25.0</li> <li>cspell from 6.31.1 to 6.31.2</li> <li>devskim from 0.7.104 to 1.0.11</li> <li>djlint from 1.30.2 to 1.32.1</li> <li>dotnet-format from 6.0.408 to 6.0.412</li> <li>eslint-plugin-jsonc from 2.8.0 to 2.9.0</li> <li>eslint from 8.42.0 to 8.45.0</li> <li>gitleaks from 8.16.4 to 8.17.0</li> <li>golangci-lint from 1.53.2 to 1.53.3</li> <li>grype from 0.63.1 to 0.63.1</li> <li>kics from 1.7.1 to 1.7.4</li> <li>ktlint from 0.49.1 to 0.50.0</li> <li>kubeconform from 0.6.2 to 2.3.6</li> <li>markdownlint from 0.34.0 to 0.37.0</li> <li>mypy from 1.3.0 to 1.4.1</li> <li>npm-package-json-lint from 6.4.0 to 7.0.0</li> <li>phpstan from 1.10.18 to 1.10.26</li> <li>powershell from 7.3.4 to 7.3.6</li> <li>powershell_formatter from 7.3.4 to 7.3.6</li> <li>prettier from 2.8.8 to 3.0.0</li> <li>protolint from 0.44.0 to 0.45.0</li> <li>psalm from Psalm.5.12.0@ to Psalm.5.13.1@</li> <li>pyright from 1.1.313 to 1.1.318</li> <li>rubocop from 1.52.0 to 1.54.2</li> <li>ruff from 0.0.272 to 0.0.280</li> <li>secretlint from 6.2.3 to 7.0.3</li> <li>semgrep from 1.26.0 to 1.33.2</li> <li>sfdx-scanner-apex from 3.13.0 to 3.14.0</li> <li>sfdx-scanner-aura from 3.13.0 to 3.14.0</li> <li>sfdx-scanner-lwc from 3.13.0 to 3.14.0</li> <li>shfmt from 3.6.0 to 3.7.0</li> <li>snakemake from 7.26.0 to 7.30.2</li> <li>sqlfluff from 2.1.1 to 2.1.3</li> <li>stylelint from 15.10.0 to 15.10.0</li> <li>swiftlint from 0.52.2 to 0.52.4</li> <li>syft from 0.83.0 to 0.85.0</li> <li>terraform-fmt from 1.4.6 to 1.5.3</li> <li>terragrunt from 0.46.3 to 0.51.4</li> <li>tflint from 0.46.1 to 0.47.0</li> <li>trivy from 0.42.1 to 0.43.1</li> <li>vale from 2.27.0 to 2.28.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v710-2023-06-11","title":"[v7.1.0] - 2023-06-11","text":"<ul> <li>Core<ul> <li>Upgrade base image to python:3.11.4-alpine3.17, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2738</li> </ul> </li> </ul> <ul> <li>Linter enhancements &amp; fixes<ul> <li>cljstyle: Remove default value for configuration file name, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2717</li> <li>golangci-lint : Add autofix capability using --fix argument, by @seaneagan in https://github.com/oxsecurity/megalinter/pull/2700</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.77.5 to 0.77.7</li> <li>checkov from 2.3.267 to 2.3.285</li> <li>clippy from 0.1.69 to 0.1.70</li> <li>clj-kondo from 2023.05.18 to 2023.05.26</li> <li>djlint from 1.30.0 to 1.30.2</li> <li>eslint from 8.41.0 to 8.42.0</li> <li>gitleaks from 8.16.3 to 8.16.4</li> <li>golangci-lint from 1.52.2 to 1.53.2</li> <li>kubeconform from 0.6.1 to 0.6.2</li> <li>kubescape from 2.3.4 to 2.3.5</li> <li>luacheck from 1.1.0 to 1.1.1</li> <li>markdownlint from 0.33.0 to 0.34.0</li> <li>phpstan from 1.10.15 to 1.10.18</li> <li>pyright from 1.1.311 to 1.1.313</li> <li>rubocop from 1.51.0 to 1.52.0</li> <li>ruff from 0.0.270 to 0.0.272</li> <li>scalafix from 0.10.4 to 0.11.0</li> <li>semgrep from 1.24.0 to 1.26.0</li> <li>sfdx-scanner-apex from 3.12.0 to 3.13.0</li> <li>sfdx-scanner-aura from 3.12.0 to 3.13.0</li> <li>sfdx-scanner-lwc from 3.12.0 to 3.13.0</li> <li>stylelint from 15.6.2 to 15.7.0</li> <li>syft from 0.82.0 to 0.83.0</li> <li>terragrunt from 0.45.17 to 0.46.3</li> <li>trivy from 0.41.0 to 0.42.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v704-2023-05-31","title":"[v7.0.4] - 2023-05-31","text":"<ul> <li>Core<ul> <li>Allow to define <code>linterkey_UNSECURED_ENV_VARIABLES</code> for specific linters to make them visible when necessary (ex: GITHUB_TOKEN for TERRAFORM_TFLINT)</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Add note to terraform_tflint about TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES by @ruzickap in https://github.com/oxsecurity/megalinter/pull/2706</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.3.261 to 2.3.267</li> <li>djlint from 1.29.0 to 1.30.0</li> <li>pyright from 1.1.310 to 1.1.311</li> <li>semgrep from 1.23.0 to 1.24.0</li> <li>standard from 17.0.0 to 17.1.0</li> <li>terragrunt from 0.45.16 to 0.45.17</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v703-2023-05-29","title":"[v7.0.3] - 2023-05-29","text":"<ul> <li>Linter enhancements &amp; fixes<ul> <li>New variable TERRAFORM_TFLINT_SECURED_ENV with default value <code>true</code>. Set to <code>false</code> to allow <code>tflint --init</code> to access your env vars.</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Secure PRE_COMMANDS and POST_COMMANDS by default</li> <li>Can be disabled with secured_env: false in the command definition</li> <li>Manage v6 retrocompatibility with FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE expression</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkstyle from 10.11.0 to 10.12.0</li> <li>kubescape from 2.3.3 to 2.3.4</li> <li>checkov from 2.3.259 to 2.3.261</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v702-2023-05-27","title":"[v7.0.2] - 2023-05-27","text":"<ul> <li>Quick Fix mega-linter-runner --upgrade (Warning: bug with npm, not publish yet in mega-linter-runner)<ul> <li>Dead link to configuration.md</li> <li>Regex issue with megalinter-reports</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v700-2023-05-27","title":"[v7.0.0] - 2023-05-27","text":"<p>To upgrade to MegaLinter v7, run <code>npx mega-linter-runner@latest --upgrade</code> , comment here if you have any issue :)</p> <ul> <li>MAJOR Updates<ul> <li>SECURED_ENV_VARIABLES &amp; core scoped configuration by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2601<ul> <li>New configuration variables SECURED_ENV_VARIABLES and SECURED_ENV_VARIABLES_DEFAULT to hide your environment sensitive variables to the linters called by MegaLinter</li> <li>Read documentation to enhance security using MegaLinter</li> </ul> </li> <li>Use relative file paths to call linters by @nvuillam in https://github.com/oxsecurity/megalinter/pull/1877<ul> <li>This can be a breaking change for customizations, post an issue if you see a problem !</li> </ul> </li> </ul> </li> </ul> <ul> <li>New linters<ul> <li>Add linter cljstyle, Clojure formatter, by @practicalli-john in https://github.com/oxsecurity/megalinter/pull/2115</li> <li>Add kubescape, kubernetes linter, by @muandane in https://github.com/oxsecurity/megalinter/pull/2531</li> <li>Add Vale, a powerful enforcer of writing style, by @wesley-dean-flexion in https://github.com/oxsecurity/megalinter/pull/2406</li> </ul> </li> </ul> <ul> <li>Removed linters<ul> <li>KUBERNETES_KUBEVAL: Not maintained anymore (kubeconform recommended by the authors)</li> <li>REPOSITORY_GOODCHECK: Not open-source anymore</li> <li>SPELL_MISSPELL: Not maintained anymore (last commit in 2018)</li> <li>TERRAFORM_CHECKOV: Replaced by REPOSITORY_CHECKOV</li> <li>TERRAFORM_KICS: Replaced by REPOSITORY_KICS</li> </ul> </li> </ul> <ul> <li>Medias<ul> <li>Article: Use the Workflows JSON schema in your IDE, by Google Cloud</li> <li>Video: Ortelius Architecture Meeting, with a review of MegaLinter, by Steve Taylor from Ortelius</li> <li>Web site: my-devops-lab.com</li> </ul> </li> </ul> <ul> <li>Linter enhancements &amp; fixes<ul> <li>cspell<ul> <li>Fix corrective .cspell.json file generated from cspell output by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2562</li> </ul> </li> <li>eslint<ul> <li>Ensure ESLint actually runs in project mode (#1572) by @Kurt-von-Laven in https://github.com/oxsecurity/megalinter/pull/2455</li> </ul> </li> <li>jscpd<ul> <li>Prevent jscpd to create output folder if the repo is not writable by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2556</li> </ul> </li> <li>Gitleaks<ul> <li>Add support to scan PR commits only on PRs when <code>VALIDATE_ALL_CODEBASE</code> is set to <code>false</code>, by @DariuszPorowski #2504</li> </ul> </li> <li>KICS<ul> <li>Move KICS to REPOSITORY descriptor, so it can analyze all types of files, not terraform only,  by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2689</li> <li>KICS can now output SARIF</li> <li>The new version can have performance issues: customize of disable REPOSITORY_KICS if necessary</li> </ul> </li> <li>KubeConform<ul> <li>Simplify kubeconform install &amp; get version by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2629</li> </ul> </li> <li>PHPLint<ul> <li>Upgrade PHPLint to v9 by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2638</li> </ul> </li> <li>sqlfluff<ul> <li>Remove old options from SQLFluff config file by @tunetheweb in https://github.com/oxsecurity/megalinter/pull/2560</li> </ul> </li> <li>v8r<ul> <li>Allow use of configuration files with v8r by @bdovaz in https://github.com/oxsecurity/megalinter/pull/1982</li> </ul> </li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Upgrade base Docker image to python:3.11.3-alpine3.17 by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2537</li> <li>Allow simultaneous regex filtering at descriptor and linter levels by @nvuillam &amp; @seaneagan in https://github.com/oxsecurity/megalinter/pull/2669</li> <li>Allow MEGALINTER_CONFIG to contain a full path to a MegaLinter config file by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2649</li> <li>Fix issue preventing plugins to work with flavors by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2532</li> <li>Fix crash in case of unreachable symlinks by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2538</li> <li>mega-linter-runner: Use --platform also for docker run by @nvuillam , @Kurt-Von-Laven &amp; @cam-barts in https://github.com/oxsecurity/megalinter/pull/2690</li> <li>Replace deprecated distutils.copy_tree by shutil.copytree</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>SARIF_REPORTER<ul> <li>Add option to skip def_ws prefix in sarif reports by @janderssonse in https://github.com/oxsecurity/megalinter/pull/2383</li> <li>update schema to pass official SARIF validator by @DariuszPorowski in https://github.com/oxsecurity/megalinter/pull/2645</li> </ul> </li> <li>CONFIG_REPORTER<ul> <li>Add support for idea plugins auto-install by @waterfoul in https://github.com/oxsecurity/megalinter/pull/2553</li> </ul> </li> <li>CONSOLE_REPORTER<ul> <li>Updated cases in console/log output to use \u26a0 <code>Warning Sign (U+26A0)</code> instead of \u25ec <code>White Up-Pointing Triangle with Dot (U+25EC)</code>, by @Doommius</li> </ul> </li> <li>GITLAB_COMMENT_REPORTER<ul> <li>Enhancement &amp; fixes for GitlabCommentReporter by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2564<ul> <li>New var GITLAB_COMMENT_REPORTER_OVERWRITE_COMMENT to allow to disable the overwrite of existing MegaLinter comment in case of new run</li> <li>In case of overwrite activated (by default), fetch all Merge Request comments, not the first 20.</li> <li>Display a different message in log when a Merge Request comment is created or updated.</li> </ul> </li> </ul> </li> <li>AZURE_COMMENT_REPORTER<ul> <li>Downgrade Azure DevOps pipy package to avoid crash by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2576</li> </ul> </li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Improve documentation pages split by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2688<ul> <li>Now Installation and Configuration menus have their own child menus</li> </ul> </li> <li>Doc about how to use fine grained PAT by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2662</li> <li>Fixed incorrect link in Azure to Gitlab reporters pages. by @Doommius in https://github.com/oxsecurity/megalinter/pull/2613</li> <li>Added bitbucket job template + Fix icon in console logs by @Doommius in https://github.com/oxsecurity/megalinter/pull/2617</li> <li>Exclude licenses pages from online search results by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2665</li> <li>Improve HTML tables display by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2670</li> <li>Remove ASCII characters from linters helps displayed in MegaLinter documentation</li> </ul> </li> </ul> <ul> <li>Internal CI<ul> <li>Upgrade GitHub Actions to change automated comments and increase timeout by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2536</li> <li>Use Github Permissions instead of PAT by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2652</li> <li>Update GitHub Actions workflows environments by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2657</li> <li>Automate External Plugins table generation using .automation/plugins.yml file by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2667</li> <li>Fix MegaLinter build issue by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2539</li> <li>Fix for trivy-action (new naming for input) by @DariuszPorowski in https://github.com/oxsecurity/megalinter/pull/2541</li> <li>Fix <code>/build</code> slash command to checkout the correct PR branch by @echoix in https://github.com/oxsecurity/megalinter/pull/2542</li> <li>Fix local run of python test cases by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2565</li> <li>Fix mkdocs documentation generation by downgrading mkdocs-glightbox to 0.3.2 by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2582</li> <li>Do not push to docker from dev PRs by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2639</li> <li>Update stale workflow: remove trigger on comments and explicit permissions by @echoix in https://github.com/oxsecurity/megalinter/pull/2641</li> <li>Decouple updating docker pull stats from building docs by @echoix in https://github.com/oxsecurity/megalinter/pull/2677</li> <li>Review MegaLinter's own cspell word list for outdated exclusions by @echoix in https://github.com/oxsecurity/megalinter/pull/2676</li> <li>Run stale workflow only on schedule, by @echoix in https://github.com/oxsecurity/megalinter/pull/2641</li> <li>Add explicit permissions to stale workflow, by @echoix in https://github.com/oxsecurity/megalinter/pull/2641</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.23 to 1.6.24</li> <li>ansible-lint from 6.14.4 to 6.16.2</li> <li>bicep_linter from 0.15.31 to 0.17.1</li> <li>cfn-lint from 0.76.1 to 0.77.5</li> <li>checkov from 2.3.149 to 2.3.259</li> <li>checkstyle from 10.9.3 to 10.11.0</li> <li>clippy from 0.1.68 to 0.1.69</li> <li>clj-kondo from 2023.03.17 to 2023.05.18</li> <li>csharpier from 0.23.0 to 0.24.2</li> <li>djlint from 1.19.16 to 1.29.0</li> <li>dotnet-format from 6.0.407 to 6.0.408</li> <li>eslint-plugin-jsonc from 2.7.0 to 2.8.0</li> <li>eslint from 8.37.0 to 8.41.0</li> <li>git_diff from 2.38.4 to 2.38.5</li> <li>gitleaks from 8.16.1 to 8.16.3</li> <li>jscpd from 3.5.4 to 3.5.9</li> <li>jsonlint from 14.0.2 to 14.0.3</li> <li>kics from 1.6.13 to 1.7.1</li> <li>ktlint from 0.48.2 to 0.49.1</li> <li>kubeconform from 0.5.0 to 0.6.1</li> <li>kubescape from 2.3.1 to 2.3.3</li> <li>markdown-link-check from 3.10.3 to 3.11.2</li> <li>mypy from 1.1.1 to 1.3.0</li> <li>phplint from 5.5 to 9.0.4</li> <li>phpstan from 1.10.10 to 1.10.15</li> <li>pmd from 6.48.0 to 6.55.0</li> <li>powershell from 7.3.3 to 7.3.4</li> <li>powershell_formatter from 7.3.3 to 7.3.4</li> <li>prettier from 2.8.7 to 2.8.8</li> <li>protolint from 0.43.1 to 0.44.0</li> <li>psalm from Psalm.5.9.0@ to Psalm.5.12.0@</li> <li>puppet-lint from 3.3.0 to 4.0.0</li> <li>pylint from 2.17.2 to 2.17.4</li> <li>pyright from 1.1.301 to 1.1.310</li> <li>revive from 1.3.1 to 1.3.2</li> <li>rubocop from 1.49.0 to 1.51.0</li> <li>ruff from 0.0.260 to 0.0.270</li> <li>semgrep from 1.16.0 to 1.23.0</li> <li>sfdx-scanner-apex from 3.11.0 to 3.12.0</li> <li>sfdx-scanner-aura from 3.11.0 to 3.12.0</li> <li>sfdx-scanner-lwc from 3.11.0 to 3.12.0</li> <li>snakefmt from 0.8.3 to 0.8.4</li> <li>snakemake from 7.25.0 to 7.26.0</li> <li>spectral from 6.6.0 to 6.8.0</li> <li>sqlfluff from 2.0.2 to 2.1.1</li> <li>stylelint from 15.4.0 to 15.6.2</li> <li>swiftlint from 0.51.0 to 0.52.2</li> <li>syft from 0.76.0 to 0.82.0</li> <li>terraform-fmt from 1.4.4 to 1.4.6</li> <li>terragrunt from 0.45.0 to 0.45.11</li> <li>terrascan from 1.18.0 to 1.18.1</li> <li>tflint from 0.45.0 to 0.46.1</li> <li>trivy from 0.39.0 to 0.41.0</li> <li>v8r from 1.0.0 to 2.0.0</li> <li>vale from 2.24.0 to 2.27.0</li> <li>xmllint from 21003 to 21004</li> <li>yamllint from 1.30.0 to 1.32.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6222-2023-04-03","title":"[v6.22.2] - 2023-04-03","text":"<ul> <li>Core<ul> <li>Fix failure of AzureCommentReporter when there is no pull request found in ENV vars</li> <li>Fix HTML comment appearing in Azure Pull Request mail notifications</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.14.3 to 6.14.4</li> <li>checkov from 2.3.145 to 2.3.149</li> <li>pylint from 2.17.1 to 2.17.2</li> <li>rubocop from 1.48.1 to 1.49.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6221-2023-04-02","title":"[v6.22.1] - 2023-04-02","text":"<ul> <li>Core<ul> <li>Changed vars in AzureCommentReporter to reflects official Azure DevOps naming convention + fallback to keep backward compatibility, see #2509</li> <li>Update AzureCommentReport to have only one MegaLinter thread instead of a new one for each run of MegaLinter</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Updated usage scenario for Azure DevOps, see #2509</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.3.141 to 2.3.145</li> <li>phpstan from 1.10.9 to 1.10.10</li> <li>rstfmt from 0.0.12 to 0.0.13</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6220-2023-04-01","title":"[v6.22.0] - 2023-04-01","text":"<ul> <li>New linters<ul> <li>Add ruff, by @lars-reimann in https://github.com/oxsecurity/megalinter/pull/2458</li> </ul> </li> </ul> <ul> <li>Linter enhancements &amp; fixes<ul> <li>Pin markdown-link-check to 3.10.3 until tcort/markdown-link-check#246 is fixed, by @Kurt-von-Laven (#2498).</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Fix MegaLinter doc version &amp; url displayed in logs, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2485</li> <li> <p>Use megalinter-bot to create apply fixes commits, by @lars-reimann, @nvuillam and @megalinter-bot :)</p> <ul> <li>If you are an existing user of MegaLinter, you must update your github actions workflows to add the following parameters to stefanzweifel/git-auto-commit-action@v4 :</li> </ul> <p><code>yaml commit_user_name: megalinter-bot commit_user_email: nicolas.vuillamy@ox.security</code></p> <ul> <li>You can also use any github username and email you like :)</li> </ul> </li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Close parentheses in ci_light flavour doc by @moverperfect in https://github.com/oxsecurity/megalinter/pull/2494</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>black from 23.1.0 to 23.3.0</li> <li>cfn-lint from 0.75.1 to 0.76.1</li> <li>checkov from 2.3.120 to 2.3.141</li> <li>eslint from 8.36.0 to 8.37.0</li> <li>kics from 1.6.12 to 1.6.13</li> <li>markdown-link-check from 3.11.0 to 3.10.3</li> <li>phpstan from 1.10.8 to 1.10.9</li> <li>psalm from Psalm.5.8.0@ to Psalm.5.9.0@</li> <li>pyright from 1.1.300 to 1.1.301</li> <li>ruff from 0.0.255 to 0.0.260</li> <li>semgrep from 1.15.0 to 1.16.0</li> <li>sfdx-scanner-apex from 3.10.0 to 3.11.0</li> <li>sfdx-scanner-aura from 3.10.0 to 3.11.0</li> <li>sfdx-scanner-lwc from 3.10.0 to 3.11.0</li> <li>stylelint from 15.3.0 to 15.4.0</li> <li>swiftlint from 0.50.3 to 0.51.0</li> <li>syft from 0.75.0 to 0.76.0</li> <li>terraform-fmt from 1.4.2 to 1.4.4</li> <li>trivy from 0.38.3 to 0.39.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6210-2023-03-26","title":"[v6.21.0] - 2023-03-26","text":"<ul> <li>New linters<ul> <li>Add helm lint, by @ThomasSanson in https://github.com/oxsecurity/megalinter/pull/2386</li> </ul> </li> </ul> <ul> <li>Medias<ul> <li>Video: Code quality - Ep01 - MegaLinter, one linter to rule them all, by @devpro</li> <li>Video: DevSecOps Webinar using MegaLinter, by 5.15 Technologies</li> <li>Video: (FR) Coding Tech - L'importance de la CI/CD dans le d\u00e9veloppement de logiciels, by @GridexX from R2DevOps</li> <li>Article: (FR) MegaLinter, votre meilleur ami pour un code de qualit\u00e9, by @ThomasSanson</li> </ul> </li> </ul> <ul> <li>Linter enhancements &amp; fixes<ul> <li>phpcs: Add regex in descriptor to be able to extract the number of found errors, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2453</li> <li>Replace babel-eslint with @babel/eslint-parser, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2445</li> <li>Use docker image to install phpstan, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2469</li> <li>Avoid cspell error on readonly workspaces, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2474</li> <li>Allow bandit to use pyproject.toml, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2475</li> <li>Bring back stylelint-config-sass-guidelines package, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2477</li> <li>Display only errors in markdown-link-check logs for better readability, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2479</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Run CI linter jobs only on Pull requests to avoid doubling jobs</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>mega-linter-runner: doc fix for env list of values, see #2448, by @DariuszPorowski in https://github.com/oxsecurity/megalinter/pull/2449</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.14.1 to 6.14.3</li> <li>bandit from 1.7.4 to 1.7.5</li> <li>cfn-lint from 0.74.1 to 0.75.1</li> <li>checkov from 2.3.70 to 2.3.120</li> <li>checkstyle from 10.8.0 to 10.9.3</li> <li>clippy from 0.1.67 to 0.1.68</li> <li>clj-kondo from 2023.02.17 to 2023.03.17</li> <li>cspell from 6.28.0 to 6.31.1</li> <li>dotnet-format from 6.0.406 to 6.0.407</li> <li>eslint-plugin-jsonc from 2.6.0 to 2.7.0</li> <li>eslint from 8.35.0 to 8.36.0</li> <li>gitleaks from 8.16.0 to 8.16.1</li> <li>jscpd from 3.5.3 to 3.5.4</li> <li>jsonlint from 14.0.1 to 14.0.2</li> <li>kics from 1.6.11 to 1.6.12</li> <li>markdown-link-check from 3.10.3 to 3.11.0</li> <li>phpstan from 1.10.5 to 1.10.8</li> <li>prettier from 2.8.4 to 2.8.7</li> <li>psalm from Psalm.5.7.7@ to Psalm.5.8.0@</li> <li>pylint from 2.16.4 to 2.17.1</li> <li>pyright from 1.1.296 to 1.1.300</li> <li>revive from 1.2.5 to 1.3.1</li> <li>rstcheck from 6.1.1 to 6.1.2</li> <li>rubocop from 1.48.0 to 1.48.1</li> <li>semgrep from 1.14.0 to 1.15.0</li> <li>snakefmt from 0.8.1 to 0.8.3</li> <li>snakemake from 7.24.0 to 7.25.0</li> <li>sqlfluff from 1.4.5 to 2.0.2</li> <li>stylelint from 15.2.0 to 15.3.0</li> <li>syft from 0.74.0 to 0.75.0</li> <li>terraform-fmt from 1.3.9 to 1.4.2</li> <li>terragrunt from 0.44.4 to 0.45.0</li> <li>trivy from 0.38.1 to 0.38.3</li> <li>v8r from 0.14.0 to 1.0.0</li> <li>yamllint from 1.29.0 to 1.30.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6201-2023-03-07","title":"[v6.20.1] - 2023-03-07","text":"<ul> <li>Fixes<ul> <li>Fix issue with running on Mac m1 no longer working, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2430</li> <li>Fix Container images errors when pulling, by @echoix in https://github.com/oxsecurity/megalinter/pull/2435</li> <li>Fix Pre npm install not resolving, by @echoix in https://github.com/oxsecurity/megalinter/pull/2435</li> <li>Add build date in Beta docker images, by @nvuillam</li> <li>Correct misleading error message in GitlabCommentReporter.py, see #2420</li> <li>Fix GitlabCommentReporter wrong variables names, check #2423</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Improve config test, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2426</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Add article Level up your Unity Packages with CI/CD, by @RunningMattress in https://github.com/oxsecurity/megalinter/pull/2436</li> <li>Correct minor docs error by @moverperfect in https://github.com/oxsecurity/megalinter/pull/2440</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.14.0 to 6.14.1</li> <li>bicep_linter from 0.14.85 to 0.15.31</li> <li>cfn-lint from 0.74.0 to 0.74.1</li> <li>checkov from 2.3.59 to 2.3.70</li> <li>csharpier from 0.22.1 to 0.23.0</li> <li>jsonlint from 13.0.1 to 14.0.1</li> <li>mypy from 1.0.1 to 1.1.1</li> <li>phpstan from 1.10.3 to 1.10.5</li> <li>protolint from 0.43.0 to 0.43.1</li> <li>puppet-lint from 3.2.0 to 3.3.0</li> <li>pylint from 2.16.3 to 2.16.4</li> <li>rubocop from 1.47.0 to 1.48.0</li> <li>stylelint from 14.16.1 to 15.2.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6200-2023-03-05","title":"[v6.20.0] - 2023-03-05","text":"<ul> <li>Core<ul> <li>Upgrade base docker image from python:3.10.4-alpine3.16 to python:3.11.1-alpine3.17</li> <li>Build: remove folder contents before generating Dockerfile files for each linter in generate_linter_dockerfiles(), by @bdovaz in #2294</li> <li>Build: remove folder contents before generating test classes for each linter in generate_linter_test_classes(), by @bdovaz in #2294</li> <li>Build: automatically update the linter list used in the matrix of several of the workflows, by @bdovaz in #2294</li> <li>Test: create a testing architecture for format/autofix linters, by @bdovaz in #2294</li> <li>Test: create or adapt input files for format/autofix tests, by @bdovaz in #2294</li> <li>Test: created specific test folders for linters that need them because they can't share them, by @bdovaz in #2294</li> <li>Added rubocop-rake RubyGem for linting Rake files with RuboCop</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Correctly generate class names and test class files for each linter when the linter descriptor defines the attribute \"name\", by @bdovaz in #2294</li> <li>Removed the default powershell templates TEMPLATES/.powershell-formatter.psd1 and TEMPLATES/.powershell-psscriptanalyzer.psd1. Having these templates caused all rules to be ignored as the settings aren't incremental but absolute, by @bdovaz in #2294</li> <li>Added cli_lint_fix_arg_name parameter to dotnet format descriptor as without it, autofix doesn't work, by @bdovaz in #2294</li> <li>Created BicepLinter class to add DOTNET_SYSTEM_GLOBALIZATION_INVARIANT environment variable to avoid problems with ICU packages, by @bdovaz in #2294</li> <li>Modified npm-groovy-lint descriptor to add --failon parameter to only fail with error and not info which is the default value, by @bdovaz in #2294</li> <li>Added cli_lint_fix_arg_name parameter to powershell formatter descriptor as without it, autofix doesn't work, by @bdovaz in #2294</li> <li>Created ProtolintLinter class to fix the problem that returns exit code 1 when it encounters a problem to correct even though it corrects it correctly, by @bdovaz in #2294</li> <li>Concatenate --output parameter correctly to xmllint linter, by @bdovaz in #2294</li> <li>Modified the .pre-commit-hooks.yaml for megalinter-full so the containername argument is correctly split between two lines, by @drbothen #2411</li> <li>Avoid jscpd default config to detect copy pastes in image files</li> <li>Move utilstest to megalinter folder to avoid import issues</li> <li>Replace deprecated spectral package, by @bdovaz in by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2340</li> <li>Generate correct urls for packages with fixed versions, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2339</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Change swiftlint example that did not correctly reflect the --fix parameter, by @bdovaz in #2294</li> <li>Change in TSX eslint descriptor the urls as they were not correct, by @bdovaz in #2294</li> <li>Change in TYPESCRIPT eslint descriptor the urls as they were not correct, by @bdovaz on #2294</li> <li>Use mkdocs-glightbox to allow to click on images and display them in full screen</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Use docker/build-push-action to build docker images and akhilerm/tag-push-action to release by retagging and pushing beta images instead of rebuilding them</li> <li>Authenticate to GitHub API during docker build to avoid reaching limits</li> <li>Remove apk go package install in images where possible to decrease image sizes, by @echoix in https://github.com/oxsecurity/megalinter/pull/2318</li> <li>Create a slash PR bot to run <code>./build.sh</code> command manually on PRs, by @echoix in #2353 and #2381</li> <li>Limit parallel execution of large job matrix in the workflows with max-parallel in order to keep runners available for other jobs, by @echoix in #2397</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.12.1 to 6.14.0</li> <li>bash-exec from 5.1.16 to 5.2.15</li> <li>bicep_linter from 0.14.46 to 0.14.85</li> <li>cfn-lint from 0.72.10 to 0.74.0</li> <li>checkmake from 0.2.1 to 0.2.0</li> <li>checkov from 2.1.244 to 2.3.18</li> <li>checkstyle from 10.7.0 to 10.8.0</li> <li>clj-kondo from 2023.01.20 to 2023.02.17</li> <li>cspell from 6.21.0 to 6.28.0</li> <li>djlint from 1.19.13 to 1.19.16</li> <li>dotnet-format from 6.0.405 to 6.0.406</li> <li>dustilock from 0.0.0 to 1.2.0</li> <li>editorconfig-checker from 2.4.0 to 2.7.0</li> <li>eslint from 8.33.0 to 8.35.0</li> <li>git_diff from 2.36.4 to 2.38.4</li> <li>gitleaks from 8.15.3 to 8.16.0</li> <li>golangci-lint from 1.51.0 to 1.51.2</li> <li>jscpd from 3.3.26 to 3.5.3</li> <li>jsonlint from 11.7.0 to 13.0.1</li> <li>kics from 1.6.9 to 1.6.11</li> <li>mypy from 0.991 to 1.0.1</li> <li>perlcritic from 1.148 to 1.150</li> <li>phpcs from 3.7.1 to 3.7.2</li> <li>phpstan from 1.9.14 to 1.10.3</li> <li>powershell_formatter from 7.3.2 to 7.3.3</li> <li>powershell from 7.3.2 to 7.3.3</li> <li>prettier from 2.8.3 to 2.8.4</li> <li>protolint from 0.42.2 to 0.43.0</li> <li>psalm from Psalm.5.6.0@ to Psalm.5.7.7@</li> <li>puppet-lint from 3.0.1 to 3.2.0</li> <li>pylint from 2.16.1 to 2.16.3</li> <li>pyright from 1.1.270 to 1.1.296</li> <li>rubocop from 1.44.1 to 1.47.0</li> <li>secretlint from 6.2.0 to 6.2.3</li> <li>semgrep from 1.9.0 to 1.14.0</li> <li>sfdx-scanner-apex from 3.8.0 to 3.10.0</li> <li>sfdx-scanner-aura from 3.8.0 to 3.10.0</li> <li>sfdx-scanner-lwc from 3.8.0 to 3.10.0</li> <li>snakemake from 7.21.0 to 7.24.0</li> <li>spectral from 5.9.2 to 6.6.0</li> <li>syft from 0.70.0 to 0.74.0</li> <li>terraform-fmt from 1.3.7 to 1.3.9</li> <li>terragrunt from 0.43.2 to 0.44.4</li> <li>terrascan from 1.16.0 to 1.18.0</li> <li>tflint from 0.44.1 to 0.45.0</li> <li>trivy from 0.35.0 to 0.38.1</li> <li>xmllint from 20914 to 21003</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6190-2023-02-05","title":"[v6.19.0] - 2023-02-05","text":"<ul> <li>Core<ul> <li>Deploy additional Docker images to GitHub Container Registry, by @lars-reimann in #2117</li> <li>Build: Disable generate_documentation_all_users as we use github-dependents-info</li> </ul> </li> </ul> <ul> <li>Evolutions<ul> <li>Support xmllint autofix, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2244 (requires definition of <code>XML_XMLLINT_AUTOFORMAT: true</code>)</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Change name of config file for powershell formatter to avoid collision with powershell linter config, by @nvuillam in https://github.com/oxsecurity/megalinter/pull/2231</li> <li>Enhance find SARIF json in stdout output</li> <li>Pass --show-context, --show-suggestions, and --no-must-find-files to CSpell for friendlier UX, by @Kurt-von-Laven in #2275.</li> <li>Only run npm-package-json-lint when package.json is present, by @Kurt-von-Laven in #2280.</li> <li>Fix local files with extends, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2236</li> <li>Remove downgrading of ansible-lint, by @gotit96 in https://github.com/oxsecurity/megalinter/pull/2257</li> <li>Tag some automatically updated files as generated files, by @echoix in https://github.com/oxsecurity/megalinter/pull/2285</li> <li>Fix Sarif Reporter in Azure Devops with space in project name, by @EtienneDeneuve in https://github.com/oxsecurity/megalinter/pull/2301</li> <li>Pass extra args for friendlier CSpell UX (#2271), by @Kurt-von-Laven in https://github.com/oxsecurity/megalinter/pull/2275</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Configure jsonschema documentation formatting (see Descriptor schema, Configuration schema), by @echoix in #2270</li> <li>Update CONTRIBUTING.md and add documentation improvements hints, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2228</li> <li>Add Powershell linters rules url, by @bdovaz in https://github.com/oxsecurity/megalinter/pull/2242</li> <li>Fix syft logo, by @pjungermann in https://github.com/oxsecurity/megalinter/pull/2282</li> <li>Fix docker run documentation, by @davidjeddy in https://github.com/oxsecurity/megalinter/pull/2258</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.22 to 1.6.23</li> <li>ansible-lint from 6.7.0 to 6.12.1</li> <li>bicep_linter from 0.13.1 to 0.14.6</li> <li>black from 22.12.0 to 23.1.0</li> <li>cfn-lint from 0.72.6 to 0.72.10</li> <li>checkstyle from 10.6.0 to 10.7.0</li> <li>clippy from 0.1.66 to 0.1.67</li> <li>clj-kondo from 2022.12.10 to 2023.01.20</li> <li>csharpier from 0.21.0 to 0.22.1</li> <li>cspell from 6.18.1 to 6.21.0</li> <li>devskim from 0.7.101 to 0.7.104</li> <li>djlint from 1.19.11 to 1.19.13</li> <li>dotnet-format from 000 to 6.0.405</li> <li>eslint from 8.31.0 to 8.33.0</li> <li>git_diff from 2.36.3 to 2.36.4</li> <li>gitleaks from 8.15.2 to 8.15.3</li> <li>golangci-lint from 1.50.1 to 1.51.0</li> <li>isort from 5.11.4 to 5.12.0</li> <li>kics from 1.6.7 to 1.6.9</li> <li>ktlint from 0.48.1 to 0.48.2</li> <li>perlcritic from 1.146 to 1.148</li> <li>phpstan from 1.9.7 to 1.9.14</li> <li>powershell from 7.3.1 to 7.3.2</li> <li>powershell_formatter from 7.3.1 to 7.3.2</li> <li>prettier from 2.8.1 to 2.8.3</li> <li>psalm from Psalm.dev-master@ to Psalm.5.6.0@</li> <li>pylint from 2.15.10 to 2.16.1</li> <li>revive from 1.2.4 to 1.2.5</li> <li>rstfmt from 0.0.11 to 0.0.12</li> <li>rubocop from 1.42.0 to 1.44.1</li> <li>scss-lint from 0.59.0 to 0.60.0</li> <li>secretlint from 6.0.2 to 6.2.0</li> <li>semgrep from 1.3.0 to 1.9.0</li> <li>snakefmt from 0.8.0 to 0.8.1</li> <li>snakemake from 7.19.1 to 7.21.0</li> <li>syft from 0.65.0 to 0.70.0</li> <li>terraform-fmt from 1.3.6 to 1.3.7</li> <li>terragrunt from 0.42.3 to 0.43.2</li> <li>tflint from 0.44.0 to 0.44.1</li> <li>tsqllint from 1.15.1.0 to 1.15.3.0</li> <li>v8r from 0.13.1 to 0.14.0</li> <li>yamllint from 1.28.0 to 1.29.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6180-2023-01-07","title":"[v6.18.0] - 2023-01-07","text":"<ul> <li>New linters<ul> <li>Add CSharpier linter, by @bdovaz in #2185 and #2198</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Upgrade to dotnet 6.0, by @lexstatic in #1680<ul> <li>dotnet-format requires <code>.sln</code>, <code>.csproj</code> or <code>.vbproj</code> in the repo</li> </ul> </li> <li>Switch to docker buildx, by @bdovaz in #2199</li> <li>Drone CI enhancements, by @NebulaOnion in #2195<ul> <li>Config generator tool now supports Drone CI</li> <li>Added information about how to change trigger rules for Drone CI workflow</li> </ul> </li> <li>Unify the drawing of badges in documentation, by @bdovaz in #2220</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Don't write output files if REPORT_OUTPUT_FOLDER is none</li> <li>Fix Perl linter skipping files</li> </ul> </li> </ul> <ul> <li>New MegaLinter plugins<ul> <li>linkcheck: Plugin to check and validate Markdown links, by @shiranr</li> <li>salt-lint: Checks Salt State files (SLS) for best practices and behavior that could potentially be improved, by @grimmjo</li> </ul> </li> </ul> <ul> <li>New article talking about MegaLinter: Writing documentation as a champ in engineering teams (deleted), by @gijsreyn</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.72.5 to 0.72.6</li> <li>checkstyle from 10.5.0 to 10.6.0</li> <li>csharpier from 0.16.0 to 0.21.0</li> <li>cspell from 6.18.0 to 6.18.1</li> <li>devskim from 0.6.9 to 0.7.101</li> <li>djlint from 1.19.10 to 1.19.11</li> <li>eslint-plugin-jsonc from 2.5.0 to 2.6.0</li> <li>eslint from 8.30.0 to 8.31.0</li> <li>kics from 1.6.6 to 1.6.7</li> <li>ktlint from 0.48.0 to 0.48.1</li> <li>markdownlint from 0.32.2 to 0.33.0</li> <li>phplint from 5.4 to 5.5</li> <li>phpstan from 1.9.4 to 1.9.7</li> <li>rubocop from 1.41.1 to 1.42.0</li> <li>secretlint from 5.3.0 to 6.0.2</li> <li>semgrep from 1.2.1 to 1.3.0</li> <li>sfdx-scanner from 3.7.1 to 3.8.0</li> <li>stylelint from 14.16.0 to 14.16.1</li> <li>syft from 0.64.0 to 0.65.0</li> <li>tsqllint from 1.14.5.0 to 1.15.1.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6170-2022-12-27","title":"[v6.17.0] - 2022-12-27","text":"<ul> <li>New linters<ul> <li>Add PowerShell formatter, by @bdovaz (#2176)</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Improve meta tags in HTML documentation</li> <li>Clarify how npm-package-json-lint files can be ignored, by @bdovaz (#2184)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>djlint from 1.19.9 to 1.19.10</li> <li>dotenv-linter from 3.2.0 to 3.3.0</li> <li>powershell_formatter from 5.1.22621 to 7.3.1</li> <li>tflint from 0.43.0 to 0.44.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6160-2022-12-24","title":"[v6.16.0] - 2022-12-24","text":"<ul> <li>New linters<ul> <li>Add npm-package-json-lint linter, by @bdovaz (#2150)</li> </ul> </li> </ul> <ul> <li>Evolutions<ul> <li>Upgrade to alpine 3.16</li> <li>Disable php7 &amp; upgrade php8 to php81</li> <li>Add Makefile linters to documentation flavor</li> <li>PowershellLinter autofix capability, by @bdovaz (#2175)</li> <li>Allow local files with EXTENDS configuration, by @bdovaz (#2151)</li> <li>Add Trivy config file parameters, by @bdovaz (#2154)</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Change reporter text for better UX, by @ashokm (#2168)</li> <li>Remove workspace prefix from aggregate sarif report, by @janderssonse (#2119)</li> <li>CSpell file name linting doesn't use (custom) CSpell configuration (#2058)</li> <li>HTML email not rendering correctly (#2120). Set <code>REPORTERS_MARKDOWN_TYPE</code> to <code>simple</code> to avoid external images in PR/MR markdown comments.</li> <li>mega-linter-runner: Fix Value for container-name of type String required, by @AlbanAndrieu (#2123</li> <li>Use warning emoji in reporters, by @ashokm (#2156)</li> <li>Fix branding to use the correct 'OX Security' name, by @ashokm</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Enclose System.TeamProject in Azure Pipelines, by @ashokm (#2131)</li> <li>Better contributing docs, by @bdovaz (#2162)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>bicep_linter from 0.12.40 to 0.13.1</li> <li>black from 22.10.0 to 22.12.0</li> <li>cfn-lint from 0.72.0 to 0.72.5</li> <li>checkstyle from 10.4 to 10.5.0</li> <li>clippy from 0.1.65 to 0.1.66</li> <li>clj-kondo from 2022.10.14 to 2022.12.10</li> <li>cspell from 6.14.3 to 6.18.0</li> <li>djlint from 1.19.7 to 1.19.9</li> <li>eslint from 8.28.0 to 8.29.0 to 8.30.0</li> <li>git_diff from 2.34.5 to 2.36.3</li> <li>gitleaks from 8.15.0 to 8.15.2</li> <li>isort from 5.10.1 to 5.11.4</li> <li>kics from 1.6.5 to 1.6.6</li> <li>ktlint from 0.47.1 to 0.48.0</li> <li>luacheck from 1.0.0 to 1.1.0</li> <li>perlcritic from 1.140 to 1.146</li> <li>phplint from 3.0 to 5.4</li> <li>phpstan from 1.9.2 to 1.9.4</li> <li>powershell from 7.3.0 to 7.3.1</li> <li>prettier from 2.8.0 to 2.8.1</li> <li>psalm from Psalm.4.x-dev@ to Psalm.dev-master@</li> <li>pylint from 2.15.6 to 2.15.9</li> <li>rubocop from 1.39.0 to 1.41.1</li> <li>semgrep from 0.122.0 to 1.2.1</li> <li>sfdx-scanner-apex from 3.6.2 to 3.7.1</li> <li>sfdx-scanner-aura from 3.6.2 to 3.7.1</li> <li>sfdx-scanner-lwc from 3.6.2 to 3.7.1</li> <li>shellcheck from 0.8.0 to 0.9.0</li> <li>snakefmt from 0.7.0 to 0.8.0</li> <li>snakemake from 7.18.2 to 7.19.1</li> <li>sqlfluff from 1.4.2 to 1.4.5</li> <li>stylelint from 14.15.0 to 14.16.0</li> <li>swiftlint from 0.50.0 to 0.50.3</li> <li>syft from 0.62.1 to 0.64.0</li> <li>terraform-fmt from 1.3.5 to 1.3.6</li> <li>terragrunt from 0.40.2 to 0.42.3</li> <li>terrascan from 1.17.0 to 1.16.0</li> <li>tflint from 0.42.1 to 0.43.0</li> <li>trivy from 0.29.2 to 0.35.0</li> <li>v8r from 0.13.0 to 0.13.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6150-2022-11-23","title":"[v6.15.0] - 2022-11-23","text":"<ul> <li>Switch to https://megalinter.io</li> <li>Initial Drone CI documentation</li> <li>Automatically generate \"Used by\" markdown documentation with github-dependents-info</li> <li>Add Docker container documentation</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>bicep_linter from 0.12.1 to 0.12.40</li> <li>cfn-lint from 0.70.1 to 0.72.0</li> <li>coffeelint from 5.2.10 to 5.2.11</li> <li>cspell from 6.14.0 to 6.14.3</li> <li>djlint from 1.19.4 to 1.19.7</li> <li>eslint from 8.27.0 to 8.28.0</li> <li>flake8 from 5.0.4 to 6.0.0</li> <li>hadolint from 2.10.0 to 2.12.0</li> <li>kics from 1.6.3 to 1.6.5</li> <li>mypy from 0.982 to 0.991</li> <li>phpstan from 1.9.1 to 1.9.2</li> <li>powershell from 7.2.7 to 7.3.0</li> <li>prettier from 2.7.1 to 2.8.0</li> <li>protolint from 0.41.0 to 0.42.2</li> <li>psalm from Psalm.5.x-dev@ to Psalm.4.x-dev@</li> <li>pylint from 2.15.5 to 2.15.6</li> <li>rstcheck from 6.1.0 to 6.1.1</li> <li>rubocop from 1.38.0 to 1.39.0</li> <li>semgrep from 0.120.0 to 0.122.0</li> <li>snakefmt from 0.6.1 to 0.7.0</li> <li>snakemake from 7.18.1 to 7.18.2</li> <li>sqlfluff from 1.4.1 to 1.4.2</li> <li>stylelint from 14.14.1 to 14.15.0</li> <li>swiftlint from 0.46.5 to 0.50.0</li> <li>syft from 0.60.3 to 0.62.1</li> <li>terraform-fmt from 1.3.4 to 1.3.5</li> <li>terragrunt from 0.40.0 to 0.40.2</li> <li>terrascan from 1.16.0 to 1.17.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6140-2022-11-06","title":"[v6.14.0] - 2022-11-06","text":"<ul> <li>Core<ul> <li>Replace <code>set-output</code> usage with <code>GITHUB_OUTPUT</code> to handle Github deprecation notice</li> <li>Allow PRE_COMMANDS to be defined within a python venv (#2017)</li> <li>Correct behavior of <code>EXTENDS</code> property in <code>.megalinter.yml</code> config file (#1516)</li> <li>Fix flavor suggestion message in reporters</li> </ul> </li> </ul> <ul> <li>New MegaLinter plugin: mustache: Plugin to validate Logstash pipeline definition files using mustache, by Yann Jouanique</li> </ul> <ul> <li>Linters<ul> <li>Bring back rstfmt RestructuredText formatter</li> <li>Add the SPELL_*_FILE_EXTENSIONS parameter for each SPELL type linter. If set, it will use this value to filter instead of the default behavior which is to parse the files of all other linters executed (#1997).</li> <li>Allow cspell to also analyze file names (new variable SPELL_CSPELL_ANALYZE_FILE_NAMES) (#2009)</li> <li>Fix bicep version regex</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.21 to 1.6.22</li> <li>bicep_linter from 0.11.1 to to 0.12.1</li> <li>cfn-lint from 0.68.1 to 0.70.1</li> <li>checkstyle from 10.3.4 to 10.4</li> <li>clippy from 0.1.64 to 0.1.65</li> <li>cspell from 6.12.0 to 6.14.0</li> <li>djlint from 1.19.2 to 1.19.4</li> <li>eslint-plugin-jsonc from 2.4.0 to 2.5.0</li> <li>eslint from 8.26.0 to 8.27.0</li> <li>kics from 1.6.2 to 1.6.3</li> <li>kubeconform from 0.4.12 to 0.5.0</li> <li>npm-groovy-lint from 11.0.0 to 11.1.1</li> <li>phpstan from 1.8.10 to 1.9.1</li> <li>revive from 0.0.0 to 1.2.4</li> <li>rstfmt from 0.0.10 to 0.0.11</li> <li>rubocop from 1.37.0 to 1.38.0</li> <li>secretlint from 5.2.4 to 5.3.0</li> <li>semgrep from 0.118.0 to 0.120.0</li> <li>sfdx-scanner-apex from 2.13.9 to 3.6.2</li> <li>sfdx-scanner-aura from 2.13.9 to 3.6.2</li> <li>sfdx-scanner-lwc from 2.13.9 to 3.6.2</li> <li>snakemake from 7.16.1 to 7.18.1</li> <li>sqlfluff from 1.3.2 to 1.4.1</li> <li>stylelint from 14.14.0 to 14.14.1</li> <li>syft from 0.59.0 to 0.60.3</li> <li>terraform-fmt from 1.3.3 to 1.3.4</li> <li>terragrunt from 0.39.2 to 0.40.0</li> <li>tflint from 0.41.0 to 0.42.1</li> <li>yamllint from 1.26.3 to 1.26.3</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6130-2022-10-24","title":"[v6.13.0] - 2022-10-24","text":"<ul> <li>New cupcake flavor with 78 instead of 108 linters</li> <li>Don't add literal double quote character to filenames in mega-linter-runner (#1942).</li> <li>Remove default npm-groovy-lint extra arguments (#1872)</li> <li>Replace yaml.load by yaml.safe_load for better security</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.67.0 to 0.68.1</li> <li>clj-kondo from 2022.10.05 to 2022.10.14</li> <li>djlint from 1.19.1 to 1.19.2</li> <li>eslint from 8.25.0 to 8.26.0</li> <li>git_diff from 2.34.4 to 2.34.5</li> <li>gitleaks from 8.14.1 to 8.15.0</li> <li>golangci-lint from 1.50.0 to 1.50.1</li> <li>phpstan from 1.8.9 to 1.8.10</li> <li>powershell from 7.2.6 to 7.2.7</li> <li>puppet-lint from 3.0.0 to 3.0.1</li> <li>pylint from 2.15.4 to 2.15.5</li> <li>rubocop from 1.36.0 to 1.37.0</li> <li>semgrep from 0.117.0 to 0.118.0</li> <li>snakemake from 7.16.0 to 7.16.1</li> <li>syft from 0.58.0 to 0.59.0</li> <li>terraform-fmt from 1.3.2 to 1.3.3</li> <li>terragrunt from 0.39.1 to 0.39.2</li> <li>terrascan from 1.15.2 to 1.16.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6120-2022-10-16","title":"[v6.12.0] - 2022-10-16","text":"<ul> <li>Add Makefile linter in go flavor</li> <li>Fix invalid Docker container names in .pre-commit-hooks.yaml (#1932)</li> <li>Correct removeContainer casing in runner (#1917)</li> <li>Fix use of TERRAFORM_KICS_ARGUMENTS (#1947)</li> <li>Use -p argument for pyright custom config file path (#1946)</li> <li>Fix incorrect link to pytype for pyright (#1967)</li> <li>Deduplicate SHOW_ELAPSED_TIME properties to address v8r error (#1962)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.16 to 1.6.21</li> <li>ansible-lint from 6.7.0 to 6.7.0</li> <li>bicep_linter from 0.10.61 to 0.11.1</li> <li>black from 22.8.0 to 22.10.0</li> <li>cfn-lint from 0.66.0 to 0.67.0</li> <li>clj-kondo from 2022.09.08 to 2022.10.05</li> <li>djlint from 1.18.0 to 1.19.1</li> <li>eslint from 8.24.0 to 8.25.0</li> <li>gitleaks from 8.13.0 to 8.14.1</li> <li>golangci-lint from 1.49.0 to 1.50.0</li> <li>kics from 1.6.1 to 1.6.2</li> <li>mypy from 0.981 to 0.982</li> <li>npm-groovy-lint from 10.1.0 to 11.0.0</li> <li>phpstan from 1.8.6 to 1.8.9</li> <li>puppet-lint from 2.5.2 to 3.0.0</li> <li>pylint from 2.15.3 to 2.15.4</li> <li>scalafix from 0.10.3 to 0.10.4</li> <li>semgrep from 0.115.0 to 0.117.0</li> <li>snakemake from 7.14.2 to 7.16.0</li> <li>stylelint from 14.13.0 to 14.14.0</li> <li>terraform-fmt from 1.3.1 to 1.3.2</li> <li>terragrunt from 0.39.0 to 0.39.1</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6111-2022-10-03","title":"[v6.11.1] - 2022-10-03","text":"<ul> <li>Remove <code>no-space-check</code> from MegaLinter default <code>.pylintrc</code> file (#1923)</li> </ul>"},{"location":"CHANGELOG/#v6110-2022-10-02","title":"[v6.11.0] - 2022-10-02","text":"<ul> <li>Linters<ul> <li>Add bicep linter (#1898)</li> <li>Add quotes to arm-ttk linter command (#1879)</li> <li>Add Makefile linter in java flavor</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Improve support for devcontainers by using Python base image<ul> <li>Fixed Python version in devcontainer from 3.9 -&gt; 3.10</li> <li>Fix build command on linux (thanks a lot to Edouard Choini\u00e8re for the investigation and solution !)</li> </ul> </li> <li>Azure Comments reporter - Change status when all tests pass (#1915)</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Document the <code>-f</code> argument to mega-linter-runner (#1895)</li> <li>Fix a typo in documentation of bash-exec linter (#1892)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.6.0 to 6.7.0</li> <li>cfn-lint from 0.65.0 to 0.66.0</li> <li>checkov from 2.1.213 to 2.1.244</li> <li>checkstyle from 10.3.3 to 10.3.4</li> <li>clippy from 0.1.63 to 0.1.64</li> <li>coffeelint from 5.2.9 to 5.2.10</li> <li>cspell from 6.10.0 to 6.12.0</li> <li>djlint from 1.16.0 to 1.18.0</li> <li>eslint from 8.23.1 to 8.24.0</li> <li>gitleaks from 8.12.0 to 8.13.0</li> <li>jsonlint from 11.6.0 to 11.7.0</li> <li>kics from 1.6.0 to 1.6.1</li> <li>markdown-link-check from 3.10.2 to 3.10.3</li> <li>mypy from 0.971 to 0.981</li> <li>phpstan from 1.8.5 to 1.8.6</li> <li>protolint from 0.40.0 to 0.41.0</li> <li>scalafix from 0.10.2 to 0.10.3</li> <li>semgrep from 0.113.0 to 0.115.0</li> <li>snakemake from 7.14.0 to 7.14.2</li> <li>sqlfluff from 1.3.1 to 1.3.2</li> <li>stylelint from 14.12.0 to 14.13.0</li> <li>syft from 0.56.0 to 0.58.0</li> <li>terraform-fmt from 1.2.9 to 1.3.1</li> <li>terragrunt from 0.38.12 to 0.39.0</li> <li>tflint from 0.40.0 to 0.41.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v6100-2022-09-19","title":"[v6.10.0] - 2022-09-19","text":"<ul> <li>Add git-lfs in Docker image to handle large files in git repositories</li> </ul> <ul> <li>MegaLinter Docker images size improvements<ul> <li>Remove NPM cache</li> <li>Remove Cargo cache</li> <li>Remove rustup when clippy isn't embedded in the image</li> <li>Remove npm packages useless files</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.5.2 to 6.6.0</li> <li>cfn-lint from 0.64.1 to 0.65.0</li> <li>checkov from 2.1.201 to 2.1.213</li> <li>cspell from 6.8.1 to 6.10.0</li> <li>djlint from 1.12.3 to 1.16.0</li> <li>eslint from 8.23.0 to 8.23.1</li> <li>kics from 1.5.15 to 1.6.0</li> <li>pylint from 2.15.2 to 2.15.3</li> <li>scalafix from 0.10.1 to 0.10.2</li> <li>semgrep from 0.112.1 to 0.113.0</li> <li>sfdx-scanner-apex from 2.13.8 to 2.13.9</li> <li>sfdx-scanner-aura from 2.13.8 to 2.13.9</li> <li>sfdx-scanner-lwc from 2.13.8 to 2.13.9</li> <li>stylelint from 14.11.0 to 14.12.0</li> <li>syft from 0.55.0 to 0.56.0</li> <li>terragrunt from 0.38.10 to 0.38.12</li> <li>terragrunt from 0.38.9 to 0.38.10</li> <li>yamllint from 1.27.1 to 1.28.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v691-2022-09-11","title":"[v6.9.1] - 2022-09-11","text":"<ul> <li>Linters<ul> <li>Add python type checker pyright, by Microsoft</li> <li>New linters with available SARIF output for SARIF Reporter<ul> <li>ansible-lint</li> <li>shellcheck thanks to shellcheck-sarif</li> </ul> </li> <li>Use <code>list_of_files</code> Cli lint mode for checkstyle, to have unique SARIF output and improve performances</li> <li>Use <code>list_of_files</code> Cli lint mode for golangci-lint and revive, to improve performances</li> <li>Reactivate snakefmt</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Improve build performances and docker images sizes (reduce from 117 to 36 layers)<ul> <li>Use BUILDKIT</li> <li>Join RUN instructions</li> <li>Optimize core Dockerfile items</li> <li>Clean npm, python and cargo caches</li> </ul> </li> <li>Create a venv for each python-based linter to avoid issues with dependencies</li> <li>Fix broken link to documentation when using v6</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 6.0.2 to 6.5.2</li> <li>cfn-lint from 0.63.2 to 0.64.1</li> <li>checkov from 2.1.183 to 2.1.201</li> <li>clj-kondo from 2022.08.03 to 2022.09.08</li> <li>djlint from 1.12.1 to 1.12.3</li> <li>gitleaks from 8.11.2 to 8.12.0</li> <li>golangci-lint from 1.48.0 to 1.49.0</li> <li>ktlint from 0.47.0 to 0.47.1</li> <li>phpstan from 1.8.4 to 1.8.5</li> <li>protolint from 0.39.0 to 0.40.0</li> <li>pylint from 2.15.0 to 2.15.2</li> <li>semgrep from 0.103.0 to 0.112.1</li> <li>sqlfluff from 1.3.0 to 1.3.1</li> <li>standard from 15.0.1 to 17.0.0</li> <li>terraform-fmt from 1.2.8 to 1.2.9</li> <li>tflint from 0.39.3 to 0.40.0</li> </ul> </li> </ul> <p>Note: MegaLinter 6.9.0 release has been cancelled: it was fine but the docker image sizes were not optimized enough.</p>"},{"location":"CHANGELOG/#v680-2022-09-04","title":"[v6.8.0] - 2022-09-04","text":"<ul> <li>Run MegaLinter pre-commit hooks serially (#1826).</li> <li>Replace deprecated StandardJS VS Code extension with the newer official version</li> <li>When SARIF_REPORTER is active, use sarif-fmt to convert SARIF into text for console and text reporters (#1822).</li> <li>Count checkstyle errors (#1820)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>black from 22.6.0 to 22.8.0</li> <li>cfn-lint from 0.63.0 to 0.63.2</li> <li>checkov from 2.1.160 to 2.1.183</li> <li>checkstyle from 10.3.2 to 10.3.3</li> <li>djlint from 1.12.0 to 1.12.1</li> <li>kics from 1.5.14 to 1.5.15</li> <li>phpstan from 1.8.2 to 1.8.4</li> <li>rubocop from 1.35.1 to 1.36.0</li> <li>snakemake from 7.13.0 to 7.14.0</li> <li>syft from 0.54.0 to 0.55.0</li> <li>terragrunt from 0.38.8 to 0.38.9</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v671-2022-08-28","title":"[v6.7.1] - 2022-08-28","text":"<ul> <li>Fix Azure Comments reporter: Use BuildId to build artifacts url</li> <li>Fix actionlint install command</li> </ul>"},{"location":"CHANGELOG/#v670-2022-08-28","title":"[v6.7.0] - 2022-08-28","text":"<ul> <li>Linters<ul> <li>Add PMD java linter</li> </ul> </li> </ul> <ul> <li>Azure Pipelines integration enhancements<ul> <li>Update installation instructions</li> <li>Console reporter: manage collapsible groups for easier display &amp; navigation in job logs (requires CI=true and TF_BUILD=true sent as env variables)</li> <li>Azure comments reporter (see documentation)</li> </ul> </li> </ul> <ul> <li>Performances improvements<ul> <li>When running linters in parallel, run in the same process only the linters from same descriptor and that can update the same sources (to avoid concurrency). Other linters can be run independently.</li> <li>Define <code>linter_speed</code> of linter descriptors (default 3). Can be from 1 (super slow) to 5 (super fast). This is used to optimize the processing order of linters.</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix: Properly match <code>files_sub_directory</code> as a prefix instead of partial string matching (#1765)</li> <li>Match regex without <code>workspace</code> and <code>sub_directory</code></li> <li>Remove config variables that aren't applicable to linters analyzing all files or all other linters files</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.62.0 to 0.63.0</li> <li>checkov from 2.1.139 to 2.1.160</li> <li>cspell from 6.8.0 to 6.8.1</li> <li>djlint from 1.11.0 to 1.12.0</li> <li>eslint from 8.22.0 to 8.23.0</li> <li>gitleaks from 8.11.0 to 8.11.2</li> <li>golangci-lint from 1.48.0 to 1.49.0</li> <li>luacheck from 0.26.1 to 1.0.0</li> <li>pylint from 2.14.5 to 2.15.0</li> <li>rubocop from 1.35.0 to 1.35.1</li> <li>secretlint from 5.2.3 to 5.2.4</li> <li>snakemake from 7.12.1 to 7.13.0</li> <li>terraform-fmt from 1.2.7 to 1.2.8</li> <li>terragrunt from 0.38.7 to 0.38.8</li> <li>tflint from 0.35.0 to 0.39.3</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v660-2022-08-21","title":"[v6.6.0] - 2022-08-21","text":"<ul> <li>Fix flavors suggestions to ignore linters not relevant for such flavor (#1746)</li> <li>Update pre-commit hooks from v5 to v6 (#1755).</li> <li>Fix version in URL in logs produced by reporters</li> <li>Add Makefile linter within python flavor (#1760)</li> <li>Set DEFAULT_WORKSPACE as git safe directory per default #1766</li> <li>Improve documentation for TAP_REPORTER</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.15 to 1.6.16</li> <li>cfn-lint from 0.61.5 to 0.62.0</li> <li>checkov from 2.1.127 to 2.1.139</li> <li>cpplint from 1.6.0 to 1.6.1</li> <li>cspell from 6.6.1 to 6.8.0</li> <li>djlint from 1.9.5 to 1.11.0</li> <li>eslint-plugin-jsonc from 2.3.1 to 2.4.0</li> <li>gitleaks from 8.10.3 to 8.11.0</li> <li>kics from 1.5.13 to 1.5.14</li> <li>ktlint from 0.46.1 to 0.47.0</li> <li>markdownlint from 0.32.1 to 0.32.2</li> <li>sfdx-scanner-apex from 2.13.7 to 2.13.8</li> <li>sfdx-scanner-aura from 2.13.7 to 2.13.8</li> <li>sfdx-scanner-lwc from 2.13.7 to 2.13.8</li> <li>sqlfluff from 1.2.1 to 1.3.0</li> <li>stylelint from 14.10.0 to 14.11.0</li> <li>syft from 0.53.4 to 0.54.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v650-2022-08-15","title":"[v6.5.0] - 2022-08-15","text":"<ul> <li>npm-groovy-lint: Use Cli lint mode <code>list_of_files</code> for much better performances</li> <li>Disable proselint by default if .proselintrc file isn't found</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.1.121 to 2.1.127</li> <li>eslint from 8.21.0 to 8.22.0</li> <li>gitleaks from 8.10.2 to 8.10.3</li> <li>npm-groovy-lint from 9.5.0 to 10.1.0</li> <li>rstcheck from 6.0.0 to 6.1.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v640-2022-08-12","title":"[v6.4.0] - 2022-08-12","text":"<ul> <li>Add REPOSITORY_CHECKOV in all flavors</li> </ul> <ul> <li>New config variables<ul> <li>MEGALINTER_FILES_TO_LINT: Comma-separated list of files to analyze. Using this variable will bypass other file listing methods (#808)</li> <li>SKIP_CLI_LINT_MODES: Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: <code>file,project</code>). Available values: <code>file</code>,<code>cli_lint_mode</code>,<code>project</code>.</li> </ul> </li> </ul> <ul> <li>mega-linter-runner:<ul> <li>Allow <code>MEGALINTER_FILES_TO_LINT</code> to be sent as positional arguments</li> <li>New argument <code>--filesonly</code> that sends <code>SKIP_CLI_LINT_MODES=project</code></li> <li>Example: <code>mega-linter-runner --flavor python --release beta --filesonly megalinter/config.py megalinter/flavor_factory.py megalinter/MegaLinter.py</code></li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix SARIF when a run is missing a results list (#1725)</li> <li>Fix missing quotes for Powershell script analyzer (#1728)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.61.4 to 0.61.5</li> <li>checkov from 2.1.100 to 2.1.121</li> <li>clippy from 0.1.62 to 0.1.63</li> <li>cspell from 6.5.0 to 6.6.1</li> <li>gitleaks from 8.10.1 to 8.10.1</li> <li>powershell from 7.2.5 to 7.2.6</li> <li>protolint from 0.38.3 to 0.39.0</li> <li>rubocop from 1.33.0 to 1.35.0</li> <li>snakemake from 7.12.0 to 7.12.1</li> <li>stylelint from 14.9.1 to 14.10.0</li> <li>terraform-fmt from 1.2.6 to 1.2.7</li> <li>terragrunt from 0.38.6 to 0.38.7</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v630-2022-08-07","title":"[v6.3.0] - 2022-08-07","text":"<ul> <li> <p>Linters</p> <ul> <li>Add REPOSITORY_CHECKOV to benefit from all checks and not only terraform ones. TERRAFORM_CHECKOV will be deprecated in a next major version</li> <li>Add djlint (HTML_DJLINT) to lint HTML files (html, django, jinja, nunjucks, handlebars, golang, angular)</li> <li>Upgrade jsonlint to use maintained package @prantlf/jsonlint]([https://www.npmjs.com/package/@prantlf/jsonlint) + use cli_lint_mode <code>list_of_files</code> to improve performances</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Support for automatic removal of Docker container when linting is finished</li> <li>Fix SARIF when endColumn is 0 (#1702)</li> <li>Use dynamic REPORT_FOLDER value for output files for SALESFORCE and COPYPASTE descriptors</li> <li>Fix collapsible sections in Gitlab console logs</li> <li>Manage ignore files (like <code>.secretlintignore</code> or <code>.eslintignore</code>)<ul> <li>Define ignore argument for client in descriptors</li> <li>Define ignore file name in descriptors (overridable with _IGNORE_FILE_NAME at runtime)</li> <li>Update documentation generation to take in account this new configuration</li> </ul> </li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.1.83 to 2.1.98</li> <li>clj-kondo from 2022.04.25 to 2022.08.03</li> <li>eslint from 8.20.0 to 8.21.0</li> <li>flake8 from 5.0.1 to 5.0.2</li> <li>golangci-lint from 1.47.2 to 1.48.0</li> <li>jsonlint from 1.6.3 to 11.6.0</li> <li>kics from 1.5.12 to 1.5.13</li> <li>rubocop from 1.32.0 to 1.33.0</li> <li>syft from 0.52.0 to 0.53.4</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v621-2022-08-01","title":"[v6.2.1] - 2022-08-01","text":"<ul> <li>Fix blocking bug in MegaLinter v6.2.0 core (#1684 and #1685)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkstyle from 10.3.1 to 10.3.2 on 2022-08-01</li> <li>flake8 from 5.0.0 to 5.0.1 on 2022-08-01</li> <li>checkov from 2.1.82 to 2.1.83 on 2022-08-01</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v620-2022-07-31","title":"[v6.2.0] - 2022-07-31","text":"<ul> <li>Core<ul> <li>Fix mega-linter-runner --install template (#1662)</li> <li>Use <code>REPORT_OUTPUT_FOLDER: none</code> to not generate report files</li> <li>Add info in doc about CLI_LINT_MODE and about how to ignore files when cli_lint_mode is <code>project</code></li> <li>Fix bug that disables generation of <code>megalinter.log</code> file in most cases</li> <li>Fixes about JSON Schema (#1621)</li> <li>Remove redundant line separator after generated table (#1650)</li> <li>Avoid flavor suggestion message when only REPOSITORY linters aren't found</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Add checkmake to lint Makefile</li> <li>Disable SemGrep by default if <code>REPOSITORY_SEMGREP_RULESETS</code> isn't defined.</li> <li>Avoid cspell to lint all files. Lint only other linter files (#1648)</li> <li>Fix revive installation command</li> <li>New default config for gitleaks with <code>useDefault=true</code></li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.61.3 to 0.61.4 on 2022-07-30</li> <li>checkov from 2.1.60 to 2.1.61 on 2022-07-19</li> <li>checkov from 2.1.61 to 2.1.63 on 2022-07-20</li> <li>checkov from 2.1.63 to 2.1.65 on 2022-07-21</li> <li>checkov from 2.1.65 to 2.1.67 on 2022-07-21</li> <li>checkov from 2.1.67 to 2.1.68 on 2022-07-23</li> <li>checkov from 2.1.68 to 2.1.69 on 2022-07-24</li> <li>checkov from 2.1.69 to 2.1.70 on 2022-07-24</li> <li>checkov from 2.1.70 to 2.1.74 on 2022-07-25</li> <li>checkov from 2.1.74 to 2.1.82 on 2022-07-30</li> <li>cspell from 6.3.0 to 6.4.0 on 2022-07-19</li> <li>cspell from 6.4.0 to 6.4.1 on 2022-07-24</li> <li>cspell from 6.4.1 to 6.5.0 on 2022-07-30</li> <li>flake8 from 4.0.1 to 5.0.0 on 2022-07-31</li> <li>gitleaks from 8.8.12 to 8.9.0 on 2022-07-30</li> <li>golangci-lint from 1.47.0 to 1.47.1 on 2022-07-19</li> <li>golangci-lint from 1.47.1 to 1.47.2 on 2022-07-21</li> <li>jscpd from 3.4.5 to 3.3.26 on 2022-07-19</li> <li>markdown-table-formatter from 1.3.0 to 1.4.0 on 2022-07-25</li> <li>markdownlint from 0.32.0 to 0.32.1 on 2022-07-25</li> <li>mypy from 0.961 to 0.971 on 2022-07-19</li> <li>phpstan from 1.8.1 to 1.8.2 on 2022-07-20</li> <li>rubocop from 1.31.2 to 1.32.0 on 2022-07-21</li> <li>sfdx-scanner-apex from 2.13.5 to 2.13.6 on 2022-07-21</li> <li>sfdx-scanner-apex from 2.13.6 to 2.13.7 on 2022-07-30</li> <li>sfdx-scanner-aura from 2.13.5 to 2.13.6 on 2022-07-21</li> <li>sfdx-scanner-aura from 2.13.6 to 2.13.7 on 2022-07-30</li> <li>sfdx-scanner-lwc from 2.13.5 to 2.13.6 on 2022-07-21</li> <li>sfdx-scanner-lwc from 2.13.6 to 2.13.7 on 2022-07-30</li> <li>snakemake from 7.8.5 to 7.9.0 on 2022-07-19</li> <li>snakemake from 7.9.0 to 7.12.0 on 2022-07-30</li> <li>syft from 0.51.0 to 0.52.0 on 2022-07-22</li> <li>terraform-fmt from 1.2.5 to 1.2.6 on 2022-07-30</li> <li>terragrunt from 0.38.5 to 0.38.6 on 2022-07-24</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v610-2022-07-19","title":"[v6.1.0] - 2022-07-19","text":"<ul> <li>Improve console logs by using collapsible sections in GitHub Actions and Gitlab CI (disable by defining <code>CONSOLE_REPORTER_SECTIONS: false</code>)</li> <li>Define <code>CLEAR_REPORT_FOLDER=true</code> to empty report folder at the beginning of each run (#1502)</li> <li>Improve SARIF output<ul> <li>Replace CI paths in logs</li> <li>Add missing required properties so SARIF is valid</li> <li>Add MegaLinter information in SARIF linter runs</li> <li>Allow to select linters to activate SARIF for, using SARIF_REPORTER_LINTERS</li> <li>Fix issue when a linter is used in multiple SARIF lint results</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.61.2 to 0.61.3 on 2022-07-19</li> <li>checkov from 2.1.57 to 2.1.59 on 2022-07-18</li> <li>checkov from 2.1.59 to 2.1.60 on 2022-07-19</li> <li>cspell from 6.2.3 to 6.3.0 on 2022-07-18</li> <li>eslint from 8.19.0 to 8.20.0 on 2022-07-17</li> <li>golangci-lint from 1.46.2 to 1.47.0 on 2022-07-19</li> <li>jscpd from 3.3.26 to 3.4.5 on 2022-07-19</li> <li>markdownlint from 0.31.1 to 0.32.0 on 2022-07-17</li> <li>pylint from 2.14.4 to 2.14.5 on 2022-07-18</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v605-2022-07-16","title":"[v6.0.5] - 2022-07-16","text":"<ul> <li>Fix mega-linter-runner --upgrade so it also updates report folder to megalinter-reports in GitHub Actions Workflows #1609</li> <li>Fix documentation and templates to use <code>megalinter-reports</code> folder everywhere</li> <li>Workaround for python-markdown issue https://github.com/radude/mdx_truly_sane_lists/issues/9</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.1.54 to 2.1.56 on 2022-07-15</li> <li>checkov from 2.1.56 to 2.1.57 on 2022-07-16</li> <li>gitleaks from 8.8.7 to 8.8.12 on 2022-07-16</li> <li>kics from 1.5.11 to 1.5.12 on 2022-07-16</li> <li>protolint from 0.38.2 to 0.38.3 on 2022-07-15</li> <li>sqlfluff from 1.2.0 to 1.2.1 on 2022-07-16</li> <li>terraform-fmt from 1.2.4 to 1.2.5 on 2022-07-15</li> <li>terragrunt from 0.38.4 to 0.38.5 on 2022-07-15</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v604-2022-07-14","title":"[v6.0.4] - 2022-07-14","text":"<ul> <li>Fix count of errors when using SARIF reporter</li> <li>DevSkim: Ignore megalinter-reports by default (#1603)</li> <li>Load JSON when list of objects is defined in an ENV var (#1605)</li> <li>AutoFix pre_commands using <code>npm install</code> (1258)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.1.43 to 2.1.54 on 2022-07-14</li> <li>git_diff from 2.34.2 to 2.34.4 on 2022-07-14</li> <li>phpstan from 1.8.0 to 1.8.1 on 2022-07-14</li> <li>sqlfluff from 1.1.0 to 1.2.0 on 2022-07-14</li> <li>syft from 0.50.0 to 0.51.0 on 2022-07-14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v603-2022-07-11","title":"[v6.0.3] - 2022-07-11","text":"<ul> <li>mega-linter-runner: Update query args when opening OX Security</li> <li>Fix mega-linter-runner doesn't default to v6 for flavors (1596)</li> </ul>"},{"location":"CHANGELOG/#v600-2022-07-10","title":"[v6.0.0] - 2022-07-10","text":"<ul> <li>Breaking changes: you must run <code>npx mega-linter-runner --upgrade</code> to use MegaLinter v6</li> </ul> <ul> <li>Core architecture<ul> <li>New reporter SARIF_REPORTER that aggregates all SARIF output files into a single one<ul> <li>Correct SARIF files for known format errors</li> </ul> </li> <li>New config variable DISABLE_LINTERS_ERRORS to define a list of linters that will be considered as non blocking</li> <li>Upgrade base docker image to python:3.10.4-alpine3.15</li> <li>Rename default report folder from <code>report</code> to <code>megalinter-reports</code></li> <li>Display GitHub stars in linters summary table in documentation</li> </ul> </li> </ul> <ul> <li>Linters:<ul> <li>Add DevSkim security linter by Microsoft</li> <li>Add dustilock to check for dependency confusion attacks with node and python packages</li> <li>Add gitleaks to lint git repository</li> <li>Add goodcheck as regex-based linter</li> <li>Add PMD to lint java files (disabled for now)</li> <li>Add semgrep as regex-based linter with many community rules</li> <li>Add syft to generate SBOM (Software Bill Of Materials)</li> <li>Add trivy security linter</li> <li>Remove dockerfilelint, as it'sn't maintained anymore and hadolint contains all its rules</li> <li>Remove rstfmt as it'sn't maintained anymore</li> <li>SARIF management for:<ul> <li>bandit</li> <li>checkov</li> <li>checkstyle</li> <li>cfn-lint</li> <li>devskim</li> <li>eslint</li> <li>gitleaks</li> <li>hadolint</li> <li>ktlint</li> <li>npm-groovy-lint</li> <li>psalm</li> <li>semgrep</li> <li>secretlint</li> <li>revive</li> <li>terrascan</li> <li>tflint</li> <li>trivy</li> </ul> </li> </ul> </li> </ul> <ul> <li>Descriptors:<ul> <li>New flavor Security</li> <li>New descriptor repository: contains DevSkim, dustilock, gitleaks, secretlint, semgrep, syft, trivy</li> <li>Remove CREDENTIALS and GIT descriptors</li> </ul> </li> </ul> <ul> <li>mega-linter-runner<ul> <li><code>--upgrade</code> option can now upgrade repos MegaLinter config to v6</li> <li>Create/update local <code>.gitignore</code> file when installing / updating MegaLinter using mega-linter-runner</li> <li>Propose to test ox.security service</li> <li>Switch from npm to yarn</li> </ul> </li> </ul> <ul> <li>Dev architecture<ul> <li>Manage offline run of <code>bash build.sh</code> for those who want to code in planes :)</li> <li>Automate update of CHANGELOG.md after release (beta)</li> <li>Accelerate internal CI testing performances</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.13 to 1.6.15 on 2022-07-10</li> <li>black from 22.3.0 to 22.6.0 on 2022-07-10</li> <li>cfn-lint from 0.61.1 to 0.61.2 on 2022-07-10</li> <li>checkov from 3.9 to 2.1.43 on 2022-07-10</li> <li>checkstyle from 10.3 to 10.3.1 on 2022-07-10</li> <li>clippy from 0.1.61 to 0.1.62 on 2022-07-10</li> <li>cspell from 6.1.2 to 6.2.3 on 2022-07-10</li> <li>eslint-plugin-jsonc from 2.3.0 to 2.3.1 on 2022-07-10</li> <li>eslint from 8.18.0 to 8.19.0 on 2022-07-10</li> <li>git_diff from 2.30.3 to 2.34.2 on 2022-07-10</li> <li>phpstan from 1.7.15 to 1.8.0 on 2022-07-10</li> <li>pylint from 2.14.3 to 2.14.4 on 2022-07-10</li> <li>rubocop from 1.30.1 to 1.31.2 on 2022-07-10</li> <li>secretlint from 4.1.0 to 5.2.3 on 2022-07-10</li> <li>snakemake from 7.8.3 to 7.8.5 on 2022-07-10</li> <li>spectral from 5.6.0 to 5.9.2 on 2022-07-10</li> <li>sqlfluff from 1.0.0 to 1.1.0 on 2022-07-10</li> <li>terraform-fmt from 1.2.3 to 1.2.4 on 2022-07-10</li> <li>terragrunt from 0.38.1 to 0.38.4 on 2022-07-10</li> <li>terrascan from 1.14.0 to 1.15.2 on 2022-07-10</li> <li>v8r from 0.6.1 to 0.13.0 on 2022-07-10</li> <li>yamllint from 1.26.3 to 1.27.1 on 2022-07-10</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5170-2022-07-10","title":"[v5.17.0] - 2022-07-10","text":"<ul> <li>Message to propose users to upgrade to v6</li> </ul>"},{"location":"CHANGELOG/#v5161-2022-06-26","title":"[v5.16.1] - 2022-06-26","text":"<ul> <li>Quick fix release management</li> </ul>"},{"location":"CHANGELOG/#v5160-2022-06-26","title":"[v5.16.0] - 2022-06-26","text":"<ul> <li>Support for named Docker container.</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.0.1230 to 2.1.0 on 2022-06-23</li> <li>checkov from 2.1.0 to 2.1.5 on 2022-06-24</li> <li>checkov from 2.1.5 to 2.1.7 on 2022-06-25</li> <li>checkov from 2.1.7 to 3.9 on 2022-06-26</li> <li>kics from 1.5.10 to 1.5.11 on 2022-06-23</li> <li>protolint from 0.38.1 to 0.38.2 on 2022-06-26</li> <li>sfdx-scanner-apex from 2.13.4 to 2.13.5 on 2022-06-23</li> <li>sfdx-scanner-aura from 2.13.4 to 2.13.5 on 2022-06-23</li> <li>sfdx-scanner-lwc from 2.13.4 to 2.13.5 on 2022-06-23</li> <li>terragrunt from 0.38.0 to 0.38.1 on 2022-06-23</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5150-2022-06-23","title":"[v5.15.0] - 2022-06-23","text":"<ul> <li>OX Security branding and pre-announcement</li> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.61.0 to 0.61.1 on 2022-06-22</li> <li>checkov from 2.0.1209 to 2.0.1210 on 2022-06-14</li> <li>checkov from 2.0.1210 to 2.0.1212 on 2022-06-15</li> <li>checkov from 2.0.1212 to 2.0.1217 on 2022-06-15</li> <li>checkov from 2.0.1217 to 2.0.1218 on 2022-06-17</li> <li>checkov from 2.0.1218 to 2.0.1219 on 2022-06-19</li> <li>checkov from 2.0.1219 to 2.0.1226 on 2022-06-22</li> <li>checkov from 2.0.1226 to 2.0.1230 on 2022-06-22</li> <li>eslint from 8.17.0 to 8.18.0 on 2022-06-19</li> <li>ktlint from 0.45.2 to 0.46.0 on 2022-06-19</li> <li>ktlint from 0.46.0 to 0.46.1 on 2022-06-22</li> <li>phpcs from 3.6.2 to 3.7.0 on 2022-06-14</li> <li>phpcs from 3.7.0 to 3.7.1 on 2022-06-19</li> <li>phpstan from 1.7.12 to 1.7.13 on 2022-06-14</li> <li>phpstan from 1.7.13 to 1.7.14 on 2022-06-15</li> <li>phpstan from 1.7.14 to 1.7.15 on 2022-06-22</li> <li>powershell from 7.2.4 to 7.2.5 on 2022-06-22</li> <li>prettier from 2.6.2 to 2.7.0 on 2022-06-15</li> <li>prettier from 2.7.0 to 2.7.1 on 2022-06-17</li> <li>pylint from 2.14.1 to 2.14.2 on 2022-06-15</li> <li>pylint from 2.14.2 to 2.14.3 on 2022-06-19</li> <li>snakefmt from 0.6.0 to 0.6.1 on 2022-06-14</li> <li>snakemake from 7.8.2 to 7.8.3 on 2022-06-22</li> <li>sql-lint from 0.0.19 to 0.0.20 on 2022-06-19</li> <li>sql-lint from 0.0.20 to 1.0.0 on 2022-06-22</li> <li>sqlfluff from 0.13.2 to 1.0.0 on 2022-06-19</li> <li>terraform-fmt from 1.2.2 to 1.2.3 on 2022-06-17</li> <li>terragrunt from 0.37.3 to 0.37.4 on 2022-06-15</li> <li>terragrunt from 0.37.4 to 0.38.0 on 2022-06-19</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5140-2022-06-12","title":"[v5.14.0] - 2022-06-12","text":"<ul> <li>Local plugins support &amp; documentation</li> <li>Update R lintr documentation</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.12 to 1.6.13 on 2022-05-20</li> <li>cfn-lint from 0.60.0 to 0.60.1 on 2022-05-20</li> <li>cfn-lint from 0.60.1 to 0.61.0 on 2022-06-01</li> <li>checkov from 2.0.1141 to 2.0.1143 on 2022-05-17</li> <li>checkov from 2.0.1143 to 2.0.1147 on 2022-05-20</li> <li>checkov from 2.0.1147 to 2.0.1150 on 2022-05-22</li> <li>checkov from 2.0.1150 to 2.0.1158 on 2022-05-24</li> <li>checkov from 2.0.1158 to 2.0.1159 on 2022-05-24</li> <li>checkov from 2.0.1159 to 2.0.1161 on 2022-05-25</li> <li>checkov from 2.0.1161 to 2.0.1162 on 2022-05-27</li> <li>checkov from 2.0.1162 to 2.0.1174 on 2022-05-30</li> <li>checkov from 2.0.1174 to 2.0.1175 on 2022-05-31</li> <li>checkov from 2.0.1175 to 2.0.1177 on 2022-05-31</li> <li>checkov from 2.0.1177 to 2.0.1182 on 2022-05-31</li> <li>checkov from 2.0.1182 to 2.0.1185 on 2022-06-02</li> <li>checkov from 2.0.1185 to 2.0.1188 on 2022-06-03</li> <li>checkov from 2.0.1188 to 2.0.1206 on 2022-06-08</li> <li>checkov from 2.0.1206 to 2.0.1207 on 2022-06-09</li> <li>checkov from 2.0.1207 to 2.0.1209 on 2022-06-10</li> <li>checkstyle from 10.2 to 10.3 on 2022-05-30</li> <li>clippy from 0.1.60 to 0.1.61 on 2022-05-20</li> <li>coffeelint from 5.2.8 to 5.2.9 on 2022-05-17</li> <li>cspell from 5.20.0 to 5.21.0 on 2022-05-20</li> <li>cspell from 5.21.0 to 5.21.1 on 2022-05-21</li> <li>cspell from 5.21.1 to 6.0.0 on 2022-05-22</li> <li>cspell from 6.0.0 to 6.1.0 on 2022-05-31</li> <li>cspell from 6.1.0 to 6.1.1 on 2022-06-03</li> <li>cspell from 6.1.1 to 6.1.2 on 2022-06-09</li> <li>eslint-plugin-jsonc from 2.2.1 to 2.3.0 on 2022-05-28</li> <li>eslint from 8.15.0 to 8.16.0 on 2022-05-21</li> <li>eslint from 8.16.0 to 8.17.0 on 2022-06-08</li> <li>golangci-lint from 1.46.1 to 1.46.2 on 2022-05-20</li> <li>graphql-schema-linter from 3.0.0 to 3.0.1 on 2022-05-22</li> <li>kics from 1.5.8 to 1.5.9 on 2022-05-27</li> <li>kics from 1.5.9 to 1.5.10 on 2022-06-09</li> <li>mypy from 0.950 to 0.960 on 2022-05-27</li> <li>mypy from 0.960 to 0.961 on 2022-06-08</li> <li>phpstan from 1.6.8 to 1.6.9 on 2022-05-22</li> <li>phpstan from 1.6.9 to 1.7.0 on 2022-05-24</li> <li>phpstan from 1.7.0 to 1.7.1 on 2022-05-24</li> <li>phpstan from 1.7.1 to 1.7.2 on 2022-05-27</li> <li>phpstan from 1.7.11 to 1.7.12 on 2022-06-09</li> <li>phpstan from 1.7.2 to 1.7.3 on 2022-05-30</li> <li>phpstan from 1.7.3 to 1.7.6 on 2022-05-31</li> <li>phpstan from 1.7.6 to 1.7.7 on 2022-05-31</li> <li>phpstan from 1.7.7 to 1.7.8 on 2022-06-02</li> <li>phpstan from 1.7.8 to 1.7.9 on 2022-06-03</li> <li>phpstan from 1.7.9 to 1.7.11 on 2022-06-08</li> <li>powershell from 7.2.3 to 7.2.4 on 2022-05-20</li> <li>pylint from 2.13.9 to 2.14.0 on 2022-06-02</li> <li>pylint from 2.14.0 to 2.14.1 on 2022-06-08</li> <li>rstcheck from 5.0.0 to 6.0.0 on 2022-06-08</li> <li>rubocop from 1.29.1 to 1.30.0 on 2022-05-27</li> <li>rubocop from 1.30.0 to 1.30.1 on 2022-06-08</li> <li>scalafix from 0.10.0 to 0.10.1 on 2022-06-10</li> <li>sfdx-scanner-apex from 2.13.2 to 2.13.4 on 2022-05-27</li> <li>sfdx-scanner-aura from 2.13.2 to 2.13.4 on 2022-05-27</li> <li>sfdx-scanner-lwc from 2.13.2 to 2.13.4 on 2022-05-27</li> <li>shfmt from 3.5.0 to 3.6.0 on 2022-05-24</li> <li>snakemake from 7.6.2 to 7.7.0 on 2022-05-17</li> <li>snakemake from 7.7.0 to 7.8.0 on 2022-05-24</li> <li>snakemake from 7.8.0 to 7.8.1 on 2022-05-31</li> <li>snakemake from 7.8.1 to 7.8.2 on 2022-06-08</li> <li>sqlfluff from 0.13.1 to 0.13.2 on 2022-05-21</li> <li>stylelint from 14.8.2 to 14.8.3 on 2022-05-22</li> <li>stylelint from 14.8.3 to 14.8.4 on 2022-05-25</li> <li>stylelint from 14.8.4 to 14.8.5 on 2022-05-27</li> <li>stylelint from 14.8.5 to 14.9.0 on 2022-06-09</li> <li>stylelint from 14.9.0 to 14.9.1 on 2022-06-11</li> <li>terraform-fmt from 1.1.9 to 1.2.0 on 2022-05-20</li> <li>terraform-fmt from 1.2.0 to 1.2.1 on 2022-05-24</li> <li>terraform-fmt from 1.2.1 to 1.2.2 on 2022-06-03</li> <li>terragrunt from 0.37.1 to 0.37.2 on 2022-06-09</li> <li>terragrunt from 0.37.2 to 0.37.3 on 2022-06-12</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5130-2022-05-15","title":"[v5.13.0] - 2022-05-15","text":"<ul> <li>Add gherkin-lint in dotnet flavor (#1435)</li> <li>Define pre-commit hooks (#569).</li> <li>Pin ansible-lint to 6.0.2 to fix pip dependency conflict between jsonschema versions (#1470).</li> <li>Use docker image for editorconfig-checker</li> <li>Update sqlfluff descriptor properties to enable error count(#1460)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.59.0 to 0.59.1 on 2022-05-03</li> <li>cfn-lint from 0.59.1 to 0.60.0 on 2022-05-14</li> <li>checkov from 2.0.1076 to 2.0.1079 on 2022-04-24</li> <li>checkov from 2.0.1079 to 2.0.1084 on 2022-04-26</li> <li>checkov from 2.0.1084 to 2.0.1088 on 2022-04-28</li> <li>checkov from 2.0.1088 to 2.0.1098 on 2022-04-29</li> <li>checkov from 2.0.1098 to 2.0.1100 on 2022-04-30</li> <li>checkov from 2.0.1100 to 2.0.1102 on 2022-05-02</li> <li>checkov from 2.0.1102 to 2.0.1108 on 2022-05-03</li> <li>checkov from 2.0.1108 to 2.0.1110 on 2022-05-03</li> <li>checkov from 2.0.1110 to 2.0.1113 on 2022-05-05</li> <li>checkov from 2.0.1113 to 2.0.1118 on 2022-05-06</li> <li>checkov from 2.0.1118 to 2.0.1119 on 2022-05-07</li> <li>checkov from 2.0.1119 to 2.0.1120 on 2022-05-08</li> <li>checkov from 2.0.1120 to 2.0.1121 on 2022-05-08</li> <li>checkov from 2.0.1121 to 2.0.1140 on 2022-05-14</li> <li>checkov from 2.0.1140 to 2.0.1141 on 2022-05-15</li> <li>checkstyle from 10.1 to 10.2 on 2022-04-24</li> <li>clj-kondo from 2022.04.08 to 2022.04.25 on 2022-04-30</li> <li>coffeelint from 5.2.7 to 5.2.8 on 2022-04-26</li> <li>cspell from 5.19.7 to 5.20.0 on 2022-05-03</li> <li>editorconfig-checker from 2.3.5 to 2.4.0 on 2022-05-15</li> <li>eslint from 8.14.0 to 8.15.0 on 2022-05-07</li> <li>golangci-lint from 1.45.2 to 1.46.1 on 2022-05-14</li> <li>graphql-schema-linter from 2.0.1 to 2.0.2 on 2022-05-06</li> <li>graphql-schema-linter from 2.0.2 to 3.0.0 on 2022-05-07</li> <li>kics from 1.5.6 to 1.5.7 on 2022-05-03</li> <li>kics from 1.5.7 to 1.5.8 on 2022-05-14</li> <li>luacheck from 0.26.0 to 0.26.1 on 2022-04-24</li> <li>markdown-link-check from 3.10.0 to 3.10.2 on 2022-05-05</li> <li>mypy from 0.942 to 0.950 on 2022-04-28</li> <li>phpstan from 1.5.7 to 1.6.0 on 2022-04-26</li> <li>phpstan from 1.6.0 to 1.6.2 on 2022-04-28</li> <li>phpstan from 1.6.2 to 1.6.3 on 2022-04-29</li> <li>phpstan from 1.6.3 to 1.6.4 on 2022-05-03</li> <li>phpstan from 1.6.4 to 1.6.7 on 2022-05-05</li> <li>phpstan from 1.6.7 to 1.6.8 on 2022-05-14</li> <li>powershell from 7.2.2 to 7.2.3 on 2022-04-28</li> <li>protolint from 0.37.1 to 0.38.1 on 2022-05-03</li> <li>psalm from Psalm.4.x-dev@ to Psalm.5.x-dev@ on 2022-05-14</li> <li>pylint from 2.13.7 to 2.13.8 on 2022-05-03</li> <li>pylint from 2.13.8 to 2.13.9 on 2022-05-14</li> <li>rubocop from 1.28.1 to 1.28.2 on 2022-04-26</li> <li>rubocop from 1.28.2 to 1.29.0 on 2022-05-07</li> <li>rubocop from 1.29.0 to 1.29.1 on 2022-05-14</li> <li>sfdx-scanner-apex from 2.13.1 to 2.13.2 on 2022-05-05</li> <li>sfdx-scanner-aura from 2.13.1 to 2.13.2 on 2022-05-05</li> <li>sfdx-scanner-lwc from 2.13.1 to 2.13.2 on 2022-05-05</li> <li>snakemake from 7.4.0 to 7.5.0 on 2022-04-28</li> <li>snakemake from 7.5.0 to 7.6.0 on 2022-05-03</li> <li>snakemake from 7.6.0 to 7.6.1 on 2022-05-05</li> <li>snakemake from 7.6.1 to 7.6.2 on 2022-05-07</li> <li>sqlfluff from 0.13.0 to 0.13.1 on 2022-05-07</li> <li>stylelint from 14.7.1 to 14.8.0 on 2022-04-28</li> <li>stylelint from 14.8.0 to 14.8.1 on 2022-04-30</li> <li>stylelint from 14.8.1 to 14.8.2 on 2022-05-04</li> <li>terragrunt from 0.36.10 to 0.37.1 on 2022-05-14</li> <li>terragrunt from 0.36.7 to 0.36.8 on 2022-04-28</li> <li>terragrunt from 0.36.8 to 0.36.9 on 2022-04-30</li> <li>terragrunt from 0.36.9 to 0.36.10 on 2022-05-06</li> <li>xmllint from 20913 to 20914 on 2022-05-14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5120-2022-04-23","title":"[v5.12.0] - 2022-04-23","text":"<ul> <li>Core<ul> <li>Fix git upgrade issue</li> <li>New option FAIL_IF_UPDATED_SOURCES (#1389)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.11 to 1.6.12 on 2022-04-18</li> <li>cfn-lint from 0.58.4 to 0.59.0 on 2022-04-18</li> <li>checkov from 2.0.1047 to 2.0.1050 on 2022-04-11</li> <li>checkov from 2.0.1050 to 2.0.1067 on 2022-04-18</li> <li>checkov from 2.0.1067 to 2.0.1068 on 2022-04-18</li> <li>checkov from 2.0.1068 to 2.0.1076 on 2022-04-22</li> <li>coffeelint from 5.2.5 to 5.2.6 on 2022-04-11</li> <li>coffeelint from 5.2.6 to 5.2.7 on 2022-04-22</li> <li>eslint from 8.13.0 to 8.14.0 on 2022-04-23</li> <li>git_diff from 2.30.2 to 2.30.3 on 2022-04-18</li> <li>htmlhint from 1.1.3 to 1.1.4 on 2022-04-11</li> <li>kics from 1.5.5 to 1.5.6 on 2022-04-18</li> <li>npm-groovy-lint from 9.4.1 to 9.5.0 on 2022-04-18</li> <li>phpstan from 1.5.4 to 1.5.6 on 2022-04-18</li> <li>phpstan from 1.5.6 to 1.5.7 on 2022-04-22</li> <li>pylint from 2.13.5 to 2.13.7 on 2022-04-22</li> <li>rstcheck from 3.3.1 to 5.0.0 on 2022-04-18</li> <li>rubocop from 1.27.0 to 1.28.1 on 2022-04-22</li> <li>snakemake from 7.3.8 to 7.4.0 on 2022-04-22</li> <li>sqlfluff from 0.12.0 to 0.13.0 on 2022-04-22</li> <li>stylelint from 14.6.1 to 14.7.1 on 2022-04-18</li> <li>terraform-fmt from 1.1.8 to 1.1.9 on 2022-04-22</li> <li>terragrunt from 0.36.6 to 0.36.7 on 2022-04-18</li> <li>tflint from 0.34.1 to 0.35.0 on 2022-04-18</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5110-2022-04-11","title":"[v5.11.0] - 2022-04-11","text":"<ul> <li>Linters<ul> <li>Disable rstfmt as it's neither stable or maintained</li> <li>markdown-links-check: allow 203 as valid return code</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Github Comment Reporter: switch to using a hidden HTML comment to mark the comment, with the current workflow and jobid. This is more robust than the old method. ([#1355)</li> <li>Allow to provide CI_ACTION_RUN_URL to build hlink for GitHub Comments reporter messages ([#1341)</li> <li>Display plugin URL in MegaLinter output logs ([#1340)</li> <li>Fix public glibc public key download</li> <li>Fix <code>no override and no default toolchain set</code> when lint rust with clippy via github-action (#975)</li> <li>Fix cspell FileNotFound error by creating subdirectories under <code>report</code> as required (#1397)</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Add instructions to upload artifacts when using MegaLinter with Jenkins</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.10 to 1.6.11 on 2022-04-06</li> <li>ansible-lint from 6.0.1 to 6.0.2 on 2022-03-24</li> <li>bash-exec from 5.1.0 to 5.1.16 on 2022-03-22</li> <li>black from 22.1.0 to 22.3.0 on 2022-03-30</li> <li>cfn-lint from 0.58.3 to 0.58.4 on 2022-03-22</li> <li>checkov from 2.0.1008 to 2.0.1016 on 2022-03-31</li> <li>checkov from 2.0.1016 to 2.0.1021 on 2022-03-31</li> <li>checkov from 2.0.1021 to 2.0.1024 on 2022-04-01</li> <li>checkov from 2.0.1024 to 2.0.1030 on 2022-04-04</li> <li>checkov from 2.0.1030 to 2.0.1037 on 2022-04-06</li> <li>checkov from 2.0.1037 to 2.0.1045 on 2022-04-09</li> <li>checkov from 2.0.1045 to 2.0.1046 on 2022-04-10</li> <li>checkov from 2.0.1046 to 2.0.1047 on 2022-04-11</li> <li>checkov from 2.0.975 to 2.0.977 on 2022-03-21</li> <li>checkov from 2.0.977 to 2.0.980 on 2022-03-22</li> <li>checkov from 2.0.980 to 2.0.983 on 2022-03-23</li> <li>checkov from 2.0.983 to 2.0.995 on 2022-03-26</li> <li>checkov from 2.0.995 to 2.0.999 on 2022-03-27</li> <li>checkov from 2.0.999 to 2.0.1008 on 2022-03-30</li> <li>checkstyle from 10.0 to 10.1 on 2022-03-27</li> <li>clippy from 0.1.59 to 0.1.60 on 2022-04-09</li> <li>clj-kondo from 2022.02.09 to 2022.04.08 on 2022-04-10</li> <li>coffeelint from 5.2.4 to 5.2.5 on 2022-03-22</li> <li>cspell from 5.19.2 to 5.19.3 on 2022-03-26</li> <li>cspell from 5.19.3 to 5.19.4 on 2022-04-01</li> <li>cspell from 5.19.4 to 5.19.5 on 2022-04-02</li> <li>cspell from 5.19.5 to 5.19.6 on 2022-04-09</li> <li>cspell from 5.19.6 to 5.19.7 on 2022-04-10</li> <li>eslint from 8.11.0 to 8.12.0 on 2022-03-26</li> <li>eslint from 8.12.0 to 8.13.0 on 2022-04-09</li> <li>golangci-lint from 1.45.0 to 1.45.2 on 2022-03-26</li> <li>hadolint from 2.9.1 to 2.9.3 on 2022-03-31</li> <li>hadolint from 2.9.3 to 2.10.0 on 2022-04-10</li> <li>htmlhint from 1.1.2 to 1.1.3 on 2022-03-30</li> <li>kics from 1.5.4 to 1.5.5 on 2022-03-31</li> <li>ktlint from 0.45.0 to 0.45.1 on 2022-03-22</li> <li>ktlint from 0.45.1 to 0.45.2 on 2022-04-07</li> <li>luacheck from 0.25.0 to 0.26.0 on 2022-03-26</li> <li>mypy from 0.941 to 0.942 on 2022-03-26</li> <li>phpstan from 1.4.10 to 1.5.0 on 2022-03-26</li> <li>phpstan from 1.5.0 to 1.5.2 on 2022-03-30</li> <li>phpstan from 1.5.2 to 1.5.3 on 2022-03-31</li> <li>phpstan from 1.5.3 to 1.5.4 on 2022-04-04</li> <li>prettier from 2.6.0 to 2.6.1 on 2022-03-26</li> <li>prettier from 2.6.1 to 2.6.2 on 2022-04-04</li> <li>pylint from 2.12.2 to 2.13.1 on 2022-03-26</li> <li>pylint from 2.13.1 to 2.13.2 on 2022-03-27</li> <li>pylint from 2.13.2 to 2.13.3 on 2022-03-30</li> <li>pylint from 2.13.3 to 2.13.4 on 2022-03-31</li> <li>pylint from 2.13.4 to 2.13.5 on 2022-04-07</li> <li>rubocop from 1.26.0 to 1.26.1 on 2022-03-23</li> <li>rubocop from 1.26.1 to 1.27.0 on 2022-04-09</li> <li>scalafix from 0.9.34 to 0.10.0 on 2022-04-04</li> <li>sfdx-scanner-apex from 2.13.0 to 2.13.1 on 2022-03-24</li> <li>sfdx-scanner-aura from 2.13.0 to 2.13.1 on 2022-03-24</li> <li>sfdx-scanner-lwc from 2.13.0 to 2.13.1 on 2022-03-24</li> <li>snakemake from 7.2.1 to 7.3.0 on 2022-03-22</li> <li>snakemake from 7.3.0 to 7.3.1 on 2022-03-24</li> <li>snakemake from 7.3.1 to 7.3.2 on 2022-03-26</li> <li>snakemake from 7.3.2 to 7.3.3 on 2022-03-30</li> <li>snakemake from 7.3.3 to 7.3.4 on 2022-03-31</li> <li>snakemake from 7.3.4 to 7.3.5 on 2022-03-31</li> <li>snakemake from 7.3.5 to 7.3.6 on 2022-04-04</li> <li>snakemake from 7.3.6 to 7.3.7 on 2022-04-06</li> <li>snakemake from 7.3.7 to 7.3.8 on 2022-04-07</li> <li>sqlfluff from 0.11.1 to 0.11.2 on 2022-03-26</li> <li>sqlfluff from 0.11.2 to 0.12.0 on 2022-04-09</li> <li>stylelint from 14.6.0 to 14.6.1 on 2022-03-26</li> <li>terraform-fmt from 1.1.7 to 1.1.8 on 2022-04-09</li> <li>terrascan from 1.13.2 to 1.14.0 on 2022-04-01</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v5100-2022-03-20","title":"[v5.10.0] - 2022-03-20","text":"<ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 5.4.0 to 6.0.0 on 2022-03-16</li> <li>ansible-lint from 6.0.0 to 6.0.1 on 2022-03-19</li> <li>checkov from 2.0.939 to 2.0.940 on 2022-03-13</li> <li>checkov from 2.0.940 to 2.0.943 on 2022-03-14</li> <li>checkov from 2.0.943 to 2.0.949 on 2022-03-15</li> <li>checkov from 2.0.949 to 2.0.962 on 2022-03-16</li> <li>checkov from 2.0.962 to 2.0.969 on 2022-03-17</li> <li>checkov from 2.0.969 to 2.0.970 on 2022-03-17</li> <li>checkov from 2.0.970 to 2.0.975 on 2022-03-19</li> <li>cspell from 5.19.0 to 5.19.1 on 2022-03-13</li> <li>cspell from 5.19.1 to 5.19.2 on 2022-03-14</li> <li>golangci-lint from 1.44.2 to 1.45.0 on 2022-03-19</li> <li>hadolint from 2.7.0 to 2.9.1 on 2022-03-19</li> <li>kics from 1.5.3 to 1.5.4 on 2022-03-17</li> <li>ktlint from 0.44.0 to 0.45.0 on 2022-03-19</li> <li>markdown-link-check from 3.9.3 to 3.10.0 on 2022-03-20</li> <li>mypy from 0.940 to 0.941 on 2022-03-15</li> <li>phpstan from 1.4.9 to 1.4.10 on 2022-03-14</li> <li>powershell from 7.2.1 to 7.2.2 on 2022-03-17</li> <li>prettier from 2.5.1 to 2.6.0 on 2022-03-17</li> <li>snakemake from 7.2.0 to 7.2.1 on 2022-03-14</li> <li>sqlfluff from 0.11.0 to 0.11.1 on 2022-03-17</li> <li>stylelint from 14.5.3 to 14.6.0 on 2022-03-17</li> <li>terragrunt from 0.36.3 to 0.36.5 on 2022-03-17</li> <li>terragrunt from 0.36.5 to 0.36.6 on 2022-03-19</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v590-2022-03-13","title":"[v5.9.0] - 2022-03-13","text":"<ul> <li>Linters<ul> <li>New linter kubeconform to validate Kubernetes manifests with updated schemas</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Switch from JDK 8 to JDK 11</li> <li>Use latest version of npm</li> </ul> </li> </ul> <ul> <li>Flavors<ul> <li>Add shell linters to ci_light flavor (#1298)</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Generate JSON Schema HTML Documentation when building documentation (#1287)</li> <li>rubocop: remove <code>--force-exclusion</code> from auto-added parameters (#302)</li> <li>terrascan: call <code>terrascan init</code> as a pre-command</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.8 to 1.6.9 on 2022-02-25</li> <li>actionlint from 1.6.9 to 1.6.10 on 2022-03-12</li> <li>bandit from 1.7.2 to 1.7.3 on 2022-02-28</li> <li>bandit from 1.7.3 to 1.7.4 on 2022-03-06</li> <li>cfn-lint from 0.58.0 to 0.58.1 on 2022-02-21</li> <li>cfn-lint from 0.58.1 to 0.58.2 on 2022-02-27</li> <li>cfn-lint from 0.58.2 to 0.58.3 on 2022-03-09</li> <li>checkov from 2.0.873 to 2.0.885 on 2022-02-21</li> <li>checkov from 2.0.885 to 2.0.901 on 2022-02-25</li> <li>checkov from 2.0.901 to 2.0.902 on 2022-02-25</li> <li>checkov from 2.0.902 to 2.0.903 on 2022-02-27</li> <li>checkov from 2.0.903 to 2.0.906 on 2022-02-28</li> <li>checkov from 2.0.906 to 2.0.914 on 2022-03-03</li> <li>checkov from 2.0.914 to 2.0.917 on 2022-03-04</li> <li>checkov from 2.0.917 to 2.0.918 on 2022-03-06</li> <li>checkov from 2.0.918 to 2.0.923 on 2022-03-08</li> <li>checkov from 2.0.923 to 2.0.924 on 2022-03-08</li> <li>checkov from 2.0.924 to 2.0.927 on 2022-03-09</li> <li>checkov from 2.0.927 to 2.0.931 on 2022-03-10</li> <li>checkov from 2.0.931 to 2.0.935 on 2022-03-11</li> <li>checkov from 2.0.935 to 2.0.938 on 2022-03-12</li> <li>checkov from 2.0.938 to 2.0.939 on 2022-03-13</li> <li>checkstyle from 9.3 to 10.0 on 2022-03-03</li> <li>clippy from 0.1.58 to 0.1.59 on 2022-02-25</li> <li>clj-kondo from 2022.01.15 to 2022.02.09 on 2022-02-21</li> <li>cpplint from 1.5.5 to 1.6.0 on 2022-02-20</li> <li>cspell from 5.18.5 to 5.19.0 on 2022-03-13</li> <li>eslint from 8.10.0 to 8.11.0 on 2022-03-12</li> <li>eslint from 8.9.0 to 8.10.0 on 2022-02-27</li> <li>kics from 1.5.2 to 1.5.3 on 2022-03-03</li> <li>mypy from 0.931 to 0.940 on 2022-03-12</li> <li>phpstan from 1.4.6 to 1.4.7 on 2022-03-03</li> <li>phpstan from 1.4.7 to 1.4.8 on 2022-03-06</li> <li>phpstan from 1.4.8 to 1.4.9 on 2022-03-11</li> <li>protolint from 0.37.0 to 0.37.1 on 2022-02-27</li> <li>rst-lint from 1.3.2 to 1.4.0 on 2022-02-25</li> <li>rubocop from 1.25.1 to 1.26.0 on 2022-03-10</li> <li>sfdx-scanner-apex from 2.12.0 to 2.13.0 on 2022-02-25</li> <li>sfdx-scanner-aura from 2.12.0 to 2.13.0 on 2022-02-25</li> <li>sfdx-scanner-lwc from 2.12.0 to 2.13.0 on 2022-02-25</li> <li>snakefmt from 0.4.4 to 0.6.0 on 2022-03-04</li> <li>snakemake from 6.15.5 to 7.0.0 on 2022-02-25</li> <li>snakemake from 7.0.0 to 7.0.1 on 2022-02-27</li> <li>snakemake from 7.0.1 to 7.0.3 on 2022-03-03</li> <li>snakemake from 7.0.3 to 7.0.4 on 2022-03-04</li> <li>snakemake from 7.0.4 to 7.1.0 on 2022-03-06</li> <li>snakemake from 7.1.0 to 7.1.1 on 2022-03-08</li> <li>snakemake from 7.1.1 to 7.2.0 on 2022-03-13</li> <li>sqlfluff from 0.10.1 to 0.11.0 on 2022-03-08</li> <li>stylelint from 14.5.1 to 14.5.3 on 2022-02-25</li> <li>swiftlint from 0.46.2 to 0.46.3 on 2022-02-25</li> <li>swiftlint from 0.46.3 to 0.46.4 on 2022-03-08</li> <li>swiftlint from 0.46.4 to 0.46.5 on 2022-03-09</li> <li>terraform-fmt from 1.1.6 to 1.1.7 on 2022-03-04</li> <li>terragrunt from 0.36.1 to 0.36.2 on 2022-02-25</li> <li>terragrunt from 0.36.2 to 0.36.3 on 2022-03-04</li> <li>terrascan from 1.13.1 to 1.13.2 on 2022-02-25</li> <li>tsqllint from 1.14.3.0 to 1.14.5.0 on 2022-02-21</li> <li>xmllint from 20912 to 20913 on 2022-03-12</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v580-2022-02-18","title":"[v5.8.0] - 2022-02-18","text":"<ul> <li>Linters<ul> <li>Improve ansible-lint performances by linting all project in one call, and count number of errors</li> <li>Use project cli_lint_mode to improve performances<ul> <li>terrascan</li> </ul> </li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Manage to use local certificate with Gitlab comments reporter using GITLAB_SSL_CERTIFICATE_PATH (#1239)</li> <li>Fix GITLAB_ACCESS_TOKEN_MEGALINTER suggestion when trying to push comments to gitlab merge request</li> <li>Gitlab Comments Reporter: allow to use certificates with variable GITLAB_CUSTOM_CERTIFICATE (or GITLAB_CERTIFICATE_PATH only if PRE_COMMANDS are used) (#1239)</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Allow to check prop existence in active_only_if_file_found and apply to eslint descriptors (#1205)</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Update images with screen records gifs</li> <li>Add publish artifact task in azure pipelines doc</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 5.3.2 to 5.4.0 on 2022-02-13</li> <li>checkov from 2.0.782 to 2.0.783 on 2022-02-03</li> <li>checkov from 2.0.783 to 2.0.786 on 2022-02-03</li> <li>checkov from 2.0.786 to 2.0.791 on 2022-02-05</li> <li>checkov from 2.0.791 to 2.0.793 on 2022-02-06</li> <li>checkov from 2.0.793 to 2.0.795 on 2022-02-06</li> <li>checkov from 2.0.795 to 2.0.812 on 2022-02-09</li> <li>checkov from 2.0.812 to 2.0.813 on 2022-02-09</li> <li>checkov from 2.0.813 to 2.0.817 on 2022-02-10</li> <li>checkov from 2.0.817 to 2.0.830 on 2022-02-13</li> <li>checkov from 2.0.830 to 2.0.833 on 2022-02-14</li> <li>checkov from 2.0.833 to 2.0.853 on 2022-02-16</li> <li>checkov from 2.0.853 to 2.0.866 on 2022-02-18</li> <li>checkov from 2.0.866 to 2.0.873 on 2022-02-18</li> <li>cspell from 5.18.0 to 5.18.3 on 2022-02-05</li> <li>cspell from 5.18.3 to 5.18.4 on 2022-02-09</li> <li>cspell from 5.18.4 to 5.18.5 on 2022-02-16</li> <li>eslint-plugin-jsonc from 2.1.0 to 2.2.1 on 2022-02-18</li> <li>eslint from 8.8.0 to 8.9.0 on 2022-02-13</li> <li>golangci-lint from 1.44.0 to 1.44.2 on 2022-02-18</li> <li>kics from 1.5.1 to 1.5.2 on 2022-02-18</li> <li>ktlint from 0.43.2 to 0.44.0 on 2022-02-16</li> <li>markdownlint from 0.30.0 to 0.31.0 on 2022-02-06</li> <li>markdownlint from 0.31.0 to 0.31.1 on 2022-02-09</li> <li>phpstan from 1.4.5 to 1.4.6 on 2022-02-06</li> <li>protolint from 0.36.0 to 0.37.0 on 2022-02-13</li> <li>rubocop from 1.25.0 to 1.25.1 on 2022-02-03</li> <li>snakemake from 6.15.1 to 6.15.2 on 2022-02-06</li> <li>snakemake from 6.15.2 to 6.15.3 on 2022-02-09</li> <li>snakemake from 6.15.3 to 6.15.4 on 2022-02-09</li> <li>snakemake from 6.15.4 to 6.15.5 on 2022-02-10</li> <li>sqlfluff from 0.10.0 to 0.10.1 on 2022-02-18</li> <li>sqlfluff from 0.9.4 to 0.10.0 on 2022-02-13</li> <li>stylelint from 14.3.0 to 14.4.0 on 2022-02-09</li> <li>stylelint from 14.4.0 to 14.5.0 on 2022-02-13</li> <li>stylelint from 14.5.0 to 14.5.1 on 2022-02-18</li> <li>terraform-fmt from 1.1.4 to 1.1.5 on 2022-02-03</li> <li>terraform-fmt from 1.1.5 to 1.1.6 on 2022-02-18</li> <li>terrascan from 1.13.0 to 1.13.1 on 2022-02-13</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v571-2022-02-02","title":"[v5.7.1] - 2022-02-02","text":"<ul> <li>Linter updates:<ul> <li>temporary disable snakefmt to allow latest versions of black and sqlfluff</li> <li>cspell: Update .cspell default config with <code>\"version: \"2.0\", \"noConfigSearch\": true</code></li> <li>Use list_of_files mode to improve performances<ul> <li>markdown-link-check</li> <li>standard</li> <li>stylelint</li> </ul> </li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Remove extraheader in git repo when using Azure Pipelines (#1125)</li> <li>Fix gitlab token error message (#1228)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>black from 21.12 to 22.1.0 on 2022-02-02</li> <li>cfn-lint from 0.57.0 to 0.58.0 on 2022-02-01</li> <li>checkov from 2.0.775 to 2.0.777 on 2022-01-31</li> <li>checkov from 2.0.777 to 2.0.778 on 2022-02-01</li> <li>checkov from 2.0.778 to 2.0.780 on 2022-02-02</li> <li>checkov from 2.0.780 to 2.0.782 on 2022-02-02</li> <li>cspell from 5.17.0 to 5.18.0 on 2022-01-31</li> <li>kics from 1.5.0 to 1.5.1 on 2022-02-02</li> <li>markdown-table-formatter from 1.2.0 to 1.3.0 on 2022-01-31</li> <li>phpstan from 1.4.3 to 1.4.4 on 2022-02-01</li> <li>phpstan from 1.4.4 to 1.4.5 on 2022-02-02</li> <li>snakemake from 6.13.1 to 6.15.1 on 2022-02-02</li> <li>sqlfluff from 0.9.3 to 0.9.4 on 2022-02-02</li> <li>terragrunt from 0.36.0 to 0.36.1 on 2022-02-01</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v570-2022-01-30","title":"[v5.7.0] - 2022-01-30","text":"<ul> <li>Core:<ul> <li>New reporter GITLAB_COMMENT_REPORTER allowing to post MegaLinter results as comments on Gitlab merge requests</li> <li>CI: Update test method to check that the number of errors is correctly calculated (+ fix linter test cases)</li> </ul> </li> </ul> <ul> <li>Linter updates:<ul> <li>Add configuration file option for SQLFluff (#1200)</li> <li>secretlint: Use .gitignore as .secretlintignore if --secretlintignore isn't defined and .secretlintignore not found (#1207)</li> <li>Update bash-exec documentation</li> <li>Display correct number of errors in logs<ul> <li>actionlint</li> <li>chktex</li> <li>cpplint</li> <li>htmlhint</li> <li>perlcritic</li> <li>sfdx-scanner</li> <li>shellcheck</li> <li>shfmt</li> </ul> </li> <li>Use list_of_files mode to improve performances<ul> <li>htmlhint</li> <li>shellcheck</li> <li>shfmt</li> </ul> </li> </ul> </li> </ul> <ul> <li>Fixes:<ul> <li>Fix v5 doc deployment when there is a new release (#1190)</li> <li>Fix issue when using <code>VALIDATE_ALL_CODEBASE: false</code> on Azure Pipelines by defining auth header in CI env variable GIT_AUTHORIZATION_BEARER (#1125)</li> <li>Fix tflint initialization so it uses configuration file when defined (#1134)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>bandit from 1.7.1 to 1.7.2 on 2022-01-26</li> <li>checkov from 2.0.744 to 2.0.745 on 2022-01-23</li> <li>checkov from 2.0.745 to 2.0.746 on 2022-01-24</li> <li>checkov from 2.0.746 to 2.0.749 on 2022-01-24</li> <li>checkov from 2.0.749 to 2.0.754 on 2022-01-24</li> <li>checkov from 2.0.754 to 2.0.763 on 2022-01-26</li> <li>checkov from 2.0.763 to 2.0.769 on 2022-01-28</li> <li>checkov from 2.0.769 to 2.0.772 on 2022-01-29</li> <li>checkov from 2.0.772 to 2.0.775 on 2022-01-30</li> <li>checkstyle from 9.2.1 to 9.3 on 2022-01-30</li> <li>coffeelint from 5.2.3 to 5.2.4 on 2022-01-28</li> <li>cspell from 5.16.0 to 5.17.0 on 2022-01-28</li> <li>dotenv-linter from 3.1.1 to 3.2.0 on 2022-01-24</li> <li>eslint-plugin-jsonc from 2.0.0 to 2.1.0 on 2022-01-28</li> <li>eslint from 8.7.0 to 8.8.0 on 2022-01-29</li> <li>golangci-lint from 1.43.0 to 1.44.0 on 2022-01-26</li> <li>htmlhint from 1.1.0 to 1.1.1 on 2022-01-23</li> <li>htmlhint from 1.1.1 to 1.1.2 on 2022-01-28</li> <li>markdown-link-check from 3.9.2 to 3.9.3 on 2022-01-29</li> <li>phpstan from 1.4.2 to 1.4.3 on 2022-01-29</li> <li>rubocop from 0.82.0 to 1.25.0 on 2022-01-29</li> <li>shfmt from 3.2.1 to 3.5.0 on 2022-01-30</li> <li>shfmt from 3.3.1 to 3.2.1 on 2022-01-30</li> <li>snakemake from 6.13.1 to 6.14.0 on 2022-01-28</li> <li>snakemake from 6.14.0 to 6.15.0 on 2022-01-29</li> <li>snakemake from 6.15.0 to 6.13.1 on 2022-01-30</li> <li>sqlfluff from 0.9.1 to 0.9.3 on 2022-01-28</li> <li>stylelint from 14.2.0 to 14.3.0 on 2022-01-23</li> <li>swiftlint from 0.46.0 to 0.46.2 on 2022-01-28</li> <li>tsqllint from 1.14.0.0 to 1.14.3.0 on 2022-01-23</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v560-2022-01-22","title":"[v5.6.0] - 2022-01-22","text":"<ul> <li>Add linters licenses to online documentation</li> <li>Fix issue when config vars are both from ENV and from config file (#1154)</li> <li>Fix issue of --files argument format when calling npm-groovy-lint (#1176)</li> <li>Fix wrong status in reports when DISABLE_ERRORS is used</li> <li>Increase memory size for node.js-based linters (#1149)</li> <li>Make python linters play nice with each other (#1182)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>coffeelint from 5.2.2 to 5.2.3 on 2022-01-09</li> <li>phpstan from 1.3.0 to 1.3.3 on 2022-01-09</li> <li>mypy from 0.930 to 0.931 on 2022-01-09</li> <li>cspell from 5.14.0 to 5.15.1 on 2022-01-09</li> <li>checkov from 2.0.702 to 2.0.708 on 2022-01-09</li> <li>terraform-fmt from 1.1.2 to 1.1.3 on 2022-01-09</li> <li>terrascan from 1.12.0 to 1.13.0 on 2022-01-09</li> <li>npm-groovy-lint from 9.3.0 to 9.3.2 on 2022-01-09</li> <li>sqlfluff from 0.9.0 to 0.9.1 on 2022-01-09</li> <li>cfn-lint from 0.56.3 to 0.56.4 on 2022-01-11</li> <li>npm-groovy-lint from 9.3.2 to 9.4.0 on 2022-01-11</li> <li>snakemake from 6.12.3 to 6.13.0 on 2022-01-11</li> <li>checkov from 2.0.708 to 2.0.709 on 2022-01-11</li> <li>scalafix from 0.9.33 to 0.9.34 on 2022-01-12</li> <li>snakemake from 6.13.0 to 6.13.1 on 2022-01-12</li> <li>cspell from 5.15.1 to 5.15.2 on 2022-01-12</li> <li>checkov from 2.0.709 to 2.0.710 on 2022-01-12</li> <li>npm-groovy-lint from 9.4.0 to 9.4.1 on 2022-01-13</li> <li>checkov from 2.0.710 to 2.0.712 on 2022-01-13</li> <li>terragrunt from 0.35.16 to 0.35.18 on 2022-01-13</li> <li>clj-kondo from 2021.12.19 to 2022.01.13 on 2022-01-14</li> <li>clippy from 0.1.57 to 0.1.58 on 2022-01-14</li> <li>checkov from 2.0.712 to 2.0.717 on 2022-01-14</li> <li>phpstan from 1.3.3 to 1.4.0 on 2022-01-15</li> <li>terragrunt from 0.35.18 to 0.35.19 on 2022-01-15</li> <li>terragrunt from 0.35.19 to 0.35.20 on 2022-01-15</li> <li>checkov from 2.0.717 to 2.0.718 on 2022-01-16</li> <li>eslint from 8.6.0 to 8.7.0 on 2022-01-17</li> <li>checkov from 2.0.718 to 2.0.720 on 2022-01-17</li> <li>phpstan from 1.4.0 to 1.4.1 on 2022-01-18</li> <li>checkov from 2.0.720 to 2.0.727 on 2022-01-18</li> <li>clj-kondo from 2022.01.13 to 2022.01.15 on 2022-01-22</li> <li>cfn-lint from 0.56.4 to 0.57.0 on 2022-01-22</li> <li>markdown-link-check from 3.9.0 to 3.9.2 on 2022-01-22</li> <li>phpstan from 1.4.1 to 1.4.2 on 2022-01-22</li> <li>protolint from 0.35.2 to 0.36.0 on 2022-01-22</li> <li>cspell from 5.15.2 to 5.16.0 on 2022-01-22</li> <li>swiftlint from 0.45.1 to 0.46.0 on 2022-01-22</li> <li>checkov from 2.0.727 to 2.0.744 on 2022-01-22</li> <li>kics from 1.4.9 to 1.5.0 on 2022-01-22</li> <li>terraform-fmt from 1.1.3 to 1.1.4 on 2022-01-22</li> <li>terragrunt from 0.35.20 to 0.36.0 on 2022-01-22</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v550-2022-01-03","title":"[v5.5.0] - 2022-01-03","text":"<ul> <li>Linter versions upgrades<ul> <li>checkov from 2.0.680 to 2.0.681 on 2021-12-21</li> <li>stylelint from 14.1.0 to 14.2.0 on 2021-12-23</li> <li>mypy from 0.920 to 0.930 on 2021-12-23</li> <li>checkov from 2.0.681 to 2.0.687 on 2021-12-23</li> <li>npm-groovy-lint from 9.1.0 to 9.2.0 on 2021-12-23</li> <li>checkov from 2.0.687 to 2.0.690 on 2021-12-23</li> <li>tflint from 0.34.0 to 0.34.1 on 2021-12-26</li> <li>clj-kondo from 2021.06.18 to 2021.12.19 on 2021-12-29</li> <li>npm-groovy-lint from 9.2.0 to 9.3.0 on 2021-12-29</li> <li>checkstyle from 9.2 to 9.2.1 on 2021-12-29</li> <li>cspell from 5.13.4 to 5.14.0 on 2021-12-29</li> <li>checkov from 2.0.690 to 2.0.695 on 2021-12-29</li> <li>phpstan from 1.2.0 to 1.3.0 on 2021-12-29</li> <li>checkov from 2.0.695 to 2.0.701 on 2021-12-31</li> <li>htmlhint from 1.0.0 to 1.1.0 on 2022-01-01</li> <li>eslint from 8.5.0 to 8.6.0 on 2022-01-01</li> <li>checkov from 2.0.701 to 2.0.702 on 2022-01-03</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v540-2021-12-21","title":"[v5.4.0] - 2021-12-21","text":"<ul> <li>Linter versions upgrades<ul> <li>snakemake from 6.12.1 to 6.12.2 on 2021-12-09</li> <li>checkov from 2.0.636 to 2.0.639 on 2021-12-09</li> <li>checkov from 2.0.639 to 2.0.641 on 2021-12-09</li> <li>terraform-fmt from 1.0.11 to 1.1.0 on 2021-12-09</li> <li>snakemake from 6.12.2 to 6.12.3 on 2021-12-11</li> <li>checkov from 2.0.641 to 2.0.648 on 2021-12-11</li> <li>cspell from 5.13.2 to 5.13.3 on 2021-12-11</li> <li>terragrunt from 0.35.13 to 0.35.14 on 2021-12-11</li> <li>checkov from 2.0.648 to 2.0.649 on 2021-12-12</li> <li>phpcs from 3.6.1 to 3.6.2 on 2021-12-14</li> <li>sqlfluff from 0.8.2 to 0.9.0 on 2021-12-14</li> <li>checkov from 2.0.649 to 2.0.659 on 2021-12-14</li> <li>tflint from 0.33.2 to 0.34.0 on 2021-12-14</li> <li>npm-groovy-lint from 9.0.0 to 9.1.0 on 2021-12-15</li> <li>powershell from 7.2.0 to 7.2.1 on 2021-12-15</li> <li>checkov from 2.0.659 to 2.0.660 on 2021-12-15</li> <li>mypy from 0.910 to 0.920 on 2021-12-16</li> <li>checkov from 2.0.660 to 2.0.662 on 2021-12-16</li> <li>checkov from 2.0.662 to 2.0.668 on 2021-12-17</li> <li>terraform-fmt from 1.1.0 to 1.1.1 on 2021-12-17</li> <li>eslint from 8.4.1 to 8.5.0 on 2021-12-18</li> <li>checkov from 2.0.668 to 2.0.672 on 2021-12-18</li> <li>cspell from 5.13.3 to 5.13.4 on 2021-12-18</li> <li>terraform-fmt from 1.1.1 to 1.1.2 on 2021-12-18</li> <li>terragrunt from 0.35.14 to 0.35.16 on 2021-12-18</li> <li>coffeelint from 5.2.1 to 5.2.2 on 2021-12-21</li> <li>checkov from 2.0.672 to 2.0.680 on 2021-12-21</li> <li>kics from 1.4.8 to 1.4.9 on 2021-12-21</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v530-2021-12-08","title":"[v5.3.0] - 2021-12-08","text":"<ul> <li>Fix jscpd typo about <code>.venv</code> (#986)</li> <li>markdownlint: rename default config file from .markdown-lint.json to .markdownlint.json</li> <li>Deprecate <code>DEFAULT_BRANCH</code> setting (#948)</li> <li>Correct some broken links in <code>README</code> from <code>Mega-Linter</code> to <code>MegaLinter</code> (#1030)</li> <li>Docker run -- clean-up containers when exits (#1033)</li> <li>Add missing Bandit config file and rules path options (#679)</li> <li>Fix getting linter version of npm plugin. (#845)</li> <li>Improve runtime performances when using a flavor and defining <code>FLAVORS_SUGGESTION: false</code></li> <li>Don't check for updated files when <code>APPLY_FIXES</code> isn't active</li> <li>Fix CLI_LINT_MODE default value in doc (#1086)</li> </ul> <ul> <li>Linters<ul> <li>New linter <code>phplint</code> to speed-up linting of php files (#1031)<ul> <li>Fix <code>phplint</code> constraint to accept all future bugfix v3.0.x versions (PHP 7.4 support) (#1043)</li> </ul> </li> <li><code>cpplint</code>: Use <code>cli_lint_mode: project</code> to improve performances</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>remark-lint from 14.0.1 to 14.0.2 on 2021-11-19</li> <li>php from 7.4.25 to 7.4.26 on 2021-11-19</li> <li>checkov from 2.0.587 to 2.0.588 on 2021-11-19</li> <li>markdownlint from 0.29.0 to 0.30.0 on 2021-11-21</li> <li>checkov from 2.0.588 to 2.0.591 on 2021-11-21</li> <li>terragrunt from 0.35.10 to 0.35.12 on 2021-11-21</li> <li>eslint from 8.2.0 to 8.3.0 on 2021-11-21</li> <li>checkov from 2.0.591 to 2.0.595 on 2021-11-21</li> <li>cfn-lint from 0.56.1 to 0.56.2 on 2021-11-22</li> <li>sqlfluff from 0.8.1 to 0.8.2 on 2021-11-22</li> <li>checkov from 2.0.595 to 2.0.597 on 2021-11-22</li> <li>htmlhint from 0.16.1 to 0.16.2 on 2021-11-24</li> <li>checkov from 2.0.597 to 2.0.600 on 2021-11-24</li> <li>htmlhint from 0.16.2 to 0.16.3 on 2021-11-25</li> <li>markdown-link-check from 0.0.0 to 3.9.0 on 2021-11-25</li> <li>cspell from 5.13.0 to 5.13.1 on 2021-11-25</li> <li>checkov from 2.0.600 to 2.0.603 on 2021-11-25</li> <li>kics from 1.4.7 to 1.4.8 on 2021-11-25</li> <li>prettier from 2.4.1 to 2.5.0 on 2021-11-26</li> <li>pylint from 2.11.1 to 2.12.1 on 2021-11-26</li> <li>snakemake from 6.10.0 to 6.11.0 on 2021-11-26</li> <li>checkov from 2.0.603 to 2.0.605 on 2021-11-26</li> <li>terragrunt from 0.35.12 to 0.35.13 on 2021-11-26</li> <li>htmlhint from 0.16.3 to 1.0.0 on 2021-11-27</li> <li>scalafix from 0.9.32 to 0.9.33 on 2021-11-27</li> <li>snakemake from 6.11.0 to 6.11.1 on 2021-11-27</li> <li>checkstyle from 9.1 to 9.2 on 2021-11-29</li> <li>checkov from 2.0.605 to 2.0.606 on 2021-11-29</li> <li>snakemake from 6.11.1 to 6.12.1 on 2021-11-30</li> <li>swiftlint from 0.45.0 to 0.45.1 on 2021-11-30</li> <li>checkov from 2.0.606 to 2.0.609 on 2021-11-30</li> <li>v8r from 0.6.1 to 0.7.0 on 2021-11-30</li> <li>v8r from 0.7.0 to 0.6.1 on 2021-12-01</li> <li>checkov from 2.0.614 to 2.0.616 on 2021-12-01</li> <li>checkov from 2.0.616 to 2.0.618 on 2021-12-01</li> <li>coffeelint from 5.2.0 to 5.2.1 on 2021-12-02</li> <li>checkov from 2.0.618 to 2.0.621 on 2021-12-02</li> <li>ktlint from 0.40.0 to 0.43.2 on 2021-12-02</li> <li>clippy from 0.1.56 to 0.1.57 on 2021-12-03</li> <li>checkov from 2.0.621 to 2.0.625 on 2021-12-03</li> <li>cfn-lint from 0.56.2 to 0.56.3 on 2021-12-04</li> <li>pylint from 2.12.1 to 2.12.2 on 2021-12-04</li> <li>checkov from 2.0.625 to 2.0.626 on 2021-12-04</li> <li>eslint from 8.3.0 to 8.4.0 on 2021-12-04</li> <li>prettier from 2.5.0 to 2.5.1 on 2021-12-05</li> <li>black from 21.11 to 21.12 on 2021-12-06</li> <li>checkov from 2.0.626 to 2.0.628 on 2021-12-06</li> <li>checkov from 2.0.628 to 2.0.632 on 2021-12-07</li> <li>eslint from 8.4.0 to 8.4.1 on 2021-12-07</li> <li>cspell from 5.13.1 to 5.13.2 on 2021-12-07</li> <li>checkov from 2.0.632 to 2.0.634 on 2021-12-07</li> <li>tflint from 0.33.1 to 0.33.2 on 2021-12-07</li> <li>checkov from 2.0.634 to 2.0.636 on 2021-12-08</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v520-2021-11-18","title":"[v5.2.0] - 2021-11-18","text":"<ul> <li>Fix release doc CI</li> <li>Add  comments in online documentation</li> <li>Add link to MegaLinter documentation in console logs</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>actionlint from 1.6.7 to 1.6.8 on 2021-11-15</li> <li>checkov from 2.0.572 to 2.0.573 on 2021-11-15</li> <li>checkov from 2.0.573 to 2.0.574 on 2021-11-15</li> <li>cfn-lint from 0.56.0 to 0.56.1 on 2021-11-17</li> <li>checkov from 2.0.574 to 2.0.580 on 2021-11-17</li> <li>black from 21.10 to 21.11 on 2021-11-17</li> <li>cspell from 5.12.6 to 5.13.0 on 2021-11-17</li> <li>checkov from 2.0.580 to 2.0.582 on 2021-11-17</li> <li>checkov from 2.0.582 to 2.0.583 on 2021-11-18</li> <li>phpstan from 1.1.2 to 1.2.0 on 2021-11-18</li> <li>checkov from 2.0.583 to 2.0.587 on 2021-11-18</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v510-2021-11-15","title":"[v5.1.0] - 2021-11-15","text":"<ul> <li>Fix config issue with IGNORE_GITIGNORED_FILES (#932)</li> <li>Bypass random CI issue with sql_tsqllint_test test version and test help</li> <li>New configuration PRINT_ALL_FILES (default: <code>true</code>). If set to <code>false</code>, console log only displays updated and error files, not all of them</li> <li>Update black configuration, that now uses a <code>pyproject.toml</code> file (#949)</li> <li>Allows <code>list_of_files</code> cli_lint_mode on Psalm linter to improve performance compare to <code>file</code> mode</li> <li>mega-linter-runner: Upgrade yeoman environment to allow spaces in path</li> <li>Documentation versioning with mike</li> <li>Accordingly, to official PHPStan documentation, the TEMPLATES/phpstan.neon.dist config file set default level to zero.</li> <li>Downgrade dotnet from 6.0 to 5.0, to be compliant with tsqllint</li> <li>Allow GithubStatusReporter to work for other CI platforms</li> <li>Add license badge in linters documentation (All linters)</li> <li>Upgrade checkov install instructions to use alpine-oriented ones</li> <li>Fix wrong errors count displayed with PHPStan and Psalm linters (#985)</li> <li>Fix typo error in <code>.jscpd.json</code> config file (#986)</li> <li>Deprecate <code>DEFAULT_BRANCH</code>, and change its default from <code>master</code> to <code>HEAD</code> (#915)</li> </ul> <ul> <li>Core architecture<ul> <li>New configuration PRINT_ALL_FILES (default: <code>true</code>). If set to <code>false</code>, console log only displays updated and error files, not all of them</li> <li>Documentation versioning with mike</li> <li>Allow GithubStatusReporter to work for other CI platforms</li> <li>Add license info in List of linters documentation page</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Update black configuration, that now uses a <code>pyproject.toml</code> file (#949)</li> <li>Allows <code>list_of_files</code> cli_lint_mode on Psalm linter to improve performance compare to <code>file</code> mode</li> <li>Upgrade checkov install instructions to use alpine-oriented ones</li> <li>Accordingly, to official PHPStan documentation, the TEMPLATES/phpstan.neon.dist config file set default level to zero.</li> <li>Downgrade dotnet from 6.0 to 5.0, to be compliant with tsqllint</li> </ul> </li> </ul> <ul> <li>Bug fixes<ul> <li>Fix config issue with IGNORE_GITIGNORED_FILES (#932)</li> <li>Bypass random CI issue with sql_tsqllint_test test version and test help</li> <li>mega-linter-runner: Upgrade yeoman environment to allow spaces in path</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cspell from 5.12.5 to 5.12.6 on 2021-11-04</li> <li>cfn-lint from 0.55.0 to 0.56.0 on 2021-11-06</li> <li>coffeelint from 5.1.0 to 5.1.1 on 2021-11-06</li> <li>jscpd from 3.3.26 to 3.4.1 on 2021-11-06</li> <li>hadolint from 2.7.0 to 2.8.0 on 2021-11-06</li> <li>eslint-plugin-jsonc from 1.7.0 to 2.0.0 on 2021-11-06</li> <li>phpstan from 1.0.2 to 1.1.0 on 2021-11-06</li> <li>jscpd from 3.4.1 to 3.4.2 on 2021-11-07</li> <li>shellcheck from 0.7.2 to 0.8.0 on 2021-11-07</li> <li>coffeelint from 5.1.1 to 5.2.0 on 2021-11-07</li> <li>jscpd from 3.4.2 to 3.3.26 on 2021-11-07</li> <li>hadolint from 2.8.0 to 2.7.0 on 2021-11-07</li> <li>sqlfluff from 0.7.1 to 0.8.0 on 2021-11-07</li> <li>sqlfluff from 0.8.0 to 0.8.1 on 2021-11-08</li> <li>swiftlint from 0.43.1 to 0.44.0 on 2021-11-08</li> <li>actionlint from 1.6.6 to 1.6.7 on 2021-11-08</li> <li>eslint from 7.32.0 to 8.2.0 on 2021-11-08</li> <li>swiftlint from 0.44.0 to 0.45.0 on 2021-11-08</li> <li>powershell from 7.1.5 to 7.2.0 on 2021-11-08</li> <li>protolint from 0.35.1 to 0.35.2 on 2021-11-09</li> <li>isort from 5.10.0 to 5.10.1 on 2021-11-09</li> <li>phpstan from 1.1.1 to 1.1.2 on 2021-11-09</li> <li>kics from 1.4.6 to 1.4.7 on 2021-11-11</li> <li>terraform-fmt from 1.0.10 to 1.0.11 on 2021-11-11</li> <li>terragrunt from 0.35.6 to 0.35.8 on 2021-11-11</li> <li>htmlhint from 0.16.0 to 0.16.1 on 2021-11-12</li> <li>checkov from 2.0.524 to 2.0.566 on 2021-11-12</li> <li>terragrunt from 0.35.8 to 0.35.9 on 2021-11-12</li> <li>bandit from 1.7.0 to 1.7.1 on 2021-11-13</li> <li>scalafix from 0.9.31 to 0.9.32 on 2021-11-13</li> <li>checkov from 2.0.566 to 2.0.569 on 2021-11-13</li> <li>terragrunt from 0.35.9 to 0.35.10 on 2021-11-13</li> <li>checkov from 2.0.569 to 2.0.571 on 2021-11-14</li> <li>stylelint from 14.0.1 to 14.1.0 on 2021-11-14</li> <li>checkov from 2.0.571 to 2.0.572 on 2021-11-14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v507-2021-11-04","title":"[v5.0.7] - 2021-11-04","text":"<ul> <li>Fix that upgrader removed all jobs after cancel_duplicates but the last (#925)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.54.4 to 0.55.0 on 2021-11-03</li> <li>phpstan from 1.0.0 to 1.0.1 on 2021-11-03</li> <li>golangci-lint from 1.42.1 to 1.43.0 on 2021-11-04</li> <li>phpstan from 1.0.1 to 1.0.2 on 2021-11-04</li> <li>isort from 5.9.3 to 5.10.0 on 2021-11-04</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v506-2021-11-03","title":"[v5.0.6] - 2021-11-03","text":"<ul> <li>Use GH actions concurrency to cancel runs (#921)</li> </ul>"},{"location":"CHANGELOG/#v505-2021-11-02","title":"[v5.0.5] - 2021-11-02","text":"<ul> <li>Fix <code>mega-linter-runner --install</code> template for Github Action Workflow</li> <li>Replace expression \"abusive copy-paste\" by \"excessive copy-paste\"</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>coffeelint from 5.0.5 to 5.1.0 on 2021-11-02</li> <li>phpstan from 0.12.99 to 1.0.0 on 2021-11-02</li> <li>black from 21.9 to 21.10 on 2021-11-02</li> <li>cspell from 5.12.4 to 5.12.5 on 2021-11-02</li> <li>terragrunt from 0.35.5 to 0.35.6 on 2021-11-02</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v502-2021-10-31","title":"[v5.0.2] - 2021-10-31","text":"<ul> <li>Quick build to fix stargazers badge regression (see issue #873) (#909)</li> <li>Improve Azure Pipeline template documentation (#908)</li> <li>Take in account  legacy docker images for total docker pull count (#910)</li> <li>Upgrade stale github action</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cspell from 5.12.3 to 5.12.4 on 2021-10-31</li> <li>checkstyle from 9.0.1 to 9.1 on 2021-10-31</li> <li>tflint from 0.33.0 to 0.33.1 on 2021-10-31</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#v501-2021-10-30","title":"[v5.0.1] - 2021-10-30","text":"<ul> <li>Fix mega-linter-runner bug related to v5</li> <li>Fix online documentation</li> </ul>"},{"location":"CHANGELOG/#v500-2021-10-30","title":"[v5.0.0] - 2021-10-30","text":"<ul> <li>Migration from github individual repo nvuillam/mega-linter to github organization repo megalinter/megalinter</li> <li>Migration from docker hub space nvuillam to space megalinter<ul> <li>Docker images are now megalinter/megalinter or megalinter/megalinter-FLAVOR</li> </ul> </li> <li>Documentation is now hosted at https://megalinter.github.io/</li> <li>Tool to upgrade user repos configuration files using <code>npx mega-linter-runner --upgrade</code> (will upgrade references to nvuillam/mega-linter into megalinter/megalinter)</li> <li>Version management: Now mega-linter docker images, github action and mega-linter-runner versions are aligned<ul> <li>latest for latest official release</li> <li>beta for current content of main branch</li> <li>alpha for current content of alpha branch</li> <li>docker image, github action and mega-linter-runner can still be called with exact version number</li> </ul> </li> <li>Being more inclusive: rename <code>master</code> branch into <code>main</code></li> <li>IGNORE_GITIGNORED_FILES parameter default to <code>true</code></li> </ul>"},{"location":"CHANGELOG/#4470-2021-10-30","title":"[4.47.0] - 2021-10-30","text":"<ul> <li>Upgrades<ul> <li>Base docker image python:3.9.6-alpine3.13 to python:3.9.7-alpine3.13</li> <li>Automerge internal job pascalgn/automerge-action-0.14.2 to pascalgn/automerge-action-0.14.3</li> </ul> </li> <li>Config reporter: Parse <code>.vscode/extensions.json</code> as json5 (with comments)</li> <li>Add eslint-plugin-jsx-a11y dependency</li> <li>Rename default PHPStan config file, from <code>phpstan.neon</code> to <code>phpstan.neon.dist</code> accordingly to PHPStan resolution priority</li> <li>Allows <code>list_of_files</code> cli_lint_mode on PHPSTAN linter to improve performance compare to <code>file</code> mode</li> <li><code>phpstan</code> is now installed with <code>phive</code> rather than <code>composer</code> (reduces disk usage)</li> <li>Allows <code>list_of_files</code> cli_lint_mode on PHPCS linter to improve performance compare to <code>file</code> mode</li> <li>Allows <code>list_of_files</code> cli_lint_mode on EditorConfig-Checker linter to improve performance compare to <code>file</code> mode</li> <li>Fix internal CSS because of StyleLint new rule <code>selector-class-pattern</code></li> <li>Fix ansible-lint version collection</li> <li>Message to recommend to upgrade to MegaLinter v5</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.54.1 to 0.54.2 on 2021-09-23</li> <li>eslint-plugin-jsonc from 1.6.0 to 1.7.0 on 2021-09-23</li> <li>checkov from 2.0.430 to 2.0.436 on 2021-09-23</li> <li>coffeelint from 5.0.3 to 5.0.4 on 2021-09-24</li> <li>checkov from 2.0.436 to 2.0.438 on 2021-09-24</li> <li>php from 7.4.21 to 7.4.24 on 2021-09-24</li> <li>terragrunt from 0.32.3 to 0.32.4 on 2021-09-24</li> <li>snakemake from 6.8.0 to 6.8.1 on 2021-09-25</li> <li>checkov from 2.0.438 to 2.0.441 on 2021-09-25</li> <li>secretlint from 4.0.0 to 4.1.0 on 2021-09-25</li> <li>checkov from 2.0.441 to 2.0.442 on 2021-09-26</li> <li>checkov from 2.0.442 to 2.0.443 on 2021-09-27</li> <li>protolint from 0.32.0 to 0.35.1 on 2021-09-26</li> <li>protolint from 0.32.0 to 0.35.1 on 2021-09-27</li> <li>checkov from 2.0.443 to 2.0.446 on 2021-09-27</li> <li>cspell from 5.10.1 to 5.11.0 on 2021-09-29</li> <li>checkov from 2.0.446 to 2.0.448 on 2021-09-29</li> <li>npm-groovy-lint from 8.2.0 to 9.0.0 on 2021-09-30</li> <li>sfdx-scanner-apex from 2.11.0 to 2.12.0 on 2021-09-30</li> <li>sfdx-scanner-aura from 2.11.0 to 2.12.0 on 2021-09-30</li> <li>sfdx-scanner-lwc from 2.11.0 to 2.12.0 on 2021-09-30</li> <li>snakemake from 6.8.1 to 6.9.0 on 2021-09-30</li> <li>cspell from 5.11.0 to 5.11.1 on 2021-09-30</li> <li>checkov from 2.0.448 to 2.0.454 on 2021-09-30</li> <li>snakemake from 6.9.0 to 6.9.1 on 2021-09-30</li> <li>checkov from 2.0.454 to 2.0.461 on 2021-09-30</li> <li>checkstyle from 9.0 to 9.0.1 on 2021-10-03</li> <li>luacheck from 0.23.0 to 0.25.0 on 2021-10-03</li> <li>checkov from 2.0.461 to 2.0.467 on 2021-10-03</li> <li>terraform-fmt from 1.0.7 to 1.0.8 on 2021-10-03</li> <li>terragrunt from 0.32.4 to 0.34.0 on 2021-10-03</li> <li>sqlfluff from 0.6.6 to 0.6.7 on 2021-10-05</li> <li>checkov from 2.0.467 to 2.0.469 on 2021-10-05</li> <li>markdownlint from 0.28.1 to 0.29.0 on 2021-10-06</li> <li>cspell from 5.11.1 to 5.12.0 on 2021-10-06</li> <li>sqlfluff from 0.6.7 to 0.6.8 on 2021-10-06</li> <li>checkov from 2.0.469 to 2.0.475 on 2021-10-06</li> <li>cspell from 5.12.0 to 5.12.1 on 2021-10-06</li> <li>checkov from 2.0.475 to 2.0.476 on 2021-10-06</li> <li>cspell from 5.12.1 to 5.12.2 on 2021-10-07</li> <li>terragrunt from 0.34.0 to 0.34.1 on 2021-10-07</li> <li>checkov from 2.0.476 to 2.0.477 on 2021-10-07</li> <li>terrascan from 1.10.0 to 1.11.0 on 2021-10-07</li> <li>cspell from 5.12.2 to 5.12.3 on 2021-10-09</li> <li>checkov from 2.0.477 to 2.0.479 on 2021-10-09</li> <li>sqlfluff from 0.6.8 to 0.6.9 on 2021-10-10</li> <li>checkov from 2.0.479 to 2.0.481 on 2021-10-10</li> <li>checkov from 2.0.481 to 2.0.482 on 2021-10-10</li> <li>phpcs from 3.6.0 to 3.6.1 on 2021-10-12</li> <li>flake8 from 3.9.2 to 4.0.1 on 2021-10-12</li> <li>checkov from 2.0.482 to 2.0.484 on 2021-10-12</li> <li>terragrunt from 0.34.1 to 0.34.3 on 2021-10-12</li> <li>checkov from 2.0.484 to 2.0.485 on 2021-10-13</li> <li>powershell from 7.1.4 to 7.1.5 on 2021-10-16</li> <li>sqlfluff from 0.6.9 to 0.7.0 on 2021-10-16</li> <li>checkov from 2.0.485 to 2.0.491 on 2021-10-16</li> <li>terraform-fmt from 1.0.8 to 1.0.9 on 2021-10-16</li> <li>terragrunt from 0.34.3 to 0.35.3 on 2021-10-16</li> <li>tflint from 0.32.1 to 0.33.0 on 2021-10-16</li> <li>checkov from 2.0.491 to 2.0.492 on 2021-10-17</li> <li>actionlint from 1.6.5 to 1.6.6 on 2021-10-17</li> <li>cfn-lint from 0.54.2 to 0.54.3 on 2021-10-21</li> <li>coffeelint from 5.0.4 to 5.0.5 on 2021-10-21</li> <li>snakefmt from 0.4.3 to 0.4.4 on 2021-10-21</li> <li>tekton-lint from 0.5.2 to 0.6.0 on 2021-10-21</li> <li>checkov from 2.0.492 to 2.0.497 on 2021-10-21</li> <li>terragrunt from 0.35.3 to 0.35.4 on 2021-10-21</li> <li>stylelint from 13.13.1 to 14.0.0 on 2021-10-24</li> <li>clippy from 0.1.55 to 0.1.56 on 2021-10-24</li> <li>snakemake from 6.9.1 to 6.10.0 on 2021-10-24</li> <li>sqlfluff from 0.7.0 to 0.7.1 on 2021-10-24</li> <li>checkov from 2.0.497 to 2.0.509 on 2021-10-24</li> <li>terrascan from 1.11.0 to 1.12.0 on 2021-10-24</li> <li>checkov from 2.0.509 to 2.0.510 on 2021-10-25</li> <li>checkov from 2.0.510 to 2.0.516 on 2021-10-26</li> <li>stylelint from 14.0.0 to 14.0.1 on 2021-10-26</li> <li>checkov from 2.0.516 to 2.0.524 on 2021-10-26</li> <li>php from 7.4.24 to 7.4.25 on 2021-10-27</li> <li>cfn-lint from 0.54.3 to 0.54.4 on 2021-10-28</li> <li>htmlhint from 0.15.2 to 0.16.0 on 2021-10-29</li> <li>terraform-fmt from 1.0.9 to 1.0.10 on 2021-10-29</li> <li>terragrunt from 0.35.4 to 0.35.5 on 2021-10-29</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4460-2021-09-21","title":"[4.46.0] - 2021-09-21","text":"<ul> <li>Add openssh apk for git repos using ssh</li> <li>Change default yamllint config file name from <code>.yaml-lint.yml</code> to <code>.yamllint.yml</code></li> <li>Allow to disable console reporter using <code>CONSOLE_REPORTER: false</code></li> <li>Override <code>cli_lint_mode</code> of linters using configuration : LINTER_CLI_LINT_MODE</li> <li>Performances<ul> <li>Use list_of_files linting mode for yamllint , black and prettier</li> </ul> </li> <li>Fixes<ul> <li>Add CONFIG_REPORTER in json schema</li> <li>Fix Broken CI due to mega-linter test plugin</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.0.396 to 2.0.399 on 2021-09-06</li> <li>golangci-lint from 1.42.0 to 1.42.1 on 2021-09-07</li> <li>snakemake from 6.7.0 to 6.8.0 on 2021-09-07</li> <li>cfn-lint from 0.53.1 to 0.54.1 on 2021-09-12</li> <li>prettier from 2.3.2 to 2.4.0 on 2021-09-12</li> <li>clippy from 0.1.54 to 0.1.55 on 2021-09-12</li> <li>sqlfluff from 0.6.4 to 0.6.5 on 2021-09-12</li> <li>checkov from 2.0.399 to 2.0.407 on 2021-09-12</li> <li>terragrunt from 0.31.8 to 0.31.10 on 2021-09-12</li> <li>tflint from 0.31.0 to 0.32.1 on 2021-09-12</li> <li>cspell from 5.9.0 to 5.9.1 on 2021-09-12</li> <li>phpstan from 0.12.98 to 0.12.99 on 2021-09-15</li> <li>puppet-lint from 2.5.0 to 2.5.2 on 2021-09-15</li> <li>black from 21.8 to 21.9 on 2021-09-15</li> <li>checkov from 2.0.407 to 2.0.414 on 2021-09-15</li> <li>terragrunt from 0.31.10 to 0.31.11 on 2021-09-15</li> <li>terragrunt from 0.31.11 to 0.32.1 on 2021-09-15</li> <li>secretlint from 3.3.0 to 4.0.0 on 2021-09-18</li> <li>htmlhint from 0.15.1 to 0.15.2 on 2021-09-18</li> <li>prettier from 2.4.0 to 2.4.1 on 2021-09-18</li> <li>pylint from 2.10.2 to 2.11.1 on 2021-09-18</li> <li>scalafix from 0.9.30 to 0.9.31 on 2021-09-18</li> <li>cspell from 5.9.1 to 5.10.1 on 2021-09-18</li> <li>checkov from 2.0.414 to 2.0.421 on 2021-09-18</li> <li>terraform-fmt from 1.0.6 to 1.0.7 on 2021-09-18</li> <li>terragrunt from 0.32.1 to 0.32.2 on 2021-09-18</li> <li>checkov from 2.0.421 to 2.0.425 on 2021-09-19</li> <li>checkov from 2.0.425 to 2.0.426 on 2021-09-19</li> <li>checkov from 2.0.426 to 2.0.427 on 2021-09-20</li> <li>coffeelint from 5.0.2 to 5.0.3 on 2021-09-21</li> <li>rstfmt from 0.0.9 to 0.0.10 on 2021-09-21</li> <li>sqlfluff from 0.6.5 to 0.6.6 on 2021-09-21</li> <li>checkov from 2.0.427 to 2.0.428 on 2021-09-21</li> <li>checkov from 2.0.428 to 2.0.430 on 2021-09-21</li> <li>terragrunt from 0.32.2 to 0.32.3 on 2021-09-21</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4450-2021-09-04","title":"[4.45.0] - 2021-09-04","text":"<ul> <li>New CONFIG_REPORTER to generate \"ready to copy\" folder containing default linter configurations and IDE extensions recommendations</li> <li>New JSON_REPORTER to generate an output json file in report folder</li> <li>Manage pre_commands and post_commands at linter level<ul> <li>Default commands defined at linter descriptor level</li> <li>Overridable by user in linterName_PRE_COMMANDS and linterName_POST_COMMANDS in <code>.mega-linter.yml</code></li> </ul> </li> <li>Fix tflint config so no custom PRE_COMMAND is necessary</li> <li>Use dotnet installer to setup tsqllint. tsqllint is now part of the main MegaLinter flavor, but removed from JAVASCRIPT flavor</li> <li>Ignore linter_FILTER_REGEX_INCLUDE/linter_FILTER_REGEX_EXCLUDE for linters running on the whole project directory</li> <li>mega-linter-runner updates<ul> <li>New CLI argument <code>--json</code>, to get the full report as JSON in stdout last line</li> <li>Fix mega-linter-runner --install when local folder path contain spaces</li> <li>Upgrade mega-linter-runner dependencies (npm audit fix)</li> <li>Better comments for generated .mega-linter.yml config file</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>markdown-table-formatter from 1.1.0 to 1.2.0 on 2021-08-20</li> <li>phpstan from 0.12.94 to 0.12.95 on 2021-08-20</li> <li>pylint from 2.9.6 to 2.10.1 on 2021-08-21</li> <li>sqlfluff from 0.6.3 to 0.6.4 on 2021-08-21</li> <li>phpstan from 0.12.95 to 0.12.96 on 2021-08-21</li> <li>pylint from 2.10.1 to 2.10.2 on 2021-08-22</li> <li>cspell from 5.7.2 to 5.8.0 on 2021-08-22</li> <li>yamllint from 1.26.2 to 1.26.3 on 2021-08-22</li> <li>eslint-plugin-jsonc from 1.5.0 to 1.6.0 on 2021-08-23</li> <li>checkov from 2.0.363 to 2.0.367 on 2021-08-23</li> <li>cspell from 5.8.0 to 5.8.1 on 2021-08-24</li> <li>terragrunt from 0.31.5 to 0.31.6 on 2021-08-24</li> <li>hadolint from 2.6.0 to 2.7.0 on 2021-08-28</li> <li>dotenv-linter from 3.1.0 to 3.1.1 on 2021-08-28</li> <li>cspell from 5.8.1 to 5.8.2 on 2021-08-28</li> <li>checkov from 2.0.367 to 2.0.376 on 2021-08-28</li> <li>terragrunt from 0.31.6 to 0.31.7 on 2021-08-28</li> <li>terrascan from 1.9.0 to 1.10.0 on 2021-08-28</li> <li>checkov from 2.0.376 to 2.0.377 on 2021-08-29</li> <li>cfn-lint from 0.53.0 to 0.53.1 on 2021-08-31</li> <li>tsqllint from 1.13.5.0 to 1.14.0.0 on 2021-08-31</li> <li>checkov from 2.0.377 to 2.0.380 on 2021-08-31</li> <li>terragrunt from 0.31.7 to 0.31.8 on 2021-08-31</li> <li>checkstyle from 8.45.1 to 9.0 on 2021-09-01</li> <li>cspell from 5.8.2 to 5.9.0 on 2021-09-01</li> <li>checkov from 2.0.380 to 2.0.387 on 2021-09-01</li> <li>phpstan from 0.12.96 to 0.12.97 on 2021-09-02</li> <li>checkov from 2.0.387 to 2.0.392 on 2021-09-02</li> <li>checkov from 2.0.392 to 2.0.393 on 2021-09-02</li> <li>phpstan from 0.12.97 to 0.12.98 on 2021-09-03</li> <li>checkov from 2.0.393 to 2.0.395 on 2021-09-03</li> <li>checkov from 2.0.395 to 2.0.396 on 2021-09-04</li> <li>black from 20.8 to 21.8 on 2021-09-04</li> <li>snakefmt from 0.4.2 to 0.4.3 on 2021-09-04</li> <li>terraform-fmt from 1.0.5 to 1.0.6 on 2021-09-04</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4440-2021-08-19","title":"[4.44.0] - 2021-08-19","text":"<ul> <li>Upgrade tflint descriptor to use ghcr.io/terraform-linters/tflint docker image and initialize tflint</li> <li>Add page for flavors stats in online documentation</li> <li>Unable to list git ignored files when IGNORED_GITIGNORED_FILES: true (#PR605, by David Bernard with the contribution of Tim Pansino)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>powershell from 7.1.3 to 7.1.4 on 2021-08-13</li> <li>checkov from 2.0.347 to 2.0.348 on 2021-08-13</li> <li>cspell from 5.6.6 to 5.6.7 on 2021-08-14</li> <li>terragrunt from 0.31.3 to 0.31.4 on 2021-08-14</li> <li>tflint from 0.29.1 to 0.31.0 on 2021-08-14</li> <li>cspell from 5.6.7 to 5.7.1 on 2021-08-15</li> <li>eslint-plugin-jsonc from 1.4.0 to 1.5.0 on 2021-08-15</li> <li>checkov from 2.0.348 to 2.0.350 on 2021-08-15</li> <li>coffeelint from 5.0.1 to 5.0.2 on 2021-08-17</li> <li>scalafix from 0.9.29 to 0.9.30 on 2021-08-17</li> <li>cspell from 5.7.1 to 5.7.2 on 2021-08-17</li> <li>sqlfluff from 0.6.2 to 0.6.3 on 2021-08-17</li> <li>checkov from 2.0.350 to 2.0.352 on 2021-08-17</li> <li>golangci-lint from 1.41.1 to 1.42.0 on 2021-08-18</li> <li>checkov from 2.0.352 to 2.0.361 on 2021-08-18</li> <li>sfdx-scanner-apex from 2.10.1005 to 2.11.0 on 2021-08-19</li> <li>sfdx-scanner-aura from 2.10.1005 to 2.11.0 on 2021-08-19</li> <li>sfdx-scanner-lwc from 2.10.1005 to 2.11.0 on 2021-08-19</li> <li>checkov from 2.0.361 to 2.0.363 on 2021-08-19</li> <li>terraform-fmt from 1.0.4 to 1.0.5 on 2021-08-19</li> <li>terragrunt from 0.31.4 to 0.31.5 on 2021-08-19</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4430-2021-08-12","title":"[4.43.0] - 2021-08-12","text":"<ul> <li>Add secretlint to check for credentials , secrets and passwords stored in linted repository</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>snakemake from 6.6.1 to 6.7.0 on 2021-08-12</li> <li>checkov from 2.0.344 to 2.0.346 on 2021-08-12</li> <li>checkov from 2.0.346 to 2.0.347 on 2021-08-12</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4420-2021-08-12","title":"[4.42.0] - 2021-08-12","text":"<ul> <li>Add tsqllint to lint TSQL files</li> <li>Store docker pulls statistics history</li> <li>add <code>IGNORE_GENERATED_FILES</code> in json schema</li> <li>allow commonjs config file for eslint - #629, by vitalitytv</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>checkov from 2.0.295 to 2.0.297 on 2021-07-25</li> <li>puppet-lint from 2.4.2 to 2.5.0 on 2021-07-26</li> <li>checkov from 2.0.297 to 2.0.303 on 2021-07-26</li> <li>checkov from 2.0.303 to 2.0.307 on 2021-07-28</li> <li>v8r from 0.5.0 to 0.6.0 on 2021-07-29</li> <li>pylint from 2.9.5 to 2.9.6 on 2021-07-29</li> <li>checkov from 2.0.307 to 2.0.313 on 2021-07-29</li> <li>isort from 5.9.2 to 5.9.3 on 2021-07-30</li> <li>clippy from 0.1.53 to 0.1.54 on 2021-07-30</li> <li>snakefmt from 0.4.1 to 0.4.2 on 2021-07-30</li> <li>checkov from 2.0.313 to 2.0.317 on 2021-07-30</li> <li>terragrunt from 0.31.1 to 0.31.2 on 2021-07-30</li> <li>eslint from 7.31.0 to 7.32.0 on 2021-07-31</li> <li>phpstan from 0.12.93 to 0.12.94 on 2021-07-31</li> <li>checkov from 2.0.317 to 2.0.318 on 2021-07-31</li> <li>terragrunt from 0.31.2 to 0.31.3 on 2021-07-31</li> <li>checkstyle from 8.44 to 8.45 on 2021-08-01</li> <li>shfmt from 3.3.0 to 3.3.1 on 2021-08-02</li> <li>checkov from 2.0.318 to 2.0.323 on 2021-08-02</li> <li>cfn-lint from 0.52.0 to 0.53.0 on 2021-08-03</li> <li>checkov from 2.0.323 to 2.0.327 on 2021-08-03</li> <li>remark-lint from 13.0.0 to 14.0.1 on 2021-08-04</li> <li>checkov from 2.0.327 to 2.0.330 on 2021-08-04</li> <li>yamllint from 1.26.1 to 1.26.2 on 2021-08-04</li> <li>checkov from 2.0.330 to 2.0.334 on 2021-08-05</li> <li>terraform-fmt from 1.0.3 to 1.0.4 on 2021-08-05</li> <li>checkov from 2.0.334 to 2.0.336 on 2021-08-05</li> <li>sfdx-scanner-apex from 2.10.0 to 2.10.1005 on 2021-08-06</li> <li>sfdx-scanner-aura from 2.10.0 to 2.10.1005 on 2021-08-06</li> <li>sfdx-scanner-lwc from 2.10.0 to 2.10.1005 on 2021-08-06</li> <li>v8r from 0.6.0 to 0.6.1 on 2021-08-07</li> <li>checkov from 2.0.336 to 2.0.337 on 2021-08-07</li> <li>terrascan from 1.8.1 to 1.9.0 on 2021-08-07</li> <li>checkov from 2.0.337 to 2.0.338 on 2021-08-08</li> <li>checkstyle from 8.45 to 8.45.1 on 2021-08-09</li> <li>checkov from 2.0.338 to 2.0.340 on 2021-08-09</li> <li>checkov from 2.0.340 to 2.0.342 on 2021-08-10</li> <li>checkov from 2.0.342 to 2.0.344 on 2021-08-10</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4410-2021-07-25","title":"[4.41.0] - 2021-07-25","text":"<ul> <li>New config variable IGNORE_GITIGNORED_FILES (default: <code>false</code>). If set to <code>true</code>, MegaLinter will skips files ignored by git using <code>.gitignore</code> files</li> <li>New config variable IGNORE_GENERATED_FILES (default: <code>false</code>). If set to <code>true</code>, MegaLinter will skips files containing <code>@generated</code> marker and not containing <code>@not-generated</code> marker</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>sfdx-scanner-apex from 2.9.2 to 2.9.1 on 2021-07-14</li> <li>sfdx-scanner-aura from 2.9.2 to 2.9.1 on 2021-07-14</li> <li>sfdx-scanner-lwc from 2.9.2 to 2.9.1 on 2021-07-14</li> <li>checkov from 2.0.267 to 2.0.269 on 2021-07-14</li> <li>snakemake from 6.5.3 to 6.6.0 on 2021-07-17</li> <li>sqlfluff from 0.6.0 to 0.6.1 on 2021-07-17</li> <li>checkov from 2.0.269 to 1.0.860 on 2021-07-17</li> <li>checkov from 1.0.860 to 2.0.276 on 2021-07-17</li> <li>eslint from 7.30.0 to 7.31.0 on 2021-07-17</li> <li>checkov from 2.0.276 to 2.0.278 on 2021-07-18</li> <li>checkov from 2.0.278 to 2.0.279 on 2021-07-18</li> <li>checkov from 2.0.279 to 2.0.280 on 2021-07-18</li> <li>snakemake from 6.6.0 to 6.6.1 on 2021-07-20</li> <li>checkov from 2.0.280 to 2.0.283 on 2021-07-20</li> <li>terraform-fmt from 1.0.1 to 1.0.2 on 2021-07-20</li> <li>phpstan from 0.12.92 to 0.12.93 on 2021-07-21</li> <li>pylint from 2.9.3 to 2.9.4 on 2021-07-21</li> <li>checkov from 2.0.283 to 2.0.287 on 2021-07-21</li> <li>terragrunt from 0.31.0 to 0.31.1 on 2021-07-21</li> <li>markdownlint from 0.27.1 to 0.28.1 on 2021-07-25</li> <li>pylint from 2.9.4 to 2.9.5 on 2021-07-25</li> <li>sfdx-scanner-apex from 2.9.1 to 2.10.0 on 2021-07-25</li> <li>sfdx-scanner-aura from 2.9.1 to 2.10.0 on 2021-07-25</li> <li>sfdx-scanner-lwc from 2.9.1 to 2.10.0 on 2021-07-25</li> <li>sqlfluff from 0.6.1 to 0.6.2 on 2021-07-25</li> <li>checkov from 2.0.287 to 2.0.295 on 2021-07-25</li> <li>terraform-fmt from 1.0.2 to 1.0.3 on 2021-07-25</li> <li>terrascan from 1.8.0 to 1.8.1 on 2021-07-25</li> <li>xmllint from 20910 to 20912 on 2021-07-25</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4400-2021-07-14","title":"[4.40.0] - 2021-07-14","text":"<ul> <li>Add mypy python linter</li> <li>mega-linter-runner: Add possibility to send the docker image to use, including from another registry than docker hub, with argument <code>--image</code></li> </ul> <ul> <li>Linter versions upgrades<ul> <li>phpstan from 0.12.91 to 0.12.92 on 2021-07-10</li> <li>checkov from 2.0.259 to 2.0.261 on 2021-07-11</li> <li>checkov from 2.0.261 to 2.0.262 on 2021-07-11</li> <li>checkov from 2.0.262 to 2.0.263 on 2021-07-12</li> <li>checkov from 2.0.263 to 2.0.266 on 2021-07-13</li> <li>checkov from 2.0.266 to 2.0.267 on 2021-07-13</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4390-2021-07-14-deleted-release-because-not-working-use-4380-until-4400-release","title":"[4.39.0] - 2021-07-14 [DELETED RELEASE BECAUSE NOT WORKING, USE 4.38.0 UNTIL 4.40.0 RELEASE]","text":"<ul> <li>Add mypy python linter</li> <li>mega-linter-runner: Add possibility to send the docker image to use, including from another registry than docker hub, with argument <code>--image</code></li> </ul> <ul> <li>Linter versions upgrades<ul> <li>phpstan from 0.12.91 to 0.12.92 on 2021-07-10</li> <li>checkov from 2.0.259 to 2.0.261 on 2021-07-11</li> <li>checkov from 2.0.261 to 2.0.262 on 2021-07-11</li> <li>checkov from 2.0.262 to 2.0.263 on 2021-07-12</li> <li>checkov from 2.0.263 to 2.0.266 on 2021-07-13</li> <li>checkov from 2.0.266 to 2.0.267 on 2021-07-13</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4380-2021-07-10","title":"[4.38.0] - 2021-07-10","text":"<ul> <li>New python linter: bandit, added by Tom Pansino</li> <li>Manage Github action versioning: Match MegaLinter docker image version</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>snakemake from 6.5.2 to 6.5.3 on 2021-07-07</li> <li>checkov from 2.0.251 to 2.0.253 on 2021-07-07</li> <li>php from 7.4.19 to 7.4.21 on 2021-07-07</li> <li>sql-lint from 0.0.18 to 0.0.19 on 2021-07-08</li> <li>checkov from 2.0.253 to 2.0.257 on 2021-07-08</li> <li>isort from 5.9.1 to 5.9.2 on 2021-07-10</li> <li>checkov from 2.0.257 to 2.0.259 on 2021-07-10</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4370-2021-07-05","title":"[4.37.0] - 2021-07-05","text":"<ul> <li>Downgrade npm to npm@latest-6 to avoid idealTree error when using npm install</li> <li>Use pip to install ansible &amp; ansible-lint as alpine apk package ansible disappeared</li> <li>Add <code>--doc</code> argument to build.sh to generate doc only when requested (manually, or from CI job Auto-Update-Linters)</li> <li>Add rust in default installations as it's required for latest pip cryptography package</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>rstfmt from 0.0.0 to 0.0.9 on 2021-06-24</li> <li>sfdx-scanner-apex from 2.9.1 to 2.9.2 on 2021-06-24</li> <li>sfdx-scanner-aura from 2.9.1 to 2.9.2 on 2021-06-24</li> <li>sfdx-scanner-lwc from 2.9.1 to 2.9.2 on 2021-06-24</li> <li>snakemake from 6.4.1 to 6.5.0 on 2021-06-24</li> <li>terraform-fmt from Terraform.v1.0.0 to 1.0.0 on 2021-06-24</li> <li>terragrunt from 0.30.7 to 0.31.0 on 2021-06-24</li> <li>snakemake from 6.5.0 to 6.5.1 on 2021-06-24</li> <li>terraform-fmt from 1.0.0 to 1.0.1 on 2021-06-24</li> <li>prettier from 2.3.1 to 2.3.2 on 2021-06-27</li> <li>checkstyle from 8.43 to 8.44 on 2021-06-28</li> <li>checkov from 2.0.226 to 2.0.228 on 2021-06-28</li> <li>checkov from 2.0.228 to 2.0.229 on 2021-06-28</li> <li>checkov from 2.0.229 to 2.0.230 on 2021-06-28</li> <li>checkov from 2.0.230 to 2.0.232 on 2021-06-28</li> <li>cfn-lint from 0.51.0 to 0.52.0 on 2021-07-05</li> <li>hadolint from 2.5.0 to 2.6.0 on 2021-07-05</li> <li>eslint from 7.29.0 to 7.30.0 on 2021-07-05</li> <li>eslint-plugin-jsonc from 1.3.1 to 1.4.0 on 2021-07-05</li> <li>phpstan from 0.12.90 to 0.12.91 on 2021-07-05</li> <li>pylint from 2.8.3 to 2.9.3 on 2021-07-05</li> <li>snakemake from 6.5.1 to 6.5.2 on 2021-07-05</li> <li>checkov from 2.0.232 to 2.0.250 on 2021-07-05</li> <li>terrascan from 1.7.0 to 1.8.0 on 2021-07-05</li> <li>checkov from 2.0.250 to 2.0.251 on 2021-07-05</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4360-2021-06-22","title":"[4.36.0] - 2021-06-22","text":"<ul> <li>Fix Phive (php package manager) installation</li> <li>Fix dependency error with importlib_metadata before build</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>clj-kondo from 2021.04.23 to 2021.06.18 on 2021-06-22</li> <li>cfn-lint from 0.50.0 to 0.51.0 on 2021-06-22</li> <li>hadolint from 2.4.1 to 2.5.0 on 2021-06-22</li> <li>dotenv-linter from 3.0.0 to 3.1.0 on 2021-06-22</li> <li>golangci-lint from 1.40.1 to 1.41.1 on 2021-06-22</li> <li>npm-groovy-lint from 8.1.0 to 8.2.0 on 2021-06-22</li> <li>htmlhint from 0.14.2 to 0.15.1 on 2021-06-22</li> <li>eslint from 7.28.0 to 7.29.0 on 2021-06-22</li> <li>eslint-plugin-jsonc from 1.2.1 to 1.3.1 on 2021-06-22</li> <li>phpstan from 0.12.88 to 0.12.90 on 2021-06-22</li> <li>isort from 5.8.0 to 5.9.1 on 2021-06-22</li> <li>clippy from 0.1.52 to 0.1.53 on 2021-06-22</li> <li>snakefmt from 0.4.0 to 0.4.1 on 2021-06-22</li> <li>cspell from 5.6.0 to 5.6.6 on 2021-06-22</li> <li>sqlfluff from 0.5.6 to 0.6.0 on 2021-06-22</li> <li>terraform-fmt from Terraform.v0.15.5 to Terraform.v1.0.0 on 2021-06-22</li> <li>terragrunt from 0.29.8 to 0.30.7 on 2021-06-22</li> <li>terrascan from 1.6.0 to 1.7.0 on 2021-06-22</li> <li>tflint from 0.29.0 to 0.29.1 on 2021-06-22</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4350-2021-06-12","title":"[4.35.0] - 2021-06-12","text":"<ul> <li>Fix #304: Display error message when docker isn't found when running mega-linter-runner</li> <li>Calculate sum of docker pulls for main page counter badge</li> <li>Check _RULES_PATH for active_only_if_file_found check (#418, by Omeed Musavi)</li> <li>Upgrade clj-kondo 2021.04.23-alpine</li> <li>Upgrade to python:3.9.5-alpine</li> <li>Partial fix #481: Allow applying fixes on push events (PR487 by V\u00edt Ku\u010dera)</li> <li>Fix build.sh on windows</li> <li>Add trivy security check of all built MegaLinter docker images</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>terragrunt from 0.29.2 to 0.29.3 on 2021-05-16</li> <li>shfmt from 3.2.4 to 3.3.0 on 2021-05-18</li> <li>phpstan from 0.12.87 to 0.12.88 on 2021-05-18</li> <li>cfn-lint from 0.49.1 to 0.49.2 on 2021-05-19</li> <li>cpplint from 1.5.4 to 1.5.5 on 2021-05-21</li> <li>scalafix from 0.9.27 to 0.9.28 on 2021-05-21</li> <li>snakemake from 6.3.0 to 6.4.0 on 2021-05-21</li> <li>terraform-fmt from Terraform.v0.15.3 to Terraform.v0.15.4 on 2021-05-21</li> <li>terragrunt from 0.29.3 to 0.29.4 on 2021-05-21</li> <li>sfdx-scanner-apex from 2.8.0 to 2.9.1 on 2021-05-22</li> <li>sfdx-scanner-aura from 2.8.0 to 2.9.1 on 2021-05-22</li> <li>sfdx-scanner-lwc from 2.8.0 to 2.9.1 on 2021-05-22</li> <li>jscpd from 3.3.25 to 3.3.26 on 2021-05-24</li> <li>eslint from 7.26.0 to 7.27.0 on 2021-05-24</li> <li>clj-kondo from 2021.02.13 to 2021.04.23 on 2021-05-24</li> <li>terragrunt from 0.29.4 to 0.29.5 on 2021-05-24</li> <li>snakemake from 6.4.0 to 6.4.1 on 2021-05-28</li> <li>terragrunt from 0.29.5 to 0.29.6 on 2021-05-28</li> <li>terragrunt from 0.29.6 to 0.29.7 on 2021-05-29</li> <li>cspell from 4.1.3 to 5.5.2 on 2021-05-30</li> <li>checkstyle from 8.42 to 8.43 on 2021-05-30</li> <li>scalafix from 0.9.28 to 0.9.29 on 2021-05-30</li> <li>pylint from 2.8.2 to 2.8.3 on 2021-06-01</li> <li>cfn-lint from 0.49.2 to 0.50.0 on 2021-06-04</li> <li>terraform-fmt from Terraform.v0.15.4 to Terraform.v0.15.5 on 2021-06-04</li> <li>terragrunt from 0.29.7 to 0.29.8 on 2021-06-04</li> <li>eslint from 7.27.0 to 7.28.0 on 2021-06-05</li> <li>prettier from 2.3.0 to 2.3.1 on 2021-06-07</li> <li>protolint from 0.31.0 to 0.32.0 on 2021-06-07</li> <li>cspell from 5.5.2 to 5.6.0 on 2021-06-07</li> <li>sql-lint from 0.0.17 to 0.0.18 on 2021-06-07</li> <li>tflint from 0.28.1 to 0.29.0 on 2021-06-07</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4340-2021-04-30","title":"[4.34.0] - 2021-04-30","text":"<ul> <li>Fix bug in MegaLinter plugins installation (related to #PR403)</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>sqlfluff from 0.5.3 to 0.5.5 on 2021-05-14</li> <li>hadolint from 2.4.0 to 2.4.1 on 2021-05-15</li> <li>golangci-lint from 1.40.0 to 1.40.1 on 2021-05-15</li> <li>sqlfluff from 0.5.5 to 0.5.6 on 2021-05-15</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4330-2021-04-30","title":"[4.33.0] - 2021-04-30","text":"<ul> <li>Split Salesforce sfdx-scanner into pmd, eslint aura and eslint lwc</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>snakemake from 6.1.1 to 6.1.2 on 2021-04-20</li> <li>stylelint from 13.12.0 to 13.13.0 on 2021-04-25</li> <li>hadolint from 2.2.0 to 2.3.0 on 2021-04-25</li> <li>eslint from 7.24.0 to 7.25.0 on 2021-04-25</li> <li>pylint from 2.7.4 to 2.8.0 on 2021-04-25</li> <li>snakemake from 6.1.2 to 6.2.1 on 2021-04-25</li> <li>terrascan from 1.4.0 to 1.5.0 on 2021-04-25</li> <li>checkstyle from 8.41.1 to 8.42 on 2021-04-25</li> <li>pylint from 2.8.0 to 2.8.1 on 2021-04-25</li> <li>tflint from 0.27.0 to 0.28.0 on 2021-04-25</li> <li>pylint from 2.8.1 to 2.8.2 on 2021-04-27</li> <li>cfn-lint from 0.48.3 to 0.49.0 on 2021-04-28</li> <li>phpstan from 0.12.84 to 0.12.85 on 2021-04-28</li> <li>terragrunt from 0.28.21 to 0.29.0 on 2021-04-28</li> <li>snakemake from 6.2.1 to 6.3.0 on 2021-04-30</li> <li>terrascan from 1.5.0 to 1.5.1 on 2021-04-30</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4320-2021-04-20","title":"[4.32.0] - 2021-04-20","text":"<ul> <li>Fix #376 : Link-title to license</li> <li>Add support from prettier as JSON formatter (#421, by Omeed Musavi</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>phpstan from 0.12.82 to 0.12.83 on 2021-04-03</li> <li>markdown-table-formatter from 1.0.4 to 1.1.0 on 2021-04-05</li> <li>tflint from 0.25.0 to 0.26.0 on 2021-04-05</li> <li>sqlfluff from 0.4.1 to 0.5.0 on 2021-04-06</li> <li>cfn-lint from 0.48.1 to 0.48.2 on 2021-04-07</li> <li>yamllint from 1.26.0 to 1.26.1 on 2021-04-07</li> <li>snakemake from 6.1.0 to 6.1.1 on 2021-04-08</li> <li>terragrunt from 0.28.16 to 0.28.19 on 2021-04-09</li> <li>phpcs from 3.5.8 to 3.6.0 on 2021-04-09</li> <li>eslint from 7.23.0 to 7.24.0 on 2021-04-10</li> <li>sqlfluff from 0.5.0 to 0.5.1 on 2021-04-10</li> <li>protolint from 0.30.1 to 0.31.0 on 2021-04-11</li> <li>sqlfluff from 0.5.1 to 0.5.2 on 2021-04-11</li> <li>sfdx-scanner from 2.7.0 to 2.8.0 on 2021-04-14</li> <li>terragrunt from 0.28.19 to 0.28.21 on 2021-04-15</li> <li>cfn-lint from 0.48.2 to 0.48.3 on 2021-04-17</li> <li>flake8 from 3.9.0 to 3.9.1 on 2021-04-17</li> <li>tflint from 0.26.0 to 0.27.0 on 2021-04-19</li> <li>hadolint from 2.1.0 to 2.2.0 on 2021-04-19</li> <li>phpstan from 0.12.83 to 0.12.84 on 2021-04-19</li> <li>shellcheck from 0.7.1 to 0.7.2 on 2021-04-19</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4310-2021-04-03","title":"[4.31.0] - 2021-04-03","text":"<ul> <li>Keep license pre-formatted in docs</li> <li>Use Python virtual-environment in dev-dependencies shell example</li> <li>Fix #367 : Display editorconfig-checker version</li> <li>Fix #379 : New configuration FAIL_IF_MISSING_LINTER_IN_FLAVOR</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>flake8 from 3.8.4 to 3.9.0 on 2021-03-15</li> <li>ktlint from 0.40.0 to 0.41.0 on 2021-03-21</li> <li>phpstan from 0.12.81 to 0.12.82 on 2021-03-21</li> <li>isort from 5.7.0 to 5.8.0 on 2021-03-21</li> <li>sfdx-scanner from 2.6.0 to 2.7.0 on 2021-03-21</li> <li>sql-lint from 0.0.15 to 0.0.16 on 2021-03-21</li> <li>swiftlint from 0.43.0 to 0.43.1 on 2021-03-21</li> <li>editorconfig-checker from 0.0.0 to 2.3.4 on 2021-03-22</li> <li>ktlint from 0.41.0 to 0.40.0 on 2021-03-22</li> <li>cfn-lint from 0.47.2 to 0.48.1 on 2021-03-30</li> <li>coffeelint from 4.1.3 to 4.1.4 on 2021-03-30</li> <li>hadolint from 1.23.0 to 2.0.0 on 2021-03-30</li> <li>golangci-lint from 1.38.0 to 1.39.0 on 2021-03-30</li> <li>checkstyle from 8.41 to 8.41.1 on 2021-03-30</li> <li>eslint from 7.22.0 to 7.23.0 on 2021-03-30</li> <li>kubeval from 0.15.0 to 0.16.1 on 2021-03-30</li> <li>perlcritic from 1.138 to 1.140 on 2021-03-30</li> <li>pylint from 2.7.2 to 2.7.4 on 2021-03-30</li> <li>clippy from 0.0.212 to 0.1.51 on 2021-03-30</li> <li>scalafix from 0.9.26 to 0.9.27 on 2021-03-30</li> <li>terragrunt from 0.28.9 to 0.28.16 on 2021-03-30</li> <li>kubeval from 0.16.0 to 0.16.1 on 2021-03-30</li> <li>pylint from 2.7.3 to 2.7.4 on 2021-03-30</li> <li>editorconfig-checker from 2.3.4 to 2.3.5 on 2021-03-31</li> <li>hadolint from 2.0.0 to 2.1.0 on 2021-04-02</li> <li>snakemake from 6.0.5 to 6.1.0 on 2021-04-02</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4300-2021-03-14","title":"[4.30.0] - 2021-03-14","text":"<ul> <li>Fix #361 - Not respecting <code>*_DISABLE_ERRORS: false</code></li> <li>New variable FORMATTERS_DISABLE_ERRORS to force all formatters to be blocking if errors are found</li> <li>Add *.svg in .jscpd (copy-paste detector) default ignore paths</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>cfn-lint from 0.47.1 to 0.47.2 on 2021-03-13</li> <li>eslint from 7.21.0 to 7.22.0 on 2021-03-13</li> <li>eslint-plugin-jsonc from 1.1.0 to 1.2.1 on 2021-03-14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4290-2021-03-12","title":"[4.29.0] - 2021-03-12","text":"<ul> <li>Fix regex to list Salesforce errors</li> <li>Fix Updated Files Reporter when MegaLinter isn't running on GitHub Action</li> <li>Fix #359 - invalid literal with _DISABLE_ERRORS_IF_LESS_THAN</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>clj-kondo from 2021.01.20 to 2021.02.13 on 2021-03-01</li> <li>jscpd from 3.3.24 to 3.3.25 on 2021-03-06</li> <li>hadolint from 1.22.1 to 1.23.0 on 2021-03-06</li> <li>golangci-lint from 1.37.1 to 1.38.0 on 2021-03-06</li> <li>markdownlint from 0.26.0 to 0.27.1 on 2021-03-06</li> <li>snakemake from 6.0.0 to 6.0.2 on 2021-03-06</li> <li>sqlfluff from 0.4.0 to 0.4.1 on 2021-03-06</li> <li>swiftlint from 0.42.0 to 0.43.0 on 2021-03-06</li> <li>terrascan from 1.3.3 to 1.4.0 on 2021-03-06</li> <li>stylelint from 13.11.0 to 13.12.0 on 2021-03-06</li> <li>tflint from 0.24.1 to 0.25.0 on 2021-03-06</li> <li>shfmt from 3.2.2 to 3.2.4 on 2021-03-10</li> <li>cfn-lint from 0.46.0 to 0.47.0 on 2021-03-10</li> <li>git_diff from 2.30.1 to 2.30.2 on 2021-03-10</li> <li>phpstan from 0.12.80 to 0.12.81 on 2021-03-10</li> <li>protolint from 0.29.0 to 0.30.1 on 2021-03-10</li> <li>snakefmt from 0.3.1 to 0.4.0 on 2021-03-10</li> <li>snakemake from 6.0.2 to 6.0.3 on 2021-03-10</li> <li>cfn-lint from 0.47.0 to 0.47.1 on 2021-03-12</li> <li>powershell from 7.1.2 to 7.1.3 on 2021-03-12</li> <li>snakemake from 6.0.3 to 6.0.5 on 2021-03-12</li> <li>terragrunt from 0.28.6 to 0.28.9 on 2021-03-12</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4280-2021-03-01","title":"[4.28.0] - 2021-03-01","text":"<ul> <li>Feature: _DISABLE_ERRORS_IF_LESS_THAN : set linter status to warning if maximum allowed errors isn't reached</li> <li>Add colors in logs</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>pylint from 2.6.0 to 2.6.2 on 2021-02-16</li> <li>golangci-lint from 1.36.0 to 1.37.0 on 2021-02-19</li> <li>phpstan from 0.12.76 to 0.12.77 on 2021-02-19</li> <li>sfdx-scanner from 2.5.1 to 2.6.0 on 2021-02-19</li> <li>terragrunt from 0.28.2 to 0.28.6 on 2021-02-19</li> <li>terrascan from 1.3.2 to 1.3.3 on 2021-02-19</li> <li>stylelint from 13.10.0 to 13.11.0 on 2021-02-21</li> <li>golangci-lint from 1.37.0 to 1.37.1 on 2021-02-21</li> <li>phpstan from 0.12.77 to 0.12.78 on 2021-02-21</li> <li>pylint from 2.6.2 to 2.7.0 on 2021-02-22</li> <li>cfn-lint from 0.45.0 to 0.46.0 on 2021-02-24</li> <li>pylint from 2.7.0 to 2.7.1 on 2021-02-24</li> <li>eslint-plugin-jsonc from 0.9.0 to 1.0.0 on 2021-02-25</li> <li>phpstan from 0.12.78 to 0.12.79 on 2021-02-25</li> <li>protolint from 0.28.2 to 0.29.0 on 2021-02-25</li> <li>jscpd from 3.3.23 to 3.3.24 on 2021-02-28</li> <li>eslint from 7.20.0 to 7.21.0 on 2021-02-28</li> <li>scalafix from 0.9.25 to 0.9.26 on 2021-02-28</li> <li>snakemake from 5.32.2 to 6.0.0 on 2021-02-28</li> <li>checkstyle from 8.40 to 8.41 on 2021-03-01</li> <li>eslint-plugin-jsonc from 1.0.0 to 1.1.0 on 2021-03-01</li> <li>phpstan from 0.12.79 to 0.12.80 on 2021-03-01</li> <li>pylint from 2.7.1 to 2.7.2 on 2021-03-01</li> <li>clj-kondo from 2021.01.20 to 2021.02.13 on 2021-03-01</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4270-2021-02-16","title":"[4.27.0] - 2021-02-16","text":"<ul> <li>Linters<ul> <li>Format YAML with prettier</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Lint docker image using Dockle</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix ansible-lint test cases for new version</li> <li>Update --help expected return code for shfmt ash formatter and revive go linter</li> <li>Add --write to update files fixed by eslint</li> <li>Pimp MegaLinter sources by adding newLines when missing (manually and from build.py) + fix logger initialization error + call python3 by default (PR329 by Tom Klingenberg)</li> <li>Increase max line length to 500 in yaml-lint default configuration</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>ansible-lint from 4.2.0 to 5.0.0 on 2021-02-09</li> <li>bash-exec from 5.0.17 to 5.1.0 on 2021-02-09</li> <li>cfn-lint from 0.44.6 to 0.44.7 on 2021-02-09</li> <li>hadolint from 1.21.0 to 1.22.1 on 2021-02-09</li> <li>git_diff from 2.26.2 to 2.30.1 on 2021-02-09</li> <li>php from 7.3.26 to 7.4.15 on 2021-02-09</li> <li>phpstan from 0.12.71 to 0.12.74 on 2021-02-09</li> <li>protolint from 0.28.0 to 0.28.2 on 2021-02-09</li> <li>lintr from 2.0.1.9000 to 0.0.0 on 2021-02-09</li> <li>snakemake from 5.32.0 to 5.32.1 on 2021-02-09</li> <li>terragrunt from 0.27.1 to 0.28.2 on 2021-02-09</li> <li>ansible-lint from 5.0.0 to 0.0.0 on 2021-02-09</li> <li>dotnet-format from 4.1.131201 to 5.0.211103 on 2021-02-12</li> <li>stylelint from 13.9.0 to 13.10.0 on 2021-02-12</li> <li>phpstan from 0.12.74 to 0.12.75 on 2021-02-12</li> <li>powershell from 7.0.4 to 7.1.2 on 2021-02-12</li> <li>snakemake from 5.32.1 to 5.32.2 on 2021-02-12</li> <li>coffeelint from 4.1.2 to 4.1.3 on 2021-02-14</li> <li>eslint from 7.19.0 to 7.20.0 on 2021-02-14</li> <li>phpstan from 0.12.75 to 0.12.76 on 2021-02-14</li> <li>black from 19.10 to 20.8 on 2021-02-15</li> <li>snakefmt from 0.2.6 to 0.3.0 on 2021-02-15</li> <li>sqlfluff from 0.3.6 to 0.4.0 on 2021-02-15</li> <li>cfn-lint from 0.44.7 to 0.45.0 on 2021-02-16</li> <li>snakefmt from 0.3.0 to 0.3.1 on 2021-02-16</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4262-2021-01-29","title":"[4.26.2] - 2021-01-29","text":"<ul> <li>Linter versions upgrades<ul> <li>shfmt from 3.2.1 to 3.2.2 on 2021-01-30</li> <li>yamllint from 1.25.0 to 1.26.0 on 2021-01-30</li> <li>hadolint from 1.20.0 to 1.21.0 on 2021-02-02</li> <li>checkstyle from 8.39 to 8.40 on 2021-02-02</li> <li>eslint from 7.18.0 to 7.19.0 on 2021-02-02</li> <li>phpstan from 0.12.70 to 0.12.71 on 2021-02-02</li> <li>tflint from 0.23.1 to 0.24.1 on 2021-02-02</li> <li>cfn-lint from 0.44.5 to 0.44.6 on 2021-02-03</li> <li>terrascan from 1.3.1 to 1.3.2 on 2021-02-04</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4261-2021-01-29","title":"[4.26.1] - 2021-01-29","text":"<ul> <li>Fixes<ul> <li>Prevent <code>unexpected token</code> error using mega-linter-runner on old versions of node</li> <li>#293 Fix CI for PR from forked repositories</li> <li>#295 Fix crash when .cspell.json isn't parseable (wrong JSON format)</li> <li>#311 Add java in salesforce flavor descriptor because it's used by Apex PMD</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>phpstan from 0.12.68 to 0.12.69 on 2021-01-24</li> <li>cfn-lint from 0.44.4 to 0.44.5 on 2021-01-25</li> <li>golangci-lint from 1.35.2 to 1.36.0 on 2021-01-27</li> <li>protolint from 0.27.0 to 0.28.0 on 2021-01-27</li> <li>hadolint from 1.19.0 to 1.20.0 on 2021-01-28</li> <li>phpstan from 0.12.69 to 0.12.70 on 2021-01-28</li> <li>clj-kondo from 2020.09.09 to 2021.01.20 on 2021-01-28</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4260-2021-01-24","title":"[4.26.0] - 2021-01-24","text":"<ul> <li>Core architecture<ul> <li>Manage remote <code>mega-linter.yml</code> configuration files</li> <li>New property EXTENDS, allowing to inherit from remote <code>mega-linter.yml</code> configuration files</li> <li>Add docker-in-docker management (reuse running docker instance)</li> <li>Allow to skip auto apply fixes with commit or PR if latest commit text contains <code>skip fix</code></li> <li>Provide new issue link to create a new flavor to improve performances</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Add revive GO linter</li> <li>Add SwiftLint for Swift language</li> <li>New MegaLinter flavor swift</li> <li>Get correct version for eslint-plugin-jsonc</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>snakefmt from 0.2.5 to 0.2.6 on 2021-01-22</li> <li>terrascan from 1.3.0 to 1.3.1 on 2021-01-22</li> <li>eslint-plugin-jsonc from 6.14.10 to 0.9.0 on 2021-01-24</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4250-2021-01-22","title":"[4.25.0] - 2021-01-22","text":"<ul> <li>Linters<ul> <li>Add SQL linter sqlfluff</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>#269 eslint: .eslintrc.yml is considered as found whereas it's not located in workspace root</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>stylelint from 13.8.0 to 13.9.0 on 2021-01-19</li> <li>markdown-table-formatter from 1.0.1 to 1.0.4 on 2021-01-19</li> <li>terrascan from 1.2.0 to 1.3.0 on 2021-01-19</li> <li>cfn-lint from 0.44.3 to 0.44.4 on 2021-01-19</li> <li>powershell from 7.1.1 to 7.0.4 on 2021-01-19</li> <li>sfdx-scanner from 2.4.0 to 2.5.1 on 2021-01-21</li> <li>terragrunt from 0.26.7 to 0.27.1 on 2021-01-22</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4241-2021-01-19","title":"[4.24.1] - 2021-01-19","text":"<ul> <li>mega-linter-runner --install<ul> <li>Create .jscpd.json file if copy-paste detection is activated</li> <li>Display ending message</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>#266: shfmt error in python flavor, and reactivate BASH_SHFMT and DOCKERFILE_HADOLINT for own sources linting)</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>powershell from 7.1.0 to 7.1.1 on 2021-01-15</li> <li>eslint from 7.17.0 to 7.18.0 on 2021-01-16</li> <li>eslint-plugin-jsonc from 7.17.0 to 7.18.0 on 2021-01-16</li> <li>scalafix from 0.9.24 to 0.9.25 on 2021-01-16</li> <li>snakemake from 5.31.1 to 5.32.0 on 2021-01-16</li> <li>protolint from 0.26.1 to 0.27.0 on 2021-01-18</li> <li>phpstan from 0.12.67 to 0.12.68 on 2021-01-19</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4240-2021-01-14","title":"[4.24.0] - 2021-01-14","text":"<ul> <li>Linters<ul> <li>Add markdown-table-formatter</li> <li>Fix python error when CSpell found no errors</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>v8r from 0.4.0 to 0.5.0 on 2021-01-14</li> <li>phpstan from 0.12.66 to 0.12.67 on 2021-01-14</li> <li>psalm from 4.3.1 to Psalm.4.x-dev@ on 2021-01-14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4233-2021-01-14","title":"[4.23.3] - 2021-01-14","text":"<ul> <li>Fix <code>.cspell.json</code> file updater</li> </ul> <ul> <li>Linter versions upgrades<ul> <li>v8r from 0.4.0 to 0.5.0 on 2021-01-14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4232-2021-01-14","title":"[4.23.2] - 2021-01-14","text":"<ul> <li>mega-linter-runner --install:<ul> <li>Fix <code>.mega-linter.yml</code> DISABLE property when nothing in it</li> <li>Add default <code>.cspell.json</code> if spelling mistakes detector is activated</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4231-2021-01-12","title":"[4.23.1] - 2021-01-12","text":"<ul> <li>Core<ul> <li>Refactor part of Linter &amp; reporters to manage correctly logs when linter cli_lint_mode is <code>project</code> or <code>list_of_files</code><ul> <li>Generate ConsoleLinter and Text reports based from Linter.files_lint_results instead of at each loop</li> <li>When TAP Reporter active, switch linters with cli_lint_mode == \"list_of_files\" to \"files\"</li> <li>Fix linter output when cli_lint_mode == \"list_of_files\"</li> </ul> </li> <li>Decrease number of Dockerfile steps</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4230-2021-01-12","title":"[4.23.0] - 2021-01-12","text":"<ul> <li>Core<ul> <li>If the linter is a formatter, errors aren't considered as blocking errors by default</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Add prettier to format Javascript and Typescript. standard remains default</li> <li>Add remark-lint to check and fix Markdown files. markdownlint remains default</li> </ul> </li> </ul> <ul> <li>Linter versions upgrades<ul> <li>golangci-lint from 1.35.1 to 1.35.2 on 2021-01-11<ul> <li>golangci-lint from 1.35.0 to 1.35.1 on 2021-01-11</li> <li>golangci-lint from 1.34.1 to 1.35.0 on 2021-01-08</li> </ul> </li> <li>cfn-lint from 0.44.2 to 0.44.3 on 2021-01-09</li> <li>tflint from 0.23.0 to 0.23.1 on 2021-01-10</li> <li>dotenv-linter from 2.2.1 to 3.0.0 on 2021-01-11<ul> <li>Update MegaLinter to call dotenv-linter v3 with <code>fix</code> and not <code>--fix</code> anymore</li> </ul> </li> <li>phpstan from 0.12.65 to 0.12.66 on 2021-01-11</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4221-2021-01-07","title":"[4.22.1] - 2021-01-07","text":"<ul> <li>Core<ul> <li>Improve <code>warning</code> status in logs</li> <li>Remove timestamp at each log line</li> </ul> </li> </ul> <ul> <li>Enhance integration with GitLab CI<ul> <li>Update configuration generator</li> <li>Update core to clean logs when in GitLab CI context</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4220-2021-01-06","title":"[4.22.0] - 2021-01-06","text":"<ul> <li>Core<ul> <li>Allow user to configure custom scripts in <code>.mega-linter.yml</code> to run before and after linting, with variables <code>PRE_RUN</code> and <code>POST_RUN</code></li> <li>Fix wrong linter status bug</li> <li>Enhance configuration variables performances</li> <li>Rename XXX_FILE_NAME into XXX_CONFIG_FILE</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Add JSONC (json with comments) linting with eslint-plugin-jsonc</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4210-2021-01-03","title":"[4.21.0] - 2021-01-03","text":"<ul> <li>Linters<ul> <li>Add misspell spell checker</li> <li>Allow to define cli_lint_errors_regex in descriptors to extract number of errors from linter output stdout</li> <li>Call linters CLIs with list of files instead of once by file, to improve performances<ul> <li>eslint</li> <li>markdownlint</li> <li>pylint</li> <li>flake8</li> <li>isort</li> </ul> </li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Implement architecture for MegaLinter plugins</li> <li>Count number of errors in linter logs with regexes (<code>cli_lint_errors_count</code> and <code>cli_lint_errors_regex</code> in descriptor files)</li> <li>Cleanup unused legacy from Super-Linter</li> </ul> </li> </ul> <ul> <li>Reports<ul> <li>Better icons for Console, GitHub Comment and Text reporters: \u2705 \u274c</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Add Install button for VSCode IDE extensions when available</li> <li>Add Install button for JetBrains IDEs extensions when available</li> <li>Add a new page All linters listing all linters and references to MegaLinter in their documentation</li> <li>Add json-schema documentation generation and references</li> </ul> </li> </ul> <ul> <li>CI<ul> <li>Use <code>quick build</code> and <code>TEST_KEYWORDS</code> in commit messages, to improve contributor experience</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Upgrade .tflint default config to work with new tflint version</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4200-2020-12-28","title":"[4.20.0] - 2020-12-28","text":"<ul> <li>Flavors<ul> <li>Add ci_light flavor for only CI config files (Dockerfile,Jenkinsfile,JSON,YAML,XML)</li> <li>Add salesforce flavor for Salesforce projects (DX or Metadata)</li> <li>If all required linters aren't in the current flavor, just skip them with a warning message</li> </ul> </li> </ul> <ul> <li>Core<ul> <li>Add Json Schema for descriptors (allows validation and auto-completion from IDEs)</li> <li>Add Json Schema for .mega-linter.yml configuration files</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4190-2020-12-27","title":"[4.19.0] - 2020-12-27","text":"<ul> <li>Installation<ul> <li>Add a yeoman generator in mega-linter-runner to initialize configuration in a repository: <code>npx mega-linter-runner --install</code></li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>New linter v8r to validate json and yaml files with schemastore.org</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4180-2020-12-23","title":"[4.18.0] - 2020-12-23","text":"<ul> <li>Core<ul> <li>Don't suggest flavors when MegaLinter validates only the diff files (<code>VALIDATE_ALL_CODE_BASE: false</code>)</li> <li>Fix ConsoleReporter active linters table content</li> <li>Check if linter is able to fix before flagging it as a fixing linter during runtime</li> </ul> </li> </ul> <ul> <li>Flavors<ul> <li>New flavor: documentation</li> </ul> </li> </ul> <ul> <li>Reporters<ul> <li>Support GitHub Enterprise for GitHub Comment Reporter</li> <li>Support GitHub Enterprise for GitHub Status Reporter</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Add docker pulls badge in flavors documentation</li> <li>Generate list of references to MegaLinter</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4170-2020-12-18","title":"[4.17.0] - 2020-12-18","text":"<ul> <li>Core<ul> <li>Allow to use remote linters configuration files with LINTER_RULES_PATH</li> <li>Add <code>.jekyll-cache</code> in the list of ignored folders by default</li> <li>Arrange display of Flavor suggestions (text and order) in reporter logs</li> </ul> </li> <li>Build<ul> <li>Dynamically generate (build.py) the list of flavors in github actions workflows</li> </ul> </li> <li>Doc<ul> <li>Reorganize online documentation menus</li> </ul> </li> <li>Linters<ul> <li>Add new linter git_diff to check for git conflicts markers</li> <li>Fix rakudo installation</li> <li>Fix phpstan installation</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4160-2020-12-14","title":"[4.16.0] - 2020-12-14","text":"<ul> <li>Flavored MegaLinters<ul> <li>Generate lightweight docker images to improve MegaLinter performances on some language based projects</li> <li>During MegaLinter run, suggest user to use a flavor and write it in reporters</li> <li>Update descriptor YML files to define flavours</li> <li>Update build.py to create one Dockerfile by MegaLinter flavour &amp; flavors documentation</li> <li>New GHA workflows to build all flavoured MegaLinters when pushing in master</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Output reporter problems as warnings</li> <li>Don't make MegaLinter fail in case GitHubStatusReporter fails</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Rename \"index\" pages into more meaningful labels</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4150-2020-12-13","title":"[4.15.0] - 2020-12-13","text":"<ul> <li>Add Vue.js linting (eslint-plugin-vue added in dependencies)</li> </ul> <ul> <li>Configuration parameters changes:<ul> <li>Change config setting logic: <code>EXCLUDED_DIRECTORIES</code> is now replacing original directory list instead of extending it</li> <li>Add config setting: <code>ADDITIONAL_EXCLUDED_DIRECTORIES</code> extends <code>EXCLUDED_DIRECTORIES</code> directory list</li> <li>Add config setting: <code>&amp;lt;LINTER_KEY&amp;gt;_FILE_EXTENSIONS</code> to override corresponding value from linter descriptor file</li> <li>Add config setting: <code>&amp;lt;LINTER_KEY&amp;gt;_FILE_NAMES_REGEX</code> to override corresponding value from linter descriptor file</li> </ul> </li> </ul> <ul> <li>Descriptor yaml schema changes:<ul> <li>Rename <code>files_names_not_ends_with</code> to <code>file_names_not_ends_with</code></li> <li>Rename <code>files_names</code> to <code>files_names_regex</code> and change behavior to expect regular expressions in the list.   they're applied using full match (the whole text should match the regular expression)</li> </ul> </li> </ul> <ul> <li>Fix error message from Email Reporter when SMTP password isn't set</li> <li>Fix automerge action yml (skip if secrets.PAT isn't set)</li> <li>Improve caching of compiled regular expressions</li> <li>Override mkdocs theme to make analytics work</li> </ul> <ul> <li>CI<ul> <li>Auto update linters and documentation: Create update PR only if linter versions has been updated</li> <li>Build and deploy docker images only when it's relevant (not in case of just documentation update for example)</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4142-2020-12-07","title":"[4.14.2] - 2020-12-07","text":"<ul> <li>Quick fix Github Comment Reporter</li> <li>Reorder linters for reports</li> </ul>"},{"location":"CHANGELOG/#4141-2020-12-07","title":"[4.14.1] - 2020-12-07","text":"<ul> <li>Fixes<ul> <li>Fix python error when File.io doesn't respond, + harmonize reporter logs</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4140-2020-12-07","title":"[4.14.0] - 2020-12-07","text":"<ul> <li>Linters<ul> <li>Add Salesforce linter: sfdx-scanner</li> </ul> </li> </ul> <ul> <li>Core architecture<ul> <li>Allow to call extra commands to build help content</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4130-2020-12-05","title":"[4.13.0] - 2020-12-05","text":"<ul> <li>Major updates in online documentation generation<ul> <li>Reorganize TOC</li> <li>Generate individual pages from README sections and update their internal links targets</li> <li>Open external links in a new browser tab</li> </ul> </li> </ul> <ul> <li>New configuration parameters<ul> <li>Allow disabling printing alpaca image to console using PRINT_ALPACA config parameter</li> <li>Support list of additional excluded directory basenames via EXCLUDED_DIRECTORIES configuration parameter</li> </ul> </li> </ul> <ul> <li>New reporters:<ul> <li>Email reporter, to send mega-linter reports by mail if smtp server is configured</li> <li>File.io reporter, to access reports with a file.io hyperlink</li> </ul> </li> </ul> <ul> <li>Fixes<ul> <li>Fix markdown comments generator when build on Windows</li> <li>Fix terrascan unit test case</li> <li>Run some actions/steps only when PR is from same repository</li> <li>Add comments in markdown generated by build.py</li> <li>Fix boolean variables not taken in account in .mega-linter.yml config file</li> </ul> </li> </ul> <ul> <li>Performance<ul> <li>Change way to install linters in Dockerfile (replace FROM \u2026 COPY) by package or sh installation, to reduce the docker build steps from 93 to 87<ul> <li>shellcheck</li> <li>editorconfig-checker</li> <li>dotenv-linter</li> <li>golangci-lint</li> <li>kubeval</li> </ul> </li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4120-2020-11-29","title":"[4.12.0] - 2020-11-29","text":"<ul> <li>Performances<ul> <li>Update default workflow to get ride of has_updates action (replace by output <code>has_updated_files</code> from mega-linter github action)</li> <li>Avoid duplicate runs in mega-linter.yml template and internal workflows, using skip-duplicate-actions</li> <li>Give a proper name to each internal workflow</li> <li>Fix issue about mkdirs failing</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4110-2020-11-29","title":"[4.11.0] - 2020-11-29","text":"<ul> <li>Manage parallel processing of linters to improve performances</li> </ul>"},{"location":"CHANGELOG/#4101-2020-11-28","title":"[4.10.1] - 2020-11-28","text":"<ul> <li>Fallback to default behaviours instead of crashes when git not available</li> </ul> <ul> <li>mega-linter-runner<ul> <li>Allow to send env parameters to mega-linter-runner cli</li> <li>Add examples in documentation</li> <li>Publish mega-linter-runner beta version when pushing in master branch</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4100-2020-11-23","title":"[4.10.0] - 2020-11-23","text":"<ul> <li>Add link to linters rules index in documentation</li> <li>Remove ANSI color codes from log files</li> <li>Add performances by linter in console log</li> <li>New option SHOW_ELAPSED_TIME , allowing the number of seconds elapsed by linter in reports</li> </ul> <ul> <li>NPM package MegaLinter runner<ul> <li>runs MegaLinter locally, using .mega-linter.yml configuration (requires docker installed on your computer)</li> <li>test cases added in CI</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#490-2020-11-23","title":"[4.9.0] - 2020-11-23","text":"<ul> <li>Core<ul> <li>Allow configuration to be defined in a <code>.mega-linter.yml</code> file</li> </ul> </li> </ul> <ul> <li>Linters<ul> <li>Add Gherkin (Cucumber language) &amp; gherkin-lint</li> <li>Add RST linter : rst-lint</li> <li>Add RST linter : rstcheck</li> <li>Add RST formatter : rstfmt</li> <li>Activate formatting for BASH_SHFMT</li> <li>Activate formatting for SNAKEMAKE_SNAKEFMT</li> <li>JsCpd: remove copy-paste HTML folder when no abuse copy-paste has been found</li> </ul> </li> </ul> <ul> <li>Logs<ul> <li>Store log files as artifacts during test cases</li> <li>Add examples of success and failed linter logs in documentation</li> <li>Remove <code>/tmp/lint</code> and <code>/github/workspace</code> from log files</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Add list of supported IDE in each linter documentation</li> <li>Generate GitHub card on linter doc when available</li> <li>Store link preview info during build</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#480-2020-11-17","title":"[4.8.0] - 2020-11-17","text":"<ul> <li>New reporter: Updated sources</li> </ul>"},{"location":"CHANGELOG/#471-2020-11-16","title":"[4.7.1] - 2020-11-16","text":"<ul> <li>Activate auto-fix for Groovy</li> </ul>"},{"location":"CHANGELOG/#470-2020-11-16","title":"[4.7.0] - 2020-11-16","text":"<ul> <li>Update markdown-link-check default config</li> <li>Add tip in documentation about .cspell.json generated by MegaLinter</li> <li>Remove /tmp/lint from logs</li> <li>Improve summary table for linters in project mode (all project linted in one call, not one file by one file)</li> <li>Add Reporters in documentation, with screenshots</li> <li>New MegaLinter variables to activate/deactivate/configure reporters</li> </ul>"},{"location":"CHANGELOG/#460-2020-11-13","title":"[4.6.0] - 2020-11-13","text":"<ul> <li>Automatic build of documentation with mkdocs-material</li> <li>Automatic deployment to https://megalinter.github.io/</li> <li>Add markdown-link-check</li> </ul>"},{"location":"CHANGELOG/#450-2020-11-11","title":"[4.5.0] - 2020-11-11","text":"<ul> <li>Add Visual Basic .NET language &amp; dotnet-format</li> <li>Refactor removal of arguments for formatters (from custom class to Linter generic class)</li> <li>Perl: lint files with no extension containing Perl shebang</li> <li>Add automerge for PR issues from linter versions updates</li> <li>Fix ignored root files issue</li> </ul>"},{"location":"CHANGELOG/#440-2020-11-05","title":"[4.4.0] - 2020-11-05","text":"<ul> <li>Add Python iSort</li> <li>Quick fix \"PR Comment\" reporter (orange light emoji)</li> <li>Refresh fork</li> </ul>"},{"location":"CHANGELOG/#432-2020-11-04","title":"[4.3.2] - 2020-11-04","text":"<ul> <li>Add spell checker cspell</li> <li>Add Github Action Workflow to automatically:<ul> <li>update linters dependencies</li> <li>rebuild MegaLinter documentation</li> <li>create a PR with updates</li> </ul> </li> </ul> <ul> <li>Apply fixes performed by linters:<ul> <li>User configuration (APPLY_FIXES vars)</li> <li>Descriptors configuration: cli_lint_fix_arg_name set on linter in YML when it can format and/or auto-fix issues</li> <li>Provide fixed files info in reports</li> <li>Test cases for all fixable file types: sample_project_fixes</li> <li>Generate README linters table with column \"Fix\"</li> <li>Provide fix capability in linters docs</li> <li>Update Workflows YMLs to create PR or commit to apply fixes</li> </ul> </li> </ul> <ul> <li>Core Archi:<ul> <li>All linters now have a name different than descriptor_id</li> <li>replace calls from os.path.exists to os.path.isfile and os.path.isdir</li> </ul> </li> </ul> <ul> <li>Other:<ul> <li>fix Phive install</li> <li>Upgrade linter versions &amp; help</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#400-2020-10-01","title":"[4.0.0] - 2020-10-01","text":"<ul> <li>Initial version</li> </ul>"},{"location":"all_linters/","title":"List of linters","text":""},{"location":"all_linters/#references","title":"References","text":"Linter Version License Popularity Descriptors Ref URL actionlint 1.7.7 MIT ACTION Repository ansible-lint 25.4.0 GPL-3.0 ANSIBLE Repository arm-ttk N/A MIT ARM Repository bandit 1.8.3 Apache-2.0 PYTHON Repository bash-exec 5.2.37 BASH Web Site bicep_linter 0.35.1 MIT BICEP Repository black 25.1.0 MIT PYTHON Repository cfn-lint 1.34.2 MIT-0 CLOUDFORMATION Repository checkmake 0.2.0 MIT MAKEFILE Repository checkov 3.2.413 Apache-2.0 REPOSITORY Repository checkstyle 10.23.1 LGPL-2.1 JAVA MegaLinter reference chktex 1.7.8 LATEX Web Site clang-format 19.1.4 Other C CPP Repository clippy 0.1.86 Other RUST Repository clj-kondo 2025.04.07 EPL-1.0 CLOJURE MegaLinter reference cljstyle 0.17.642 EPL-1.0 CLOJURE MegaLinter reference coffeelint 5.2.11 Other COFFEE Repository cppcheck 2.14.2 C CPP Repository cpplint 2.0.2 Other C CPP Repository csharpier 1.0.1 MIT CSHARP Repository cspell 8.19.4 MIT SPELL MegaLinter reference dartanalyzer 3.7.3 BSD-3-Clause DART Repository detekt 1.23.8 Apache-2.0 KOTLIN MegaLinter reference devskim 1.0.56 MIT REPOSITORY Repository djlint 1.36.4 GPL-3.0 HTML MegaLinter reference dotenv-linter 3.3.0 MIT ENV MegaLinter reference dotnet-format 9.0.105 MIT CSHARP VBDOTNET Repository dustilock 1.2.0 Apache-2.0 REPOSITORY Repository editorconfig-checker 3.2.1 MIT EDITORCONFIG MegaLinter reference eslint 8.57.1 MIT JAVASCRIPT JSX TSX TYPESCRIPT MegaLinter reference eslint-plugin-jsonc 2.15.1 MIT JSON MegaLinter reference flake8 7.2.0 MIT PYTHON Repository gherkin-lint N/A ISC GHERKIN Repository git_diff 2.47.2 LGPL-2.1 REPOSITORY Repository gitleaks 8.25.1 MIT REPOSITORY Repository golangci-lint 2.1.5 GPL-3.0 GO Repository graphql-schema-linter 3.0.1 MIT GRAPHQL Pull Request grype 0.91.2 Apache-2.0 REPOSITORY Repository hadolint 2.12.0 GPL-3.0 DOCKERFILE MegaLinter reference helm 3.16.3 Apache-2.0 KUBERNETES Repository htmlhint 1.1.4 MIT HTML MegaLinter reference isort 6.0.1 MIT PYTHON Repository jscpd 4.0.5 MIT COPYPASTE MegaLinter reference jsonlint 16.0.0 MIT JSON Repository kics 2.1.7 Apache-2.0 REPOSITORY MegaLinter reference ktlint 1.5.0 MIT KOTLIN MegaLinter reference kubeconform 0.6.7 Apache-2.0 KUBERNETES Repository kubescape 3.0.34 Apache-2.0 KUBERNETES Repository lightning-flow-scanner 3.8.0 AGPL-3.0 SALESFORCE Repository lintr N/A Other R MegaLinter reference ls-lint 2.3.0 MIT REPOSITORY Repository luacheck 1.2.0 MIT LUA Repository lychee 0.18.0 Apache-2.0 SPELL Repository markdown-link-check 3.12.2 ISC MARKDOWN MegaLinter reference markdown-table-formatter 1.6.1 MIT MARKDOWN Repository markdownlint 0.44.0 MIT MARKDOWN Repository mypy 1.15.0 MIT PYTHON Repository npm-groovy-lint 15.1.0 MIT GROOVY MegaLinter reference npm-package-json-lint 8.0.0 MIT JSON MegaLinter reference perlcritic 1.156 Other PERL Repository php-cs-fixer 3.75.0 MIT PHP Repository phpcs 3.12.2 BSD-3-Clause PHP Repository phplint 9.6.2 MIT PHP Repository phpstan 2.1.14 MIT PHP Repository pmd 7.13.0 Apache-2.0 JAVA MegaLinter reference powershell 7.5.1 MIT POWERSHELL Repository powershell_formatter 7.5.1 MIT POWERSHELL Repository prettier 3.5.3 MIT JAVASCRIPT JSON TYPESCRIPT YAML Repository proselint 0.14.0 BSD-3-Clause SPELL Repository protolint 0.54.1 MIT PROTOBUF Repository psalm Psalm.6.10.2@ MIT PHP Repository puppet-lint 4.3.0 MIT PUPPET Repository pylint 3.3.6 GPL-2.0 PYTHON Repository pyright 1.1.400 Other PYTHON Repository raku 2024.12 Artistic-2.0 RAKU Repository remark-lint 14.0.2 MIT MARKDOWN Repository revive 1.9.0 MIT GO Repository roslynator 0.10.1.0 Other CSHARP Repository rst-lint 1.4.0 Unlicense RST MegaLinter reference rstcheck 6.2.4 MIT RST MegaLinter reference rstfmt 0.0.14 RST Pull Request rubocop 1.75.4 MIT RUBY MegaLinter reference ruff 0.11.8 MIT PYTHON Repository ruff-format 0.11.8 MIT PYTHON Repository scalafix 0.14.2 Other SCALA MegaLinter reference secretlint 9.3.2 MIT REPOSITORY MegaLinter reference selene 0.28.0 LUA Repository semgrep 3.12 LGPL-2.1 REPOSITORY Repository sfdx-scanner-apex 4.11.0 MIT SALESFORCE Pull Request sfdx-scanner-aura 4.11.0 MIT SALESFORCE Pull Request sfdx-scanner-lwc 4.11.0 MIT SALESFORCE Pull Request shellcheck 0.10.0 GPL-3.0 BASH Repository shfmt 3.11.0 BSD-3-Clause BASH Repository snakefmt 0.11.0 MIT SNAKEMAKE Repository snakemake 8.27.1 MIT SNAKEMAKE Repository spectral 6.15.0 Apache-2.0 API Repository sqlfluff 3.4.0 MIT SQL Repository standard 17.1.2 MIT JAVASCRIPT Repository stylelint 16.19.1 MIT CSS Repository stylua 2.0.0 MPL-2.0 LUA Repository swiftlint 0.59.1 MIT SWIFT Repository syft 1.23.1 Apache-2.0 REPOSITORY Repository tekton-lint 1.1.0 Apache-2.0 TEKTON Repository terraform-fmt 1.11.4 MPL-2.0 TERRAFORM Repository terragrunt 0.78.0 MIT TERRAFORM Repository terrascan 1.19.9 Apache-2.0 TERRAFORM Repository tflint 0.57.0 MPL-2.0 TERRAFORM Repository trivy 0.62.0 Apache-2.0 REPOSITORY Repository trivy-sbom 0.62.0 Apache-2.0 REPOSITORY Repository trufflehog 3.88.27 AGPL-3.0 REPOSITORY Repository ts-standard 12.0.2 MIT TYPESCRIPT Repository tsqllint 1.16.0.0 MIT SQL Repository v8r 4.4.0 MIT JSON YAML Repository vale 3.11.2 MIT SPELL Repository xmllint 21304 XML Web Site yamllint 1.37.1 GPL-3.0 YAML Repository"},{"location":"all_users/","title":"They use MegaLinter","text":"<p>Here is a non-exhaustive list of open-source projects that use Megalinter</p> <p>According to posted issues, there are many more private and self-hosted repos using MegaLinter but as we don't track them I can't provide a list :)</p> <p> </p>"},{"location":"articles/","title":"MegaLinter Articles Reference","text":""},{"location":"articles/#they-talk-about-megalinter","title":"They talk about MegaLinter","text":""},{"location":"articles/#english-articles","title":"English articles","text":"Article Author Integrating MegaLinter to Automate Linting Across Multiple Codebases. A Technical Description Thorsten Foltz MegaLinter Performance Tuning for Maximum Efficiency Wes Dean 10 MegaLinter Tips and Tricks Unlock its Full Potential Wes Dean 30 Seconds to Setup MegaLinter: Your Go-To Tool for Automated Code Quality Peng Cao Introducing MegaLinter: Streamlining Code Quality Checks Across Multiple Languages Cloud Tuned Infrastructure as Code GitHub Codespace Template Luke Murray 5 ways MegaLinter upped our DevSecOps game Wes Dean Achieve Code Consistency: MegaLinter Integration in Azure DevOps Don Koning on Microsoft Tech Community MegaLinter in Azure DevOps James Cook Maximize your code consistency with Megalinter Tor Ivar Asb\u00f8lmo on codewithme.cloud 8 Tools to Scan Node.js Applications for Security Vulnerability Chandan Kumar on GeekFlare.com Use the Workflows JSON schema in your IDE Google Cloud Level up your Unity Packages with CI/CD RunningMattress Writing documentation as a champ in engineering teams Gijs Reijn GitHub Actions: sharing your secrets with third-party actions Constantin Bosse and Stephen Hosom GitOps security topics you must address Wiebe de Roos Talk about the Kotlin plugins Kover, Ktlint and Detekt. Made for the AmsterdamJUG meetup. Simone de Gijt Linting - What is all the fluff about? Neil Shepard, University Of Sheffield How to apply security at the source using GitOps Edu Minguez How to linter basic things like trailing whitespaces and newlines Nicolai Antiferov Open-source linters landscape in 2021 C\u00e9dric Teyton Node.js Coding Standard Tools with MegaLinter on Gitlab CI Albion Bame Linting a Jekyll blog with MegaLinter Alec Johnson MegaLinter sells his soul and joins OX Security Nicolas Vuillamy Limit your technical debt and secure your code base using MegaLinter Nicolas Vuillamy"},{"location":"articles/#french-articles","title":"French articles","text":"Article Author MegaLinter St\u00e9phane Robert, 3DS OutScale MegaLinter: un linter pour les gouverner tous Guillaume Arnaud, WeScale MegaLinter, votre meilleur ami pour un code de qualit\u00e9 Thomas Sanson"},{"location":"articles/#japanese-articles","title":"Japanese articles","text":"Article Author Try using MegaLinter Takashi Minayaga"},{"location":"articles/#videos","title":"Videos","text":"<ul> <li>(Brazilian) MegaLinter: Como Automatizar a Qualidade do C\u00f3digo para Todas Plataformas, by Codando TV</li> </ul> <ul> <li>How to: Secrets scanning, by Hackitect's playground</li> </ul> <ul> <li>How to use MegaLinter with Jenkins, by Darin Pope / Cloudbees</li> </ul> <ul> <li>(FR) MegaLinter presentation at DevCon 20 / Programmez Magazine, by Nicolas Vuillamy</li> </ul> <ul> <li>Code quality - Ep01 - MegaLinter, one linter to rule them all, by Bertrand Thomas</li> </ul> <ul> <li>DevSecOps Webinar using MegaLinter, by 5.15 Technologies</li> </ul> <ul> <li>Ortelius Architecture Meeting, with a review of MegaLinter, by Steve Taylor from Ortelius</li> </ul> <ul> <li>(FR) Coding Tech - L'importance de la CI/CD dans le d\u00e9veloppement de logiciels, by Arsene Fougerouse from R2DevOps</li> </ul>"},{"location":"articles/#web-sites","title":"Web Sites","text":"<ul> <li>analysis-tools.dev</li> <li>awesome-linters</li> <li>schemastore.org</li> <li>abhith.net</li> </ul> <ul> <li>my-devops-lab.com</li> </ul>"},{"location":"articles/#linters","title":"Linters","text":"<ul> <li>checkstyle</li> <li>clj-kondo</li> <li>cljstyle</li> <li>cspell</li> <li>detekt</li> <li>djlint</li> <li>dotenv-linter</li> <li>editorconfig-checker</li> <li>eslint</li> <li>eslint-plugin-jsonc</li> <li>hadolint</li> <li>htmlhint</li> <li>jscpd</li> <li>kics</li> <li>ktlint</li> <li>lintr</li> <li>markdown-link-check</li> <li>npm-groovy-lint</li> <li>npm-package-json-lint</li> <li>pmd</li> <li>rst-lint</li> <li>rstcheck</li> <li>rubocop</li> <li>scalafix</li> <li>secretlint</li> </ul>"},{"location":"badge/","title":"MegaLinter Badges","text":""},{"location":"badge/#badge","title":"Badge","text":"<p>You can show MegaLinter status with a badge in your repository README</p> <p></p> <p>If your main branch is master , replace main by master in URLs</p>"},{"location":"badge/#markdown","title":"Markdown","text":"<ul> <li>Format</li> </ul> <pre><code>[![MegaLinter](https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/workflows/MegaLinter/badge.svg?branch=main)](https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/actions?query=workflow%3AMegaLinter+branch%3Amain)\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>[![MegaLinter](https://github.com/nvuillam/npm-groovy-lint/workflows/MegaLinter/badge.svg?branch=main)](https://github.com/nvuillam/npm-groovy-lint/actions?query=workflow%3AMegaLinter+branch%3Amain)\n</code></pre>"},{"location":"badge/#restructuredtext","title":"reStructuredText","text":"<ul> <li>Format</li> </ul> <pre><code>.. |MegaLinter yes| image:: https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/workflows/MegaLinter/badge.svg?branch=main\n   :target: https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/actions?query=workflow%3AMegaLinter+branch%3Amain\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>.. |MegaLinter yes| image:: https://github.com/nvuillam/npm-groovy-lint/workflows/MegaLinter/badge.svg?branch=main\n   :target: https://github.com/nvuillam/npm-groovy-lint/actions?query=workflow%3AMegaLinter+branch%3Amain\n</code></pre> <p>Note: IF you did not use <code>MegaLinter</code> as GitHub Action name, please read GitHub Actions Badges documentation</p>"},{"location":"config-activation/","title":"Configure activation and deactivation of linters within MegaLinter","text":""},{"location":"config-activation/#activation-and-deactivation","title":"Activation and deactivation","text":"<p>MegaLinter have all linters enabled by default, but allows to enable only some, or disable only some</p> <ul> <li>If <code>ENABLE</code> isn't set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default</li> <li>If <code>ENABLE_LINTERS</code> is set, only listed linters will be processed</li> <li>If <code>DISABLE</code> is set, the linters in the listed descriptors will be skipped</li> <li>If <code>DISABLE_LINTERS</code> is set, the listed linters will be skipped</li> <li>If <code>DISABLE_ERRORS_LINTERS</code> is set, the listed linters will be run, but if errors are found, they will be considered as non blocking</li> <li>If <code>ENABLE_ERRORS_LINTERS</code> is set, only the linters in this list will be considered as blocking.</li> </ul> <p>Examples:</p> <ul> <li>Run all javascript and groovy linters except STANDARD javascript linter. DevSkim errors will be non-blocking</li> </ul> <pre><code>ENABLE: JAVASCRIPT,GROOVY\nDISABLE_LINTERS: JAVASCRIPT_STANDARD\nDISABLE_ERRORS_LINTERS: REPOSITORY_DEVSKIM\n</code></pre> <ul> <li>Run all matching linters but only trivy is blocking</li> </ul> <pre><code>ENABLE_ERRORS_LINTERS: REPOSITORY_TRIVY\n</code></pre> <ul> <li>Run all linters except PHP linters (PHP_BUILTIN, PHP_PHPCS, PHP_PHPSTAN, PHP_PSALM)</li> </ul> <pre><code>DISABLE: PHP\n</code></pre> <ul> <li>Run all linters except PHP_PHPSTAN and PHP_PSALM linters</li> </ul> <pre><code>DISABLE_LINTERS:\n  - PHP_PHPSTAN\n  - PHP_PSALM\n</code></pre>"},{"location":"config-apply-fixes/","title":"Configure auto-fixing of issues by MegaLinter","text":""},{"location":"config-apply-fixes/#apply-fixes","title":"Apply fixes","text":"<p>Mega-linter is able to apply fixes provided by linters. To use this capability, you need 3 env variables defined at top level</p> <ul> <li>APPLY_FIXES: <code>all</code> to apply fixes of all linters, or a list of linter keys (ex: <code>JAVASCRIPT_ES</code>,<code>MARKDOWN_MARKDOWNLINT</code>)</li> </ul> <p>Only for GitHub Action Workflow file if you use it:</p> <ul> <li>APPLY_FIXES_EVENT: <code>all</code>, <code>push</code>, <code>pull_request</code>, <code>none</code> (use none in case of use of Updated sources reporter)</li> <li>APPLY_FIXES_MODE: <code>commit</code> to create a new commit and push it on the same branch, or <code>pull_request</code> to create a new PR targeting the branch.</li> </ul>"},{"location":"config-apply-fixes/#apply-fixes-issues","title":"Apply fixes issues","text":"<p>You may see github permission errors, or workflows not run on the new commit.</p> <p>To solve these issues, you can apply one of the following solutions.</p> <ul> <li>Method 1: The most secured<ul> <li>Create Fine Grained Personal Access Token, scoped only on your repository and with Contents: Read/Write and then copy the PAT value</li> <li>Define environment secret variable named PAT on your repository, and paste the PAT value</li> <li>Update your Github Actions Workflow to add the environment name</li> </ul> </li> </ul> <ul> <li>Method 2: Easier, but any contributor with write access can see your Personal Access Token, so use it only on private repositories.<ul> <li>Create Classic Personal Access Token, then copy the PAT value</li> <li>Define secret variable named PAT on your repository, and paste the PAT value</li> </ul> </li> </ul>"},{"location":"config-apply-fixes/#notes","title":"Notes","text":"<ul> <li>You can use Updated sources reporter if you don't want fixes to be automatically applied on git branch, but download them in a zipped file and manually extract them in your project</li> <li>If used, APPLY_FIXES_EVENT and APPLY_FIXES_MODE can not be defined in <code>.mega-linter.yml</code>config file, they must be set as environment variables</li> <li>If you use APPLY_FIXES, add the following line in your <code>.gitignore file</code></li> </ul> <pre><code>megalinter-reports/\n</code></pre>"},{"location":"config-cli-lint-mode/","title":"Override the way linters are called by MegaLinter","text":""},{"location":"config-cli-lint-mode/#cli-lint-mode","title":"CLI lint mode","text":"<p>Each linter is pre-configured to use a default lint mode, which are visible in the MegaLinter documentation (example). The possible values are:</p> <ul> <li><code>list_of_files</code>: The linter is called only once, and passed a list of all the files to be processed</li> <li><code>project</code>: The linter is called only once, from the root folder of the repository, and it scans for the files to process, as no file names are provided it</li> <li><code>file</code>: The linter is called once per file, which hurts performance</li> </ul> <p>You can override the CLI_LINT_MODE by using a configuration variable for each linter (see linters documentation).</p> <ul> <li>Linters that default to the <code>file</code> lint mode cannot be overridden to use the <code>list_of_files</code> lint mode</li> <li>Linters that default to the <code>project</code> lint mode cannot be overridden to use either the <code>list_of_files</code> or <code>file</code> lint modes.</li> </ul> <p>Allowing <code>file</code> or <code>list_of_files</code> to be overridden to <code>project</code> is mostly for workarounds. For example, some linters have a problem finding their config file when the current folder isn't the repository's root folder.</p> <p>Special considerations:</p> <ul> <li>Linters that are configured to use the <code>project</code> lint mode ignore variables like <code>FILTER_REGEX_INCLUDE</code> and <code>FILTER_REGEX_EXCLUDE</code>, as they are not passed a list of files to lint. For those linters, you must check their documentation to see if a linter can be configured to ignore specific files. For example, the Secretlint linter ignore files listed in <code>~/.secretlintignore</code> by default, or it can be configured to instead ignore files listed in <code>~/.gitignore</code> by setting <code>REPOSITORY_SECRETLINT_ARGUMENTS</code> to <code>--secretlintignore .gitignore.</code>.</li> </ul>"},{"location":"config-file/","title":"MegaLinter configuration file","text":""},{"location":"config-file/#mega-linteryml-file","title":".mega-linter.yml file","text":"<p>MegaLinter configuration variables are defined in a .mega-linter.yml file at the root of the repository or with environment variables. You can see an example config file in this repo: .mega-linter.yml</p> <p>Configuration is assisted with autocompletion and validation in most commonly used IDEs, thanks to JSON schema stored on schemastore.org</p> <ul> <li>VSCode: You need a VSCode extension like Red Hat YAML</li> <li>IDEA family: Auto-completion natively supported</li> </ul> <p>You can also define variables as environment variables. - In case a variable exists in both ENV and <code>.mega-linter.yml</code> file, priority is given to ENV variable.</p> <p></p>"},{"location":"config-filtering/","title":"Configure filtering of files analyzed by MegaLinter","text":""},{"location":"config-filtering/#filter-linted-files","title":"Filter linted files","text":"<p>If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters <code>FILTER_REGEX_INCLUDE</code> and <code>FILTER_REGEX_EXCLUDE</code> You can apply filters to a single linter by defining variable <code>&lt;LINTER_KEY&gt;_FILTER_REGEX_INCLUDE</code> and <code>&lt;LINTER_KEY&gt;_FILTER_REGEX_EXCLUDE</code></p> <p>Examples:</p> <ul> <li>Lint only src folder: <code>FILTER_REGEX_INCLUDE: (src/)</code></li> <li>Don't lint files inside test and example folders: <code>FILTER_REGEX_EXCLUDE: (test/|examples/)</code></li> <li>Don't lint javascript files inside test folder: <code>FILTER_REGEX_EXCLUDE: (test/.*\\.js)</code></li> </ul> <p>Warning: not applicable with linters using CLI lint mode <code>project</code> (see details)</p>"},{"location":"config-linters/","title":"Linter scoped variables","text":""},{"location":"config-linters/#linter-specific-variables","title":"Linter specific variables","text":"<p>See variables related to a single linter behavior in linters documentations</p>"},{"location":"config-postcommands/","title":"Configure custom commands to run after linters","text":""},{"location":"config-postcommands/#post-commands","title":"Post-commands","text":"<p>MegaLinter can run custom commands after running linters (for example, running additional tests)</p> <p>Example in <code>.mega-linter.yml</code> config file</p> <pre><code>POST_COMMANDS:\n  - command: npm run test\n    cwd: \"workspace\"   # Will be run at the root of the workspace (usually your repository root)\n    continue_if_failed: False  # Will stop the process if command is failed (return code &gt; 0)\n</code></pre>"},{"location":"config-precommands/","title":"Configure custom commands to run before linters","text":""},{"location":"config-precommands/#pre-commands","title":"Pre-commands","text":"<p>MegaLinter can run custom commands before running linters (for example, installing an plugin required by one of the linters you use)</p> <p>Example in <code>.mega-linter.yml</code> config file</p> <pre><code>PRE_COMMANDS:\n  - command: npm install eslint-plugin-whatever\n    cwd: root        # Will be run at the root of MegaLinter docker image\n    secured_env: true  # True by default, but if defined to false, no global variable will be hidden (for example if you need GITHUB_TOKEN)\n    run_before_linters: True # Will be run before the execution of the linters themselves, required for npm/pip commands that cannot be run in parallel\n  - command: echo \"pre-test command has been called\"\n    cwd: workspace   # Will be run at the root of the workspace (usually your repository root)\n    continue_if_failed: False  # Will stop the process if command is failed (return code &gt; 0)\n  - command: pip install flake8-cognitive-complexity\n    venv: flake8 # Will be run within flake8 python virtualenv. There is one virtualenv per python-based linter, with the same name\n  - command: export MY_OUTPUT_VAR=\"my output var\" &amp;&amp; export MY_OUTPUT_VAR2=\"my output var2\"\n    output_variables: [\"MY_OUTPUT_VAR\",\"MY_OUTPUT_VAR2\"] # Will collect the values of output variables and update MegaLinter own ENV context\n  - command: echo \"Some command called before loading MegaLinter plugins\"\n    cwd: workspace   # Will be run at the root of the workspace (usually your repository root)\n    continue_if_failed: False  # Will stop the process if command is failed (return code &gt; 0)\n    tag: before_plugins # Tag indicating that the command will be run before loading plugins\n  - command: echo \"Some command called after running MegaLinter linters\"\n    run_after_linters: True # Will be run after the execution of the linters themselves\n</code></pre> Property Description Default value command Command line to run Mandatory cwd Directory where to run the command (<code>workspace</code> or <code>root</code>) <code>workspace</code> run_before_linters If set to <code>true</code>, runs the command before the execution of the linters themselves, required for npm/pip commands that cannot be run in parallel <code>false</code> run_after_linters If set to <code>true</code>, runs the command after the execution of the linters themselves <code>false</code> secured_env Apply filtering of secured env variables before calling the command (default true)Be careful if you disable it ! <code>true</code> continue_if_failed If set to <code>false</code>, stop MegaLinter process in case of command failure <code>true</code> venv If set, runs the command into the related python venv output_variables ENV variables to get from output after running the commands, and store in MegaLinter ENV context, so they can be reused in next commands <code>[]</code> tag Tag defining at which commands entry point the command will be run   (available tags: <code>before_plugins</code>)"},{"location":"config-variables-security/","title":"Configure environment variables security with MegaLinter","text":""},{"location":"config-variables-security/#environment-variables-security","title":"Environment variables security","text":""},{"location":"config-variables-security/#secured-env-variables","title":"Secured env variables","text":"<p>MegaLinter runs on a docker image and calls the linters via command line to gather their results.</p> <p>If you run it from your CI/CD pipelines, the docker image may have access to your environment variables, that can contain secrets defined in CI/CD variables.</p> <p>As it can be complicated to trust the authors of all the open-source linters, MegaLinter removes variables from the environment used to call linters.</p> <p>Thanks to this feature, you only need to trust MegaLinter and its internal python dependencies, but there is no need to trust all the linters that are used !</p> <p>You can add secured variables to the default list using configuration property SECURED_ENV_VARIABLES in .mega-linter.yml or in an environment variable (priority is given to ENV variables above <code>.mega-linter.yml</code> property).</p> <p>Values can be:</p> <ul> <li>String (ex: <code>MY_SECRET_VAR</code>)</li> <li>Regular Expression (ex: <code>(MY.*VAR)</code>)</li> </ul> <p>Environment variables are secured for each command line called (linters, plugins, sarif formatter...) except for PRE_COMMANDS , ONLY if you define <code>secured_env: false</code> in the command.</p>"},{"location":"config-variables-security/#secured-configuration-examples","title":"Secured configuration examples","text":"<ul> <li>Example of adding extra secured variables <code>.mega-linter.yml</code>:</li> </ul> <pre><code>SECURED_ENV_VARIABLES:\n  - MY_SECRET_TOKEN\n  - ANOTHER_VAR_CONTAINING_SENSITIVE_DATA\n  - OX_API_KEY\n  - (MY.*VAR)  # Regex format\n</code></pre> <ul> <li>Example of adding extra secured variables in CI variables, so they can not be overridden in .mega-linter.yml:</li> </ul> <pre><code>SECURED_ENV_VARIABLES=MY_SECRET_TOKEN,ANOTHER_VAR_CONTAINING_SENSITIVE_DATA,OX_API_KEY\n</code></pre>"},{"location":"config-variables-security/#default-secured-variables","title":"Default secured variables","text":"<p>If you override SECURED_ENV_VARIABLES_DEFAULT, it replaces the default list, so it's better to only define SECURED_ENV_VARIABLES to add them to the default list !</p> <p>SECURED_ENV_VARIABLES_DEFAULT contains:</p> <ul> <li>GITHUB_TOKEN</li> <li>PAT</li> <li>SYSTEM_ACCESSTOKEN</li> <li>GIT_AUTHORIZATION_BEARER</li> <li>CI_JOB_TOKEN</li> <li>GITLAB_ACCESS_TOKEN_MEGALINTER</li> <li>GITLAB_CUSTOM_CERTIFICATE</li> <li>WEBHOOK_REPORTER_BEARER_TOKEN</li> <li>NODE_TOKEN</li> <li>NPM_TOKEN</li> <li>DOCKER_USERNAME</li> <li>DOCKER_PASSWORD</li> <li>CODECOV_TOKEN</li> <li>GCR_USERNAME</li> <li>GCR_PASSWORD</li> <li>SMTP_PASSWORD</li> <li>CI_SFDX_HARDIS_GITLAB_TOKEN</li> <li>(SFDX_CLIENT_ID_.*)</li> <li>(SFDX_CLIENT_KEY_.*)</li> </ul>"},{"location":"config-variables-security/#unhide-variables-for-linters","title":"Unhide variables for linters","text":"<p>You can configure exceptions for a specific linter by defining (linter-key)_UNSECURED_ENV_VARIABLES.</p> <p>Variable names in this list won't be hidden to the linter commands.</p> <pre><code>TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES:\n  - GITHUB_TOKEN # Can contain string only, not regex\n</code></pre>"},{"location":"config-variables/","title":"All Megalinter configuration common variables","text":""},{"location":"config-variables/#common-variables","title":"Common variables","text":"ENV VAR Default Value Notes ADDITIONAL_EXCLUDED_DIRECTORIES [] List of additional excluded directory basenames. they're excluded at any nested level. APPLY_FIXES <code>none</code> Activates formatting and autofix (more info) CLEAR_REPORT_FOLDER <code>false</code> Flag to clear files from report folder (usually megalinter-reports) before starting the linting process CONFIG_PROPERTIES_TO_APPEND [] List of configuration properties to append their values (instead of replacing them) in case of using EXTENDS. DEFAULT_BRANCH <code>HEAD</code> Deprecated: The name of the repository's default branch. DEFAULT_WORKSPACE <code>/tmp/lint</code> The location containing files to lint if you are running locally. DISABLE_ERRORS <code>false</code> Flag to have the linter complete with exit code 0 even if errors were detected. DISABLE List of disabled descriptors keys (more info) DISABLE_LINTERS List of disabled linters keys (more info) DISABLE_ERRORS_LINTERS List of enabled but not blocking linters keys. All linters not in this list will be not blocking (more info) ENABLE_ERRORS_LINTERS List of enabled and blocking linters keys (more info) ENABLE List of enabled descriptors keys (more info) ENABLE_LINTERS List of enabled linters keys (more info) EXCLUDED_DIRECTORIES [\u2026many values\u2026] List of excluded directory basenames. they're excluded at any nested level. EXTENDS Base <code>mega-linter.yml</code> config file(s) to extend local configuration from. Can be a single URL or a list of <code>.mega-linter.yml</code> config files URLs. Later files take precedence. FAIL_IF_MISSING_LINTER_IN_FLAVOR <code>false</code> If set to <code>true</code>, MegaLinter fails if a linter is missing in the selected flavor FAIL_IF_UPDATED_SOURCES <code>false</code> If set to <code>true</code>, MegaLinter fails if a linter or formatter has autofixed sources, even if there are no errors FILTER_REGEX_EXCLUDE <code>none</code> Regular expression defining which files will be excluded from linting (more info) .ex: <code>.*src/test.*</code>) FILTER_REGEX_INCLUDE <code>all</code> Regular expression defining which files will be processed by linters (more info) .ex: <code>.*src/.*</code>) FLAVOR_SUGGESTIONS <code>true</code> Provides suggestions about different MegaLinter flavors to use to improve runtime performances FORMATTERS_DISABLE_ERRORS <code>true</code> Formatter errors will be reported as errors (and not warnings) if this variable is set to <code>false</code> GIT_AUTHORIZATION_BEARER If set, calls git with <code>Authorization: Bearer</code>+value GITHUB_WORKSPACE Base directory for <code>REPORT_OUTPUT_FOLDER</code>, for user-defined linter rules location, for location of linted files if <code>DEFAULT_WORKSPACE</code> isn't set IGNORE_GENERATED_FILES <code>false</code> If set to <code>true</code>, MegaLinter will skip files containing <code>@generated</code> marker but without <code>@not-generated</code> marker (more info at https://generated.at) IGNORE_GITIGNORED_FILES <code>true</code> If set to <code>true</code>, MegaLinter will skip files ignored by git using <code>.gitignore</code> file JAVASCRIPT_DEFAULT_STYLE <code>standard</code> Javascript default style to check/apply. <code>standard</code>,<code>prettier</code> LINTER_RULES_PATH <code>.github/linters</code> Directory for all linter configuration rules. Can be a local folder or a remote URL (ex: <code>https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules</code> ) LOG_FILE <code>mega-linter.log</code> The file name for outputting logs. All output is sent to the log file regardless of <code>LOG_LEVEL</code>. Use <code>none</code> to not generate this file. LOG_LEVEL <code>INFO</code> How much output the script will generate to the console. One of <code>INFO</code>, <code>DEBUG</code>, <code>WARNING</code> or <code>ERROR</code>. MARKDOWN_DEFAULT_STYLE <code>markdownlint</code> Markdown default style to check/apply. <code>markdownlint</code>,<code>remark-lint</code> MEGALINTER_CONFIG <code>.mega-linter.yml</code> Name of MegaLinter configuration file. Can be defined remotely, in that case set this environment variable with the remote URL of <code>.mega-linter.yml</code> config file MEGALINTER_FILES_TO_LINT [] Comma-separated list of files to analyze. Using this variable will bypass other file listing methods PARALLEL <code>true</code> Process linters in parallel to improve overall MegaLinter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files PARALLEL_PROCESS_NUMBER All available cores are used by default. If there are too many, you need to decrease the number of used cores in order to enhance performances (example: <code>4</code>) PLUGINS [] List of plugin urls to install and run during MegaLinter run POST_COMMANDS [] Custom bash commands to run after linters PRE_COMMANDS [] Custom bash commands to run before linters PRINT_ALPACA <code>true</code> Enable printing alpaca image to console PRINT_ALL_FILES <code>false</code> Display all files analyzed by the linter instead of only the number PYTHON_DEFAULT_STYLE <code>black</code> Python default style to check/apply. <code>black</code>,<code>ruff</code> REPORT_OUTPUT_FOLDER <code>${GITHUB_WORKSPACE}/megalinter-reports</code> Directory for generating report files. Set to <code>none</code> to not generate reports SECURED_ENV_VARIABLES [] Additional list of secured environment variables to hide when calling linters. SECURED_ENV_VARIABLES_DEFAULT MegaLinter &amp; CI platforms sensitive variables List of secured environment variables to hide when calling linters. Default list. This is not recommended to override this variable, use SECURED_ENV_VARIABLES SHOW_ELAPSED_TIME <code>false</code> Displays elapsed time in reports SHOW_SKIPPED_LINTERS <code>true</code> Displays all disabled linters mega-linter could have run SKIP_CLI_LINT_MODES [] Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: <code>file,project</code>). Available values: <code>file</code>,<code>cli_lint_mode</code>,<code>project</code>. SKIP_LINTER_OUTPUT_SANITIZATION <code>false</code> By default, MegaLinter sanitizes the output of every external command using Gitleaks public rules.If you are on a private and secured repo, you can improve performances by setting this variable to <code>true</code>, but it will mean that if a linter output contains a secret, it will be visible in log files TYPESCRIPT_DEFAULT_STYLE <code>standard</code> Typescript default style to check/apply. <code>standard</code>,<code>prettier</code> VALIDATE_ALL_CODEBASE <code>true</code> Will parse the entire repository and find all files to validate across all types. NOTE: When set to <code>false</code>, only new or edited files will be parsed for validation."},{"location":"configuration/","title":"MegaLinter configuration Guide","text":""},{"location":"configuration/#configuration","title":"Configuration","text":"<p>MegaLinter configuration variables are defined in a .mega-linter.yml file at the root of the repository or with environment variables. You can see an example config file in this repo: .mega-linter.yml</p> <p>Configuration is assisted with autocompletion and validation in most commonly used IDEs, thanks to JSON schema stored on schemastore.org</p> <ul> <li>VSCode: You need a VSCode extension like Red Hat YAML</li> <li>IDEA family: Auto-completion natively supported</li> </ul> <p></p>"},{"location":"configuration/#common-variables","title":"Common variables","text":"ENV VAR Default Value Notes ADDITIONAL_EXCLUDED_DIRECTORIES [] List of additional excluded directory basenames. they're excluded at any nested level. APPLY_FIXES <code>none</code> Activates formatting and autofix (more info) CLEAR_REPORT_FOLDER <code>false</code> Flag to clear files from report folder (usually megalinter-reports) before starting the linting process DEFAULT_BRANCH <code>HEAD</code> Deprecated: The name of the repository's default branch. DEFAULT_WORKSPACE <code>/tmp/lint</code> The location containing files to lint if you are running locally. DISABLE_ERRORS <code>false</code> Flag to have the linter complete with exit code 0 even if errors were detected. DISABLE List of disabled descriptors keys (more info) DISABLE_LINTERS List of disabled linters keys (more info) DISABLE_ERRORS_LINTERS List of enabled but not blocking linters keys (more info) ENABLE List of enabled descriptors keys (more info) ENABLE_LINTERS List of enabled linters keys (more info) EXCLUDED_DIRECTORIES [\u2026many values\u2026] List of excluded directory basenames. they're excluded at any nested level. EXTENDS Base <code>mega-linter.yml</code> config file(s) to extend local configuration from. Can be a single URL or a list of <code>.mega-linter.yml</code> config files URLs. Later files take precedence. FAIL_IF_MISSING_LINTER_IN_FLAVOR <code>false</code> If set to <code>true</code>, MegaLinter fails if a linter is missing in the selected flavor FAIL_IF_UPDATED_SOURCES <code>false</code> If set to <code>true</code>, MegaLinter fails if a linter or formatter has autofixed sources, even if there are no errors FILTER_REGEX_EXCLUDE <code>none</code> Regular expression defining which files will be excluded from linting (more info) .ex: <code>.*src/test.*</code>) FILTER_REGEX_INCLUDE <code>all</code> Regular expression defining which files will be processed by linters (more info) .ex: <code>.*src/.*</code>) FLAVOR_SUGGESTIONS <code>true</code> Provides suggestions about different MegaLinter flavors to use to improve runtime performances FORMATTERS_DISABLE_ERRORS <code>true</code> Formatter errors will be reported as errors (and not warnings) if this variable is set to <code>false</code> GIT_AUTHORIZATION_BEARER If set, calls git with <code>Authorization: Bearer</code>+value GITHUB_WORKSPACE Base directory for <code>REPORT_OUTPUT_FOLDER</code>, for user-defined linter rules location, for location of linted files if <code>DEFAULT_WORKSPACE</code> isn't set IGNORE_GENERATED_FILES <code>false</code> If set to <code>true</code>, MegaLinter will skip files containing <code>@generated</code> marker but without <code>@not-generated</code> marker (more info at https://generated.at) IGNORE_GITIGNORED_FILES <code>true</code> If set to <code>true</code>, MegaLinter will skip files ignored by git using <code>.gitignore</code> file JAVASCRIPT_DEFAULT_STYLE <code>standard</code> Javascript default style to check/apply. <code>standard</code>,<code>prettier</code> LINTER_RULES_PATH <code>.github/linters</code> Directory for all linter configuration rules. Can be a local folder or a remote URL (ex: <code>https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules</code> ) LOG_FILE <code>mega-linter.log</code> The file name for outputting logs. All output is sent to the log file regardless of <code>LOG_LEVEL</code>. Use <code>none</code> to not generate this file. LOG_LEVEL <code>INFO</code> How much output the script will generate to the console. One of <code>INFO</code>, <code>DEBUG</code>, <code>WARNING</code> or <code>ERROR</code>. MARKDOWN_DEFAULT_STYLE <code>markdownlint</code> Markdown default style to check/apply. <code>markdownlint</code>,<code>remark-lint</code> MEGALINTER_CONFIG <code>.mega-linter.yml</code> Name of MegaLinter configuration file. Can be defined remotely, in that case set this environment variable with the remote URL of <code>.mega-linter.yml</code> config file MEGALINTER_FILES_TO_LINT [] Comma-separated list of files to analyze. Using this variable will bypass other file listing methods PARALLEL <code>true</code> Process linters in parallel to improve overall MegaLinter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files PLUGINS [] List of plugin urls to install and run during MegaLinter run POST_COMMANDS [] Custom bash commands to run after linters PRE_COMMANDS [] Custom bash commands to run before linters PRINT_ALPACA <code>true</code> Enable printing alpaca image to console PRINT_ALL_FILES <code>false</code> Display all files analyzed by the linter instead of only the number REPORT_OUTPUT_FOLDER <code>${GITHUB_WORKSPACE}/megalinter-reports</code> Directory for generating report files. Set to <code>none</code> to not generate reports SECURED_ENV_VARIABLES [] Additional list of secured environment variables to hide when calling linters. SECURED_ENV_VARIABLES_DEFAULT MegaLinter &amp; CI platforms sensitive variables List of secured environment variables to hide when calling linters. Default list. This is not recommended to override this variable, use SECURED_ENV_VARIABLES SHOW_ELAPSED_TIME <code>false</code> Displays elapsed time in reports SHOW_SKIPPED_LINTERS <code>true</code> Displays all disabled linters mega-linter could have run SKIP_CLI_LINT_MODES [] Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: <code>file,project</code>). Available values: <code>file</code>,<code>cli_lint_mode</code>,<code>project</code>. TYPESCRIPT_DEFAULT_STYLE <code>standard</code> Typescript default style to check/apply. <code>standard</code>,<code>prettier</code> VALIDATE_ALL_CODEBASE <code>true</code> Will parse the entire repository and find all files to validate across all types. NOTE: When set to <code>false</code>, only new or edited files will be parsed for validation."},{"location":"configuration/#activation-and-deactivation","title":"Activation and deactivation","text":"<p>MegaLinter have all linters enabled by default, but allows to enable only some, or disable only some</p> <ul> <li>If <code>ENABLE</code> isn't set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default</li> <li>If <code>ENABLE_LINTERS</code> is set, only listed linters will be processed</li> <li>If <code>DISABLE</code> is set, the linters in the listed descriptors will be skipped</li> <li>If <code>DISABLE_LINTERS</code> is set, the listed linters will be skipped</li> <li>If <code>DISABLE_ERRORS_LINTERS</code> is set, the listed linters will be run, but if errors are found, they will be considered as non blocking</li> </ul> <p>Examples:</p> <ul> <li>Run all javascript and groovy linters except STANDARD javascript linter. DevSkim errors will be non-blocking</li> </ul> <pre><code>ENABLE: JAVASCRIPT,GROOVY\nDISABLE_LINTERS: JAVASCRIPT_STANDARD\nDISABLE_ERRORS_LINTERS: REPOSITORY_DEVSKIM\n</code></pre> <ul> <li>Run all linters except PHP linters (PHP_BUILTIN, PHP_PHPCS, PHP_PHPSTAN, PHP_PSALM)</li> </ul> <pre><code>DISABLE: PHP\n</code></pre> <ul> <li>Run all linters except PHP_PHPSTAN and PHP_PSALM linters</li> </ul> <pre><code>DISABLE_LINTERS:\n  - PHP_PHPSTAN\n  - PHP_PSALM\n</code></pre>"},{"location":"configuration/#filter-linted-files","title":"Filter linted files","text":"<p>If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters <code>FILTER_REGEX_INCLUDE</code> and <code>FILTER_REGEX_EXCLUDE</code> You can apply filters to a single linter by defining variable <code>&lt;LINTER_KEY&gt;_FILTER_REGEX_INCLUDE</code> and <code>&lt;LINTER_KEY&gt;_FILTER_REGEX_EXCLUDE</code></p> <p>Examples:</p> <ul> <li>Lint only src folder: <code>FILTER_REGEX_INCLUDE: (src/)</code></li> <li>Don't lint files inside test and example folders: <code>FILTER_REGEX_EXCLUDE: (test/|examples/)</code></li> <li>Don't lint javascript files inside test folder: <code>FILTER_REGEX_EXCLUDE: (test/.*\\.js)</code></li> </ul> <p>Warning: not applicable with linters using CLI lint mode <code>project</code> (see details)</p>"},{"location":"configuration/#apply-fixes","title":"Apply fixes","text":"<p>Mega-linter is able to apply fixes provided by linters. To use this capability, you need 3 env variables defined at top level</p> <ul> <li>APPLY_FIXES: <code>all</code> to apply fixes of all linters, or a list of linter keys (ex: <code>JAVASCRIPT_ES</code>,<code>MARKDOWN_MARKDOWNLINT</code>)</li> </ul> <p>Only for GitHub Action Workflow file if you use it:</p> <ul> <li>APPLY_FIXES_EVENT: <code>all</code>, <code>push</code>, <code>pull_request</code>, <code>none</code> (use none in case of use of Updated sources reporter)</li> <li>APPLY_FIXES_MODE: <code>commit</code> to create a new commit and push it on the same branch, or <code>pull_request</code> to create a new PR targeting the branch.</li> </ul>"},{"location":"configuration/#apply-fixes-issues","title":"Apply fixes issues","text":"<p>You may see github permission errors, or workflows not run on the new commit.</p> <p>To solve these issues, you can apply one of the following solutions.</p> <ul> <li>Method 1: The most secured<ul> <li>Create Fine Grained Personal Access Token, scoped only on your repository and then copy the PAT value</li> <li>Define environment secret variable named PAT on your repository, and paste the PAT value</li> <li>Update your Github Actions Workflow to add the environment name</li> </ul> </li> </ul> <ul> <li>Method 2: Easier, but any contributor with write access can see your Personal Access Token<ul> <li>Create Classic Personal Access Token, then copy the PAT value</li> <li>Define secret variable named PAT on your repository, and paste the PAT value</li> </ul> </li> </ul>"},{"location":"configuration/#notes","title":"Notes","text":"<ul> <li>You can use Updated sources reporter if you don't want fixes to be automatically applied on git branch, but download them in a zipped file and manually extract them in your project</li> <li>If used, APPLY_FIXES_EVENT and APPLY_FIXES_MODE can not be defined in <code>.mega-linter.yml</code>config file, they must be set as environment variables</li> <li>If you use APPLY_FIXES, add the following line in your <code>.gitignore file</code></li> </ul> <pre><code>megalinter-reports/\n</code></pre>"},{"location":"configuration/#linter-specific-variables","title":"Linter specific variables","text":"<p>See variables related to a single linter behavior in linters documentations</p>"},{"location":"configuration/#pre-commands","title":"Pre-commands","text":"<p>MegaLinter can run custom commands before running linters (for example, installing an plugin required by one of the linters you use)</p> <p>Example in <code>.mega-linter.yml</code> config file</p> <pre><code>PRE_COMMANDS:\n  - command: npm install eslint-plugin-whatever\n    cwd: \"root\"        # Will be run at the root of MegaLinter docker image\n  - command: echo \"pre-test command has been called\"\n    cwd: \"workspace\"   # Will be run at the root of the workspace (usually your repository root)\n  - command: pip install flake8-cognitive-complexity\n    venv: flake8 # Will be run within flake8 python virtualenv. There is one virtualenv per python-based linter, with the same name\n</code></pre>"},{"location":"configuration/#post-commands","title":"Post-commands","text":"<p>MegaLinter can run custom commands after running linters (for example, running additional tests)</p> <p>Example in <code>.mega-linter.yml</code> config file</p> <pre><code>POST_COMMANDS:\n  - command: npm run test\n    cwd: \"workspace\"   # Will be run at the root of the workspace (usually your repository root)\n</code></pre>"},{"location":"configuration/#environment-variables-security","title":"Environment variables security","text":"<p>MegaLinter runs on a docker image and calls the linters via command line to gather their results.</p> <p>If you run it from your CI/CD pipelines, the docker image may have access to your environment variables, that can contain secrets defined in CI/CD variables.</p> <p>As it can be complicated to trust the authors of all the open-source linters, MegaLinter removes variables from the environment used to call linters.</p> <p>Thanks to this feature, you only need to trust MegaLinter and its internal python dependencies, but there is no need to trust all the linters that are used !</p> <p>You can add secured variables to the default list using configuration property SECURED_ENV_VARIABLES in .mega-linter.yml or in an environment variable (priority is given to ENV variables above <code>.mega-linter.yml</code> property).</p> <p>SECURED_ENV_VARIABLES_DEFAULT contains:</p> <ul> <li>GITHUB_TOKEN</li> <li>PAT</li> <li>SYSTEM_ACCESSTOKEN</li> <li>GIT_AUTHORIZATION_BEARER</li> <li>CI_JOB_TOKEN</li> <li>GITLAB_ACCESS_TOKEN_MEGALINTER</li> <li>GITLAB_CUSTOM_CERTIFICATE</li> <li>WEBHOOK_REPORTER_BEARER_TOKEN</li> <li>NPM_TOKEN</li> <li>DOCKER_USERNAME</li> <li>DOCKER_PASSWORD</li> <li>CODECOV_TOKEN</li> <li>GCR_USERNAME</li> <li>GCR_PASSWORD</li> <li>SMTP_PASSWORD</li> </ul> <p>Example of adding extra secured variables <code>.mega-linter.yml</code>:</p> <pre><code>SECURED_ENV_VARIABLES:\n  - MY_SECRET_TOKEN\n  - ANOTHER_VAR_CONTAINING_SENSITIVE_DATA\n  - OX_API_KEY\n</code></pre> <p>Example of adding extra secured variables in CI variables, so they can not be overridden in .mega-linter.yml:</p> <pre><code>SECURED_ENV_VARIABLES=MY_SECRET_TOKEN,ANOTHER_VAR_CONTAINING_SENSITIVE_DATA,OX_API_KEY\n</code></pre> <p>Notes:</p> <ul> <li>If you override SECURED_ENV_VARIABLES_DEFAULT, it replaces the default list, so it's better to only define SECURED_ENV_VARIABLES to add them to the default list !</li> <li>Environment variables are secured for each command line called (linters, plugins, sarif formatter...) except for PRE_COMMANDS , as you might need secured values within their code.</li> </ul>"},{"location":"configuration/#cli-lint-mode","title":"CLI lint mode","text":"<p>Each linter has a lint mode by default, visible in its MegaLinter documentation (example):</p> <ul> <li><code>list_of_files</code>: All files are sent in single call to the linter</li> <li><code>project</code>: The linter is called from the root of the project, without specifying any file name</li> <li><code>file</code>: The linter is called once by file (so the performances may not be very good)</li> </ul> <p>You can override the CLI_LINT_MODE by using configuration variable for each linter (see linters documentation)</p> <ul> <li>Linters with <code>file</code> default lint mode can not be overridden to <code>list_of_files</code></li> <li>Linters with <code>project</code> default lint mode can not be overridden to <code>list_of_files</code> or <code>file</code></li> </ul> <p>Allowing <code>file</code> or <code>list_of_files</code> to be overridden to <code>project</code> is mostly for workarounds, for example with linters that have a problem to find their config file when the current folder isn't the repo root.</p> <p>Special considerations:</p> <ul> <li>As list of files isn't sent to the linter command, linters using <code>project</code> lint mode don't take in account some variables like FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE. For those linters, you must check their documentation to define ignore configuration as it's awaited by the linter (for example with a <code>.secretlintignore</code> file for secretlint)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p> Hi there! We're thrilled that you'd like to contribute to this project. Your help is essential for keeping it great.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#1-create-an-issue","title":"1. Create an issue","text":"<p>Report problems or suggest improvements by creating an issue.</p>"},{"location":"contributing/#2-fork-the-project","title":"2. Fork the project","text":"<p>Fork the repository to your GitHub account.</p>"},{"location":"contributing/#3-make-changes","title":"3. Make changes","text":"<p>Clone your fork locally and make the necessary changes:</p> <pre><code>git clone git@github.com:YOURNAMESPACE/megalinter.git\n</code></pre>"},{"location":"contributing/#4-test-your-changes","title":"4. Test your changes","text":""},{"location":"contributing/#41-visual-studio-code-dev-containers","title":"4.1 Visual Studio Code Dev Containers","text":"<p>The Visual Studio Code Dev Containers extension lets you use a container as a full-featured development environment:</p> <ol> <li>Fork the <code>megalinter</code> repository</li> <li>Open your fork in VS Code</li> <li>Create a new branch: <code>git checkout -b my-feature-branch</code></li> <li>Make your changes and commit: <code>git add .</code> and <code>git commit -m \"chore: description of changes\"</code></li> <li>Run tests</li> <li>Push your changes: <code>git push origin my-feature-branch</code></li> <li>Create a pull request on GitHub</li> <li>Wait for a review</li> </ol>"},{"location":"contributing/#42-desktop","title":"4.2 Desktop","text":"<p>Install make, Python3.11, venv, docker and nodejs.</p> <p>Run <code>make</code> for Makefile help. Initialize virtualenv and install dependencies with <code>make reinitialization</code> or <code>make bootstrap</code>. Test your changes with <code>make tests</code> or <code>make tests-fast</code>.</p> <p>You can lint with <code>make megalinter</code> (Incoming)</p> <p>If you need to run <code>build.sh</code> commands manually (instead of <code>make megalinter-build</code>), you need to run <code>source .venv/bin/activate</code> (or <code>source .venv/Scripts/activate</code> on Windows) first.</p>"},{"location":"contributing/#5-submit-a-pull-request","title":"5. Submit a pull request","text":"<p>Create a pull request and refer to the issue number using #123, where 123 is the issue number.</p>"},{"location":"contributing/#6-wait","title":"6. Wait","text":"<p>Your pull request will be reviewed, and you'll receive feedback. Thanks for contributing!</p> <p>Consider sponsoring the maintainer via GitHub.</p>"},{"location":"contributing/#with-write-access","title":"With write access","text":"<ol> <li>Clone the repository (only if you have write access)</li> <li>Create a new branch: <code>git checkout -b my-branch-name</code></li> <li>Make your change</li> <li>Update CHANGELOG.md (the root one, not the one in /docs)</li> <li>Run <code>make megalinter-build</code> or <code>bash build.sh</code> to regenerate dockerfile from updated sources (run <code>make megalinter-build --doc</code> or <code>bash build.sh --doc</code> if you want to also regenerate documentation)</li> <li>Push and submit a pull request</li> <li>Pat yourself on the back and wait for your pull request to be reviewed and merged.</li> </ol> <p>Maintainers with write access can also comment on pull requests with a command to run the build script on the PR, for example:</p> <pre><code>/build\n</code></pre> <p>Available commands can be listed with the help command by posting the following comment:</p> <pre><code>/help\n</code></pre> <p>Which returns:</p> Command Description /build Updates the Dockerfile, documentation, and other files from the yml descriptors /build [ref=\u2026] Same as /build, but executes workflow in any branch using the ref named argument. The reference can be a branch, tag, or a commit SHA. This can be useful to test workflows in PR branches before merging. /help Returns this help message"},{"location":"contributing/#without-write-access","title":"Without write access","text":"<ol> <li>Fork and clone the repository</li> <li>Create a new branch: <code>git checkout -b my-branch-name</code></li> <li>Make your change</li> <li>Update CHANGELOG.md (the root one, not the one in /docs)</li> <li>Run <code>make megalinter-build</code> or <code>bash build.sh</code> to regenerate dockerfile from updated sources (run <code>make megalinter-build --doc</code> or <code>bash build.sh --doc</code> if you want to also regenerate documentation)</li> <li>Push to your fork and submit a pull request</li> <li>Pat your self on the back and wait for your pull request to be reviewed and merged.</li> </ol> <p>Here are a few things you can do that will increase the likelihood of your pull request being accepted:</p> <ul> <li>Keep your change as focused as possible. If there are multiple changes you would like to make that aren't dependent upon each other, consider submitting them as separate pull requests.</li> <li>Write good commit messages.</li> <li>Update CHANGELOG.md to briefly describe your changes</li> </ul> <p>Draft pull requests are also welcome to get feedback early on, or if there is something blocking you.</p> <ul> <li>Create a branch with a name that identifies the user and nature of the changes (similar to <code>user/branch-purpose</code>)</li> <li>Open a pull request</li> </ul>"},{"location":"contributing/#update-dockerfile-base-image","title":"Update Dockerfile base image","text":"<ol> <li><code>/Dockerfile</code> file has to be updated</li> <li>Run <code>make megalinter-build</code> or <code>bash build.sh</code>, and it will automatically propagate to all the other Dockerfiles</li> </ol>"},{"location":"contributing/#improve-documentation","title":"Improve documentation","text":"<p>Apart from the descriptors, it will usually involve modifying files such as .automation/build.py</p> <p>In order to be able to run locally a server that serves all the documentation and make the testing as real as possible you should setup a virtual environment.</p> <p>Commands to execute (only one time):</p> <pre><code>pip install pipx\npipx install hatch\nhatch shell\n</code></pre> <p>Commands to run every time you want to build the docs and run the server:</p> <pre><code>hatch run build:serve\n</code></pre> <p>By default it listens on <code>http://127.0.0.1:8000/</code>.</p> <p>Every time a change is made to a <code>.md</code> file it will automatically update if the server is up.</p> <p>Once you think everything is correct run <code>make megalinter-build --doc</code> or  <code>bash build.sh --doc</code> and it will generate all the rest!</p>"},{"location":"contributing/#add-a-new-linter","title":"Add a new linter","text":"<p>Each linter must:</p> <ul> <li>Be defined in a descriptor file. Few properties are required (see json schema documentation), but please think to input doc URLs and <code>ide</code> section for documentation</li> <li>Have two test files in <code>.automation/test</code>: one for success and one for failure</li> </ul> <p>Then run <code>make megalinter-build</code> or <code>bash build.sh</code> and it will generate all the rest!</p> <ul> <li>Documentation (markdown)</li> <li>Dockerfile (main and flavors)</li> <li>Test classes</li> <li>Configuration JSON schema</li> <li>Online documentation menus</li> </ul> <p></p>"},{"location":"contributing/#execute-the-tests-locally-visual-studio-code","title":"Execute the tests locally (Visual Studio Code)","text":"<ol> <li>Install Test Explorer UI extension</li> <li>Install Python Test Explorer for Visual Studio Code extension</li> <li>Execute or debug tests via the side menu</li> </ol>"},{"location":"contributing/#execute-linter-tests-inside-the-container","title":"Execute linter tests inside the container","text":"<p>If you are creating a linter or making changes to a linter, you may want to run the tests to check that none of them fail.</p> <p>When running them, you may encounter several problems:</p> <ul> <li>It's not installed on the machine locally and you don't want to install it.</li> <li>The OS doesn't allow the installation of the linter because it's not cross-platform.</li> <li>The behavior between running it on the local machine (host) and the container is different.</li> </ul> <p>For those cases, it's important to have the possibility to run the tests inside the container. To do so:</p> <ol> <li>Run <code>make megalinter-build</code> or <code>bash build.sh</code> to update the Dockerfile files of each linter.</li> <li>Execute the following commands in a *.sh script. Example:</li> </ol> <pre><code>LINTER=\"spell_misspell\"\ndocker buildx build -f linters/$LINTER/Dockerfile . --tag $LINTER\ndocker run -e TEST_CASE_RUN=true -e OUTPUT_DETAIL=detailed -e TEST_KEYWORDS=\"${LINTER}\" -e MEGALINTER_VOLUME_ROOT=\".\" -v \"/var/run/docker.sock:/var/run/docker.sock:rw\" -v $(pwd):/tmp/lint $LINTER\n</code></pre> <p>In the above example, it builds the misspell linter image and then runs its tests. To do the same for another linter you would have to:</p> <ol> <li>Change the path to the Dockerfile to the appropriate Dockerfile</li> <li>Change the tag in the 2 places (docker buildx build and docker run)</li> <li>Change the value of TEST_KEYWORDS_TO_USE which is the one that's responsible for finding the tests of the particular linter</li> </ol>"},{"location":"contributing/#cictcd","title":"CI/CT/CD","text":"<p>The MegaLinter has CI/CT/CD configured utilizing GitHub Actions.</p> <ul> <li>When a branch is created and code is pushed, a GitHub Action is triggered for building the new Docker container with the new codebase<ul> <li>To test your updates during your development, you may have to create a draft Pull Request to trigger CI on the main repo</li> <li>During development, if all you updated is python code, you can write <code>quick build</code> in the commit message body to benefit from a quicker build (about 15 minutes): only python files are copied over oxsecurity/megalinter:test-YOURUSERNAME-YOURBRANCH or oxsecurity/megalinter:latest if a previous full run has not been performed yet</li> <li>You can filter the performed tests by writing <code>TEST_KEYWORDS=my keywords</code> in the commit message body. Example: <code>TEST_KEYWORDS=kubernetes_kubeval_test</code></li> <li>The last commit before the validation of a Pull Request must be a full build with all tests (about 45 minutes)</li> </ul> </li> <li>The Docker container is then ran against the test cases to validate all code sanity<ul> <li><code>.automation/test</code> contains all test cases for each language that should be validated</li> </ul> </li> <li>These GitHub Actions utilize the Checks API and Protected Branches to help follow the SDLC</li> <li>When the Pull Request is merged to main, the MegaLinter Docker container is then updated and deployed with the new codebase<ul> <li>Note: The branch's Docker container is also removed from DockerHub to cleanup after itself</li> </ul> </li> </ul>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>If you are the current maintainer of this action:</p> <ol> <li>If a major version number change: Update <code>README.md</code> and the wiki to reflect new version number in the example workflow file sections</li> <li>Draft Releases are created automatically. They just need to be checked over for accuracy before making it official.</li> <li>Ensure you check the box for publishing to the marketplace</li> <li>A GitHub Action will Publish the Docker image to GitHub Package Registry once a Release is created</li> <li>A GitHub Action will Publish the Docker image to Docker Hub once a Release is created</li> <li>Look for approval from CODEOWNERS</li> </ol>"},{"location":"contributing/#resources","title":"Resources","text":"<ul> <li>How to Contribute to Open Source</li> <li>Using Pull Requests</li> <li>GitHub Help</li> </ul>"},{"location":"descriptor-schema/","title":"Descriptor schema","text":""},{"location":"descriptor-schema/#megalinter-descriptor","title":"MegaLinter descriptor","text":"<p>Descriptor definition for mega-linter</p> <p>Properties</p> <ul> <li>descriptor_id      - Descriptor unique identifier      - Uppercase unique identifier for the language, tooling format or identifier      - Type: <code>string</code>      - Example values:           1. \"PYTHON\"          2. \"XML\"          3. \"OPENAPI\"</li> </ul> <ul> <li>descriptor_type      - Descriptor type      - Descriptor type: language, format or tooling format      - Type: <code>string</code>      - Example values:           1. \"language\"          2. \"format\"          3. \"tooling_format\"      - The value is restricted to the following:           1. \"language\"          2. \"format\"          3. \"tooling_format\"</li> </ul> <ul> <li>file_extensions      - Allowed file extensions      - File extension filters. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all files. Can be overridden at linter level      - Type: <code>array</code>      - Example values:           1. <code>.py</code>          2. <code>- Default:</code>          - Items          - Type: <code>string</code></li> <li>file_names_regex      - File name regex filters      - Regular expression list for filtering files by their base names using regex full match. Empty list includes all files. Can be overridden at linter level      - Type: <code>array</code>      - Example values:           1. <code>Dockerfile(-.+)?</code>          2. <code>Jenkinsfile</code>      - Default: <code>`          - **_Items_**          - Type:</code>string`</li> </ul> <ul> <li>file_contains_regex      - File content regex filters      - Regular expression list for filtering files by their content      - Type: <code>array</code>      - Example values:           1. <code>AWSTemplateFormatVersion</code>          2. <code>(AWS|Alexa|Custom)::</code>      - Default: <code>`          - **_Items_**          - Type:</code>string`</li> </ul> <ul> <li>files_sub_directory      - Files sub-directory      - Set when a linter only lints a sub-directory      - Type: <code>string</code>      - Example values:           1. <code>ansible</code>          2. <code>kubernetes</code></li> </ul> <ul> <li>file_names_not_ends_with      - Filter on end of file name      - List of strings to filter the files according to their end of file name      - Type: <code>array</code>      - Example values:           1. <code>vault.yml</code>          2. <code>galaxy.xml</code>      - Default: <code>`          - **_Items_**          - Type:</code>string`</li> </ul> <ul> <li>test_folder      - Test folder in .automation/      - Test folder containing _good and bad files. Default: lowercase(descriptor_id)_      - Type: <code>string</code>      - Example values:           1. <code>bash_shfmt</code>          2. <code>terraform_terrascan</code></li> </ul> <ul> <li>linters <code>required</code>      - List of linters       - List of linter definitions associated to the descriptor      - Type: <code>array</code>          - Items          - Linter definition          - Parameters defining behaviour and installation of a linter          - Type: <code>object</code>          - Properties              - linter_name <code>required</code>                  - Linter name                  - Name of the linter (same as cli command if possible)                  - Type: <code>string</code>                  - Example values:                       1. \"eslint\"              - name                  - Linter configuration key                  - When several linters in a descriptor, set a different name that will be used for configuration                  - Type: <code>string</code>                  - Example values:                       1. \"JAVASCRIPT_ES\"              - linter_url <code>required</code>                  - Linter URL                  - URL of the linter home page                  - Type: <code>string</code>                  - Example values:                       1. \"https://eslint.org\"              - linter_banner_image_url                  - Linter banner image URL                  - URL of an image used to build header of linter Markdown documentation                  - Type: <code>string</code>                  - Example values:                       1. \"https://github.com/stylelint/stylelint/raw/master/identity/stylelint-icon-and-text-white.png\"              - linter_image_url                  - Linter image URL                  - URL of an image used in linter Markdown documentation                  - Type: <code>string</code>                  - Example values:                       1. \"https://raku.org/camelia-logo.png\"              - config_file_name                  - Default file name for the linter configuration file                  - An explanation about the purpose of this instance.                  - Type: <code>string</code>                  - Example values:                       1. \".eslintrc.yml\"                      2. \".markdown-lint.yml\"                      3. \".python-black\"              - cli_config_extra_args                  - Additional CLI arguments when config file is used                  - When a configuration file is used with the linter CLI, send these additional arguments                  - Type: <code>array</code>                  - Example values:                       1. <code>--no-eslintrc</code>                      2. <code>--no-ignore</code>                  - Default: <code>`                      - **_Items_**                      - Type:</code>string<code>- &lt;b id=\"/properties/linters/items/properties/examples\"&gt;examples&lt;/b&gt;</code>required<code>- Linter CLI commands examples                  - _Please add an example with and without configuration file in the command. They will appear in documentation_                  - Type:</code>array<code>- Example values:                       1.</code>golangci-lint run myfile.go,golangci-lint run -c .golangci.yml myfile.go<code>2.</code>eslint myfile.js,eslint -c .eslintrc.yml --no-eslintrc --no-ignore myfile.js<code>- **_Items_**                      - Type:</code>string<code>- &lt;b id=\"/properties/linters/items/properties/install\"&gt;install&lt;/b&gt;</code>required<code>- Installation requirements                  - _List of apk, dockerfile instructions, npm/pip/gem packages required to install the linter_                  - Type:</code>object<code>- **_Properties_**                      - &lt;b id=\"/properties/linters/items/properties/install/properties/dockerfile\"&gt;dockerfile&lt;/b&gt;                          - List of Dockerfile instructions packages                          - _Will be automatically integrated in generated Dockerfile_                          - Type:</code>array<code>- Example values:                               1.</code>FROM accurics/terrascan:d182f1c as terrascan<code>2.</code>COPY --from=terrascan /go/bin/terrascan /usr/bin/<code>3.</code>RUN terrascan init<code>- **_Items_**                              - Type:</code>string<code>- &lt;b id=\"/properties/linters/items/properties/install/properties/apk\"&gt;apk&lt;/b&gt;                          - List of APK packages (Linux)                          - _APK packages identifiers (with or without version)_                          - Type:</code>array<code>- Example values:                               1.</code>perl<code>2.</code>perl-dev<code>- **_Items_**                              - Type:</code>string<code>- &lt;b id=\"/properties/linters/items/properties/install/properties/npm\"&gt;npm&lt;/b&gt;                          - List of NPM packages (Node.js)                          - _NPM packages identifiers (with or without version)_                          - Type:</code>array<code>- Example values:                               1.</code>eslint<code>2.</code>eslint-config-airbnb@3.2.1<code>- **_Items_**                              - Type:</code>string<code>- &lt;b id=\"/properties/linters/items/properties/install/properties/gem\"&gt;gem&lt;/b&gt;                          - List of GEM packages (Ruby)                          - _GEM packages identifiers (with or without version)_                          - Type:</code>array<code>- Example values:                               1.</code>rubocop:0.82.0<code>2.</code>rubocop-github:0.16.0<code>3.</code>rubocop-performance<code>- **_Items_**                              - Type:</code>string<code>- &lt;b id=\"/properties/linters/items/properties/install/properties/pip\"&gt;pip&lt;/b&gt;                          - List of PIP packages (Python)                          - _PIP packages identifiers (with or without version)_                          - Type:</code>array<code>- Example values:                               1.</code>flake8<code>- **_Items_**                              - Type:</code>string`</li> </ul>"},{"location":"flavors-stats/","title":"Flavors statistics","text":""},{"location":"flavors/","title":"MegaLinter Flavors for better performances","text":""},{"location":"flavors/#flavors","title":"Flavors","text":"<p>To improve run performances, we generate Flavored MegaLinter images containing only the list of linters related to a project type</p> <ul> <li>When using default MegaLinter, if a MegaLinter Flavor would cover all your project requirements, a message is added in the logs</li> <li>If your project uses a MegaLinter Flavor not covering linter requirements, an error message will be thrown with instructions about how to solve the issue</li> </ul> <p>The following table doesn't display docker pulls from MegaLinter v4 &amp; v5 images.</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54 <p>If you need a new flavor, post an issue </p>"},{"location":"frequently-asked-questions/","title":"Frequently Asked Questions about MegaLinter","text":""},{"location":"frequently-asked-questions/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>My repo CI already have linters and they're perfectly working, so why do I need MegaLinter ?</p> <p>You can perfectly continue using your installed linters and deactivate them in <code>.mega-linter.yml</code>. For example, in a javascript project using eslint, you can configure MegaLinter with <code>DISABLE: JAVASCRIPT</code>. That way, you will benefit from both your installed linters but also from other MegaLinter linters checking JSON, YAML, Markdown, Dockerfile, Bash, spelling mistakes, dead URLs\u2026</p> <p>Ok but\u2026 how does it work ?</p> <p>MegaLinter is based on Docker images containing either all linters, or just a selection of linters if you are using a MegaLinter flavor for a project using a specific language / format</p> <p>The core architecture does the following:</p> <ul> <li>Initialization<ul> <li>List all project files:<ul> <li>except files in ignored folders (<code>node_modules</code>, etc\u2026)</li> <li>except files not matching <code>FILTER_REGEX_INCLUDE</code> (if defined by user)</li> <li>except files matching <code>FILTER_REGEX_EXCLUDE</code> (if defined by user)</li> </ul> </li> <li>Collect files for each activated linter, matching their own filtering criteria:<ul> <li>file extensions</li> <li>file names</li> <li>file content</li> <li><code>&lt;descriptor_or_linter_key&gt;_FILTER_REGEX_INCLUDE</code> (if defined by user)</li> <li><code>&lt;descriptor_or_linter_key&gt;_FILTER_REGEX_EXCLUDE</code> (if defined by user)</li> </ul> </li> </ul> </li> <li>Linting<ul> <li>Parallelly, for each linter with matching files:<ul> <li>Call the linter on matching files (or the whole project for some linters like copy-paste detector)</li> <li>Call activated linter-level reporters (GitHub Status Reporter\u2026)</li> </ul> </li> </ul> </li> <li>Finalization<ul> <li>Call activated global level reporters (GitHub Pull Request Comment Reporter, File.io Reporter, Email Reporter\u2026)</li> <li>Manage return code:<ul> <li>0 if no error (or only non blocking errors if user defined <code>DISABLE_ERRORS</code> or <code>&lt;descriptor_or_linter_key&gt;_DISABLE_ERRORS</code>)</li> <li>1 if errors</li> </ul> </li> </ul> </li> </ul>"},{"location":"how-to-contribute/","title":"MegaLinter Contributing Guide","text":""},{"location":"how-to-contribute/#how-to-contribute","title":"How to contribute","text":"<p>Contributions to MegaLinter are very welcome, the more we're, the stronger MegaLinter is ! Please follow Contributing Guide</p> <p>To help, you can also:</p> <ul> <li> star the repository</li> <li> offer a beer !</li> <li>report problems and request new features</li> <li>share on twitter</li> </ul>"},{"location":"install-assisted/","title":"Install mega-linter with automated setup","text":""},{"location":"install-assisted/#assisted-installation","title":"Assisted installation","text":"<p>Just run <code>npx mega-linter-runner --install</code> at the root of your repository and answer questions, it will generate ready to use configuration files for MegaLinter :)</p> <p></p>"},{"location":"install-azure/","title":"Install MegaLinter on Azure Pipelines","text":""},{"location":"install-azure/#azure-pipelines","title":"Azure Pipelines","text":"<p>Use the following Azure Pipelines YAML template</p> <p>You can configure a build validation branch policy against a single repository or across all repositories. If you configure across all repositories then your pipeline is stored in a central repository.</p>"},{"location":"install-azure/#single-repository","title":"Single Repository","text":"<p>Add the following to an <code>azure-pipelines.yaml</code> file within your code repository:</p> <pre><code>  # Run MegaLinter to detect linting and security issues\n  - job: MegaLinter\n    pool:\n      vmImage: ubuntu-latest\n    steps:\n      # Checkout repo\n      - checkout: self\n\n      # Pull MegaLinter docker image\n      - script: docker pull oxsecurity/megalinter:v8\n        displayName: Pull MegaLinter\n\n      # Run MegaLinter\n      - script: |\n          docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\\n            --env-file &lt;(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \\\n            -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\\n            -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\\n            oxsecurity/megalinter:v8\n        displayName: Run MegaLinter\n\n      # Upload MegaLinter reports\n      - task: PublishPipelineArtifact@1\n        condition: succeededOrFailed()\n        displayName: Upload MegaLinter reports\n        inputs:\n          targetPath: \"$(System.DefaultWorkingDirectory)/megalinter-reports/\"\n          artifactName: MegaLinterReport\n</code></pre>"},{"location":"install-azure/#central-repository","title":"Central Repository","text":"<p>Add the following to an <code>azure-pipelines.yaml</code> file within a separate repository e.g. 'MegaLinter' repository:</p> <pre><code># Run MegaLinter to detect linting and security issues\n\ntrigger: none\n\npool:\n  vmImage: ubuntu-latest\n\nvariables:\n  repoName: $[ replace(split(variables['System.PullRequest.SourceRepositoryURI'], '/')[6], '%20', ' ') ]\n\nsteps:\n  # Checkout triggering repo\n  - checkout: git://$(System.TeamProject)/$(repoName)@$(System.PullRequest.SourceBranch)\n    displayName: Checkout Triggering Repository\n\n  # Pull MegaLinter docker image\n  - script: docker pull oxsecurity/megalinter:v8\n    displayName: Pull MegaLinter\n\n  # Run MegaLinter\n  - script: |\n      docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\\n        --env-file &lt;(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \\\n        -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\\n        -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\\n        oxsecurity/megalinter:v8\n    displayName: Run MegaLinter\n\n  # Upload MegaLinter reports\n  - task: PublishPipelineArtifact@1\n    condition: succeededOrFailed()\n    displayName: MegaLinter Report\n    inputs:\n      targetPath: $(System.DefaultWorkingDirectory)/megalinter-reports/\n      artifactName: MegaLinterReport\n</code></pre>"},{"location":"install-azure/#pull-request-comments","title":"Pull Request Comments","text":"<p>To benefit from Pull Request comments, please follow configuration instructions</p>"},{"location":"install-azure/#detailed-tutorial","title":"Detailed Tutorial","text":"<p>You can also follow this detailed tutorial by DonKoning</p>"},{"location":"install-bitbucket/","title":"Install MegaLinter on Bitbucket Pipelines","text":""},{"location":"install-bitbucket/#bitbucket-pipelines","title":"Bitbucket Pipelines","text":"<ol> <li> <p>Create a <code>bitbucket-pipelines.yml</code> file on the root directory of your repository</p> </li> <li> <p>Copy and paste the following template or add the step to your existing pipeline.</p> </li> </ol> <pre><code>image: atlassian/default-image:3\npipelines:\n  default:\n    - parallel:\n      - step:\n          name: Run MegaLinter\n          image: oxsecurity/megalinter:v8\n          script:\n            - export DEFAULT_WORKSPACE=$BITBUCKET_CLONE_DIR &amp;&amp; bash /entrypoint.sh\n          artifacts:\n            -  megalinter-reports/**\n</code></pre>"},{"location":"install-concourse/","title":"Install MegaLinter on Concourse","text":""},{"location":"install-concourse/#concourse","title":"Concourse","text":""},{"location":"install-concourse/#pipeline-step","title":"Pipeline step","text":"<p>Use the following <code>job.step</code> in your pipeline template</p> <p>Note: make sure you have <code>job.plan.get</code> step which gets <code>repo</code> containing your repository as shown in example</p> <pre><code>---\n\n  - name: linting\n    plan:\n      - get: repo\n      - task: linting\n        config:\n          platform: linux\n          image_resource:\n            type: docker-image\n            source:\n              repository: oxsecurity/megalinter\n              tag: v8\n          inputs:\n            - name: repo\n          run:\n            path: bash\n            args:\n            - -cxe\n            - |\n              cd repo\n              export DEFAULT_WORKSPACE=$(pwd)\n              bash -ex /entrypoint.sh\n              ## doing this because concourse doesn't work as other CI systems\n          # params:\n            # PARALLEL: true\n            # DISABLE: SPELL\n            # APPLY_FIXES: all\n            # DISABLE_ERRORS: true\n            # VALIDATE_ALL_CODEBASE: true\n</code></pre> <p>OR</p>"},{"location":"install-concourse/#use-it-as-reusable-task","title":"Use it as reusable task","text":"<p>Create reusable concourse task which can be used with multiple pipelines</p> <ol> <li>Create task file <code>task-linting.yaml</code></li> </ol> <pre><code>---\nplatform: linux\nimage_resource:\n  type: docker-image\n  source:\n    repository: oxsecurity/megalinter\n    tag: v8\n\ninputs:\n- name: repo\n\n## uncomment this if you want reports as task output\n# output:\n# - name: reports\n#   path: repo/megalinter-reports\n\nrun:\n  path: bash\n  args:\n  - -cxe\n  - |\n    cd repo\n    export DEFAULT_WORKSPACE=$(pwd)\n    bash -ex /entrypoint.sh\n</code></pre> <ol> <li>Use that <code>task-linting.yaml</code> task in pipeline</li> </ol> <p>Note:</p> <p>1. make sure <code>task-linting.yaml</code> is available in that <code>repo</code> input at root</p> <p>2. task <code>output</code> is not shown here</p> <pre><code>resources:\n\n  - name: linting\n    plan:\n      - get: repo\n      - task: linting\n        file: repo/task-linting.yaml\n        # params:\n        #   PARALLEL: true\n        #   DISABLE: SPELL\n        #   APPLY_FIXES: all\n        #   DISABLE_ERRORS: true\n        #   VALIDATE_ALL_CODEBASE: true\n</code></pre>"},{"location":"install-docker/","title":"Run MegaLinter as a Docker image","text":""},{"location":"install-docker/#docker-container","title":"Docker container","text":"<p>You can also run megalinter with its Docker container, just execute this command:</p> <p><code>docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:rw -v $(pwd):/tmp/lint:rw oxsecurity/megalinter:v8</code></p> <p>No extra arguments are needed, however, megalinter will lint all of the files inside the <code>/tmp/lint</code> folder, so it may be needed to configure your tool of choice to use the <code>/tmp/lint</code> folder as workspace. This can also be changed:</p> <p>Example:</p> <p><code>docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:rw -v $(pwd):/example/folder:rw oxsecurity/megalinter:v8</code></p>"},{"location":"install-drone/","title":"Install MegaLinter on Drone CI","text":""},{"location":"install-drone/#drone-ci","title":"Drone CI","text":"<p>Warning: Drone CI support is experimental and is undergoing heavy modifications (see issue #2047).</p> <ol> <li> <p>Create a <code>.drone.yml</code> file on the root directory of your repository</p> </li> <li> <p>Copy and paste the following template:</p> </li> </ol> <pre><code>kind: pipeline\ntype: docker\nname: MegaLinter\n\nworkspace:\n  path: /tmp/lint\n\nsteps:\n\n- name: megalinter\n  image: oxsecurity/megalinter:v8\n  environment:\n    DEFAULT_WORKSPACE: /tmp/lint\n</code></pre> <p>This uses the Drone CI docker runner, so it's needed to install and configure it beforehand on your Drone CI server.</p>"},{"location":"install-drone/#optional-adjusting-trigger-rules","title":"(Optional) Adjusting trigger rules","text":"<p>The Drone CI workflow should trigger automatically for every scenario (push, pull request, sync\u2026) however, you can optionally change this behavior by changing the trigger. For example:</p> <pre><code>kind: pipeline\ntype: docker\nname: MegaLinter\n\nworkspace:\n  path: /tmp/lint\n\nsteps:\n\n- name: megalinter\n  image: oxsecurity/megalinter:v8\n  environment:\n    DEFAULT_WORKSPACE: /tmp/lint\n\ntrigger:\n  event:\n  - push\n</code></pre> <p>The workflow above should only trigger on push, not on any other situation. For more information about how to configure Drone CI trigger rules, click here.</p>"},{"location":"install-github/","title":"Install MegaLinter on GitHub Actions","text":""},{"location":"install-github/#github-action","title":"GitHub Action","text":"<ol> <li>Create a new file in your repository called <code>.github/workflows/mega-linter.yml</code></li> <li>Copy the example workflow from below into that new file, no extra configuration required</li> <li>Commit that file to a new branch</li> <li>Open up a pull request and observe the action working</li> <li>Enjoy your more stable, and cleaner code base</li> </ol> <p>NOTES:</p> <ul> <li>If you pass the Environment variable <code>GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}</code> in your workflow, then the MegaLinter will mark the status of each individual linter run in the Checks section of a pull request. Without this you will only see the overall status of the full run. There is no need to set the GitHub Secret as it's automatically set by GitHub, it only needs to be passed to the action.</li> <li>You can also use it outside of GitHub Actions (CircleCI, Azure Pipelines, Jenkins, GitLab, or even locally with a docker run) , and have status on Github Pull Request if <code>GITHUB_TARGET_URL</code> environment variable exists.</li> </ul> <p>In your repository you should have a <code>.github/workflows</code> folder with GitHub Action similar to below:</p> <ul> <li><code>.github/workflows/mega-linter.yml</code></li> </ul> This file should have this code <pre><code>---\n# MegaLinter GitHub Action configuration file\n# More info at https://megalinter.io\nname: MegaLinter\n\non:\n  # Trigger mega-linter at every push. Action will also be visible from Pull Requests to main\n  push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions)\n  pull_request:\n    branches: [master, main]\n\nenv: # Comment env block if you don't want to apply fixes\n  # Apply linter fixes configuration\n  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)\n  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)\n  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  megalinter:\n    name: MegaLinter\n    runs-on: ubuntu-latest\n    permissions:\n      # Give the default GITHUB_TOKEN write permission to commit and push, comment issues &amp; post new PR\n      # Remove the ones you do not need\n      contents: write\n      issues: write\n      pull-requests: write\n    steps:\n      # Git Checkout\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}\n          fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances\n\n      # MegaLinter\n      - name: MegaLinter\n        id: ml\n        # You can override MegaLinter flavor used to have faster performances\n        # More info at https://megalinter.io/flavors/\n        uses: oxsecurity/megalinter@v8\n        env:\n          # All available variables are described in documentation\n          # https://megalinter.io/configuration/\n          VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY\n          # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks\n\n      # Upload MegaLinter artifacts\n      - name: Archive production artifacts\n        if: success() || failure()\n        uses: actions/upload-artifact@v4\n        with:\n          name: MegaLinter reports\n          path: |\n            megalinter-reports\n            mega-linter.log\n\n      # Create pull request if applicable (for now works only on PR from same repository, not from forks)\n      - name: Create Pull Request with applied fixes\n        id: cpr\n        if: steps.ml.outputs.has_updated_sources == 1 &amp;&amp; (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) &amp;&amp; env.APPLY_FIXES_MODE == 'pull_request' &amp;&amp; (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) &amp;&amp; !contains(github.event.head_commit.message, 'skip fix')\n        uses: peter-evans/create-pull-request@v6\n        with:\n          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}\n          commit-message: \"[MegaLinter] Apply linters automatic fixes\"\n          title: \"[MegaLinter] Apply linters automatic fixes\"\n          labels: bot\n      - name: Create PR output\n        if: steps.ml.outputs.has_updated_sources == 1 &amp;&amp; (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) &amp;&amp; env.APPLY_FIXES_MODE == 'pull_request' &amp;&amp; (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) &amp;&amp; !contains(github.event.head_commit.message, 'skip fix')\n        run: |\n          echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\"\n\n      # Push new commit if applicable (for now works only on PR from same repository, not from forks)\n      - name: Prepare commit\n        if: steps.ml.outputs.has_updated_sources == 1 &amp;&amp; (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) &amp;&amp; env.APPLY_FIXES_MODE == 'commit' &amp;&amp; github.ref != 'refs/heads/main' &amp;&amp; (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) &amp;&amp; !contains(github.event.head_commit.message, 'skip fix')\n        run: sudo chown -Rc $UID .git/\n      - name: Commit and push applied linter fixes\n        if: steps.ml.outputs.has_updated_sources == 1 &amp;&amp; (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) &amp;&amp; env.APPLY_FIXES_MODE == 'commit' &amp;&amp; github.ref != 'refs/heads/main' &amp;&amp; (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) &amp;&amp; !contains(github.event.head_commit.message, 'skip fix')\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}\n          commit_message: \"[MegaLinter] Apply linters fixes\"\n          commit_user_name: megalinter-bot\n          commit_user_email: 129584137+megalinter-bot@users.noreply.github.com\n</code></pre>"},{"location":"install-gitlab/","title":"Install MegaLinter on Gitlab CI","text":""},{"location":"install-gitlab/#gitlab-ci","title":"GitLab CI","text":"<p>Create or update <code>.gitlab-ci.yml</code> file at the root of your repository</p> <pre><code># MegaLinter GitLab CI job configuration file\n# More info at https://megalinter.io/\n\nmega-linter:\n  stage: test\n  # You can override MegaLinter flavor used to have faster performances\n  # More info at https://megalinter.io/flavors/\n  image: oxsecurity/megalinter:v8\n  script: [ \"true\" ] # if script: [\"true\"] doesn't work, you may try -&gt;  script: [ \"/bin/bash /entrypoint.sh\" ]\n  variables:\n    # All available variables are described in documentation\n    # https://megalinter.io/configuration/\n    DEFAULT_WORKSPACE: $CI_PROJECT_DIR\n    # ADD YOUR CUSTOM ENV VARIABLES HERE TO OVERRIDE VALUES OF .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY\n  artifacts:\n    when: always\n    paths:\n      - megalinter-reports\n    expire_in: 1 week\n</code></pre> <p>Create a Gitlab access token and define it in a variable GITLAB_ACCESS_TOKEN_MEGALINTER in the project CI/CD masked variables. Make sure your token (e.g. if a project token) as the appropriate role for commenting a merge request (at least developer).</p> <p></p> <p></p>"},{"location":"install-jenkins/","title":"Install MegaLinter on Jenkins","text":""},{"location":"install-jenkins/#jenkins","title":"Jenkins","text":"<p>Add the following stage in your Jenkinsfile</p> <p>You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source</p> <pre><code>// Lint with MegaLinter: https://megalinter.io/\nstage('MegaLinter') {\n    agent {\n        docker {\n            image 'oxsecurity/megalinter:v8'\n            args \"-u root -e VALIDATE_ALL_CODEBASE=true -v ${WORKSPACE}:/tmp/lint --entrypoint=''\"\n            reuseNode true\n        }\n    }\n    steps {\n        sh '/entrypoint.sh'\n    }\n    post {\n        always {\n            archiveArtifacts allowEmptyArchive: true, artifacts: 'mega-linter.log,megalinter-reports/**/*', defaultExcludes: false, followSymlinks: false\n        }\n    }\n}\n</code></pre> <p>CloudBees themselves made a nice tutorial about how to use MegaLinter with Jenkins !</p>"},{"location":"install-locally/","title":"Run MegaLinter locally on your computer","text":""},{"location":"install-locally/#run-megalinter-locally","title":"Run MegaLinter locally","text":"<p>You can use mega-linter-runner to locally run MegaLinter with the same configuration defined in .mega-linter.yml file</p> <p>See mega-linter-runner installation instructions</p> <p>Example</p> <pre><code>npx mega-linter-runner --flavor salesforce -e \"'ENABLE=DOCKERFILE,MARKDOWN,YAML'\" -e 'SHOW_ELAPSED_TIME=true'\n</code></pre> <p>Note: You can also use such command line in your custom CI/CD pipelines</p>"},{"location":"install-version/","title":"Selecting a MegaLinter version to use","text":""},{"location":"install-version/#which-version-to-use","title":"Which version to use ?","text":"<p>The following instructions examples are using latest MegaLinter stable version (v8 , always corresponding to the latest release)</p> <ul> <li>Docker image: <code>oxsecurity/megalinter:v8</code></li> <li>GitHub Action: <code>oxsecurity/megalinter@v8</code></li> </ul> <p>You can also use beta version (corresponding to the content of main branch)</p> <ul> <li>Docker image: <code>oxsecurity/megalinter:beta</code></li> <li>GitHub Action: <code>oxsecurity/megalinter@beta</code></li> </ul>"},{"location":"license-explanations/","title":"License explanation","text":""},{"location":"license-explanations/#why-agpl-v3-license","title":"Why AGPL V3 License ?","text":"<p>MegaLinter is an open-source and free tool graciously provided to the developer community.</p> <p>We don't earn money with MegaLinter, but it takes a lot of time to maintain it, so we want to avoid companies to make money with it by selling software or services without sharing their sources, like it happened in the past with ElasticSearch or MongoDB.</p>"},{"location":"license-explanations/#what-you-can-do","title":"What you can do","text":"<ul> <li>Use MegaLinter in public repositories</li> <li>Use MegaLinter in private repositories, even commercial ones</li> <li>Use MegaLinter to build commercial closed-source applications</li> <li>Use MegaLinter on on-premise Git services, like Github Enterprise or Gitlab Community Edition</li> <li>Sell professional services to setup and maintain MegaLinter in the repositories of your clients</li> </ul>"},{"location":"license-explanations/#what-you-can-not-do","title":"What you can not do","text":"<ul> <li>Sell MegaLinter</li> <li>Expose a closed-source online service that calls MegaLinter in the background</li> </ul>"},{"location":"license-explanations/#what-you-could-do","title":"What you could do","text":"<p>If you have a professional use of MegaLinter, you can be nice and support us by sponsoring us, and ask your clients to sponsor us too :)</p> <p>Any questions ? Contact us !</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#gnu-affero-general-public-license","title":"GNU Affero General Public License","text":"<pre><code>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"mega-linter-runner/","title":"Run locally","text":""},{"location":"mega-linter-runner/#megalinter-runner","title":"MegaLinter Runner","text":"<p>This package allows to run MegaLinter locally before running it in your CD/CI workflow, or simply to locally apply reformatting and fixes without having to install up to date linters for your files</p> <p></p>"},{"location":"mega-linter-runner/#installation","title":"Installation","text":""},{"location":"mega-linter-runner/#pre-requisites","title":"Pre-requisites","text":"<p>You need to have NodeJS and Docker installed on your computer to run MegaLinter locally with MegaLinter Runner</p>"},{"location":"mega-linter-runner/#global-installation","title":"Global installation","text":"<pre><code>npm install mega-linter-runner -g\n</code></pre>"},{"location":"mega-linter-runner/#local-installation","title":"Local installation","text":"<pre><code>npm install mega-linter-runner --save-dev\n</code></pre>"},{"location":"mega-linter-runner/#no-installation","title":"No installation","text":"<p>You can run mega-linter-runner without installation by using <code>npx</code></p> <p>Example:</p> <pre><code>npx mega-linter-runner -r beta -e \"'ENABLE=MARKDOWN,YAML'\" -e 'SHOW_ELAPSED_TIME=true'\n</code></pre>"},{"location":"mega-linter-runner/#pre-commit-hook","title":"Pre-commit hook","text":"<p>You can run mega-linter-runner as a pre-commit hook</p> <p>Sample <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/oxsecurity/megalinter\n    rev: v6.8.0 # Git tag specifying the hook, not mega-linter-runner, version\n    hooks:\n      - id: megalinter-incremental # Faster, less thorough\n        stages:\n          - commit\n      - id: megalinter-full # Slower, more thorough\n        stages:\n          - push\n</code></pre> <p>See <code>.pre-commit-hooks.yaml</code> for more details.</p>"},{"location":"mega-linter-runner/#usage","title":"Usage","text":"<pre><code>mega-linter-runner [OPTIONS] [FILES]\n</code></pre> <p>The options are only related to mega-linter-runner. For MegaLinter options, please use a <code>.mega-linter.yml</code> configuration file</p> Option Description Default <code>-p</code> <code>--path</code> Directory containing the files to lint current directory <code>-f</code> <code>--flavor</code> Set this parameter to use a MegaLinter flavor <code>all</code> <code>-d</code> <code>--image</code> You can override the used docker image, including if it's on another docker registry <code>-e</code> <code>--env</code> Environment variables for MegaLinter, following format 'ENV_VAR_NAME=VALUE' for a single value or \"'ENV_VAR_NAME=VALUE1,VALUE2'\" for a list of valuesWarning: Quotes are mandatory <code>--fix</code> Automatically apply formatting and fixes in your files <code>-r</code> <code>--release</code> Allows to override MegaLinter version used <code>v5</code> <code>-h</code> <code>--help</code> Show mega-linter-runner help <code>-v</code> <code>--version</code> Show mega-linter-runner version <code>-i</code> <code>--install</code> Generate MegaLinter configuration files <code>--container-name</code> Specify MegaLinter container name <code>--remove-container</code> Remove MegaLinter Docker container when done <p>You can also use <code>npx mega-linter-runner</code> if you do not want to install the package</p>"},{"location":"mega-linter-runner/#examples","title":"Examples","text":"<pre><code>mega-linter-runner\n</code></pre> <pre><code>mega-linter-runner -p myFolder --fix\n</code></pre> <pre><code>mega-linter-runner -r beta -e \"'ENABLE=MARKDOWN,YAML'\" -e 'SHOW_ELAPSED_TIME=true'\n</code></pre> <pre><code>mega-linter-runner --flavor python --release beta --filesonly path/to/my/file1.py another/path/to/a/file.js and/another/file.py\n</code></pre>"},{"location":"mega-linter-runner/#configuration","title":"Configuration","text":"<p>You can generate a ready-to-use .mega-linter.yml configuration file by running <code>npx mega-linter-runner --install</code> at the root of your repository</p> <p></p>"},{"location":"mega-linter-vs-super-linter/","title":"Compare MegaLinter and SuperLinter","text":""},{"location":"mega-linter-vs-super-linter/#megalinter-vs-super-linter","title":"MegaLinter vs Super-Linter","text":"<p>The hard-fork of Super-Linter to be rewritten in Python isn't just a language switch: use of python flexibility and libraries allowed to define lots of additional functions described below</p>"},{"location":"mega-linter-vs-super-linter/#security","title":"Security","text":"<p>MegaLinter hides many environment variables when calling the linters.</p> <p>That way you need to trust only MegaLinter core code with your secrets, not the 100+ embedded linters !</p>"},{"location":"mega-linter-vs-super-linter/#performances","title":"Performances","text":"<ul> <li>MegaLinter Flavors allow to use smaller docker images, so the pull time is reduced</li> <li>Thanks to python multiprocessing capabilities, linters are run in parallel, which is way faster than Super-Linter bash script who runs all linters in sequence</li> <li>When the linter allows it, call it 1 time with N files, instead of calling N times with one file</li> </ul>"},{"location":"mega-linter-vs-super-linter/#more-languages-and-formats-linted","title":"More languages and formats linted","text":"<ul> <li>C, C++, Copy-Paste detection, Credentials, GraphQL, JSON &amp; YAML with JSON schemas, Markdown tables formatting, Puppet, reStructuredText, Rust, Scala, Spell checker, Swift, Visual Basic .NET \u2026</li> </ul>"},{"location":"mega-linter-vs-super-linter/#automatically-apply-formatting-and-fixes","title":"Automatically apply formatting and fixes","text":"<p>MegaLinter can automatically apply fixes performed by linters, and push them to the same branch, or create a Pull Request that you can validate</p> <p>This is pretty handy, especially for linter errors related to formatting (in that case, you don't have any manual update to perform)</p>"},{"location":"mega-linter-vs-super-linter/#run-locally","title":"Run locally","text":"<p>MegaLinter can be run locally thanks to mega-linter-runner</p>"},{"location":"mega-linter-vs-super-linter/#reports","title":"Reports","text":""},{"location":"mega-linter-vs-super-linter/#capabilities","title":"Capabilities","text":"<ul> <li>Accuracy: Count the total number of errors and not only the number of files in error</li> <li>Show linter version and applied filters for each linter processed</li> <li>Reports stored as artefacts on GitHub Action run or other remote files<ul> <li>General log</li> <li>One report file by linter</li> </ul> </li> </ul>"},{"location":"mega-linter-vs-super-linter/#additional-reporters","title":"Additional Reporters","text":"<ul> <li>Console</li> </ul> <ul> <li>Text files</li> <li>GitHub Pull Request comments</li> </ul> <ul> <li>Gitlab Merge Request comments</li> </ul> <ul> <li>Bitbucket Pull Request comments</li> </ul> <ul> <li>Azure Pull Request comments</li> </ul> <ul> <li>Markdown Summary</li> </ul> <ul> <li>Updated sources</li> <li>Email</li> <li>File.io</li> </ul>"},{"location":"mega-linter-vs-super-linter/#enhanced-configuration","title":"Enhanced Configuration","text":"<ul> <li>Assisted installation and configuration using a yeoman generator and JSON schemas for configuration file</li> </ul> <ul> <li>Configure include and exclude regexes for a single language or linter: ex: <code>JAVASCRIPT_FILTER_REGEX_INCLUDE (src)</code></li> <li>Configure additional CLI arguments for a linter: ex: <code>JAVASCRIPT_ES_ARGUMENTS \"--debug --env-info\"</code></li> <li>Configure non blocking errors for a single language or linter: ex: <code>JAVASCRIPT_DISABLE_ERRORS</code></li> <li>Simplify languages and linters variables<ul> <li>ENABLE = list of languages and formats to apply lint on codebase (default: all)</li> <li>ENABLE_LINTERS = list of linters to apply lint on codebase (default: all)</li> <li>DISABLE = list of languages and formats to skip (default: none)</li> <li>DISABLE_LINTERS = list of linters to skip (default: none)</li> <li>Variables VALIDATE_XXX are still taken in account (but should not be used in association with ENABLE and DISABLE variables)</li> </ul> </li> </ul>"},{"location":"mega-linter-vs-super-linter/#enhanced-documentation","title":"Enhanced Documentation","text":"<ul> <li>HTML documentation</li> </ul> <ul> <li>One page per linter documentation :<ul> <li>All variables that can be used with this linter</li> <li>List of file extensions, names and filters applied by the linter</li> <li>Link to MegaLinter default linter configuration</li> <li>Link to linter Web-Site</li> <li>Link to official page explaining how to customize the linter rules</li> <li>Link to official page explaining how to disable rules from source comments</li> <li>Examples of linter command line calls behind the hood</li> <li>Help command text</li> <li>Installation commands</li> </ul> </li> </ul> <ul> <li>Installation links for related IDEs</li> </ul> <ul> <li>README<ul> <li>Separate languages, formats and tooling formats in the linters table</li> <li>Add logos for each descriptor</li> </ul> </li> </ul>"},{"location":"mega-linter-vs-super-linter/#plugins-management","title":"Plugins management","text":"<p>For linters less commonly used, MegaLinters offers a plugins architecture so anyone can publish plugins</p>"},{"location":"mega-linter-vs-super-linter/#simplify-architecture-and-evolutive-maintenance","title":"Simplify architecture and evolutive maintenance","text":"<ul> <li>Refactoring runtime in Python, for easier handling than bash thanks to classes and python modules</li> <li>Everything related to each linter in a single descriptor YML file<ul> <li>easier evolutive maintenance</li> <li>less conflicts to manage between PRs.</li> <li>Few special cases require a python linter class)</li> </ul> </li> <li>Default behaviours for all linters, with possibility to override part of them for special cases</li> <li>Hierarchical architecture: Apply fixes and new behaviours to all linters with a single code update</li> <li>Documentation as code<ul> <li>Generate linters tables (ordered by type: language, format &amp; tooling format) and include it in README. (see result)</li> <li>Generate one markdown file per Linter, containing all configuration variables, infos and examples (See examples)</li> </ul> </li> <li>Automatic generation of Dockerfile using YML descriptors, always using the linter latest version<ul> <li>Dockerfile commands (FROM, ARG, ENV, COPY, RUN )</li> <li>APK packages (linux)</li> <li>NPM packages (node)</li> <li>PIP packages (python)</li> <li>GEM packages (ruby)</li> <li>Phive packages (PHP)</li> </ul> </li> <li>Have a centralized exclude list (node_modules,.rbenv, etc\u2026)</li> </ul>"},{"location":"mega-linter-vs-super-linter/#improve-robustness-stability","title":"Improve robustness &amp; stability","text":"<ul> <li>Test classes for each capability</li> <li>Test classes for each linter: Automatic generation of test classes using .automation/build.py</li> <li>Setup code coverage </li> <li>Development CD / CI<ul> <li>Validate multi-status on PR inside each PR (posted from step \"Run against all code base\")</li> <li>Run test classes and code coverage with pytest during validation GitHub Action</li> <li>Validate descriptor YML files with json schema during build</li> <li>Automated job to upgrade linters to their latest stable version</li> </ul> </li> </ul>"},{"location":"plugins/","title":"MegaLinter plugins","text":""},{"location":"plugins/#plugins","title":"Plugins","text":"<p>For performances and security reasons, we can not embed all linters of the world within MegaLinter.</p> <p>But our core architecture allows to build and publish MegaLinter Plugins !</p>"},{"location":"plugins/#external-plugins-catalog","title":"External Plugins Catalog","text":"Name Description Author Raw URL jupyfmt The uncompromising Jupyter notebook formatter Kim Philipp Jablonski Descriptor linkcheck Plugin to check and validate markdown links exist and working Shiran Rubin Descriptor nitpick Command-line tool and flake8 plugin to enforce the same settings across multiple language-independent projects W. Augusto Andreoli Descriptor mustache Plugin to validate Logstash pipeline definition files using mustache Yann Jouanique Descriptor salt-lint Checks Salt State files (SLS) for best practices and behavior that could potentially be improved. Joachim Grimm Descriptor docker-compose-linter Plugin to lint docker-compose files Wesley Dean Descriptor repolinter Plugin to run TODO Group's repolinter to look for repository best practices Wesley Dean Descriptor j2lint Plugin to lint Jinja2 files Wesley Dean Descriptor fmlint Plugin to lint YAML frontmatter in Markdown documents Wesley Dean Descriptor <p>Note: Using an external plugin means you trust its author</p> <p>Submit a Pull Request if you want your plugin to appear here :)</p>"},{"location":"plugins/#use-external-plugins","title":"Use external plugins","text":"<p>Add plugin URLs in <code>PLUGINS</code> property of <code>.mega-linter.yml</code>. URLs must either begin with \"https://\" or take the form of \"file://\\&lt;path&gt;\", where \\&lt;path&gt; points to a valid plugin descriptor file.</p> <p>Note: Both \\&lt;path&gt; and the default mount directory (/tmp/lint/\\&lt;path&gt;) will be checked for a valid descriptor.</p>"},{"location":"plugins/#example","title":"Example","text":"<pre><code>PLUGINS:\n  - https://raw.githubusercontent.com/kpj/jupyfmt/master/mega-linter-plugin-jupyfmt/jupyfmt.megalinter-descriptor.yml\n  - file://.automation/test/mega-linter-plugin-test/test.megalinter-descriptor.yml\n</code></pre>"},{"location":"plugins/#create-your-own-plugin","title":"Create your own plugin","text":"<p>You can implement your own descriptors and load them as plugins during MegaLinter runtime</p> <ul> <li>Descriptor format is exactly the same than MegaLinter embedded ones (see json schema documentation)</li> <li>Plugins descriptor files must be named **.megalinter-descriptor.yml and respect MegaLinter Json Schema</li> <li>Plugins must be hosted in a url containing **/mega-linter-plugin-**/</li> <li>File URLs must conform to the same directory and file naming criteria as defined above.</li> </ul>"},{"location":"plugins/#limitations","title":"Limitations","text":"<ul> <li>For now, the only <code>install</code> attributes managed are <code>dockerfile</code> instructions starting by <code>RUN</code></li> </ul>"},{"location":"quick-start/","title":"Quick Start with MegaLinter","text":""},{"location":"quick-start/#quick-start","title":"Quick Start","text":"<ul> <li>Run <code>npx mega-linter-runner --install</code> to generate configuration files (you need node.js to be installed)</li> <li>Commit, push, and create a pull request</li> <li>Watch !</li> </ul> <p>Notes:</p> <ul> <li>This repo is a hard-fork of GitHub Super-Linter, rewritten in python to add lots of additional features</li> <li>If you are a Super-Linter user, you can transparently switch to MegaLinter and keep the same configuration (just replace <code>super-linter/super-linter@v3</code> by <code>oxsecurity/megalinter@v8</code> in your GitHub Action YML file, like on this PR)</li> <li>If you want to use MegaLinter extra features (recommended), please take 5 minutes to use MegaLinter assisted installation</li> <li>For a hand-holdy example of getting started with mega-linter check out this blog post by Alec Johnson</li> </ul>"},{"location":"reporters/","title":"MegaLinter Reporters Guide","text":""},{"location":"reporters/#reporters","title":"Reporters","text":"<p>MegaLinter can generate various reports that you can activate / deactivate and customize</p> Reporter Description Default Text files Generates One log file by linter + suggestions for fixes that can not be automated Active SARIF (beta) Generates an aggregated SARIF output file Inactive GitHub Pull Request comments MegaLinter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if GitHub Action Gitlab Merge Request comments Mega-Linter posts a comment on the MR with a summary of lint results, and links to detailed logs Active if in Gitlab CI Azure Pipelines Pull Request comments Mega-Linter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if in Azure Pipelines Bitbucket Pull Request comments Mega-Linter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if in Bitbucket CI API (Grafana) Sends logs and metrics to Grafana endpoint (Loki / Prometheus) Inactive Updated sources Zip containing all formatted and autofixed sources so you can extract them in your repository Active IDE Configuration Apply MegaLinter configuration in your local IDE with linter config files and IDE extensions Active GitHub Status One GitHub status by linter on the PR, with links to detailed logs Active if GitHub Action File.io Send reports on file.io so you can access them with a simple hyperlink provided at the end of console log Inactive JSON Generates a JSON output report file Inactive Email Receive all reports on your e-mail, if you can not use artifacts Active TAP files One file by linter following Test Anything Protocol format Active Console Execution logs visible in console with summary table and links to other reports at the end Active Markdown Summary Generates a Markdown summary report file Inactive"},{"location":"special-thanks/","title":"Special Thanks from MegaLinter","text":""},{"location":"special-thanks/#special-thanks","title":"Special thanks","text":""},{"location":"special-thanks/#maintainers","title":"Maintainers","text":"<p>MegaLinter wouldn't be what it is without its great team of maintainers !</p> <ul> <li>Kurt Von Laven</li> <li>Borja Dominguez</li> <li>Edouard Choiniere</li> <li>Nicolas Vuillamy (Creator)</li> </ul>"},{"location":"special-thanks/#contributors","title":"Contributors","text":""},{"location":"special-thanks/#open-source-teams","title":"Open-source teams","text":"<p>MegaLinter obviously would not exist without its linters and libraries, so many thanks to all the dedicated Open-Source teams maintaining all these awesome linters !</p>"},{"location":"special-thanks/#super-linter-team","title":"Super-Linter team","text":"<p>MegaLinter has been built on the ashes of a rejected Pull Request on GitHub Super-Linter.</p> <p>Even if I disagree with their decision to remain in bash, the core team has always been nice and supporting during the time I was a Super-Linter contributor :)</p>"},{"location":"sponsor/","title":"Sponsoring","text":"<p>I maintain MegaLinter as a hobby, but when I'm not working on my job as CTO at Cloudity, I also have other hobbys like tasting good beers :)</p> <p>So if you like MegaLinter and want to support me with one or several beers a month, please have a look a my Github Sponsoring Page</p> <p></p>"},{"location":"standalone-linters/","title":"Standalone linter docker images","text":"Linter key Docker image Size ACTION_ACTIONLINT oxsecurity/megalinter-only-action_actionlint:v8.7.0 ANSIBLE_ANSIBLE_LINT oxsecurity/megalinter-only-ansible_ansible_lint:v8.7.0 API_SPECTRAL oxsecurity/megalinter-only-api_spectral:v8.7.0 ARM_ARM_TTK oxsecurity/megalinter-only-arm_arm_ttk:v8.7.0 BASH_EXEC oxsecurity/megalinter-only-bash_exec:v8.7.0 BASH_SHELLCHECK oxsecurity/megalinter-only-bash_shellcheck:v8.7.0 BASH_SHFMT oxsecurity/megalinter-only-bash_shfmt:v8.7.0 BICEP_BICEP_LINTER oxsecurity/megalinter-only-bicep_bicep_linter:v8.7.0 C_CPPCHECK oxsecurity/megalinter-only-c_cppcheck:v8.7.0 C_CPPLINT oxsecurity/megalinter-only-c_cpplint:v8.7.0 C_CLANG_FORMAT oxsecurity/megalinter-only-c_clang_format:v8.7.0 CLOJURE_CLJ_KONDO oxsecurity/megalinter-only-clojure_clj_kondo:v8.7.0 CLOJURE_CLJSTYLE oxsecurity/megalinter-only-clojure_cljstyle:v8.7.0 CLOUDFORMATION_CFN_LINT oxsecurity/megalinter-only-cloudformation_cfn_lint:v8.7.0 COFFEE_COFFEELINT oxsecurity/megalinter-only-coffee_coffeelint:v8.7.0 COPYPASTE_JSCPD oxsecurity/megalinter-only-copypaste_jscpd:v8.7.0 CPP_CPPCHECK oxsecurity/megalinter-only-cpp_cppcheck:v8.7.0 CPP_CPPLINT oxsecurity/megalinter-only-cpp_cpplint:v8.7.0 CPP_CLANG_FORMAT oxsecurity/megalinter-only-cpp_clang_format:v8.7.0 CSHARP_DOTNET_FORMAT oxsecurity/megalinter-only-csharp_dotnet_format:v8.7.0 CSHARP_CSHARPIER oxsecurity/megalinter-only-csharp_csharpier:v8.7.0 CSHARP_ROSLYNATOR oxsecurity/megalinter-only-csharp_roslynator:v8.7.0 CSS_STYLELINT oxsecurity/megalinter-only-css_stylelint:v8.7.0 DART_DARTANALYZER oxsecurity/megalinter-only-dart_dartanalyzer:v8.7.0 DOCKERFILE_HADOLINT oxsecurity/megalinter-only-dockerfile_hadolint:v8.7.0 EDITORCONFIG_EDITORCONFIG_CHECKER oxsecurity/megalinter-only-editorconfig_editorconfig_checker:v8.7.0 ENV_DOTENV_LINTER oxsecurity/megalinter-only-env_dotenv_linter:v8.7.0 GHERKIN_GHERKIN_LINT oxsecurity/megalinter-only-gherkin_gherkin_lint:v8.7.0 GO_GOLANGCI_LINT oxsecurity/megalinter-only-go_golangci_lint:v8.7.0 GO_REVIVE oxsecurity/megalinter-only-go_revive:v8.7.0 GRAPHQL_GRAPHQL_SCHEMA_LINTER oxsecurity/megalinter-only-graphql_graphql_schema_linter:v8.7.0 GROOVY_NPM_GROOVY_LINT oxsecurity/megalinter-only-groovy_npm_groovy_lint:v8.7.0 HTML_DJLINT oxsecurity/megalinter-only-html_djlint:v8.7.0 HTML_HTMLHINT oxsecurity/megalinter-only-html_htmlhint:v8.7.0 JAVA_CHECKSTYLE oxsecurity/megalinter-only-java_checkstyle:v8.7.0 JAVA_PMD oxsecurity/megalinter-only-java_pmd:v8.7.0 JAVASCRIPT_ES oxsecurity/megalinter-only-javascript_es:v8.7.0 JAVASCRIPT_STANDARD oxsecurity/megalinter-only-javascript_standard:v8.7.0 JAVASCRIPT_PRETTIER oxsecurity/megalinter-only-javascript_prettier:v8.7.0 JSON_JSONLINT oxsecurity/megalinter-only-json_jsonlint:v8.7.0 JSON_ESLINT_PLUGIN_JSONC oxsecurity/megalinter-only-json_eslint_plugin_jsonc:v8.7.0 JSON_V8R oxsecurity/megalinter-only-json_v8r:v8.7.0 JSON_PRETTIER oxsecurity/megalinter-only-json_prettier:v8.7.0 JSON_NPM_PACKAGE_JSON_LINT oxsecurity/megalinter-only-json_npm_package_json_lint:v8.7.0 JSX_ESLINT oxsecurity/megalinter-only-jsx_eslint:v8.7.0 KOTLIN_KTLINT oxsecurity/megalinter-only-kotlin_ktlint:v8.7.0 KOTLIN_DETEKT oxsecurity/megalinter-only-kotlin_detekt:v8.7.0 KUBERNETES_KUBECONFORM oxsecurity/megalinter-only-kubernetes_kubeconform:v8.7.0 KUBERNETES_HELM oxsecurity/megalinter-only-kubernetes_helm:v8.7.0 KUBERNETES_KUBESCAPE oxsecurity/megalinter-only-kubernetes_kubescape:v8.7.0 LATEX_CHKTEX oxsecurity/megalinter-only-latex_chktex:v8.7.0 LUA_LUACHECK oxsecurity/megalinter-only-lua_luacheck:v8.7.0 LUA_SELENE oxsecurity/megalinter-only-lua_selene:v8.7.0 LUA_STYLUA oxsecurity/megalinter-only-lua_stylua:v8.7.0 MAKEFILE_CHECKMAKE oxsecurity/megalinter-only-makefile_checkmake:v8.7.0 MARKDOWN_MARKDOWNLINT oxsecurity/megalinter-only-markdown_markdownlint:v8.7.0 MARKDOWN_REMARK_LINT oxsecurity/megalinter-only-markdown_remark_lint:v8.7.0 MARKDOWN_MARKDOWN_LINK_CHECK oxsecurity/megalinter-only-markdown_markdown_link_check:v8.7.0 MARKDOWN_MARKDOWN_TABLE_FORMATTER oxsecurity/megalinter-only-markdown_markdown_table_formatter:v8.7.0 PERL_PERLCRITIC oxsecurity/megalinter-only-perl_perlcritic:v8.7.0 PHP_PHPCS oxsecurity/megalinter-only-php_phpcs:v8.7.0 PHP_PHPSTAN oxsecurity/megalinter-only-php_phpstan:v8.7.0 PHP_PSALM oxsecurity/megalinter-only-php_psalm:v8.7.0 PHP_PHPLINT oxsecurity/megalinter-only-php_phplint:v8.7.0 PHP_PHPCSFIXER oxsecurity/megalinter-only-php_phpcsfixer:v8.7.0 POWERSHELL_POWERSHELL oxsecurity/megalinter-only-powershell_powershell:v8.7.0 POWERSHELL_POWERSHELL_FORMATTER oxsecurity/megalinter-only-powershell_powershell_formatter:v8.7.0 PROTOBUF_PROTOLINT oxsecurity/megalinter-only-protobuf_protolint:v8.7.0 PUPPET_PUPPET_LINT oxsecurity/megalinter-only-puppet_puppet_lint:v8.7.0 PYTHON_PYLINT oxsecurity/megalinter-only-python_pylint:v8.7.0 PYTHON_BLACK oxsecurity/megalinter-only-python_black:v8.7.0 PYTHON_FLAKE8 oxsecurity/megalinter-only-python_flake8:v8.7.0 PYTHON_ISORT oxsecurity/megalinter-only-python_isort:v8.7.0 PYTHON_BANDIT oxsecurity/megalinter-only-python_bandit:v8.7.0 PYTHON_MYPY oxsecurity/megalinter-only-python_mypy:v8.7.0 PYTHON_PYRIGHT oxsecurity/megalinter-only-python_pyright:v8.7.0 PYTHON_RUFF oxsecurity/megalinter-only-python_ruff:v8.7.0 PYTHON_RUFF_FORMAT oxsecurity/megalinter-only-python_ruff_format:v8.7.0 R_LINTR oxsecurity/megalinter-only-r_lintr:v8.7.0 RAKU_RAKU oxsecurity/megalinter-only-raku_raku:v8.7.0 REPOSITORY_CHECKOV oxsecurity/megalinter-only-repository_checkov:v8.7.0 REPOSITORY_DEVSKIM oxsecurity/megalinter-only-repository_devskim:v8.7.0 REPOSITORY_DUSTILOCK oxsecurity/megalinter-only-repository_dustilock:v8.7.0 REPOSITORY_GIT_DIFF oxsecurity/megalinter-only-repository_git_diff:v8.7.0 REPOSITORY_GITLEAKS oxsecurity/megalinter-only-repository_gitleaks:v8.7.0 REPOSITORY_GRYPE oxsecurity/megalinter-only-repository_grype:v8.7.0 REPOSITORY_KICS oxsecurity/megalinter-only-repository_kics:v8.7.0 REPOSITORY_LS_LINT oxsecurity/megalinter-only-repository_ls_lint:v8.7.0 REPOSITORY_SECRETLINT oxsecurity/megalinter-only-repository_secretlint:v8.7.0 REPOSITORY_SEMGREP oxsecurity/megalinter-only-repository_semgrep:v8.7.0 REPOSITORY_SYFT oxsecurity/megalinter-only-repository_syft:v8.7.0 REPOSITORY_TRIVY oxsecurity/megalinter-only-repository_trivy:v8.7.0 REPOSITORY_TRIVY_SBOM oxsecurity/megalinter-only-repository_trivy_sbom:v8.7.0 REPOSITORY_TRUFFLEHOG oxsecurity/megalinter-only-repository_trufflehog:v8.7.0 RST_RST_LINT oxsecurity/megalinter-only-rst_rst_lint:v8.7.0 RST_RSTCHECK oxsecurity/megalinter-only-rst_rstcheck:v8.7.0 RST_RSTFMT oxsecurity/megalinter-only-rst_rstfmt:v8.7.0 RUBY_RUBOCOP oxsecurity/megalinter-only-ruby_rubocop:v8.7.0 RUST_CLIPPY oxsecurity/megalinter-only-rust_clippy:v8.7.0 SALESFORCE_SFDX_SCANNER_APEX oxsecurity/megalinter-only-salesforce_sfdx_scanner_apex:v8.7.0 SALESFORCE_SFDX_SCANNER_AURA oxsecurity/megalinter-only-salesforce_sfdx_scanner_aura:v8.7.0 SALESFORCE_SFDX_SCANNER_LWC oxsecurity/megalinter-only-salesforce_sfdx_scanner_lwc:v8.7.0 SALESFORCE_LIGHTNING_FLOW_SCANNER oxsecurity/megalinter-only-salesforce_lightning_flow_scanner:v8.7.0 SCALA_SCALAFIX oxsecurity/megalinter-only-scala_scalafix:v8.7.0 SNAKEMAKE_LINT oxsecurity/megalinter-only-snakemake_lint:v8.7.0 SNAKEMAKE_SNAKEFMT oxsecurity/megalinter-only-snakemake_snakefmt:v8.7.0 SPELL_CSPELL oxsecurity/megalinter-only-spell_cspell:v8.7.0 SPELL_PROSELINT oxsecurity/megalinter-only-spell_proselint:v8.7.0 SPELL_VALE oxsecurity/megalinter-only-spell_vale:v8.7.0 SPELL_LYCHEE oxsecurity/megalinter-only-spell_lychee:v8.7.0 SQL_SQLFLUFF oxsecurity/megalinter-only-sql_sqlfluff:v8.7.0 SQL_TSQLLINT oxsecurity/megalinter-only-sql_tsqllint:v8.7.0 SWIFT_SWIFTLINT oxsecurity/megalinter-only-swift_swiftlint:v8.7.0 TEKTON_TEKTON_LINT oxsecurity/megalinter-only-tekton_tekton_lint:v8.7.0 TERRAFORM_TFLINT oxsecurity/megalinter-only-terraform_tflint:v8.7.0 TERRAFORM_TERRASCAN oxsecurity/megalinter-only-terraform_terrascan:v8.7.0 TERRAFORM_TERRAGRUNT oxsecurity/megalinter-only-terraform_terragrunt:v8.7.0 TERRAFORM_TERRAFORM_FMT oxsecurity/megalinter-only-terraform_terraform_fmt:v8.7.0 TSX_ESLINT oxsecurity/megalinter-only-tsx_eslint:v8.7.0 TYPESCRIPT_ES oxsecurity/megalinter-only-typescript_es:v8.7.0 TYPESCRIPT_STANDARD oxsecurity/megalinter-only-typescript_standard:v8.7.0 TYPESCRIPT_PRETTIER oxsecurity/megalinter-only-typescript_prettier:v8.7.0 VBDOTNET_DOTNET_FORMAT oxsecurity/megalinter-only-vbdotnet_dotnet_format:v8.7.0 XML_XMLLINT oxsecurity/megalinter-only-xml_xmllint:v8.7.0 YAML_PRETTIER oxsecurity/megalinter-only-yaml_prettier:v8.7.0 YAML_YAMLLINT oxsecurity/megalinter-only-yaml_yamllint:v8.7.0 YAML_V8R oxsecurity/megalinter-only-yaml_v8r:v8.7.0"},{"location":"supported-linters/","title":"List of the 100+ supported linters embedded in MegaLinter","text":""},{"location":"supported-linters/#supported-linters","title":"Supported Linters","text":"<p>All linters are integrated in the MegaLinter docker image, which is frequently upgraded with their latest versions</p>"},{"location":"supported-linters/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT C clang-formatC_CLANG_FORMAT CLOJURE clj-kondoCLOJURE_CLJ_KONDO CLOJURE cljstyleCLOJURE_CLJSTYLE COFFEE coffeelintCOFFEE_COFFEELINT C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT C++ (CPP) clang-formatCPP_CLANG_FORMAT C# (CSHARP) dotnet-formatCSHARP_DOTNET_FORMAT C# (CSHARP) csharpierCSHARP_CSHARPIER C# (CSHARP) roslynatorCSHARP_ROSLYNATOR DART dartanalyzerDART_DARTANALYZER GO golangci-lintGO_GOLANGCI_LINT GO reviveGO_REVIVE GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT JAVA checkstyleJAVA_CHECKSTYLE JAVA pmdJAVA_PMD JAVASCRIPT eslintJAVASCRIPT_ES JAVASCRIPT standardJAVASCRIPT_STANDARD JAVASCRIPT prettierJAVASCRIPT_PRETTIER JSX eslintJSX_ESLINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT LUA luacheckLUA_LUACHECK LUA seleneLUA_SELENE LUA styluaLUA_STYLUA MAKEFILE checkmakeMAKEFILE_CHECKMAKE PERL perlcriticPERL_PERLCRITIC PHP phpcsPHP_PHPCS PHP phpstanPHP_PHPSTAN PHP psalmPHP_PSALM PHP phplintPHP_PHPLINT PHP php-cs-fixerPHP_PHPCSFIXER POWERSHELL powershellPOWERSHELL_POWERSHELL POWERSHELL powershell_formatterPOWERSHELL_POWERSHELL_FORMATTER PYTHON pylintPYTHON_PYLINT PYTHON blackPYTHON_BLACK PYTHON flake8PYTHON_FLAKE8 PYTHON isortPYTHON_ISORT PYTHON banditPYTHON_BANDIT PYTHON mypyPYTHON_MYPY PYTHON pyrightPYTHON_PYRIGHT PYTHON ruffPYTHON_RUFF PYTHON ruff-formatPYTHON_RUFF_FORMAT R lintrR_LINTR RAKU rakuRAKU_RAKU RUBY rubocopRUBY_RUBOCOP RUST clippyRUST_CLIPPY SALESFORCE sfdx-scanner-apexSALESFORCE_SFDX_SCANNER_APEX SALESFORCE sfdx-scanner-auraSALESFORCE_SFDX_SCANNER_AURA SALESFORCE sfdx-scanner-lwcSALESFORCE_SFDX_SCANNER_LWC SALESFORCE lightning-flow-scannerSALESFORCE_LIGHTNING_FLOW_SCANNER SCALA scalafixSCALA_SCALAFIX SQL sqlfluffSQL_SQLFLUFF SQL tsqllintSQL_TSQLLINT SWIFT swiftlintSWIFT_SWIFTLINT TSX eslintTSX_ESLINT TYPESCRIPT eslintTYPESCRIPT_ES TYPESCRIPT ts-standardTYPESCRIPT_STANDARD TYPESCRIPT prettierTYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-formatVBDOTNET_DOTNET_FORMAT"},{"location":"supported-linters/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON eslint-plugin-jsoncJSON_ESLINT_PLUGIN_JSONC JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT LATEX chktexLATEX_CHKTEX MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN remark-lintMARKDOWN_REMARK_LINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT RST rst-lintRST_RST_LINT RST rstcheckRST_RSTCHECK RST rstfmtRST_RSTFMT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"supported-linters/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL ARM arm-ttkARM_ARM_TTK BICEP bicep_linterBICEP_BICEP_LINTER CLOUDFORMATION cfn-lintCLOUDFORMATION_CFN_LINT DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lintGHERKIN_GHERKIN_LINT KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE PUPPET puppet-lintPUPPET_PUPPET_LINT SNAKEMAKE snakemakeSNAKEMAKE_LINT SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT TERRAFORM tflintTERRAFORM_TFLINT TERRAFORM terrascanTERRAFORM_TERRASCAN TERRAFORM terragruntTERRAFORM_TERRAGRUNT TERRAFORM terraform-fmtTERRAFORM_TERRAFORM_FMT"},{"location":"supported-linters/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY devskimREPOSITORY_DEVSKIM REPOSITORY dustilockREPOSITORY_DUSTILOCK REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY kicsREPOSITORY_KICS REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"used-by-stats/","title":"Dependents stats for oxsecurity/megalinter","text":"Repository Stars nektos / act 60952 PRQL / prql 10270 IlanCosman / tide 3373 privacyguides / privacyguides.org 3236 stepancheg / rust-protobuf 2887 ever-co / ever-gauzy 2599 PowerDNS-Admin / PowerDNS-Admin 2581 microsoft / code-with-engineering-playbook 2414 meichthys / foss_photo_libraries 2344 oxsecurity / megalinter 2130 cisagov / ScubaGear 2113 Romanitho / Winget-AutoUpdate 1452 jakehildreth / Locksmith 1100 unixorn / git-extra-commands 1054 secureCodeBox / secureCodeBox 886 unixorn / zsh-quickstart-kit 820 ministryofjustice / modernisation-platform 698 awslabs / aws-deployment-framework 678 cattle-ops / terraform-aws-gitlab-runner 601 practicalli / clojure-cli-config 541 pola-rs / r-polars 506 scolladon / sfdx-git-delta 476 ruzickap / packer-templates 451 leosuncin / nest-auth-example 443 co-browser / browser-use-mcp-server 418 llaville / php-compatinfo 380 Boeing / config-file-validator 371 OCSInventory-NG / OCSInventory-Server 371 brettdottech / info-orbs 365 unixorn / fzf-zsh-plugin 348 ahmadnassri / action-dependabot-auto-merge 348 toboshii / home-ops 342 carpenike / k8s-gitops 273 github / local-action 261 NationalSecurityAgency / emissary 258 hardisgroupcom / sfdx-hardis 247 OCSInventory-NG / OCSInventory-ocsreports 240 Luzkan / smells 238 IQEngine / IQEngine 238 brettinternet / homeops 230 bevyengine / bevy-website 223 orangekame3 / paclear 223 nvuillam / npm-groovy-lint 220 philips-software / amp-embedded-infra-lib 217 Uninett / nav 204 T145 / black-mirror 203 eth-protocol-fellows / cohort-four 203 pantheon-systems / documentation 199 microsoft / symphony 199 apigee / devrel 196 newrelic / newrelic-python-agent 194 unixorn / tumult.plugin.zsh 191 davidB / tracing-opentelemetry-instrumentation-sdk 181 etchteam / next-pagination 167 LukePrior / nbn-upgrade-map 161 AndreaPontrandolfo / sheriff 156 Aurorastation / Aurora.3 149 orangekame3 / stree 139 cbg-ethz / V-pipe 136 ishioni / homelab-ops 131 nvuillam / github-dependents-info 128 unixorn / ha-mqtt-discoverable 124 unixorn / lima-xbar-plugin 123 leosuncin / nest-api-example 122 philips-software / amp-devcontainer 118 practicalli / spacemacs 112 Azure / ARO-RP 105 ahmadnassri / docker-vscode-server 104 practicalli / clojure 99 ulises-jeremias / dotfiles 98 npalm / action-docs 93 eth-protocol-fellows / cohort-five 92 riosengineer / Bicepify 86 hyperledger-identus / cloud-agent 85 rasa / scoops 84 ministryofjustice / aws-root-account 80 nvuillam / vscode-groovy-lint 77 gabrielbmoro / MovieDB-App 77 oxsecurity / codetotal 76 SamErde / PowerShell 73 philips-software / amp-hal-st 71 ahmadnassri / action-workflow-queue 71 GoogleCloudPlatform / apigee-samples 67 FaserF / hassio-addons 64 unixorn / warhol.plugin.zsh 63 llaville / umlwriter 62 h3mmy / bloopySphere 62 apigee / terraform-modules 62 Azure / benchpress 61 HariSekhon / GitHub-Actions 59 tyriis / home-ops 58 leosuncin / nest-typeorm-custom-repository 57 langgenius / dify-plugin-sdks 54 orangekame3 / ghfetch 54 nvuillam / sfdx-essentials 53 sierrafoxtrot / srecord 53 ahmadnassri / node-glob-promise 53 leeter / WinMTR-refresh 52 hardisgroupcom / vscode-sfdx-hardis 51 ZEISS / libczi 51 quackduck / cool 50 PowerDNS-Admin / pda-next 50 xlab-si / iac-scan-runner 49 AliceO2Group / O2Physics 49 stepancheg / rust-tls-api 49 cdzombak / pi-fm-player 49 unixorn / chocolate-factory-engineering-docs 48 eitsupi / neo-r-polars 48 quackduck / rem 47 ruzickap / action-my-broken-link-checker 47 Amplitude-Developer-Docs / amplitude-dev-center 47 camaraproject / QualityOnDemand 47 axeII / home-ops 46 jr0dd / home-ops 45 reefland / cri-purge 45 TUSB / TheUnusualSkyBlock 44 ruzickap / malware-cryptominer-container 43 MoegirlPediaInterfaceAdmins / MoegirlPediaInterfaceCodes 42 nvuillam / node-java-caller 41 MythicDrops / MythicDrops 41 orangekame3 / mk 41 CodandoTV / CraftD 40 microsoft / OHDSIonAzure 39 itsmng / itsm-ng 38 ministryofjustice / modernisation-platform-environments 37 quackduck / secret 36 whoisdsmith / VAULTSIDIAN 36 ahmadnassri / action-terraform-report 36 arillso / action.playbook 34 camaraproject / SimSwap 34 nabondance / Trailhead-Banner 34 gluwa / creditcoin 34 practicalli / project-templates 33 camaraproject / DeviceLocation 32 opaque-systems / opaquegateway-python 31 OperationCode / operationcode-pybot 31 nvuillam / markdown-table-formatter 30 SilentDemonSD / Tele-LeechX 30 AErmie / DevSecOps 30 kitos9112 / k8s-home 30 KristjanESPERANTO / MMM-PublicTransportHafas 29 unixorn / docker-helpers.zshplugin 29 meichthys / foss_note_apps 29 MagicMirrorOrg / MagicMirror-3rd-Party-Modules 27 arbitraryexecution / forta-bot-templates 27 rwaltr / home-ops 27 litejs / dom 26 ahmadnassri / node-pretty-exceptions 26 diggsweden / open-source-project-template 25 Simplifi-ED / cloudcost 25 GSA / site-scanning-engine 24 OpenZeppelin / compound-monitoring 24 nanlabs / terraform-aws-starter 24 unixorn / jpb.zshplugin 23 you-n-g / navigate-note.nvim 23 hpi-studyu / studyu 23 Euvaz / gitops-home 23 practicalli / neovim 23 YukinaMochizuki / notion-sdk-java 23 ahmadnassri / node-api-problem 23 GRIFFINCollaboration / GRSISort 22 GSA-TTS / usagov-benefits-eligibility 22 gmoon / s3proxy 21 mmalyska / home-ops 21 ZEISS / czicompress 21 ahmadnassri / node-metalsmith-pug 21 Ramblurr / home-ops 20 Programming-Simplified-Community / Social-Coder 20 unixorn / jira-commands 19 beleavemebe / marketplace-app 19 practicalli / clojurescript 19 xoap-io / xoap-uberagent-kibana-dashboards 19 tvories / k8s-gitops 19 cdzombak / ecobee_influx_connector 19 tomorrow-one / transactional-outbox 19 camaraproject / EdgeCloud 19 ahmadnassri / node-metalsmith-paths 19 ruzickap / action-my-markdown-link-checker 18 janderssonse / gradle-versions-filter-plugin 18 victory-sokolov / dotfiles 18 ruzickap / ansible-role-proxy_settings 18 gwarf / dotfiles 18 camaraproject / NumberVerification 18 ahmadnassri / node-metalsmith-imagemin 18 ahmadnassri / node-nightwatch-accessibility 18 warolv / vault-backup 17 svt / open-source-project-template 17 opaque-systems / opaqueprompts-chat-server 17 9elements / firmware-action 17 CodandoTV / popcorn-guineapig 17 issue-ops / docs 17 xoap-io / xoap-powershell-dsc-configurations 16 xoap-io / terraform-module-template 16 quackduck / ncis 16 you-n-g / simplegpt.nvim 16 opaque-systems / atls-python 16 Azure / ARO-HCP 16 ahmadnassri / node-april-fools 16 ministryofjustice / operations-engineering 16 CITCOM-project / CausalTestingFramework 16 maksimkurb / home-ops 15 issue-ops / parser 15 eresturo / scanadf2docspell 14 nautilus-cyberneering / git-queue 14 xoap-io / xoap-powershell-dsc-module-template 14 ZEISS / pylibczirw 14 ruzickap / ansible-role-virtio-win 14 ruzickap / ansible-role-my_common_defaults 14 cdzombak / runner 14 jokay / docker-ccu-historian 14 ahmadnassri / action-semantic-release 14 EGI-Federation / documentation 14 practicalli / doom-emacs 14 rciam / keycloak-group-management 14 nabondance / Trailhead-Stats 14 ahmadnassri / node-metalsmith-request 14 ahgraber / homelab-infra 13 dochang / mb-url 13 practicalli / clojure-web-services 13 ReneRebsdorf / CS2-annotations 13 liblaf / ilatex 13 GenZmeY / KF2-SafeMutLoader 13 philips-software / amp-preview 13 Marx2 / homelab 13 camaraproject / DeviceStatus 13 hyperledger-identus / sdk-kmp 12 nvuillam / njre 12 nvuillam / node-sarif-builder 12 apigee / apigee-migration-assessment-tool 12 diggsweden / mla 12 lukemurraynz / Codespace_IaC_Coding 12 CoRoSoN-Kit / CoRoSoN-Kit 12 orangekame3 / viff 12 camaraproject / CarrierBillingCheckOut 12 github / issue-parser 12 ahmadnassri / node-oas-request 12 curedao / docs 11 hyperledger-identus / apollo 11 Qarj / WebImblaze 11 dochang / elpa-clone 11 llaville / php-compatinfo-db 11 xoap-io / XOAPRemoteDesktopServicesDSC 11 xoap-io / xoap-packer-templates 11 liblaf / thu-learn-downloader 11 hyperledger-identus / docs 11 alisw / MachineLearningHEP 11 GhostWriters / docker-packt-cli 11 I-Language-Development / I-language-rust 11 AzorianSolutions / broadband-label-maker 11 philips-software / amp-cucumber-cpp-runner 11 argoproj-labs / training-material 11 bjw-s / pmb 11 camaraproject / OTPValidation 11 ahmadnassri / action-template-repository-sync 11 stepancheg / rust-protoc-bin-vendored 10 leosuncin / nest-graphql-example 10 xoap-io / XOAPOfflineDomainJoinViaBlobDSC 10 unixorn / 1password-op.plugin.zsh 10 Toufa7 / WebServer 10 cdviz-dev / cdviz 10 cdzombak / nut_influx_connector 10 jokay / docker-prune 10 chgl / charts 10 scolladon / apex-mutation-testing 10 dysonltd / commitment-issues 10 dysonltd / tmag5273 10 unixorn / docker-cupsd 9 xoap-io / XOAPFSLogixDSC 9 xoap-io / terraform-aws-storage-s3-policy 9 xoap-io / terraform-aws-storage-s3-inventory 9 torivara / public 9 complytime / trestle-bot 9 taxonomicallyinformedannotation / tima 9 jokay / docker-loxone-backup 9 quiltdata / nf-quilt 9 camaraproject / ConnectivityInsights 9 CodandoTV / jujubaSVG 9 ahmadnassri / node-autoenv 9 gluwa / creditcoin3 9 LowerRockLabs / LaravelLivewireTablesAdvancedFilters 8 QuantumPL / bib 8 xoap-io / XOAPDemoConfigurationDSC 8 xoap-io / XOAPW11SecurityBaseline22H2DSC 8 xoap-io / xoap-psadt-framework-template 8 zhorvath83 / home-ops 8 xoap-io / terraform-aws-storage-s3 8 xoap-io / terraform-aws-networking-vpc-endpoint 8 apigee / ansible-apigee-hybrid-accelerator 8 bjw-s / series-cleanup 8 bacterial-genomics / wf-paired-end-illumina-assembly 8 cdzombak / feedbin-auto-archiver 8 axelrindle / github-version-checker 8 ahmadnassri / action-google-cloud-sql-proxy 8 ahmadnassri / node-oas-fastify 8 ahmadnassri / template-js-lib 8 super-dev03 / cdn-maintenance-toggle 8 CoffeeOps / commandline-fu 7 mihaur / node-fastify-template 7 tusharshahrs / pulumi-home 7 cbg-ethz / pareg 7 nujiak / recce 7 iggy / terrarific 7 ChristopherHX / act 7 GiorgioAresu / homelab-gitops 7 xoap-io / terraform-aws-web-cloudfront 7 xoap-io / terraform-aws-database-mysql-user 7 xoap-io / terraform-aws-database-rds 7 xoap-io / terraform-aws-networking-vpc 7 ruzickap / ansible-raspberry-pi-os 7 RedHatProductSecurity / oscal-profiles 7 RedHatProductSecurity / oscal-component-definitions 7 shalltearb1oodfallen / airbnb 7 ahmadnassri / action-commit-lint 7 ahmadnassri / docker-github-pages 7 camaraproject / WebRTC 7 camaraproject / BlockchainPublicAddress 7 jcpsantiago / thearqivist 7 theodore-s-beers / muqawwim 7 ahmadnassri / node-spawn-promise 7 ahmadnassri / node-template-literals-engine 7 VirtwhoQE / hypervisor-builder 7 ADFC-Hamburg / adfc-ansible 6 XoopsModules25x / publisher 6 AlbanAndrieu / ansible-jenkins-slave-docker 6 iggy / slendmail 6 rasa / law-scraper 6 dochang / bumplus 6 xoap-io / xoap-templates 6 xoap-io / terraform-aws-misc-label 6 unixorn / gitlike-commands 6 llaville / phpunit-LoggerTestListener 6 elraro / home-ops 6 ruzickap / ansible-openwrt 6 cdzombak / mailto-things 6 miracum / recruit 6 MauroDataMapper / mdm-core 6 wesley-dean / upload-sarif-to-defectdojo 6 philips-software / amp-postmaster 6 practicalli / engineering-playbook 6 SamErde / No-Cert-Left-Behind 6 ZEISS / czicheck 6 issue-ops / labeler 6 issue-ops / semver 6 OpenZeppelin / secure-development-cookbook 6 ahmadnassri / node-serve-reload-replace 6 ahmadnassri / template-node-lib 6 unixorn / ha-mqtt-discoverable-cli 6 dysonltd / universal-robot 6 AliceO2Group / Run3AnalysisValidation 5 c6o / docs 5 DIT113-V22 / group-04 5 mimmi20 / browscap-helper 5 practicalli / nvim-astro5 5 gatewayd-io / helm-charts 5 jmuelbert / jmbde-QT 5 NanashiTheNameless / Discord-Emoji-Downloader 5 Moringa-SDF-PTO5 / post-moringa 5 alexanderbazhenoff / scripts-pipelines-and-tiny-tools 5 RedHatProductSecurity / trestle-demo 5 chilcano / how-tos 5 ruzickap / cheatsheet-macos 5 ruzickap / action-my-markdown-linter 5 torrust / torrust-compose 5 cdzombak / energybridge_to_influxdb 5 ruzickap / ansible-my_workstation 5 mikevader / k3s-cluster-infra-apps 5 worksuiteio / worksuite 5 seantrane / engineering 5 shiranr / linkcheck 5 brettinternet / homelab 5 ahmadnassri / template-template 5 ministryofjustice / dns 5 wesley-dean / busybox-jq-latest 5 SamErde / Zero-Email-Domain 5 RunningMattress / upm-test-package 5 camaraproject / CallForwardingSignal 5 dropy-project / front 5 stuartp44 / com.vanmoof 5 ahmadnassri / node-updated 5 martadams89 / gofile-dl 5 Uninett / nav-debian 5 Uninett / zino 5 unixorn / ha-franklin 5 candlepin / candlepin-jobs 4 input-output-hk / atala-prism 4 svt / junit5-redis-extension 4 nautilus-cyberneering / chinese-ideographs 4 McIntosh-Lab / plspy 4 apheon-terra / 01_k3s_ops 4 arillso / ansible.system 4 NewbySlime / Luatch 4 javydekoning / ha-xcomfort-bridge 4 Osazz / banking_system 4 spbu-coding-2023 / graphs-graphs-8 4 bacterial-genomics / wf-ani 4 ONSdigital / ons-python-template 4 ruzickap / test_usb_stick_for_tv 4 xxl4 / gundns-admin 4 cdzombak / instapaper-auto-archiver 4 MrMarble / home-ops 4 GenZmeY / KF2-BuildTools 4 proinsias / gilbert-shannon-reeds 4 Game-DevOps / awesome-game-devops 4 AliceO2Group / analysis-framework 4 ahmadnassri / action-github-registry-npm-proxy 4 ahmadnassri / template-docker 4 fevrin / home 4 practicalli / clojure-data-science 4 bjw-s / esphome-config 4 IBM / ibm-rpa-cli 4 brandonmcclure / friendly-chainsaw 4 inventium-tech / terraform-provider-helpers 4 Bonial-International-GmbH / pod-image-swap-webhook 4 Jasstkn / link-checker 4 camaraproject / PopulationDensityData 4 camaraproject / NumberRecycling 4 camaraproject / SimpleEdgeDiscovery 4 Aclrian / MessdienerPlanErsteller 4 ncalteen / branch-enforcement 4 ncalteen / what-did-i-do 4 issue-ops / validator 4 quiltdata / benchling-packager 4 flexion / bash_shell_script_starter 4 jan-guenter / action-class 3 hobbyfarm / e2e-testing 3 ruzickap / ruzickap.github.io 3 stevengonsalvez / cloud-cicd-exploration 3 rafyco / ytrss 3 SueyGuey / Infidelity 3 MythicDrops / mythicdrops-gradle-plugin 3 MTUCI-VR / shooter-project 3 iggy / gocate 3 wenzeslaus / foss4g-2022-developing-custom-grass-tools 3 nautilus-cyberneering / nautilus-librarian 3 ncsu-geoforall-lab / grass-gis-on-hpc-henry2 3 bsrodrigs / terraform-aws-selfconfig-cgw 3 nvuillam / nvuillam 3 cbg-ethz / SARS-CoV-2_Analysis 3 quackduck / lolsh 3 mimmi20 / monolog-streamformatter 3 echoix / setup-OSGeo4W 3 ol3d / home-ops 3 FaeyUmbrea / obs-utils 3 iJinWei / QuirkAndThread 3 bacterial-genomics / wf-assembly-snps 3 eclipse-kuksa / kuksa-incubation 3 ruzickap / cheatsheet-systemd 3 ministryofjustice / operations-engineering-runbooks 3 bremade / TrackYourStop 3 ElBe-Development / localizer-rs 3 ahmadnassri / actions 3 matejkosiarcik / planckpng 3 GenZmeY / KF2-ZedSpawner 3 I-Language-Development / I-language-python 3 GenZmeY / KF2-CustomTraderInventory 3 neilmfrench / homelab-prod 3 KohaAloha / Koha-Dev 3 miracum / charts 3 WilliamsiNFINITE / FlutterTheSpec 3 HealthDataInsight / way_of_working 3 brettinternet / slides 3 ashokm / dotfiles 3 dmamulashvili / webapi-msa-template 3 tdonaworth / pipeline-security 3 chgl / FhirParametersGenerator 3 fernandopn / swarm-mind 3 ahmadnassri / action-changed-files 3 lucacalcaterra / kube-home-flux-2 3 evanofslack / slacknet 3 ONSdigital / dis-wagtail 3 GRIFFINCollaboration / GRSIData 3 amplitude / amplitude-docs 3 Azure-Samples / symphony-terraform 3 teknologi-umum / infrastructure 3 practicalli / learn-clojure 3 practicalli / blog-cryogen 3 SamErde / Locksmith-dev 3 ZEISS / imgdoc2 3 jmuelbert / anniversaryreminder 3 camaraproject / ConsentInfo 3 camaraproject / NetworkAccessManagement 3 practicalli / dotfiles 3 issue-ops / releaser 3 gluwa / creditcoin-staking-dashboard 3 ahmadnassri / node-marked-promise 3 MRDGH2821 / Discord-Time-Tag-Bot 3 MRDGH2821 / dpaste-ts 3 MRDGH2821 / Discord-Ban-Utils-Bot 3 ahmadnassri / node-stringify-clone 3 ahmadnassri / node-smart-promise 3 ahmadnassri / node-error 3 TheophileChampion / ReLab 3 cheyannelam / code-switch 3 wesley-dean / template 3 fchastanet / bash-tools-framework 3 alanjonesit / terraform-aws-gitlab-stale-merge-requests-slack-app 3 danielbodnar / biochemical-research-agent 2 LSK-01 / CodeLux 2 lpsm-dev / helm-recursive-library 2 warbee0712 / rust-protobuf 2 nholuongut / github-actions 2 mambax7 / songlist 2 janderssonse / changelog-tag 2 unixorn / hass-postgresql-backup 2 janderssonse / sariftool 2 anandchugh / iotedge-cicd-github-actions 2 AlbanAndrieu / nabla-servers-bower-sample 2 jokay / jokay.github.io 2 joe-sharp / linter-configs 2 Simple-ML / Simple-ML 2 hamza-u / gstcefsrc 2 iggy / govern 2 yqrashawn / clojure-deps-edn 2 JohnDuprey / CIPP-Domain-Health-Check 2 nitra / smsc 2 Athe-kunal / Verge_Scraper 2 DamianFlynn / k8s-at-home 2 private-forks / mega-linter 2 GaffaOverflow / gaffamap 2 danistrebel / devrel 2 dochang / dotfiles 2 rciam / rciam-docs 2 Luzkan / FamilyBudget 2 mimmi20 / monolog-factory 2 ruzickap / cks-notes 2 Croc-Prog-github / The-Bocchette-2 2 yxtay / matrix-factorization-torch 2 yxtay / python-example-app 2 robinmordasiewicz / fortigate-terraform-deploy 2 ol3d / ansible-role-pikvm 2 you-n-g / jinja-engine.nvim 2 liblaf / awesome 2 metarex-media / mrx-tool 2 atlascloud / aports 2 rick-roche / dotfiles 2 laywill / Docker-Container-Mindustry-Server 2 dochang / asdf-zls 2 claughinghouse / home-ops 2 oSoWoSo / gumak 2 Padinator / Collection-Companion 2 ministryofjustice / operations-engineering-user-guide 2 robinmordasiewicz / devops-toolkit 2 ElBe-Development / logging-rs 2 cdzombak / a2-foia-rss 2 cdzombak / quick-media-conv 2 andrewvaughan / template-core 2 matejkosiarcik / azlint 2 ragsworks / workflow-megalinter 2 jscheytt / dotfiles 2 VirtwhoQE / virtwho-test 2 GenZmeY / KF2-TAWOD 2 GenZmeY / KF2-LootedTraderInventory 2 Samidaites2 / megalizer 2 FiveGuys-DevOps / MiniTwit 2 ThonyPrice / home-ops 2 lucacalcaterra / kube-home 2 proinsias / dotfiles 2 snoopy82481 / new_template_k3s 2 jhockert / flux-cluster 2 osfanbuff63 / action-workflows 2 ahmadnassri / action-metadata 2 ahmadnassri / template-action-composite 2 Entepotenz / email-backups-with-duplicati 2 trifork / cheetah-development-infrastructure 2 invertedorigin / home-infra 2 wesley-dean / hsc 2 ivuorinen / .github 2 JaderDias / aws-activity-pub 2 Andrews-McMeel-Universal / reusable_workflows 2 philips-software / sonarqube-issue-conversion 2 semperdanica / web 2 kammmmi122 / Recipes 2 practicalli / practicalli.github.io 2 practicalli / vspacecode 2 jmuelbert / jmbde-dotnet 2 brandonmcclure / Spooky-Screensaver 2 ortelius / scec-vulnerability 2 camaraproject / RegionDeviceCount 2 camaraproject / LocationInsights 2 camaraproject / Tenure 2 camaraproject / HomeDevicesQoD 2 camaraproject / DeviceIdentifier 2 AKJUS / semver 2 scolladon / sf-git-merge-driver 2 Brawdunoir / fast-prez 2 issue-ops / bear-creek-honey-farm 2 SirArnoldB / EduCompanio 2 sarvex / atom 2 OpenSemanticLab / interactive-semantic-graph 2 ahmadnassri / node-debug 2 leosuncin / goal-app 2 ahmadnassri / node-uncaught-extender 2 dgteixeira / pr-status-giphy-action 2 technic960183 / spherimatch 2 New-Horizontes / New-Horizons 2 Robinysh / python-template 2 dysonltd / paa5100je-pwm3901 2 nvuillam / demo-salesforce-ci 2 wesley-dean / publish_container 2 fchastanet / bash-tools 2 techtales-io / terraform-discord 2 wesley-dean-flexion / data_flow_diagram_examples 2 tyriis / bedrock-version-fetcher 2 szmyty / files 1 james-txt / cybersecurity-awareness 1 tooniez / code-with-engineering-playbook 1 DiSSCo / elvis-frontend 1 voltrevo / elo 1 lpsm-dev / personal-resume 1 janderssonse / ort-ci-base 1 janderssonse / ort-ci-action 1 AlbanAndrieu / kayrros 1 meshuggahtas / TASSS 1 FaserF / homeassistant 1 XoopsModules25x / songlist 1 mambax7 / publisher 1 venkat-ml / linter-poc 1 jusmundi / docker-pgclient 1 dschveninger / dougschveninger 1 meshuggahtas / tasvideos 1 KieranCHerman32 / sheet-smith 1 buluma / GitHub-Actions 1 HinchK / snipe-it 1 sakkke / termy 1 stepancheg / gh-actions-gen 1 dochang / anyenv-target 1 dschveninger / megalinter-plugins 1 withinfocus / withinfocus.github.io 1 githubnext / act 1 dochang / sqlconv 1 atlascloud / packages 1 dochang / koanfenv 1 ZauberNerd / act 1 dochang / svtu 1 jsoref / act 1 piotr-yuxuan / clojure-deps-edn 1 paroda / clojure-deps-edn 1 PavlosMelissinos / clojure-deps-edn 1 mlotysz / clojure-deps-edn 1 Iryna-Slynko / split-bill 1 acidburn0zzz / vscode-sfdx-hardis 1 thongdk8 / nestjs-postgres-sample 1 RebelTat / megalinter 1 jun-nguyen-goldenowl / nestjs-boilerplate-by-prime 1 ToppleTheNun / commitlint-config-nx-scopes 1 ccp-aus / CIPP 1 DarrenChap / CIPP 1 TechPartners / CIPP-1 1 mcohen301BN / CIPP 1 icantspellpotatoe / CIPP 1 RGPosadas / megalinter 1 Setton-Consulting / CIPP-OLD 1 audian-benp / CIPP 1 TechnagyDev / CIPP 1 JohnDuprey / CIPP 1 pythoninthegrass / aoc 1 MrBrain295 / prime-finder 1 josecelano / mandelbrot-orbits-rust 1 dimi4ik / terraform-citrix-mcdg 1 majed08 / 01_k3s_ops 1 terracharge / template-terraform-module 1 RmnMatusevich / GreenridgeApp1 1 cs188-software-design-security-w20 / team-project-cs188-spring21-complex 1 AlexRogalskiy / stylegrams 1 attilaviniczai / wrenchie-api 1 RmnMatusevich / GreenridgeApp3 1 RmnMatusevich / GreenridgeApp2 1 JoelGauci / devrel 1 gaahrdner / dotfiles 1 SobolevYuri / scanner_repoC 1 joaherrerama / walstoretask 1 matejkosiarcik / matejkosiarcik.com 1 tobst96 / mission-chief-bot-jsons 1 hybridadmin / docker_images 1 evg-tso / sample-donkey-api 1 nvuillam / sfdx-hardis 1 uah-ams / uah-ams-website 1 stweil / OCSInventory-ocsreports 1 mimmi20 / laminas-router-hostname 1 mimmi20 / coding-standard 1 simonquasar / vipb 1 Team-Wisp / desert 1 raven428 / ansible-mega-var 1 arillso / go.ansible 1 arillso / docker.ansible 1 laywill / gimmie 1 Azure-Samples / azure-edge-extensions-aio-secure-isa95-network-model-bicep 1 SvenHaedrich / dali_cli 1 tdonaworth / GHA-Runner-Test-Repo 1 diggsweden / .github 1 cfkoehler / emissary 1 ONS-Innovation / github-repository-archive-script 1 impelixx / SIGMAinterpretator 1 rwth-afu / dapnetscripts 1 lasseignelab / capture 1 mihaur / node-fastify-clone 1 practicalli / journal 1 metarex-media / mxf-test 1 NanashiTheNameless / BlackScreen 1 ONSdigital / ssdc-rm-job-processor 1 MartaSien / home-assistant-hs3-plan 1 ebal5 / dotfiles-chezmoi 1 arifbalik / monorepo 1 enidisepic / cf-dyndns 1 ruzickap / myteam-adr 1 Ragdata / reusable-workflows 1 jalim / home-operations 1 Mookmillionz / fonts.gstatic.com- 1 DownAtTheBottomOfTheMoleHole / terraform-azuredevops-naming 1 boschglobal / kuksa.val.services 1 chr-lei / bicep-ai900 1 VietNguyenR / sarif-annotator 1 girlpunk / MediaFeeder 1 Pjstaab / k8s-gitops 1 katriendg / aio-cert-manager 1 Gabriel-QnS / survey-form-sample 1 turboBasic / JenkinsLibrary 1 ahinko / postgres-extended 1 MartianFlow / java-screenplay-browserstack-framework 1 cdzombak / gmail-cleaner 1 kstaniek / ironmaiden 1 www-learn-study / saraswati.learn.study 1 robinmordasiewicz / multi-environment-controller 1 chgl / .github 1 robinmordasiewicz / fortinet-secure-cloud-blueprint-terraform 1 cdzombak / wxcal 1 cdzombak / feedbin-stars-to-email 1 ablyler / sense-monitor-to-influxdb 1 cdzombak / apply-crontab 1 SamErde / All-People-Leaders-Group 1 ttys3 / tracing-opentelemetry-instrumentation-sdk 1 mdrocan / shell-scripts 1 diz-unimr / gics-to-kafka 1 bjw-s / lego-auto 1 lludlow / k3s-home 1 matejkosiarcik / dotfiles 1 fabricesemti80 / home-cluster 1 fabricesemti80 / home-gitops-cluster-old 1 GenZmeY / KF2-StartWave 1 GenZmeY / KF2-DroppedPickupLifespan 1 GenZmeY / KF2-ControlledVoteCollector 1 hypercision / i18ntools 1 GenZmeY / KF2-AdminAutoLogin 1 stefancrain / home 1 KIT-ISAS / pyRecEst 1 dochang / asdf-kotlin-language-server 1 HealthDataInsight / way_of_working-template 1 chill-viking / npm-ci 1 yeaung276 / sarif-annotator 1 timalpha / klase 1 javydekoning / homelab 1 proinsias / infrared-observations 1 proinsias / detection-and-exploration 1 EHMRS / MiniatureRailwaySignalling 1 kh-rawad / dotFiles 1 ahinko / simple-pg-backup 1 proinsias / copier-python-template 1 2zH / home-ops 1 ahmadnassri / action-dotenv 1 sja / k8s-home 1 singhmanavjot / infrastructure 1 jjalvare / thishouse 1 ahmadnassri / template-action-docker 1 ahmadnassri / docker-unifi-api-browser 1 ahmadnassri / action-npm-global-path 1 ahmadnassri / docker-rapidoc-server 1 codecio / home-ops-old 1 ipedrazas / alacasa.lab 1 MauroDataMapper / mdm-application-build 1 Entepotenz / jdownloader2-headless-docker-ng 1 wesley-dean-flexion / dockerized_sqlfluff 1 beiertu-mms / dotfiles 1 orionrobots / orionrobots.github.io 1 timfpark / ai-reference 1 CybAtax / books 1 diz-unimr / hl7-to-kafka 1 nsheaps / homebrew-devsetup 1 mdrocan / brew_pip_update 1 azavea / green-equity-demo 1 embedded-pro / embedded-numerical-toolbox 1 NozomiNetworks / n2os-smb-client 1 idevangelist / idevangelist-gitbook 1 ScottGibb / LED-Strip-Controller-Manifest 1 Klintrup / check_smartarray 1 Klintrup / check_gmirror 1 ScottGibb / Drawio-Libraries 1 Azure-Samples / symphony-bicep 1 Bookfan97 / YetAnotherGoogleSheetsPackageUnity 1 brandonmcclure / vsce 1 Bonial-International-GmbH / sops-check 1 inventium-tech / terraform-provider-postgresql 1 ortelius / scec-mitre-mapping 1 ortelius / scec-commons 1 camaraproject / DeviceQualityIndicator 1 camaraproject / DeviceDataVolume 1 APHA-CSU / GenAPP 1 practicalli / gameboard-donut 1 trifork / cheetah-example-flink 1 Aclrian / PlayPause-with-xcover-button 1 issue-ops / self-service 1 nitra / cf-security 1 peterjokumsen / peterjokumsen-nx-workspace 1 pryzm-finance / pryzmjs 1 CloudGeometry / cg-devx-wl-cnask 1 tyriis / opnsense-exporter 1 CloudGeometry / cg-devx-wl-template 1 sarvex / nebulix 1 gluwa / creditcoin3-staking-dashboard 1 sarvex / astrowind 1 tyriis / locking-service 1 parkerbxyz / megalinter 1 sarvex / rxv64 1 sarvex / gopeed 1 abame / demo-nodejs-app 1 sarvex / gizlang.com 1 Blue-BigTech / Auth-Template-Nest.js 1 slim16165 / Semantic-MediaWiki-Graph 1 meddlin / logbook 1 MRDGH2821 / Perpetual-Mechanical-Array-Bot 1 ahmadnassri / node-oas-schemas 1 ahmadnassri / node-cloudevents-schemas 1 ahmadnassri / template-action-node 1 cimnine / enpass2onepassword 1 RelativeSure / autocopr 1 iferaorg / lambdalabs-get-instance-types-action 1 jkrilov / py-o365-smtp 1 sachajw / ortelius-ms-validate-user-pangarabbit 1 ConnectionMaster / Aurora.3 1 parkerbxyz / guru-to-github 1 Barry1 / PyValueFragments 1 ha-enthus1ast / plejd-mqtt-ha 1 ortelius / ortelius-cli 1 quiltdata / quiltcore 1 data-yaml / udc 1 ortelius / ms-compitem-crud 1 quiltdata / quiltplus 1 spreequalle / ebuilds 1 gluwa / crunch 1 tyriis / zigbee2mqtt-exporter 1 flexion / jubilant-computing-machine 1 ahmadnassri / template-terraform 1 percebus / npm-web-sampler 0 JakubKorytko / korytko-dev 0 im-infomagnus / ms-code-with-engineering-playbook 0 danlorb / xsdk 0 udea-so / udea-so-lab 0 SStranks / tech-expo 0 AdvancedSecurity-Examples / Apex_3rdParty_Example 0 RolfMoleman / markdown-table-formatter 0 bartex-bartex / AwesomeCodeFixer 0 AReid987 / career-compass 0 w6cloud / guide-cli 0 akikanellis / branch-name-validator-test 0 anthonygiuliano / ubiquitous-lamp 0 YuraVolk / practice-landings 0 noritakaIzumi / flask-quickstart 0 alvin-agidi / CodeLux 0 tonylea / PSSAToJunit 0 JayTheBee / hirati 0 berlin4apk / ccache-action 0 guden / code-with-engineering-playbook 0 orgTestCodacy11KRepos110MB / repo-5376-code-with-engineering-playbook 0 jynychen / code-with-engineering-playbook 0 renovate-reproductions / MCG-source 0 gabija00 / RecipesWebsite 0 opencastsoftware / devops-mac-setup 0 casdev2020 / getting-started-s3-website 0 react-universe / Multi-linter 0 Theanchhing / notiefy 0 gezabenko / lint-test 0 MRDGH2821 / Repository-Guidelines 0 lpsm-dev / dummy-port-scanner 0 growthatco / apis 0 forkzero / s3proxy-docker 0 growthatco / nexus 0 growthatco / nomad-test 0 growthatco / template 0 growthatco / growthatpkgs 0 lpsm-dev / rust-intro 0 pgraverdy / actions-templates 0 khulnasoft / DevX-Actions 0 BuildScale / GitHub-Actions 0 js658g / Simple-ML 0 bioconductor-source / pareg 0 TheRealFREDP3D / zsh-quickstart-kit 0 dilipv31 / Testing 0 QueenKoala / CatchIT 0 Kimsscil / Tehh 0 jkalez / rust-protobuf 0 cognitedata / rust-protobuf 0 felipegfalcao / felipegfalcao 0 unixorn / prometheus-moosefs-tricorder 0 trevorspinks / zsh-quickstart-kit 0 manoharmarandi / azureIoT 0 bioc / pareg 0 ilya-vdovenko / Students-WebApp 0 MythicDrops / json-schema-generator-gradle-plugin 0 JeromyJSmith / zsh-quickstart-kit 0 REGEX777 / pixelmontogo.com 0 janderssonse / ort-ci-gitlab 0 unixorn / mastodon.plugin.zsh 0 Raveen-Senanayake / testiotdevops 0 svt / gradle-yapp-publisher-plugin 0 CanyonITS / PS-Winget-AutoUpdate 0 devsisters / rust-protobuf 0 janderssonse / janderscripts 0 leongwc / helm-vulnerable 0 shsingh / secureCodeBox 0 csramanareddy / jenkins-pipeline-scripts 0 csramanareddy / pipleline 0 recursion-ninja / cabal-lower-bounds 0 ruzickap / ruzickap 0 ReferralJoe / jobs_web_scrapper 0 ruzickap / xvx.cz 0 fuhraih / -hassio-addons 0 recursion-ninja / efficient-implied-alignment 0 recursion-ninja / personal-website 0 SamNzo / Bug-tracker-VariaMos 0 coolhead / CodeSecurity 0 adriansev / O2Physics 0 svt / redisson-util-starter 0 svt / flum 0 svt / random-port-initializer 0 Taofeeq90 / Sast-Project-PHP 0 DIT113-V22 / group-15 0 julietrinh1 / soen341 0 dschveninger / buzzwordbingo-go-cli 0 dschveninger / buzzwordbingo 0 dschveninger / dschveninger.github.io 0 joe-sharp / dotfiles 0 QuantumPL / site 0 MrP01 / gnome-clickup-dash 0 Newcastle-University-Team-3 / Yianser 0 opsyx / openapi-example 0 wesley-dean / rsyslog-newrelic-forwarder 0 wesley-dean / jinja2-cli 0 olivertodhunter / innovation-day-linter 0 softwaredevelop / test2 0 Farzad-Jalali / PowerShell 0 MarioRomanDono / LIN 0 Mu-L / rust-protobuf 0 MythicDrops / kindling 0 MythicDrops / plumbing 0 KG7x / defrag-server 0 EtienneDeneuve / demo-cesi 0 ControllerShell / cshell 0 hemnstill / AutoinstallCreator 0 Daniele-Tentoni / c89-continuous-integration 0 emacsmirror / elpa-clone 0 emacsmirror / mb-url 0 lars-reimann / .github 0 fluteds / css 0 epleypa / Home-AssistantConfig2 0 neohelden / actions-library 0 Jeebey / docker_images 0 adithyaamara / FlaskApp 0 IlanCosman / tide-test 0 nautilus-cyberneering / github-actions-secrets 0 dschveninger / common-tools 0 pecigonzalo / docker_images 0 ssokolic / 2024-e2evc-barcelona-automation-masterclass 0 jkoan / test-navit 0 BishopClassicMotors / bishopclassicmotors.github.io 0 kritsanan1 / act 0 metacore-games / act 0 mayurjawalkar1102 / Act-practice-Repo 0 kunal7070 / act-trial 0 fleejy / act 0 focs-gitea / act 0 khulnasoft / act 0 actions-oss / act-cli 0 guravvaishnavi02 / act 0 jefferyq2 / act 0 timothywarner-org / act 0 leokhoagith / act 0 abdulrahman305 / act 0 raghu1211 / act 0 charles7668 / act 0 RaySajuuk / act 0 YoutacRandS-VA / act 0 joelvaneenwyk / act 0 SirraSneha18 / azurefileshare 0 AllSpiceIO / act 0 A-SunsetMkt-Forks / act 0 jadio-forked / act 0 yunarta / bamboo-act 0 Fadil369 / act 0 wustus / gitea-act-dind 0 Levalicious / act 0 DevinNorgarb / act 0 lbenicio / act 0 TestOrgForGitSec / TestActGoDependabot2 0 TestOrgForGitSec / TestActGoDependabot1 0 Create-action / act 0 aravinda-b-juego / act 0 cbc-NexusIQ / nexusiq-go-repo 0 TKaxv-7S / gitea-act 0 gosecnew / gosecnew 0 TestOrgForGitSec / TestActGo 0 godtolo / nektos 0 sumonst21 / act 0 CyberFlameGO / act 0 MrE-Fog / act 0 xet7 / act 0 patinthehat / act 0 sarvex / act 0 zerdos / act 0 Ingenio / techops-lib-act 0 BlackDex / act 0 dandycheung / act 0 djwisdom / act 0 THIS-IS-NOT-A-BACKUP / act 0 NocturnalGlory / act 0 Petrobot-Org / spbstu-event-bot 0 obarbeau / clojure-deps-edn 0 samuelludwig / dot-clojure 0 gitops-poc / workflows 0 Soarnir / android-template 0 Soarnir / java-template 0 Soarnir / actions-tester 0 practicalli / gitops 0 jhimanka / clojure-deps-edn 0 behrica / clojure-deps-edn 0 minikomi / clojure-deps-edn 0 kliramu / clojure-deps-edn 0 truemped / clojure-deps-edn 0 choffee / clojure-deps-edn 0 clows / clojure-deps-edn 0 rcrupp / clojure-deps-edn 0 laurent86 / clojure-deps-edn 0 imrekoszo / clojure-deps-edn 0 markaddleman / clojure-deps-edn 0 Aljendro / clojure-deps-edn 0 tylerw / clojure-deps-edn 0 safiahlberg / clojure-deps-edn 0 Ninerian / clojure-deps-edn 0 holyjak / clojure-deps-edn 0 jdhorwitz / clojure-deps-edn 0 jeffp42ker / clojure-deps-edn 0 Starrick2001 / Rosalian-Server 0 Sploofie / biolast 0 ToppleTheNun / nx-plugins 0 Moneem4 / t7d_products 0 Moneem4 / t7d_payement 0 Moneem4 / t7d_notification 0 jarielfloriano / prime-nestjs 0 k220j / nest-default 0 duniapay / Paymnts 0 duniapay / Identity 0 Raeddeyeh / clone 0 dev-rail / nest-prime-template 0 OzanAkdal / prime-nestjs 0 RamazaniDavid / nestjs-bp 0 armensano / prime-nestjs 0 OmidBadkoubeh / yellow-dolphin 0 Riadloc / pear-dft 0 datj9 / prime-nestjs-boilerplate 0 genuinetech / CIPP 0 jsmithb117 / tax-router-redux 0 Moneem4 / t7d_authentication 0 yosvelquintero / nest-prime 0 JamieUnstedmyit / CIPP-API 0 okao / nestjs-boilerplate 0 stevengonsalvez / megalinter 0 gdi-elias / CIPP 0 365darcy / CIPP 0 CIPP-Link / CIPP 0 AMP-Systems-LLC / CIPP 0 Ashby-Computer-Services / CIPP 0 YvesGourle / CIPP 0 CastleRockSky / CIPP 0 mattkdit / CIPP 0 kfear27 / CIPP 0 Tan-DE / CIPP 0 rmidtown / CIPP 0 L7-Solutions / CIPP 0 jon-tricorelogic / CIPP 0 helixsystems1 / CIPP 0 opal-labs / CIPP 0 LebonITServices / CIPP 0 bkechler / CIPP 0 Shponzo / CIPP 0 rhaarhoff / CIPP 0 protek-support / CIPP 0 gregorykcts / CIPP 0 dakotamccutch-aultech / CIPP 0 jdubose86 / CIPP 0 corillis / CIPP 0 iholu / CIPP 0 EgbertIcttw / CIPP 0 powernz / CIPP 0 anspired / CIPP 0 tsdmike / CIPP 0 Fabric-IT / CIPP 0 mirceamitu / CIPP 0 KotmanTechnology / CIPP 0 MidlandTech / CIPP 0 echoix / megalinter 0 top-dbrodie / CIPP 0 s0nett123 / CIPP 0 5kinnee / CIPP 0 Bayon-IT / CIPP 0 tycosnh / CIPP 0 HJSTechnology / CIPP 0 computingdynamics / CIPP 0 ImpactICT / CIPP 0 semtex1987 / CIPP 0 it-service-layer / CIPP 0 John-Galt-Group / CIPP 0 ITSourcePro / CIPP 0 Greg-Jennings / CIPP 0 crvtec619 / CIPP 0 Lachy00 / CIPP 0 TechRunnerIT / CIPP 0 dpallies / CIPP 0 RedRhombus001 / CIPP 0 stc-bfd / CIPP 0 cippapp-timefortitan / CIPP 0 3DKs / CIPP 0 UNOBeheer / CIPP 0 schorlton / megalinter 0 zxxf22 / CIPP 0 thebartk / CIPP 0 Playrar / CIPP 0 ppettis / CIPP 0 Fossie-Consulting / CIPP 0 UplincIT / CIPP 0 dpurizaga-workflow / CIPP 0 Semeren / CIPP 0 rschuring / CIPP 0 digisourceza / CIPP 0 Schrembot / nodejs-brief 0 fslefevre78 / CIPP 0 Puryear / CIPP 0 joshdarnit / CIPP 0 sijn / CIPP 0 onlyreflective / CIPP 0 lrave1 / CIPP 0 InbarRose / megalinter 0 cpierce-rs / CIPP 0 IT3-LLC / CIPP 0 teallover / CIPP 0 immcs / CIPP 0 efo4585 / CIPP 0 luis-synergy / CIPP 0 JamesBConnect / CIPP 0 CalTechCSEngineer / CIPP 0 gridheart-sweden / CIPP 0 SwiftPuppy-Technologies / CIPP 0 SethZwicker / CIPP 0 uitdevscripts / CIPP 0 SuburbanTotoro / CIPP 0 cipp-ga / CIPP 0 JD-Animo / CIPP 0 bc-rb / CIPP 0 officesolutions-it / CIPP 0 Gobble45 / CIPP 0 tommctech / CIPP-1 0 dnorelid / CIPP 0 dward160 / CIPP 0 alexandreLamarre / insectopedia-prototype 0 lacreativetech / CIPP 0 iAssist-internal / CIPP 0 markhill79 / CIPP 0 Fireworrks / CIPP 0 JDPGSol / CIPP 0 dag-gremache / CIPP 0 mtdps / CIPP 0 ErmlandIT / CIPP 0 infinitycorey / CIPP 0 joejwright / CIPP 0 et-thelogic / CIPP 0 hoemmenit / CIPP 0 jrandRTCC / CIPP 0 Sami-Koivula / CIPP 0 cmpcs / CIPP 0 skyler-bratton / CIPP 0 Henningen / CIPP 0 fscorrupt / cipp 0 bearmerino / CIPP 0 Consulting-IT / CIPP 0 wilmthys / CIPP 0 devallllll / CIPP 0 raptoritsolutions / CIPP-1 0 jjmicroadmin / CIPP 0 NextStepOrg / CIPP 0 johnsalle / CIPP 0 Superfast-IT / CIPP 0 rbanke / CIPP 0 cnwrinc / CIPP 0 futurecomputerscairns / CIPP 0 alexdarau / WebCalculator 0 fsch / CIPP 0 suhailasrulsani / CIPP 0 Preemo-IT / CIPP 0 MichaelPayneLougeek / CIPP-1 0 tombeech / CIPP 0 m4sterful / CIPP 0 ITPOwenM / CIPP 0 npab19 / CIPP 0 AdamWillford / CIPP 0 growthatco / megalinter 0 alexandreLamarre / Portfolio 0 kpj / mega-linter 0 TS-Micron / CIPP 0 heusintech / CIPP 0 stugster / CIPP 0 owengeorgewilliams / CIPP 0 toshimo90 / CIPP 0 SynergiTech / CIPP 0 tlg-cipp / CIPP-1 0 mmartinFF / CIPP 0 andrboot / CIPP 0 zach-kirsh / CIPP 0 quadmtech / CIPP 0 akrotor / CIPP 0 SkyCampTech / CIPP 0 Network-Titan / CIPP 0 ainfosys / CIPP 0 jasn-tcl / CIPP 0 einis / CIPP 0 Digivie / CIPP 0 TUCU-Adam / CIPP 0 fnbronson / CIPP 0 LinealMartyn / CIPP 0 shnax1 / CIPP 0 Modtechadmin / CIPP 0 Tekshelter-LLC / CIPP 0 jminexa / CIPP 0 DyminSystems / CIPP 0 travishotech / CIPP 0 mlenoir919 / CIPP 0 scootrz32 / CIPP 0 BricktopPunk / CIPP 0 KupariData / CIPP 0 nvision-it / CIPP 0 procradminator / CIPP 0 jonjob / CIPP 0 pcasserly / CIPP 0 techrageit1 / CIPP 0 dloughland87 / CIPP 0 criticalengineers / CIPP 0 maxscc / CIPP 0 IQ-in-IT / CIPP 0 dbaty7 / CIPP 0 clazurerepo / CIPP 0 hummingbird-git / CIPP 0 matsax / CIPP 0 Frippin-it / CIPP 0 sec-gp / CIPP 0 AntoJUICT / CIPP 0 slsconsult / CIPP 0 mrapoc / CIPP 0 GeekBoxIT / CIPP 0 RODINOliver / CIPP 0 wilhil / CIPP 0 redanthrax / CIPP 0 cleveradmin / CIPP 0 daveroyer / CIPP 0 stealitadmin / CIPP 0 jfandy1982 / find-duplicates 0 NOUIY / npm-groovy-lint 0 llaville / .github 0 llaville / graph-uml 0 phpList / php-compat-info 0 Shi-Raida / temporal-htn 0 ncsu-geoforall-lab / sewershed_delineation 0 davidB / sandbox_megalinter 0 thomaseolsen / archaeology-rust-api 0 nvuillam / demo-megalinter-security-flavor 0 christianeiselt / AdventKit 0 dimi4ik / terraform-azurerm-azure-resource-group 0 ngeorger / home-ops 0 asmtal / terraform-mysql-database 0 asmtal / terraform-aws-policy-joiner 0 asmtal / terraform-postgresql-database 0 asmtal / terraform-aws-efs 0 asmtal / terraform-aws-iam-group-set 0 asmtal / terraform-aws-acm-1 0 asmtal / terraform-aws-ecr-repository 0 asmtal / terraform-aws-iam-user 0 asmtal / terraform-aws-elasticache 0 asmtal / terraform-aws-dns-ms 0 asmtal / terraform-aws-dynamodb-1 0 Ramblurr / home-lab 0 ahinko / simple-dhcp 0 DamianFlynn / acf-ref-tf-module-virtual-machine 0 DamianFlynn / gha-workflows 0 DamianFlynn / terraform-scaffold 0 terracharge / terraform-aws-label 0 terracharge / terraform-github-team 0 terracharge / terraform-aws-iam_group 0 terracharge / terraform-aws-network 0 terracharge / terraform-aws-vpn 0 terracharge / terraform-aws-container_definition 0 terracharge / terraform-aws-container 0 terracharge / terraform-aws-function 0 terracharge / terraform-aws-queue 0 terracharge / terraform-aws-kms 0 terracharge / terraform-aws-key_pair 0 terracharge / terraform-aws-database 0 terracharge / terraform-github-organization 0 terracharge / terraform-aws-organization 0 terracharge / terraform-aws-cache 0 terracharge / terraform-aws-dns 0 terracharge / terraform-aws-dynamodb 0 terracharge / terraform-aws-certificate 0 terracharge / terraform-aws-iam_role 0 terracharge / terraform-aws-iam_user 0 terracharge / terraform-aws-repository 0 terracharge / terraform-aws-storage 0 terracharge / terraform-aws-hosting 0 terracharge / terraform-github-repository 0 AbhishekPerficient11 / ApigeeOkta 0 atsekin / repo3 0 atsekin / repo2 0 lambda2331 / repoA 0 lambda2331 / repoC 0 lambda2331 / repoB 0 sbugalski / egzoplanet-chatgpt-o1 0 ani-stas / GreenridgeApp_1 0 ani-stas / GreenridgeApp_3 0 ani-stas / GreenridgeApp_2 0 irinaAbramova-dev / repoC 0 irinaAbramova-dev / repoB 0 irinaAbramova-dev / repoA 0 danielmar121 / repo1 0 slavaguk2000 / repoC 0 slavaguk2000 / repoB 0 DmitrijO / repoC 0 DmitrijO / repoB 0 DmitrijO / repoA 0 maximpoleley / GreenThree 0 maximpoleley / GreenTwo 0 maximpoleley / GreenOne 0 qwantanius / repoC 0 qwantanius / repoB 0 qwantanius / repoA 0 XKiriosX / Repo1 0 seclace / glowing-octo-fiesta 0 seclace / sturdy-octo-memory 0 seclace / super-goggles 0 clddevsecops / linter-demo 0 nababu / devrel 0 manishg345 / repoC 0 manishg345 / repoA 0 NTitmus / simple_module_ml 0 sanjayrane / javascriptB 0 sanjayrane / javascriptC 0 aniketdhole51291 / POC_FetchRepoDetails_3 0 aniketdhole51291 / POC_FetchRepoDetails_2 0 aniketdhole51291 / POC_FetchRepoDetails_1 0 lambaramesh / repoC 0 lambaramesh / repoB 0 lambaramesh / repoA 0 rameshlamba / repoC 0 rameshlamba / repoB 0 rameshlamba / repoA 0 dmitriysolovyev / repoA 0 manchekarRaj / repoB 0 manchekarRaj / repoA 0 manchekarRaj / repoC 0 arieswork / repoC 0 arieswork / repoB 0 arieswork / repoA 0 dethr1der / repoA 0 dethr1der / repoC 0 dethr1der / repoB 0 ABDULJAMAL / repoA 0 daudayal / repoC 0 daudayal / repoA 0 daudayal1987 / repoA 0 IrshadAli0806 / repoC 0 IrshadAli0806 / repoB 0 IrshadAli0806 / repoA 0 sigalsax / repoC 0 sigalsax / repoB 0 ajaysinhgohil77 / repoC 0 ajaysinhgohil77 / repoA 0 ajaysinhgohil77 / repoB 0 shubham7843 / repoC 0 shubham7843 / repoB 0 shubham7843 / repoA 0 RohanDeshpande91 / repoA 0 Abhinav-Shere / repoC 0 Abhinav-Shere / repoB 0 Abhinav-Shere / repoA 0 p-g-krish / Orangek8Server 0 p-g-krish / Orangek8Client 0 p-g-krish / Orangek8ApiGateway 0 ajaytiwari131090 / repoA 0 hemanshu22 / repoA 0 abhayendra / repoC 0 abhayendra / repoB 0 abhayendra / repoA 0 nirajpathak3 / repoC 0 nirajpathak3 / repoB 0 nirajpathak3 / repoA 0 rahulrawal / repoA 0 rahulrawal / repoC 0 rahulrawal / repoB 0 AV3RG / .github 0 yagnesh150415 / taskB 0 Shaydc / repo1 0 ro-shou / github-actions-demo 0 mjain9041 / RepoC 0 mjain9041 / RepoB 0 mjain9041 / RepoA 0 RoyFolkman / repoA 0 jayvoraliaTT / repoA 0 jayvoraliaTT / repoB 0 vinit-trootech / repoC 0 vinit-trootech / repoB 0 jeeran22 / coderepo_B 0 OmerHarell / repoB 0 guypar / repo-a3 0 guypar / repo-a2 0 guypar / repo-a1 0 Niraj123678 / repoC 0 Niraj123678 / repoB 0 YagneshKhamar / GreenridgeApp-3 0 YagneshKhamar / GreenridgeApp-2 0 YagneshKhamar / GreenridgeApp-1 0 harmansingh2908 / repoC 0 avinashparkale / repoA 0 avinashparkale / repoB 0 Siddhant6196 / repoA 0 hemendras092 / repoA 0 guruaa / RepoA 0 AssafZvigoren / repoC 0 AssafZvigoren / repoB 0 AssafZvigoren / repoA 0 NirHarhas / js-test 0 Oraw-lab / RepoB 0 Oraw-lab / RepoA 0 Oraw-lab / RepoC 0 SHAILAJASHEKAR / apigeeterraform 0 oussamazerrouki / terraform-modules 0 yogixni / repositoryC 0 yogixni / repositoryA 0 yogixni / repositoryB 0 wuerthcs / github-workflows 0 neerajpawar9893 / repoC 0 neerajpawar9893 / repoB 0 neerajpawar9893 / repoA 0 Amrit-Kaur31 / repoB 0 Amrit-Kaur31 / repoC 0 Amrit-Kaur31 / repoA 0 AB199 / RepoB 0 AB199 / RepoC 0 kurtkanaskie / product-recommendations-v1 0 g-lalevee / devrel 0 joaherrerama / actinia-stac-plugin 0 msadasivam / devrel 0 eisenheimjelid / eisenheimjelid-pelican 0 p0w3rn3rd / devrel 0 docwhat / ultimate_rust_crash_course 0 roma8389 / GreenridgeApp 0 TonyAzor / Projet-GIT 0 vinhdows10 / complex 0 Dreed657 / RockyPods 0 AngeIo / projet_python_netway 0 hiilyas / Run3Analysisvalidation 0 pchrista / Run3Analysisvalidation 0 Mr-Coxall / ICS4U-Unit1-04-Swift-Microwave 0 Fred-MabS / docker-build-with-actions 0 omusavi / mega-linter-eslint-bug-example 0 urasantonio / Run3Analysisvalidation 0 Phronime / Pro-Jet0 0 markjkelly / devrel 0 NBMueller / SARS-CoV-2_Analysis 0 AlexRogalskiy / sputnik 0 apalasciano / Run3Analysisvalidation 0 ginnocen / Run3Analysisvalidation 0 DeanGodfree / docs 0 ZackHolmberg / COMP4350-Project 0 zhangbiao-phy / Run3Analysisvalidation 0 joe-sharp / old-arduino-projects 0 pablosanchez84 / devrel 0 joe-sharp / treehouse-vue 0 nvuillam / nvuillam.github.io 0 a-billington / google_trends 0 fcatalan92 / Run3Analysisvalidation 0 fgrosa / Run3Analysisvalidation 0 vkucera / Run3Analysisvalidation 0 borysewicz / java-genetic-algorithm 0 ronj / docker-infra 0 zwrawr / sloc 0 manokhina / terraform-modules 0 YicunWendyWu / save-current-tab-to-pocket 0 logankouyoumdjian / projgit 0 pikolinianita / advent-of-code-2015 0 pikolinianita / clojure-actions-workflows 0 Arkko002 / PyWalker 0 adarsh24688 / RepoC 0 adarsh24688 / RepoB 0 adarsh24688 / RepoA 0 PoojaK77 / test03 0 PoojaK77 / test02 0 uakbr / DevSecOps 0 SobolevYuri / scanner_repoB 0 SobolevYuri / scanner_repoA 0 slumdog1 / repoC 0 slumdog1 / repoA 0 tmpgit3000 / GreenridgeApp 0 alexsh88 / GreenridgeApp 0 matejkosiarcik / cssrm 0 matejkosiarcik / sitemap2urllist 0 Yonatanper / Test 0 AdirSamara / repoC 0 AdirSamara / repoB 0 AdirSamara / repoA 0 NotoriousBims / mission-chief-bot-jsons 0 hywmongous / golang-template 0 Jasstkn / gcloud-helmfile 0 llaville / llaville.github.io 0 hybridadmin / ansible-role-clickhouse 0 llaville / flames 0 ckpakbar23 / docker_images 0 consideRatio / docker_images 0 branchvincent / tide 0 djbender / act-docker-images 0 fanninpm / docker_images 0 senorclean / ci_test 0 add54 / Cool_temp_Mac_Pro 0 mariomurillo / ecommerce-exercise 0 mmecommerce / oasiswallet 0 buberdds / oasis-wallet-web 0 OasisUnofficial / oasis-wallet-web 0 reygutierrez11 / excalidraw 0 ChipWolf / mega-linter 0 brunomartinspro / mega-linter 0 llaville / mega-linter 0 vkoski-godaddy / mega-linter 0 vitaliytv / mega-linter 0 mariojaros / npm-groovy-lint 0 lukaw3d / oasis-wallet-web 0 ayyjohn / mega-linter 0 dimitrimonge / sfdx-hardis 0 JimmyTournemaine / mega-linter 0 ktomk / mega-linter 0 joe-sharp / mega-linter 0 saat12d / comprich 0 knkgun / oasis-wallet-web 0 krisztian-sala / node-example-app 0 raaf77 / ocsreports 0 mimmi20 / laminas-module-errorhandling 0 mimmi20 / device-detector-factory 0 mimmi20 / template 0 mimmi20 / contact 0 rciam / simplesamlphp-module-attrauthrestvo 0 rciam / simplesamlphp-module-assurance 0 rciam / simplesamlphp-module-userid 0 Teasel-Ian / terraform 0 omkar-shelke25 / code-editor-app-gitops-cicd 0 mcp-research / co-browser__browser-use-mcp-server 0 andrewvaughan / tuya-smartlife-api 0 Artventuria / API 0 mauries-lopez / Personal-Web-Portfolio 0 TJC-Tools / TJC.StateMachine 0 MCP-Mirror / co-browser_browser-use-mcp-server 0 mitchell-gottlieb / pyquations 0 ONSdigital / eq-cir-management-ui 0 APT4015-GROUP / Grading-System 0 RomanRatushnyi / test-docker-ghcr 0 mcsadmin0 / garage.github.io 0 d10n / trestle-bot-pipeline-test 0 josRosario / git-actions 0 TMorrisCell / SQLWorkflows 0 khulnasoft-lab / actions 0 raven428 / green-wire 0 varunharsha1992 / langchain-search-api 0 WhatshallIbreaktoday / PowerDNS-Admin 0 JorgeO452 / playwright_cucumber_e2e 0 raven428 / tex-resume 0 raven428 / container-images 0 simon-adriaanse / hassio-addons 0 freedomfoss / freedom-foss-template 0 isaackhlam / python-template 0 TerraformFoundation / terraform-azuredevops-naming 0 TerraformFoundation / terraform-aws-gitlab-runner 0 costaquino / git_pdns 0 marklondon999 / twenty_percent 0 domalab / ha-nemy 0 brorlarsnicklas / knipp 0 kecajtop / hassio-addons 0 ruzickap / k8s-multicluster-gitops 0 sjzhu0v0 / O2Physics_local 0 yxtay / dotfiles 0 ezzatty / hrm 0 derekthecool / MyCrossPlatformDotfiles 0 ni140 / fpga-atlas-soc-divider 0 one-acre-fund / message-gateway 0 mkhoatd / actions 0 carlosmscabral / apigee-camara-staging 0 brucellino / ansible-role-umd 0 ScottGibb / Sophies-Fly-Plotter 0 ni140 / zephyr-f411re-irq 0 itiquette / .github 0 ni140 / zephyr-f411re 0 ShaneMcGovern / shanemcgovern.github.io 0 ni140 / zephyr-ci-app 0 ni140 / zephyr-ci-samples 0 janderssonse / eudiw-wallet-issuer-poc 0 IceT5 / servlet 0 CASL0 / toys 0 HiepF5 / NextDomain 0 molnar22 / tesz 0 bindsi / version-badges 0 senz / u4dav 0 ogi02 / Questionnaire-Java-Backend 0 kareo-netops / apigee-terraform-modules 0 cognitedata / tracing-opentelemetry-instrumentation-sdk 0 toniecrumley / journalistics 0 cdviz-dev / cdviz-collector 0 ScottGibb / ci_playground 0 iacavd / Winget-AutoUpdate 0 JakubWierzchowski / manier 0 hbraswelrh / trestle-demo-dev 0 hanklank / git-provider-sync 0 ONSdigital / eq-cir-converter-service 0 khulnasoft / actions 0 joyshmitz / k8s-gitops-rpi-talos 0 mrmxf / opentsg-node 0 chprat / dotfiles 0 MartianFlow / qa-assessment 0 SvenHaedrich / dali_interface 0 liblaf / python-toolkit 0 mrmxf / opentsg-modules 0 TJC-Tools / TJC.Collection.Core 0 TJC-Tools / TJC.Collection.GUI 0 TJC-Tools / TJC.Collection.Console 0 TJC-Tools / TJC.Collection.MVVM 0 TJC-Tools / TJC.MVVM 0 TJC-Tools / TJC.Decorator 0 TJC-Tools / TJC.Priority 0 TJC-Tools / TJC.Inclusion 0 TJC-Tools / TJC.TimeExtensions 0 TJC-Tools / TJC.Singleton 0 TJC-Tools / TJC.AssemblyExtensions 0 TJC-Tools / TJC.Logging 0 TJC-Tools / TJC.StringExtensions 0 TJC-Tools / TJC.VersionExtensions 0 TJC-Tools / TJC.GUI 0 TJC-Tools / TJC.EnumFlags 0 TJC-Tools / TJC.ConsoleApplication 0 RuleTheArk / python-template-demo 0 xmariia55x / swapi 0 aditya2000learning / spring-petclinic-java-megalinter 0 HealthDataInsight / way_of_working-audit-github 0 HealthDataInsight / way_of_working-for-hdi 0 HealthDataInsight / way_of_working-code_of_conduct-contributor_covenant 0 HealthDataInsight / way_of_working-inclusive_language-alex 0 HealthDataInsight / way_of_working-pull_request_template-hdi 0 liblaf / python-cli 0 HealthDataInsight / way_of_working-code_linting-hdi 0 agadecki / malware-cryptominer-container 0 HealthDataInsight / way_of_working-changelog-keepachangelog 0 BIGboss248 / Tool-box 0 HealthDataInsight / way_of_working-decision_record-madr 0 offsoc / ever-gauzy 0 liblaf / pkg 0 liblaf / blog-next 0 liblaf / assets 0 liblaf / rust-cli 0 liblaf / blog 0 liblaf / resume 0 avarcorg / chatops-bot 0 avarcorg / avarc-server 0 commonground-project / backend 0 ahinko / docker-radicale 0 ahinko / buoy 0 Dexter028 / Winget-AutoUpdate 0 delterr / test_repo 0 yonasBSD / mutual-tls 0 ExaDev / analysis 0 practicalli / megalinter-test 0 christianeiselt / Advent-of-Code 0 jmuelbert / jmbde-java 0 NovoNordisk-OpenSource / r.workflows 0 Shaswat2001 / acm_planner 0 one-acre-fund / ph-ee-importer-rdbms 0 ONSdigital / ssdc-rh-service 0 ONSdigital / ssdc-rm-support-tool 0 ONSdigital / ssdc-shared-sample-validation 0 ONSdigital / srm-rh-ui 0 ONSdigital / ssdc-rm-notify-service 0 ramyas96 / hello-world 0 ONSdigital / ssdc-rm-exception-manager 0 ONSdigital / ssdc-rm-docker-dev 0 ONSdigital / ssdc-rm-ddl 0 ONSdigital / ssdc-rm-caseprocessor 0 ONSdigital / ssdc-rm-acceptance-tests 0 tan-c123 / apigee_terraform-modules 0 delterr / ons-python-template-keh 0 SkunkOne / arfx.trade 0 DUQIA / Akylor 0 biosustain / code-quality-check 0 romulo-projects / OCSInventory-Server 0 Portable-Lab / router 0 plcnk / kube-configs 0 jainnitin2411 / CodeReviewPoC 0 arifbalik / self-monorepo 0 rorysavage77 / k8s-security-policy-auditor 0 rartych / .github 0 choatej / gcp-scanner 0 metarex-media / mrx-demo-svc 0 khulnasoft / actions-old 0 jmuelbert / JMPlaster-Templates 0 input-output-global / atala-prism-wallet-sdk-kmm 0 ice-rider / durak-gameloyer 0 moverperfect / party-game-voting 0 moverperfect / Update-Finance-Spreadsheet 0 DavidDragan1 / btr-hrms 0 amplimindcc / jwsvhaen.gmail.com 0 xezzon / zeroweb-spring 0 mambax7 / about 0 AReid987 / CodeQuest 0 caticoa3 / configs 0 oscarmh / DevSecOps 0 CloudHub-Social / CloudHub-Cluster-Temp 0 dustinspecker / rere 0 Bussmeyer / tell 0 ONSdigital / sds-test-repo 0 ONSdigital / ons-python-template-demo 0 w159 / Winget-AutoUpdate 0 JoshTristram / ever-gauzy 0 matejkosiarcik / homelab 0 fitriadi19 / apigee-samples 0 senz / dotfiles 0 Allowebs / ever-gauzy 0 DownAtTheBottomOfTheMoleHole / terraform_module_template 0 genirohtea / obsidian-settings-template 0 Sezguin / react-nextjs-template-repository 0 TWG-sportsclub / twg-sportsclub-mono 0 Barry1 / multi_attach_mail 0 N-SUDY / Telex 0 Naldo-reupo-LIM / bcsl-backend 0 RolfMoleman / terraform_module_template 0 kieranknowles1 / CHEFCookingHelperForEveryonesFridge 0 Softchoice-ACE / bicep-ai900 0 alexanderbazhenoff / jenkins-universal-wrapper-pipeline 0 alexanderbazhenoff / universal-wrapper-pipeline-settings 0 MrS2111 / mega-linters 0 NathanaelTimotius / LinterTesting 0 AlexanderG16 / mega-linter 0 AlexanderG16 / ci-cd 0 actions-marketplace-validations / VietNguyenR_sarif-annotator 0 yakho1432 / tele 0 BIGboss248 / Choclatey 0 VDiBella / InternshipO2 0 winlover32 / Winget-AutoUpdate 0 ivanbaldo / ethdenver2024buidlcampfullstack 0 laywill / CV 0 ryanmerolle / netops-utils 0 Arc-One-CWRU / arc-two 0 matejkosiarcik / personal-scripts 0 aizon-shared / gha-gpg-sign-commits 0 Sezguin / template-repository 0 Javier200107 / Share.it 0 miracum / kafka-connect-images 0 ankita-nema / CxoneServiceRegistry 0 ruzickap / cheatsheet-atom 0 beholdenkey / tpi2-talos 0 andrewvaughan / lfs-test 0 achaussier / demo-nx-react 0 ruzickap / petr.ruzicka.dev 0 ruzickap / my-git-projects 0 ruzickap / gha-test 0 ritik-org-test / with-pipelines 0 hlhc / lego-auto 0 AndreasAugustin / aws-deployment-framework 0 mxbp / github-pipelines 0 jmaero / fortigate-azure-terraform 0 mroua / ERP 0 Flusinerd / vehicle-services 0 DownAtTheBottomOfTheMoleHole / Terraform-Latest 0 diggsweden / jitsi-moderator 0 dcardellino24 / terraform-cloudamqp-instance 0 DmitriySolopenkov / PowerDNS-Admin 0 raman24kumar / test_repo 0 PratikGaner / mock2 0 cdzombak / ytdlbot 0 matejkosiarcik / azminifier 0 PratikGaner / services 0 M4nihere / gauzy 0 M4nihere / gauzy2terraform 0 cdzombak / openweather-influxdb-connector 0 robinmordasiewicz / fortinet-secops-customer-simulation 0 Aleksei-Grigorovskii / gha-test-repo 0 johndutchover / insight-ai-api 0 Venoox / k8s-cluster 0 miracum / registry-on-fhir 0 samsim97 / TestPipeline 0 miracum / .github 0 matejkosiarcik / defaults 0 ramonaZmole / PlawrightWithTypeScript 0 cdzombak / mastodon-post 0 cdzombak / unshorten 0 robpitcher / TerraformAzureActionTemplate 0 cdzombak / windowstack2 0 GenZmeY / KF2-TrueRandomBoss 0 ablyler / aquahawk_client 0 cdzombak / periodic-docker-pull 0 cdzombak / listening 0 A-Sai-Chaithanya / ffmpeg-build 0 vkuehn / mmMover2023_05 0 ablyler / ecobee_influx_connector 0 redgnus / template 0 cdzombak / dirshard 0 one-acre-fund / ph-ee-connector-ams-fineract 0 mauwii / act-docker-images 0 MythicDrops / worldguard-adapters 0 piyushchauhan2011 / my-remix 0 supertemaki / incus-ci 0 wanildopneto / GP2040-CE 0 coldwellhorizon / gauzy 0 javydekoning / besst_proxy 0 ARRIPAPPA / Silentgakanichedham 0 Schandekar1 / spectral-api-linter 0 axelrindle / certbot 0 vargheseibm / bb-app-source 0 MRDGH2821 / CodersPack 0 anushshukla / node.ts 0 itsarshiya / chooni 0 burnsy1882 / IndySCCA-Live 0 geekrishabh / video-app 0 codewdhruv / actions-harness-testing 0 jscheytt / jscheytt.github.io.hugo 0 kinJen39 / alt-jenkins-actions 0 ryan-mcd / cloud-self-hosted-ops 0 fabricesemti80 / home-gitops-cluster 0 skyssolutions / k3s-cluster 0 amlodzianowski / s3-cache-header-setter-python 0 Anonymous17986 / tele 0 puzzler995 / k8s-homelab 0 dochang / asdf-carbonyl 0 Koridore / discel 0 GenZmeY / KF2-BoxPainterLib 0 KoukiSoeda / O2Physics 0 complexcircuit / greyrock-ops 0 ElBe-Development / edgeDeflect 0 puzzler995 / server 0 tandfgroup / engineering 0 marmoure / temp_monit 0 vdbe / kubernetes-cluster 0 tcjoel / a_terraform 0 sarvex / prql 0 Shivayt007 / Telexv3 0 CineHub4U1 / Drama 0 tcjoel / megalinter-config 0 KIT-ISAS / pyLCD 0 FlorianPfaff / pyLCD 0 FlorianPfaff / pyRecEst 0 gardar / ansible-test-molecule 0 FlorianPfaff / bibtex_tools 0 ctbenergy / flux-cluster-k3s-ubuntu-template 0 Jasstkn / lenslocked 0 fisherbln / virt-ops 0 actions-marketplace-validations / yeaung276_sarif-annotator 0 dochang / sheepfold 0 VirtwhoQE / virtwho-ci 0 quickchat-bot / ever-gauzy 0 LanHao0 / lanhao0 0 moverperfect / landingassist 0 dwaned / max-profit-calculator 0 rootuser2023 / Cloning_OCSI 0 kirkview / .github 0 AgentTNT / PowerDNS-Admin 0 Recurve-Things / Test-repo 0 JaderDias / baby_schema 0 WagnerJacqueline / allure-aks-upload-action 0 TestingGitVinoth / AzureDevops 0 AliceO2Group / simulation 0 ShadowsZD / github_actions 0 brettinternet / brettinternet.github.io 0 sg70 / hm-homebridge-addon 0 CrazyKamel / k3s-cluster 0 proinsias / homebrew-drivers-old 0 alexvannoy / flux-cluster-template 0 ADeane6 / flux-cluster 0 jorgiuxs / Rodaku-Home-cluster 0 rational-net / virgo-k8s 0 patkaehuaea / argocd-cluster 0 szymonos / mkdocs-devops 0 timalpha / home-ops 0 csacca / home-infra2 0 KoukiSoeda / O2Physics_old 0 privsim / friendly-inquisitive 0 bownie / cto-game 0 tkuennen / flux-shortstack 0 andrewb76 / cv 0 mdaydevelopment / k8s-cluster 0 staringatsun / legendary-happiness 0 MRDGH2821 / Factorio-Blueprint-Upgrade-Patcher 0 ctbenergy / flux-cluster-staging 0 ly4e / github-actions-testing 0 junhsss / flux-cluster 0 girlpunk / RAVEN 0 zednotdead / talos-cluster 0 attiolli / onedrop-template 0 NilssonCJ / k3s-nsdev-sidious 0 fabricesemti80 / home-ops 0 acez7 / flux-cluster-template 0 hwestman / k3-infrastructure 0 mvandermeulen / cluster-in-flux 0 easir / workflows 0 ArjanPronk / local-k3s-cluster 0 jokay / jokay 0 jokay / .github 0 jaken1986 / demo-day 0 csacca / home-ops 0 funkel1989 / kube-v1 0 asujata / home-ops 0 cloudcap10 / talz-cluster 0 vdbe / homelab 0 jr0dd / aws-gitops 0 brandonmcclure / friendly-chainsaw-docker 0 Panxatony / deskpi6c-kubernetes 0 mrtolkien / cluster 0 evanja / flux-cluster 0 lucawen / homelab_v2 0 simplerick0 / com.ackhax.cluster 0 spacesyl / klus 0 mrtolkien / cluster-old 0 supertemaki / distrobuilder-build 0 wesley-dean / mega-linter-plugin-fmlint 0 c4c-azure / c4c-ARO-RP 0 wesley-dean / mega-linter-plugin-dclint 0 ldang-sc / ScubaGear 0 warlysbs / checkup365 0 w159 / ScubaGear 0 wesley-dean / routeros_ssl 0 Cerulli-Associates / ScubaGear 0 MauroDataMapper-Plugins / mdm-plugin-explorer 0 Relayer55 / Scbagear 0 MauroDataMapper-Plugins / mdm-plugin-authentication-openid-connect 0 holtkampjs / ziglang-docker 0 robinwalterfit / LatexWorks 0 MauroDataMapper-Plugins / mdm-plugin-dita 0 WellKnitTech / ScubaGear 0 mc365DEVOPS / ScubaGear 0 MauroDataMapper-NHSD / mdm-plugin-nhs-data-dictionary 0 MauroDataMapper / dita-groovy-dsl 0 martadams89 / netlog-viewer 0 robinwalterfit / docker-almalinux9-ansible 0 robinwalterfit / docker-almalinux8-ansible 0 CAETechnology / ScubaGear 0 ARPA-H / ScubaGear 0 Entepotenz / AutoUnsubscriber 0 ScorpionBytes / ScubaGear 0 Entepotenz / Vivawest_Nebenkosten_Scraper 0 james-garriss / test-secret-scanner 0 aythrea / AthenaStack 0 MelvinCou / .github-sample 0 fuzzmaestrotest / ARO_TEST 0 beiertu-mms / shell-scripts 0 ly4e / kali-gui-container-image 0 ly4e / prelude-operator-headless 0 NanashiTheNameless / Horizon-State-RP 0 ncalteen / ncalteen 0 diz-unimr / fhir-alarm 0 minarai-niwashi / anki-ai-editor 0 diz-unimr / mdr-service 0 julieInnovet / siteweb_innovet_tech 0 cloud-fast-track / fast-track-app 0 ivuorinen / actions 0 KubeArchitect / renovate-runner 0 diz-unimr / ops-med 0 minarai-niwashi / dotfiles 0 vyas-n / vyas-n 0 CrAzYgRl24 / local-action 0 diz-unimr / flint 0 9elements / firmware-action-toolchains 0 diz-unimr / term-mapper 0 githubschool / gh-github-intermediate-setup 0 minarai-niwashi / pyscipopt-devcontainer 0 9elements / bmc-test-go 0 kyhule / polyworld-workflows 0 minarai-niwashi / pytorch-cuda-devcontainer 0 minarai-niwashi / python-devcontainer 0 diz-unimr / pseudonymous 0 diz-unimr / patient-to-fhir 0 alanavery / ferrara-candy-web-test 0 senz / cheatsheet-config-template 0 senz / cheatsheet-config 0 senz / cheatsheet-generator 0 alanavery / ferrara-scanner-poc 0 diz-unimr / kafka-pseudonymizer 0 mkos11 / flatdesk 0 diz-unimr / fhir-to-server 0 NaokiMori076 / Web-Seach-Engine 0 diz-unimr / lab-to-fhir 0 nsheaps / devsetup 0 JaderDias / rust_dynamodb_local 0 LukeEvansTech / hugo-communityspeakers 0 VinzenzBildstein / HigsFrame 0 embedded-pro / embedded-motor-reference 0 rartych / xCAMARA-tooling 0 n0v4org / Rtype 0 MRDGH2821 / C-Code-Dump 0 codingwithmagga / mathvizanimator 0 ankita-nema / ValidationAndHook 0 ankita-nema / SampleWebhook 0 ScottGibb / LED-Strip-Controller-Software 0 practicalli / git 0 ashtmMSFTorg / val2-bicep2-gh2 0 ashtmMSFTorg / val-tf-gh 0 ashtmMSFTorg / val-bicep-gh 0 ashtmMSFTorg / mt-bicep-symphony 0 ashtmMSFTorg / mt-tf-symphony2 0 Society-In-Shadow / ExpressedRealms 0 adreasnow / slogzlog 0 adreasnow / otelzlog 0 adreasnow / otelstack 0 ashtmMSFTorg / bicep-symphony 0 ashtmMSFTorg / fifth-symphony 0 ashtmMSFTorg / external-symphony 0 Dicondur / symphony 0 jdnricardo / lighthouses 0 ashtmMSFTorg / fourth-symphony 0 ScottGibb / ScottGibb 0 fchastanet / my-documents 0 yvesfso / symphony-lab 0 practicalli / clojure-kafka 0 Zochory / symphony 0 amyhuan / symphony-example 0 nmangnale / foss_photo_libraries 0 hadwagaber / symphony_demo 0 kireque / esphome-config 0 practicalli / sustainable-life 0 AvinZarlez / SymphonyTest 0 danielsollondon / teamprojects 0 infeeny / build2024demo 0 Hawthorne001 / amplitude-dev-center 0 symphonyOrganization / symphonyRepo 0 alterway / symphony-iac-cs 0 pazdedav / symphony-bicep 0 matsest / symphony-demo 0 RelativeSure / ansible-wsl2-playbook 0 doonga / esphome-config 0 felipegfalcao / felipegfalcao.github.io 0 practicalli / software-engineering 0 kaizentm / airlift2023_symphony 0 shobokshi / symphony-demo 0 andrewvaughan / recipes 0 motoish / jb-notes 0 actions-marketplace-validations / ahmadnassri_action-changed-files 0 withinfocus / withinfocus 0 BishopClassicMotors / .github 0 practicalli / amazon-web-services 0 actions-marketplace-validations / ahmadnassri_action-npm-global-path 0 actions-marketplace-validations / ahmadnassri_action-metadata 0 actions-marketplace-validations / ahmadnassri_action-google-cloud-sql-proxy 0 actions-marketplace-validations / ahmadnassri_action-github-registry-npm-proxy 0 actions-marketplace-validations / ahmadnassri_action-dotenv 0 MRDGH2821 / MRDGH2821 0 jmuelbert / qt_conan_boilerplate_template 0 m-ringler / straights 0 vadymkhyzhniak / libczi-main 0 brandonmcclure / LudumDare56 0 EulerGatesTechnologies / usbipd-win 0 brett2uk / usbipd-win 0 ptahmose / czirepairjpgxr-libczi 0 Baneeishaque / srecord 0 izzygarcia9 / usbip 0 quiltdata / quiltcore-java 0 jyotidwi / usbipd-win 0 ZEISS / warpaffine 0 withinfocus / invintory-updater 0 thijnmens / TournamentAssistant 0 DaveyJonesBitPail / libczi 0 m-ringler / czicompress 0 trifork / cheetah-example-webapi 0 data-yaml / udc-js 0 dorssel / workflows 0 Vocario / com.vocario.eventbasedarchitecture 0 Vocario / com.vocario.gamestatemanager 0 jmuelbert / jmuelbert.github.io 0 brandonmcclure / elixir-devcontainer 0 lumarel / PowerShell_Scripts 0 brandonmcclure / devcontainers 0 jmuelbert / cleardirectory 0 brandonmcclure / LudamDare52 0 inmortalbobz / usbipd-win 0 brandonmcclure / vscode-pwsh 0 brandonmcclure / elixir_helloworld 0 brandonmcclure / unitybuild_test 0 brandonmcclure / ansible-role-githubrunner 0 Team-AB-DevOps / ab-dev-ops 0 fchastanet / bash-tools-command-bookmarker 0 caopengau / git-jira-release 0 metarex-media / mxf-to-go-generator 0 metarex-media / mrx-demo 0 metarex-media / mxf-to-go 0 ortelius / scec-ortelius-cli 0 asphaltbuffet / newed 0 linuxfoundation / auth0-cas-server-go 0 fchastanet / bash-compiler 0 ortelius / scec-nginx 0 orangekame3 / megalinter-sample 0 ricardojonathanromero / devsecops 0 orangekame3 / cobra-template 0 orangekame3 / s3cp 0 orangekame3 / irodori 0 ortelius / scec-frontend 0 gluwa / subscan-essentials 0 ortelius / scec-validate-user 0 ortelius / scec-validate-signing 0 ortelius / scec-validate-provenance 0 ortelius / scec-usergroup 0 ortelius / scec-user 0 ortelius / scec-textfile 0 ortelius / scec-scorecard 0 ortelius / scec-group 0 ortelius / scec-environment 0 ortelius / scec-deppkg 0 ortelius / scec-deployment 0 ortelius / scec-compver 0 ortelius / scec-comp-tag 0 ortelius / scec-appver 0 ortelius / scec-app-tag 0 ortelius / scec-domain 0 practicalli-johnny / landing-page-reagent-optional 0 camaraproject / EnergyFootprintNotification 0 APHA-CSU / GenomicDataService 0 frschboyy / Grade 0 CG-AA / silly_pong 0 negadras / JEP 0 camaraproject / DedicatedNetworks 0 javierrweiss / logging-servoy 0 APHA-CSU / DataAnalysisService 0 javierrweiss / lad-webhook 0 Tobiesp / TelePrompter 0 VuksanFilip / test 0 Petrobot-Org / unistart-bot 0 nkor8016 / linter-project 0 Jayllyz / DevManager 0 camara-org / QualityOnDemand 0 GitFenixZ / slither 0 beiertu-mms / sonarqube-report 0 rciam / keycloak-rciam-metrics-plugin 0 charkchalk / backend 0 ncalteen / kdm 0 Alex-diaz00 / nest-ingenius-test 0 UNLP-Accesible / unlp-accesible 0 Create-Node-App / website 0 kabisa / action-dependabot-auto-merge 0 seilorjunior / megalinter 0 mmottl / megalinter 0 wrap-org / evergreen 0 thevladbog / event-horizon 0 CristopherArtGo / globe-socmed-sentiments-api 0 issue-ops / demo-reservation-action 0 TanyaSpv / Playwright_Project 0 Imamiland / banned_books_jeopardy 0 hallen95 / goals-crew-be 0 mmraisi / template-node-js 0 GCbeheo / TrueShort-npm-groovy-lint 0 tysontrinh-tru / npm-groovy-lint 0 Vahelnir / test-megalinter 0 MauroDataMapper / mdm-resources 0 dhiagara / skilledhandsBack 0 YoutacRandS-VA / npm-groovy-lint 0 khulnasoft-lab / dependabot-auto-merge 0 asml-actions-validation / megalinter 0 wrap-org / tokens 0 Mahmoudhpp / npm-i-node-sarif-builder 0 Mahmoudhpp / feat-undowngrade-kubescape 0 anuragyadav20062002 / MERN-Ecommerce-bookstore 0 etchteam / mobius 0 TrueShort / npm-groovy-lint 0 pryzm-finance / pryzmaticsjs 0 refractedlabs / flowtradejs 0 refractedlabs / cosmology-lcd-fork 0 feeedback / otus-highload-architect 0 junaidaslam786 / accounts 0 RelativeSure / personal-nextra-site 0 sarvex / CasaOS 0 zendesk / action-dependabot-auto-merge 0 fevrin / megalinter 0 peersky / changeset-template 0 ELynx / screeps-arena 0 etchteam / recycling-locator 0 MoyoBongani / Rich-Web-Applications-lab-4 0 justineclaire / RichWebApp 0 buluma / dependabot-auto-merge-action 0 nadjib1234 / cvmaker 0 sarvex / cling 0 echoix / npm-groovy-lint 0 sarvex / phaser 0 sarvex / tornado 0 sarvex / rails 0 sarvex / deeplearning4j 0 sarvex / rust-lang 0 sarvex / microconfig-idea-plugin 0 sarvex / microconfig-server 0 sarvex / microconfig 0 sarvex / 3d-portfolio 0 sarvex / headscale 0 sarvex / b2b-saaskit 0 sarvex / Babylon.js 0 sarvex / locust 0 sarvex / nostr-watch 0 sarvex / blogster 0 sarvex / flowbite-vue 0 sarvex / excalidraw 0 sarvex / buefy 0 sarvex / requarks-wiki 0 sarvex / dashy 0 sarvex / woonuxt 0 sarvex / docus 0 sarvex / vue-leaflet 0 sarvex / muffon 0 sarvex / OpnForm 0 sarvex / vuestic-ui 0 sarvex / mainsail 0 sarvex / rancher-dashboard 0 sarvex / VueTorrent 0 sarvex / snapshot 0 sarvex / varlet 0 sarvex / carbon-components-svelte 0 sarvex / vite-plugin-svelte 0 sarvex / svelte-hmr 0 sarvex / svelte-site-kit 0 sarvex / sveltekit 0 sarvex / svelte 0 sarvex / learn.svelte.dev 0 sarvex / better-discord-Installer 0 sarvex / awesome-sveltekit 0 sarvex / astro-landing-page 0 sarvex / astro-theme-cactus 0 sarvex / astrofy 0 sarvex / python-cheatsheet-js 0 sarvex / ps-hud 0 sarvex / skeleton 0 sarvex / svelte-put 0 sarvex / daisyui 0 sarvex / DeepLabCut 0 sarvex / directus 0 sarvex / react-email 0 sarvex / vant 0 sarvex / openapi-generator 0 sarvex / angular-components 0 sarvex / tinacms 0 sarvex / superset 0 sarvex / rxdb 0 sarvex / incubator-answer 0 sarvex / fluentui 0 sarvex / unleash 0 sarvex / plate 0 sarvex / kafka-ui 0 sarvex / black 0 sarvex / actual 0 sarvex / CasaOS-UI 0 sarvex / CasaOS-AppManagement 0 sarvex / CasaOS-Gateway 0 sarvex / CasaOS-LocalStorage 0 sarvex / CasaOS-Installer 0 sarvex / CasaOS-CLI 0 sarvex / pizza-menu 0 sarvex / cockpit 0 sarvex / MetaGPT 0 sarvex / homepage 0 sarvex / mistral-src 0 sarvex / mistral 0 sarvex / learning-management-system 0 sarvex / athleticxr.ai 0 sarvex / semantic-kernel 0 sarvex / RoboSpice 0 sarvex / retrofit 0 sarvex / springside4 0 sarvex / titan 0 sarvex / spring-android 0 sarvex / open-interpreter 0 sarvex / adopt-me 0 sarvex / xv6-riscv 0 sarvex / wing 0 sarvex / ChatDev 0 sarvex / godot 0 sarvex / application-set 0 sarvex / meshery 0 sarvex / gitpod 0 sarvex / optimism 0 sarvex / cortex-project 0 sarvex / dendrite 0 sarvex / podman 0 sarvex / minio 0 sarvex / gitops-engine 0 sarvex / colima 0 sarvex / openshift-hive 0 sarvex / tanzu-community 0 sarvex / terraform-provider-aws 0 sarvex / kitex 0 sarvex / temporal 0 sarvex / thanos 0 sarvex / svl-simulator 0 sarvex / bee 0 sarvex / cortex 0 sarvex / go-essential-training 0 sarvex / go-vulndb 0 sarvex / kubernetes-enhancements 0 sarvex / ent 0 sarvex / phoneinfoga 0 sarvex / engo 0 sarvex / go-for-python-developers 0 sarvex / sampler 0 sarvex / kubernetes-community 0 sarvex / doris 0 sarvex / VALL-E-X 0 sarvex / envoy 0 sarvex / ParlAI 0 sarvex / DouZero 0 sarvex / finetuner 0 sarvex / jina-now 0 sarvex / azureml-examples 0 sarvex / saleor 0 sarvex / rasa 0 sarvex / home-assistant-supervisor 0 sarvex / manim 0 sarvex / Accera 0 sarvex / metamorphic-contract-detector 0 sarvex / OpenAssistant 0 sarvex / jina 0 sarvex / stable-diffusion-webui 0 sarvex / awx 0 sarvex / sample-projects 0 sarvex / game-winter-z-hg2 0 sarvex / harfang-plugin-ffmpeg 0 sarvex / game-astrolander-cesi-nanterre 0 sarvex / harfang-wasm 0 sarvex / tutorials-cpp-hg2 0 sarvex / snooker-python-hg2 0 sarvex / tutorials-hg2 0 sarvex / harfang-ui 0 sarvex / python-digital-twin 0 sarvex / dogfight-sandbox-hg2 0 sarvex / harfang3d 0 sarvex / github-services 0 sarvex / metasploit-framework 0 sarvex / gitlabhq 0 sarvex / diaspora 0 sarvex / github-changelog-generator 0 sarvex / theodinproject 0 sarvex / discourse 0 sarvex / youtube-nextjs-13-demo 0 sarvex / hoptoad_notifier 0 sarvex / markup 0 sarvex / vagrant 0 sarvex / shuttle 0 sarvex / challenges 0 sarvex / sprout-osx-apps 0 sarvex / BigBlueButton 0 sarvex / twitterdemo 0 sarvex / KhanExercises 0 sarvex / gojekyll 0 sarvex / terraform-aws-eks 0 sarvex / codellama 0 sarvex / WickedEngine 0 sarvex / CoDeF 0 sarvex / pysonar2 0 sarvex / DataflowTemplates 0 sarvex / ea-async 0 sarvex / full-stack-ts 0 rasa / megalinter 0 sarvex / think-cell-library 0 sarvex / leetcode-cpp-23 0 sarvex / svelte-add 0 andrewvaughan / megalinter 0 sarvex / next.js 0 sarvex / awadb 0 sarvex / advent-of-code-rust 0 sarvex / code-raiders 0 sarvex / glaurung 0 0xshimon / megalinter 0 ahmadnassri / node-static-site-generator 0 sarvex / Hazel 0 sarvex / hug 0 doperiddle / oasis-wallet-web 0 sarvex / dash 0 sarvex / lapce 0 sarvex / marko 0 sarvex / tabby 0 sarvex / swift-collections 0 sarvex / whisper 0 sarvex / k3s 0 sarvex / CodeGeeX 0 sarvex / FasterTransformer 0 sarvex / lottie-ios 0 sarvex / noodle 0 sarvex / vscode-vite 0 sarvex / runme 0 sarvex / unilm 0 sarvex / rclone 0 sarvex / primihub 0 sarvex / redis-py 0 sarvex / carbon-design-system 0 sarvex / joy-of-code 0 sarvex / AstroNvim 0 sarvex / mmaction2 0 sarvex / spaCy 0 sarvex / composer 0 sarvex / streaming 0 sarvex / livebook 0 sarvex / DragGAN 0 sarvex / CosmicNvim 0 sarvex / leetcode-next 0 sarvex / lobster 0 sarvex / crates.io 0 sarvex / .files 0 sarvex / kakoune 0 sarvex / lit 0 sarvex / slint 0 sarvex / ExpensifyApp 0 sarvex / super-gradients 0 sarvex / KernelSU 0 sarvex / CodeEdit 0 sarvex / helix 0 sarvex / ui 0 sarvex / breadit 0 sarvex / yookta.com 0 sarvex / xauny.com 0 sarvex / vysad.com 0 sarvex / vypan.com 0 sarvex / vibhuty.com 0 sarvex / upkrn.com 0 sarvex / qusyd.com 0 sarvex / punnan.com 0 sarvex / prarcan.com 0 sarvex / prajyakalp.com 0 sarvex / poorty.com 0 sarvex / nyrupt.com 0 sarvex / nirupit.com 0 sarvex / nabhilax.com 0 sarvex / labdhy.com 0 sarvex / jatasra.com 0 sarvex / ixipro.com 0 sarvex / harmaxa.com 0 sarvex / chytr.com 0 sarvex / bhanjak.com 0 sarvex / aushadhy.com 0 sarvex / araugya.com 0 sarvex / apeyro.com 0 sarvex / com-meta 0 sarvex / simple_cms 0 sarvex / offensive-scopes 0 sarvex / comprehensive-rust 0 sjatasra / comprehensive-rust 0 sarvex / popular-parsec 0 sarvex / astro-crash-course 0 sarvex / unleashed-firmware 0 sarvex / spin 0 sarvex / ghidra 0 sarvex / SpaceVim 0 sarvex / playwright-ct-qwik 0 sarvex / qwik-flow 0 sarvex / qwik-inject 0 sarvex / qwik-cypress 0 sarvex / qwik-image 0 sarvex / qwik-ui 0 sarvex / rust-by-practice 0 sarvex / create-o7-app 0 sarvex / create-jd-app 0 sarvex / sidebase 0 sarvex / bling 0 sarvex / chotyk.com 0 sarvex / FlagAI 0 sarvex / radon 0 sarvex / offensive-objcpp 0 sarvex / offensive-racket 0 sarvex / c-maelstrom 0 sarvex / clojure-maelstrom 0 sarvex / cpp-front-maelstrom 0 sarvex / c-sharp-maelstrom 0 sarvex / c3-maelstrom 0 sarvex / carbon-maelstrom 0 sarvex / cpp-gold-maelstrom 0 sarvex / harbour-maelstrom 0 sarvex / java-maelstrom 0 sarvex / ispc-maelstrom 0 sarvex / cuda-maelstrom 0 sarvex / redux-demo 0 codemaestro11 / nest-auth 0 sarvex / megalinter 0 psolutions-gmbh / myhangar 0 leosuncin / mere-defiant 0 SER516-Team-Morpheus / scrum-simulator 0 dilincoln / capivara-planning-poker 0 actions-marketplace-validations / ahmadnassri_action-template-repository-sync 0 actions-marketplace-validations / dgteixeira_pr-status-giphy-action 0 snaquekiller / TeamsTagsMessage 0 leosuncin / todomvc-ngrx-app 0 actions-marketplace-validations / chill-viking_npm-ci 0 actions-marketplace-validations / ahmadnassri_action-commit-lint 0 actions-marketplace-validations / ahmadnassri_action-terraform-report 0 actions-marketplace-validations / Nautilus-Cyberneering_git-queue 0 actions-marketplace-validations / oxsecurity_megalinter 0 Satsuger / NestAuth 0 tintincita / nest-test 0 react-universe / suplint 0 MRDGH2821 / use-custom-env 0 ahmadnassri / node-terraform-unidiff 0 ahmadnassri / node-oas-request-readme 0 ahmadnassri / node-ahmad 0 samardzicneo / md324-2024-prj01 0 Traydr / ppm 0 ScottGibb / LED-Strip-Controller-TUI 0 ScottGibb / LED-Strip-Controller-Octoprint 0 nwiltsie / python-package-template 0 wesley-dean / network-based-config 0 Uninett / netsnmp-cffi 0 Algol13 / AlgolStation 0 ElegantDev43 / cdn-maintenance-toggle 0 1898andCo / spindle 0 nwiltsie / ResearchAutomation 0 dianlight / ha-mqtt-discoverable 0 iferaorg / iferadata 0 Joeffison / plantswap 0 jackbukhsa / test_repository_megalinter 0 UAlbertaFSAE / f1tenth 0 quiltdata / athena-federation-python-sdk 0 iferaorg / lambdalabs-terminate-action 0 iferaorg / lambdalabs-launch-action 0 FlowLoom / spindle 0 k2io / apm-python-agent 0 iferaorg / lambdalabs-tests 0 wesley-dean / dht11_mqtt 0 laywill / 2spooky4me 0 wesley-dean / pre-commit-checker 0 Robinysh / Lay-Summary-RLHF 0 wesley-dean / sync_github_org_team 0 DartNep / OnyxAuroraByNep 0 Jimimaku / robotframework-robocop 0 zhuohb644 / auroraTest 0 ortelius / scec-arangodb 0 MRDGH2821 / Python-Code-Dump 0 alexey74 / str_blog 0 Tsunarr / conarr-backend 0 kiwitcms / gitops 0 ortelius / ms-postgres 0 newrelic-csec / newrelic-python-agent 0 k2io / newrelic-python-agent 0 lrafeei / newrelic-python-agent 0 fixer-coder / banking-system 0 data-yaml / auto-analyze 0 mdrocan / Fronius-stats 0 sbtaylor15 / ms-setenv-action 0 DeployHubProject / ms-cr-action 0 sbtaylor15 / ms-release-action 0 sbtaylor15 / ms-sbom-action 0 ghas-results / newrelic-python-agent 0 actions-marketplace-validations / parkerbxyz_guru-to-github 0 ortelius / ms-sbom-export 0 lyricnz / nbn-upgrade-map 0 epleypa / Home-AssistantConfig 0 data-yaml / un-yaml 0 juiveli / labyrinthGame 0 ortelius / ms-scorecard 0 ortelius / ms-validate-user 0 ortelius / ms-textfile-crud 0 ortelius / ms-dep-pkg-cud 0 root-and-blade / .github 0 ortelius / ms-dep-pkg-r 0 vkhitrin / jiav 0 bertybuttface / youtube-lounge-rs 0 ScottGibb / HC-SR501-Node-Red-Presence-Detector 0 macha-vasanth / Org-Monitoring 0 freednara / ECRM-Production 0 ashishrajbanshi / sfdx-hardis 0 cristiaan30033 / sfdx-hardis.cloudity-training 0 marcoalmodova / test-hardis 0 fpardon-upeo / krinkels-monitoring 0 jawills / sfdx-hardis-monitoring-template 0 jleiby3 / test-actions 0 marcelmaatkamp / mixed-java-scala-test 0 scecloud / scecloud.github.io 0 kdaweb / certbotbot 0 wesley-dean / mega-linter-plugin-j2lint 0 wesley-dean / mega-linter-plugin-repolinter 0 metabsd / toolbox-container 0 Jayllyz / dockerize-project 0 techtales-io / terraform-minio 0 techtales-io / terraform-opnsense 0 AhmadHamada1 / terraform-azure-github-actions 0 nanlabs / terraform-modules 0 ShatnoRD / terraform-docker-iac-template 0 trash-panda-v91-beta / nebular-grid 0 MRDGH2821 / CasaOS-Extended-App-Store 0 pippiio / aws-ecr 0 fchastanet / bash-dev-env 0 nosportugal / .github 0 n3mawashi / pan-ssm-cicd-poc 0 NTitmus / terrascan3 0 NTitmus / terrascan1 0 tyriis / bedrock-tags 0 shawly / ansible-role-compose_cleric 0 shawly / ansible-role-compose_artificer 0 tyriis / win2day-check 0 AndreySlivk23 / judst 0 ashrafulislamcs / aws-modernisation-platform 0 wesley-dean-flexion / jubilant-computing-machine 0 wesley-dean-flexion / repository_updated 0 wesley-dean-flexion / alpine_package_pinner 0 wesley-dean / prettier 0 pippiio / template 0 pippiio / tfcloud-organization 0 pippiio / github-organization 0 pippiio / aws-static-website 0 pippiio / aws-dns 0 pippiio / aws-organization 0 <p>Generated using github-dependents-info, by Nicolas Vuillamy</p>"},{"location":"descriptors/action/","title":"ACTION linters in MegaLinter","text":""},{"location":"descriptors/action/#action","title":"ACTION","text":""},{"location":"descriptors/action/#linters","title":"Linters","text":"Linter Additional actionlintACTION_ACTIONLINT"},{"location":"descriptors/action/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> </ul> </li> </ul>"},{"location":"descriptors/action/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value ACTION_PRE_COMMANDS List of bash commands to run before the linters None ACTION_POST_COMMANDS List of bash commands to run after the linters None ACTION_FILTER_REGEX_INCLUDE Custom regex including filter ACTION_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/action_actionlint/","title":"actionlint configuration in MegaLinter","text":""},{"location":"descriptors/action_actionlint/#actionlint","title":"actionlint","text":"<p>Static checker for GitHub Actions workflow files</p>"},{"location":"descriptors/action_actionlint/#actionlint-documentation","title":"actionlint documentation","text":"<ul> <li>Version in MegaLinter: 1.7.7</li> <li>Visit Official Web Site</li> <li>See How to configure actionlint rules</li> </ul>"},{"location":"descriptors/action_actionlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable actionlint by adding <code>ACTION_ACTIONLINT</code> in ENABLE_LINTERS variable</li> <li>Disable actionlint by adding <code>ACTION_ACTIONLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value ACTION_ACTIONLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> ACTION_ACTIONLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> ACTION_ACTIONLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file ACTION_ACTIONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file ACTION_ACTIONLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> ACTION_ACTIONLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\"]</code> ACTION_ACTIONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file ACTION_ACTIONLINT_PRE_COMMANDS List of bash commands to run before the linter None ACTION_ACTIONLINT_POST_COMMANDS List of bash commands to run after the linter None ACTION_ACTIONLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling ACTION_ACTIONLINT and its pre/post commands None ACTION_ACTIONLINT_CONFIG_FILE actionlint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>actionlint.yml</code> ACTION_ACTIONLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ACTION_ACTIONLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> ACTION_ACTIONLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> ACTION_ACTIONLINT_CLI_EXECUTABLE Override CLI executable <code>['actionlint']</code> ACTION_DIRECTORY Directory containing ACTION files (use <code>any</code> to always activate the linter) <code>.github/workflows</code>"},{"location":"descriptors/action_actionlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/action_actionlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/action_actionlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>.github/workflows</code> is found. (directory name can be overridden with <code>ACTION_DIRECTORY</code>)</li> <li>File extensions: <code>.yml</code>, <code>.yaml</code></li> </ul>"},{"location":"descriptors/action_actionlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>actionlint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/action_actionlint/#example-calls","title":"Example calls","text":"<pre><code>actionlint /path/to/workflow1.yml /path/to/workflow2.yaml\n</code></pre>"},{"location":"descriptors/action_actionlint/#help-content","title":"Help content","text":"<pre><code>Usage: actionlint [FLAGS] [FILES...] [-]\n\n  actionlint is a linter for GitHub Actions workflow files.\n\n  To check all YAML files in current repository, just run actionlint without\n  arguments. It automatically finds the nearest '.github/workflows' directory:\n\n    $ actionlint\n\n  To check specific files, pass the file paths as arguments:\n\n    $ actionlint file1.yaml file2.yaml\n\n  To check content which is not saved in file yet (e.g. output from some\n  command), pass - argument. It reads stdin and checks it as workflow file:\n\n    $ actionlint -\n\n  To serialize errors into JSON, use -format option. It allows to format error\n  messages flexibly with Go template syntax.\n\n    $ actionlint -format '{{json .}}'\n\nDocuments:\n\n  - List of checks: https://github.com/rhysd/actionlint/tree/v1.7.7/docs/checks.md\n  - Usage:          https://github.com/rhysd/actionlint/tree/v1.7.7/docs/usage.md\n  - Configuration:  https://github.com/rhysd/actionlint/tree/v1.7.7/docs/config.md\n\nFlags:\n  -color\n      Always enable colorful output. This is useful to force colorful outputs\n  -config-file string\n      File path to config file\n  -debug\n      Enable debug output (for development)\n  -format string\n      Custom template to format error messages in Go template syntax. See the usage documentation for more details\n  -ignore value\n      Regular expression matching to error messages you want to ignore. This flag is repeatable\n  -init-config\n      Generate default config file at .github/actionlint.yaml in current project\n  -no-color\n      Disable colorful output\n  -oneline\n      Use one line per one error. Useful for reading error messages from programs\n  -pyflakes string\n      Command name or file path of \"pyflakes\" external command. If empty, pyflakes integration will be disabled (default \"pyflakes\")\n  -shellcheck string\n      Command name or file path of \"shellcheck\" external command. If empty, shellcheck integration will be disabled (default \"shellcheck\")\n  -stdin-filename string\n      File name when reading input from stdin (default \"&lt;stdin&gt;\")\n  -verbose\n      Enable verbose output\n  -version\n      Show version and how this binary was installed\n</code></pre>"},{"location":"descriptors/action_actionlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=rhysd/actionlint\nARG ACTION_ACTIONLINT_VERSION=1.7.7\n# renovate: datasource=docker depName=koalaman/shellcheck\nARG BASH_SHELLCHECK_VERSION=v0.10.0\nFROM rhysd/actionlint:${ACTION_ACTIONLINT_VERSION} AS actionlint\n# shellcheck is a dependency for actionlint\nFROM koalaman/shellcheck:${BASH_SHELLCHECK_VERSION} AS shellcheck\nCOPY --link --from=actionlint /usr/local/bin/actionlint /usr/bin/actionlint\n# shellcheck is a dependency for actionlint\nCOPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>py3-pyflakes</li> </ul> </li> </ul>"},{"location":"descriptors/ansible/","title":"ANSIBLE linters in MegaLinter","text":""},{"location":"descriptors/ansible/#ansible","title":"ANSIBLE","text":""},{"location":"descriptors/ansible/#linters","title":"Linters","text":"Linter Additional ansible-lintANSIBLE_ANSIBLE_LINT"},{"location":"descriptors/ansible/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> </ul> </li> </ul>"},{"location":"descriptors/ansible/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value ANSIBLE_PRE_COMMANDS List of bash commands to run before the linters None ANSIBLE_POST_COMMANDS List of bash commands to run after the linters None ANSIBLE_FILTER_REGEX_INCLUDE Custom regex including filter ANSIBLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/ansible_ansible_lint/","title":"ansible-lint configuration in MegaLinter","text":""},{"location":"descriptors/ansible_ansible_lint/#ansible-lint","title":"ansible-lint","text":""},{"location":"descriptors/ansible_ansible_lint/#ansible-lint-documentation","title":"ansible-lint documentation","text":"<ul> <li>Version in MegaLinter: 25.4.0</li> <li>Visit Official Web Site</li> <li>See How to configure ansible-lint rules<ul> <li>If custom <code>.ansible-lint</code> config file isn't found, .ansible-lint will be used</li> </ul> </li> <li>See How to disable ansible-lint rules in files</li> <li>See Index of problems detected by ansible-lint</li> </ul>"},{"location":"descriptors/ansible_ansible_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ansible-lint by adding <code>ANSIBLE_ANSIBLE_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable ansible-lint by adding <code>ANSIBLE_ANSIBLE_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value ANSIBLE_ANSIBLE_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> ANSIBLE_ANSIBLE_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> ANSIBLE_ANSIBLE_LINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\"]</code> ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file ANSIBLE_ANSIBLE_LINT_PRE_COMMANDS List of bash commands to run before the linter None ANSIBLE_ANSIBLE_LINT_POST_COMMANDS List of bash commands to run after the linter None ANSIBLE_ANSIBLE_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling ANSIBLE_ANSIBLE_LINT and its pre/post commands None ANSIBLE_ANSIBLE_LINT_CONFIG_FILE ansible-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.ansible-lint</code> ANSIBLE_ANSIBLE_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> ANSIBLE_ANSIBLE_LINT_CLI_EXECUTABLE Override CLI executable <code>['ansible-lint']</code>"},{"location":"descriptors/ansible_ansible_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/ansible_ansible_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/ansible_ansible_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.ansible-lint</code></li> <li>File extensions: <code>.yml</code>, <code>.yaml</code></li> <li>File name don't ends with: <code>vault.yml</code>, <code>vault.yaml</code>, <code>galaxy.yml</code>, <code>galaxy.yaml</code></li> </ul>"},{"location":"descriptors/ansible_ansible_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>ansible-lint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using ansible-lint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make ansible-lint analyze only updated files</li> </ul>"},{"location":"descriptors/ansible_ansible_lint/#example-calls","title":"Example calls","text":"<pre><code>ansible-lint -v\n</code></pre> <pre><code>ansible-lint -v -c .ansible-lint\n</code></pre>"},{"location":"descriptors/ansible_ansible_lint/#help-content","title":"Help content","text":"<pre><code>WARNING: PATH altered to expand ~ in it. Read https://stackoverflow.com/a/44704799/99834 and correct your system configuration.\nusage: ansible-lint [-h] [-P | -L | -T]\n                    [-f {brief,full,md,json,codeclimate,quiet,pep8,sarif}]\n                    [--sarif-file SARIF_FILE] [-q]\n                    [--profile {min,basic,moderate,safety,shared,production}]\n                    [-p] [--project-dir PROJECT_DIR] [-r RULESDIR] [-R] [-s]\n                    [--fix [WRITE_LIST]] [--show-relpath] [-t TAGS] [-v]\n                    [-x SKIP_LIST] [--generate-ignore] [-w WARN_LIST]\n                    [--enable-list ENABLE_LIST] [--nocolor] [--force-color]\n                    [--exclude EXCLUDE_PATHS [EXCLUDE_PATHS ...]]\n                    [-c CONFIG_FILE] [-i IGNORE_FILE] [--offline] [--version]\n                    [lintables ...]\n\npositional arguments:\n  lintables             One or more files or paths. When missing it will enable auto-detection mode.\n\noptions:\n  -h, --help            show this help message and exit\n  -P, --list-profiles   List all profiles.\n  -L, --list-rules      List all the rules.\n  -T, --list-tags       List all the tags and the rules they cover.\n  -f {brief,full,md,json,codeclimate,quiet,pep8,sarif}, --format {brief,full,md,json,codeclimate,quiet,pep8,sarif}\n                        stdout formatting, json being an alias for codeclimate. (default: None)\n  --sarif-file SARIF_FILE\n                        SARIF output file\n  -q                    quieter, reduce verbosity, can be specified twice.\n  --profile {min,basic,moderate,safety,shared,production}\n                        Specify which rules profile to be used.\n  -p, --parseable       parseable output, same as '-f pep8'\n  --project-dir PROJECT_DIR\n                        Location of project/repository, autodetected based on location of configuration file.\n  -r RULESDIR, --rules-dir RULESDIR\n                        Specify custom rule directories. Add -R to keep using embedded rules from /venvs/ansible-lint/lib/python3.12/site-packages/ansiblelint/rules\n  -R                    Keep default rules when using -r\n  -s, --strict          Return non-zero exit code on warnings as well as errors\n  --fix [WRITE_LIST]    Allow ansible-lint to perform auto-fixes, including YAML reformatting. You can limit the effective rule transforms (the 'write_list') by passing a keywords 'all' or 'none' or a comma separated list of rule ids or rule tags. YAML reformatting happens whenever '--fix' or '--fix=' is used. '--fix' and '--fix=all' are equivalent: they allow all transforms to run. Presence of --fix in command overrides config file value.\n  --show-relpath        Display path relative to CWD\n  -t TAGS, --tags TAGS  only check rules whose id/tags match these values\n  -v                    Increase verbosity level (-vv for more)\n  -x SKIP_LIST, --skip-list SKIP_LIST\n                        only check rules whose id/tags do not match these values.             e.g: --skip-list=name,run-once\n  --generate-ignore     Generate a text file '.ansible-lint-ignore' that ignores all found violations. Each line contains filename and rule id separated by a space.\n  -w WARN_LIST, --warn-list WARN_LIST\n                        only warn about these rules, unless overridden in config file. Current version default value is: experimental, jinja[spacing], fqcn[deep]\n  --enable-list ENABLE_LIST\n                        activate optional rules by their tag name\n  --nocolor             disable colored output, same as NO_COLOR=1\n  --force-color         Force colored output, same as FORCE_COLOR=1\n  --exclude EXCLUDE_PATHS [EXCLUDE_PATHS ...]\n                        path to directories or files to skip. This option is repeatable.\n  -c CONFIG_FILE, --config-file CONFIG_FILE\n                        Specify configuration file to use. By default it will look for '.ansible-lint', '.ansible-lint.yml', '.ansible-lint.yaml', '.config/ansible-lint.yml', or '.config/ansible-lint.yaml'\n  -i IGNORE_FILE, --ignore-file IGNORE_FILE\n                        Specify ignore file to use. By default it will look for '.ansible-lint-ignore' or '.config/ansible-lint-ignore.txt'\n  --offline             Disable installation of requirements.yml and schema refreshing\n  --version\n\nThe following environment variables are also recognized but there is no guarantee that they will work in future versions:\n\nANSIBLE_LINT_CUSTOM_RULESDIR: Used for adding another folder into the lookup path for new rules.\n\nANSIBLE_LINT_IGNORE_FILE: Define it to override the name of the default ignore file `.ansible-lint-ignore`\n\nANSIBLE_LINT_WRITE_TMP: Tells linter to dump fixes into different temp files instead of overriding original. Used internally for testing.\n\nANSIBLE_LINT_SKIP_SCHEMA_UPDATE: Tells ansible-lint to skip schema refresh.\n\nANSIBLE_LINT_NODEPS: Avoids installing content dependencies and avoids performing checks that would fail when modules are not installed. Far less violations will be reported.\n</code></pre>"},{"location":"descriptors/ansible_ansible_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=ansible-lint\nARG PIP_ANSIBLE_LINT_VERSION=25.4.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>ansible-lint==25.4.0</li> </ul> </li> </ul>"},{"location":"descriptors/api/","title":"API linters in MegaLinter","text":""},{"location":"descriptors/api/#api","title":"API","text":""},{"location":"descriptors/api/#linters","title":"Linters","text":"Linter Additional spectralAPI_SPECTRAL"},{"location":"descriptors/api/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> <li><code>.json</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>\"asyncapi\":</code></li> <li><code>\"openapi\":</code></li> <li><code>\"swagger\":</code></li> <li><code>asyncapi:</code></li> <li><code>openapi:</code></li> <li><code>swagger:</code></li> </ul> </li> </ul>"},{"location":"descriptors/api/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value API_PRE_COMMANDS List of bash commands to run before the linters None API_POST_COMMANDS List of bash commands to run after the linters None API_FILTER_REGEX_INCLUDE Custom regex including filter API_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/api_spectral/","title":"spectral configuration in MegaLinter","text":""},{"location":"descriptors/api_spectral/#spectral-documentation","title":"spectral documentation","text":"<ul> <li>Version in MegaLinter: 6.15.0</li> <li>Visit Official Web Site</li> <li>See How to configure spectral rules<ul> <li>If custom <code>.spectral.yaml</code> config file isn't found, .spectral.yaml will be used</li> </ul> </li> <li>See Index of problems detected by spectral</li> </ul>"},{"location":"descriptors/api_spectral/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable spectral by adding <code>API_SPECTRAL</code> in ENABLE_LINTERS variable</li> <li>Disable spectral by adding <code>API_SPECTRAL</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value API_SPECTRAL_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> API_SPECTRAL_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> API_SPECTRAL_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file API_SPECTRAL_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file API_SPECTRAL_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> API_SPECTRAL_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\", \".json\"]</code> API_SPECTRAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file API_SPECTRAL_PRE_COMMANDS List of bash commands to run before the linter None API_SPECTRAL_POST_COMMANDS List of bash commands to run after the linter None API_SPECTRAL_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling API_SPECTRAL and its pre/post commands None API_SPECTRAL_CONFIG_FILE spectral configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.spectral.yaml</code> API_SPECTRAL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules API_SPECTRAL_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> API_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> API_SPECTRAL_CLI_EXECUTABLE Override CLI executable <code>['spectral']</code>"},{"location":"descriptors/api_spectral/#ide-integration","title":"IDE Integration","text":"<p>Use spectral in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install stoplight Native integration Visit Web Site Visual Studio Code vscode-spectral Visit Web Site"},{"location":"descriptors/api_spectral/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/api_spectral/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/api_spectral/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.yml</code>, <code>.yaml</code>, <code>.json</code></li> <li>Detected file content (regex): <code>\"asyncapi\":</code>, <code>\"openapi\":</code>, <code>\"swagger\":</code>, <code>asyncapi:</code>, <code>openapi:</code>, <code>swagger:</code></li> </ul>"},{"location":"descriptors/api_spectral/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>spectral is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/api_spectral/#example-calls","title":"Example calls","text":"<pre><code>spectral lint myfile.yml\n</code></pre> <pre><code>spectral lint -r .spectral.yaml myfile.yml\n</code></pre>"},{"location":"descriptors/api_spectral/#help-content","title":"Help content","text":"<pre><code>spectral lint [documents..]\n\nlint JSON/YAML documents from files or URLs\n\nPositionals:\n  documents  Location of JSON/YAML documents. Can be either a file, a glob or fetchable resource(s) on the web.  [array] [default: []]\n\nOptions:\n      --version                  Show version number  [boolean]\n      --help                     Show help  [boolean]\n  -e, --encoding                 text encoding to use  [string] [choices: \"utf8\", \"ascii\", \"utf-8\", \"utf16le\", \"ucs2\", \"ucs-2\", \"base64\", \"latin1\"] [default: \"utf8\"]\n  -f, --format                   formatters to use for outputting results, more than one can be provided by using multiple flags  [string] [choices: \"json\", \"stylish\", \"junit\", \"html\", \"text\", \"teamcity\", \"pretty\", \"github-actions\", \"sarif\", \"code-climate\", \"gitlab\", \"markdown\"] [default: \"stylish\"]\n  -o, --output                   where to output results, can be a single file name, multiple \"output.&lt;format&gt;\" or missing to print to stdout  [string]\n      --stdin-filepath           path to a file to pretend that stdin comes from  [string]\n      --resolver                 path to custom json-ref-resolver instance  [string]\n  -r, --ruleset                  path/URL to a ruleset file  [string]\n  -F, --fail-severity            results of this level or above will trigger a failure exit code  [string] [choices: \"error\", \"warn\", \"info\", \"hint\"] [default: \"error\"]\n  -D, --display-only-failures    only output results equal to or greater than --fail-severity  [boolean] [default: false]\n      --ignore-unknown-format    do not warn about unmatched formats  [boolean] [default: false]\n      --fail-on-unmatched-globs  fail on unmatched glob patterns  [boolean] [default: false]\n      --show-documentation-url   show documentation url in output result  [boolean] [default: false]\n  -v, --verbose                  increase verbosity  [boolean]\n  -q, --quiet                    no logging - output only  [boolean]\n</code></pre>"},{"location":"descriptors/api_spectral/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=@stoplight/spectral-cli\nARG NPM_SPECTRAL_CLI_VERSION=6.15.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>@stoplight/spectral-cli@6.15.0</li> </ul> </li> </ul>"},{"location":"descriptors/arm/","title":"ARM linters in MegaLinter","text":""},{"location":"descriptors/arm/#arm","title":"ARM","text":""},{"location":"descriptors/arm/#linters","title":"Linters","text":"Linter Additional arm-ttkARM_ARM_TTK"},{"location":"descriptors/arm/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.json</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>schema\\.management\\.azure\\.com</code></li> </ul> </li> </ul>"},{"location":"descriptors/arm/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value ARM_PRE_COMMANDS List of bash commands to run before the linters None ARM_POST_COMMANDS List of bash commands to run after the linters None ARM_FILTER_REGEX_INCLUDE Custom regex including filter ARM_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/arm/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/arm/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=PowerShell/PowerShell\nARG POWERSHELL_VERSION=7.5.1\nRUN curl -L https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-musl-x64.tar.gz -o /tmp/powershell.tar.gz \\\n    &amp;&amp; mkdir -p /opt/microsoft/powershell/7 \\\n    &amp;&amp; tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 \\\n    &amp;&amp; chmod +x /opt/microsoft/powershell/7/pwsh \\\n    &amp;&amp; ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>icu-libs</li> </ul> </li> </ul>"},{"location":"descriptors/arm_arm_ttk/","title":"arm-ttk configuration in MegaLinter","text":""},{"location":"descriptors/arm_arm_ttk/#arm-ttk","title":"arm-ttk","text":""},{"location":"descriptors/arm_arm_ttk/#arm-ttk-documentation","title":"arm-ttk documentation","text":"<ul> <li>Visit Official Web Site</li> <li>See How to configure arm-ttk rules<ul> <li>If custom <code>.arm-ttk.psd1</code> config file isn't found, .arm-ttk.psd1 will be used</li> </ul> </li> </ul>"},{"location":"descriptors/arm_arm_ttk/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable arm-ttk by adding <code>ARM_ARM_TTK</code> in ENABLE_LINTERS variable</li> <li>Disable arm-ttk by adding <code>ARM_ARM_TTK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value ARM_ARM_TTK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> ARM_ARM_TTK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> ARM_ARM_TTK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file ARM_ARM_TTK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file ARM_ARM_TTK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> ARM_ARM_TTK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".json\"]</code> ARM_ARM_TTK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file ARM_ARM_TTK_PRE_COMMANDS List of bash commands to run before the linter None ARM_ARM_TTK_POST_COMMANDS List of bash commands to run after the linter None ARM_ARM_TTK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling ARM_ARM_TTK and its pre/post commands None ARM_ARM_TTK_CONFIG_FILE arm-ttk configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.arm-ttk.psd1</code> ARM_ARM_TTK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ARM_ARM_TTK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> ARM_ARM_TTK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> ARM_ARM_TTK_CLI_EXECUTABLE Override CLI executable <code>['arm-ttk']</code>"},{"location":"descriptors/arm_arm_ttk/#ide-integration","title":"IDE Integration","text":"<p>Use arm-ttk in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code ARMTTKExtension"},{"location":"descriptors/arm_arm_ttk/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73"},{"location":"descriptors/arm_arm_ttk/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/arm_arm_ttk/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.json</code></li> <li>Detected file content (regex): <code>schema\\.management\\.azure\\.com</code></li> </ul>"},{"location":"descriptors/arm_arm_ttk/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>arm-ttk is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/arm_arm_ttk/#example-calls","title":"Example calls","text":"<pre><code>pwsh -NoProfile -NoLogo -Command \"\n    Import-Module /usr/bin/arm-ttk;\n    Test-AzTemplate -TemplatePath myfile.json;\n    if (${Error}.Count) {exit 1}\"\n    \"\n\n</code></pre> <pre><code>\"pwsh -NoProfile -NoLogo -Command \"\n    Import-Module /usr/bin/arm-ttk;\n    ${config} = $(Import-PowerShellDataFile -Path \".arm-ttk.psd1\");\n    Test-AzTemplate @config -TemplatePath myfile.json;\n    if (${Error}.Count) {exit 1}\n    \"\n\n</code></pre>"},{"location":"descriptors/arm_arm_ttk/#help-content","title":"Help content","text":"<pre><code>\ncmdlet Import-Module at command pipeline position 1\nSupply values for the following parameters:\nName[0]:\nImport-Module: Cannot process command because of one or more missing mandatory parameters: Name.\nTest-AzTemplate: \nLine |\n   2 |  $TAZ_V = (Test-AzTemplate -help);\n     |            ~~~~~~~~~~~~~~~\n     | The term 'Test-AzTemplate' is not recognized as a name of a cmdlet, function, script file, or executable program.\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\n</code></pre>"},{"location":"descriptors/arm_arm_ttk/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=github-tags depName=PowerShell/PowerShell\nARG POWERSHELL_VERSION=7.5.1\nRUN curl -L https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-musl-x64.tar.gz -o /tmp/powershell.tar.gz \\\n    &amp;&amp; mkdir -p /opt/microsoft/powershell/7 \\\n    &amp;&amp; tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 \\\n    &amp;&amp; chmod +x /opt/microsoft/powershell/7/pwsh \\\n    &amp;&amp; ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n\n# Linter install\n# renovate: datasource=github-tags depName=Azure/arm-ttk\nARG ARM_TTK_VERSION=20250401\nARG ARM_TTK_NAME='arm-ttk.zip'\nARG ARM_TTK_DIRECTORY='/opt/microsoft'\nENV ARM_TTK_PSD1=\"${ARM_TTK_DIRECTORY}/arm-ttk/arm-ttk/arm-ttk.psd1\"\nRUN curl --retry 5 --retry-delay 5 -sLO \"https://github.com/Azure/arm-ttk/releases/download/${ARM_TTK_VERSION}/${ARM_TTK_NAME}\" \\\n    &amp;&amp; unzip \"${ARM_TTK_NAME}\" -d \"${ARM_TTK_DIRECTORY}\" \\\n    &amp;&amp; rm \"${ARM_TTK_NAME}\" \\\n    &amp;&amp; ln -sTf \"${ARM_TTK_PSD1}\" /usr/bin/arm-ttk \\\n    &amp;&amp; chmod a+x /usr/bin/arm-ttk\n\n</code></pre>"},{"location":"descriptors/bash/","title":"BASH linters in MegaLinter","text":""},{"location":"descriptors/bash/#bash","title":"BASH","text":""},{"location":"descriptors/bash/#linters","title":"Linters","text":"Linter Additional bash-execBASH_EXEC shellcheckBASH_SHELLCHECK shfmtBASH_SHFMT"},{"location":"descriptors/bash/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li>``</li> <li><code>.sh</code></li> <li><code>.bash</code></li> <li><code>.dash</code></li> <li><code>.ksh</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>^#!/usr/bin/env bash</code></li> <li><code>^#!/bin/bash</code></li> <li><code>^#!/bin/sh</code></li> </ul> </li> </ul>"},{"location":"descriptors/bash/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value BASH_PRE_COMMANDS List of bash commands to run before the linters None BASH_POST_COMMANDS List of bash commands to run after the linters None BASH_FILTER_REGEX_INCLUDE Custom regex including filter BASH_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/bash/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/bash/#installation","title":"Installation","text":"<ul> <li>APK packages (Linux):<ul> <li>bash</li> </ul> </li> </ul>"},{"location":"descriptors/bash_bash_exec/","title":"bash-exec configuration in MegaLinter","text":""},{"location":"descriptors/bash_bash_exec/#bash-exec","title":"bash-exec","text":"<p>Checks if shell files are executable</p> <p>Note: You can run <code>git add --chmod=+x myfile.sh</code> to make a file executable on Windows</p>"},{"location":"descriptors/bash_bash_exec/#bash-exec-documentation","title":"bash-exec documentation","text":"<ul> <li>Version in MegaLinter: 5.2.37</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/bash_bash_exec/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable bash-exec by adding <code>BASH_EXEC</code> in ENABLE_LINTERS variable</li> <li>Disable bash-exec by adding <code>BASH_EXEC</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value ERROR_ON_MISSING_EXEC_BIT If set to <code>false</code>, the <code>bash-exec</code> linter will report a warning if a shell script is not executable. If set to <code>true</code>, the <code>bash-exec</code> linter will report an error instead <code>false</code> BASH_EXEC_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> BASH_EXEC_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> BASH_EXEC_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file BASH_EXEC_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file BASH_EXEC_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> BASH_EXEC_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\"\", \".sh\", \".bash\", \".dash\", \".ksh\"]</code> BASH_EXEC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file BASH_EXEC_PRE_COMMANDS List of bash commands to run before the linter None BASH_EXEC_POST_COMMANDS List of bash commands to run after the linter None BASH_EXEC_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling BASH_EXEC and its pre/post commands None BASH_EXEC_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> BASH_EXEC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> BASH_EXEC_CLI_EXECUTABLE Override CLI executable <code>['bash-exec']</code>"},{"location":"descriptors/bash_bash_exec/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/bash_bash_exec/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/bash_bash_exec/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>`,</code>.sh<code>,</code>.bash<code>,</code>.dash<code>,</code>.ksh`</li> <li>Detected file content (regex): <code>^#!/usr/bin/env bash</code>, <code>^#!/bin/bash</code>, <code>^#!/bin/sh</code></li> </ul>"},{"location":"descriptors/bash_bash_exec/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>bash-exec is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/bash_bash_exec/#example-calls","title":"Example calls","text":"<pre><code>bash-exec myfile.sh\n</code></pre>"},{"location":"descriptors/bash_bash_exec/#help-content","title":"Help content","text":"<pre><code>GNU bash, version 5.2.37(1)-release-(x86_64-alpine-linux-musl)\nUsage:  bash [GNU long option] [option] ...\n  bash [GNU long option] [option] script-file ...\nGNU long options:\n  --debug\n  --debugger\n  --dump-po-strings\n  --dump-strings\n  --help\n  --init-file\n  --login\n  --noediting\n  --noprofile\n  --norc\n  --posix\n  --pretty-print\n  --rcfile\n  --restricted\n  --verbose\n  --version\nShell options:\n  -ilrsD or -c command or -O shopt_option    (invocation only)\n  -abefhkmnptuvxBCEHPT or -o option\nType `bash -c \"help set\"' for more information about shell options.\nType `bash -c help' for more information about shell builtin commands.\nUse the `bashbug' command to report bugs.\n\nbash home page: &lt;http://www.gnu.org/software/bash&gt;\nGeneral help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;\n</code></pre>"},{"location":"descriptors/bash_bash_exec/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN printf '#!/bin/bash \\\\n\\\\nif [[ -x \"$1\" ]]; then exit 0; else echo \"Error: File:[$1] is not executable\"; exit 1; fi' &gt; /usr/bin/bash-exec \\\n    &amp;&amp; chmod +x /usr/bin/bash-exec\n\n</code></pre>"},{"location":"descriptors/bash_shellcheck/","title":"shellcheck configuration in MegaLinter","text":""},{"location":"descriptors/bash_shellcheck/#shellcheck","title":"shellcheck","text":""},{"location":"descriptors/bash_shellcheck/#shellcheck-documentation","title":"shellcheck documentation","text":"<ul> <li>Version in MegaLinter: 0.10.0</li> <li>Visit Official Web Site</li> <li>See How to disable shellcheck rules in files</li> <li>See Index of problems detected by shellcheck</li> </ul>"},{"location":"descriptors/bash_shellcheck/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable shellcheck by adding <code>BASH_SHELLCHECK</code> in ENABLE_LINTERS variable</li> <li>Disable shellcheck by adding <code>BASH_SHELLCHECK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value BASH_SHELLCHECK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> BASH_SHELLCHECK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> BASH_SHELLCHECK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file BASH_SHELLCHECK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> BASH_SHELLCHECK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\"\", \".sh\", \".bash\", \".dash\", \".ksh\"]</code> BASH_SHELLCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file BASH_SHELLCHECK_PRE_COMMANDS List of bash commands to run before the linter None BASH_SHELLCHECK_POST_COMMANDS List of bash commands to run after the linter None BASH_SHELLCHECK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling BASH_SHELLCHECK and its pre/post commands None BASH_SHELLCHECK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> BASH_SHELLCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> BASH_SHELLCHECK_CLI_EXECUTABLE Override CLI executable <code>['shellcheck']</code>"},{"location":"descriptors/bash_shellcheck/#ide-integration","title":"IDE Integration","text":"<p>Use shellcheck in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-shellcheck Visit Web Site Emacs flycheck Visit Web Site Emacs flymake-shellcheck Visit Web Site Sublime Text SublimeLinter-shellcheck Visit Web Site vim ale Visit Web Site vim neomake Visit Web Site vim syntastic Visit Web Site Visual Studio Code vscode-shellcheck"},{"location":"descriptors/bash_shellcheck/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/bash_shellcheck/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/bash_shellcheck/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>`,</code>.sh<code>,</code>.bash<code>,</code>.dash<code>,</code>.ksh`</li> <li>Detected file content (regex): <code>^#!/usr/bin/env bash</code>, <code>^#!/bin/bash</code>, <code>^#!/bin/sh</code></li> </ul>"},{"location":"descriptors/bash_shellcheck/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>shellcheck is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/bash_shellcheck/#example-calls","title":"Example calls","text":"<pre><code>shellcheck --color=auto --external-sources myfile.sh\n</code></pre>"},{"location":"descriptors/bash_shellcheck/#help-content","title":"Help content","text":"<pre><code>Usage: shellcheck [OPTIONS...] FILES...\n  -a                  --check-sourced            Include warnings from sourced files\n  -C[WHEN]            --color[=WHEN]             Use color (auto, always, never)\n  -i CODE1,CODE2..    --include=CODE1,CODE2..    Consider only given types of warnings\n  -e CODE1,CODE2..    --exclude=CODE1,CODE2..    Exclude types of warnings\n                      --extended-analysis=bool   Perform dataflow analysis (default true)\n  -f FORMAT           --format=FORMAT            Output format (checkstyle, diff, gcc, json, json1, quiet, tty)\n                      --list-optional            List checks disabled by default\n                      --norc                     Don't look for .shellcheckrc files\n                      --rcfile=RCFILE            Prefer the specified configuration file over searching for one\n  -o check1,check2..  --enable=check1,check2..   List of optional checks to enable (or 'all')\n  -P SOURCEPATHS      --source-path=SOURCEPATHS  Specify path when looking for sourced files (\"SCRIPTDIR\" for script's dir)\n  -s SHELLNAME        --shell=SHELLNAME          Specify dialect (sh, bash, dash, ksh, busybox)\n  -S SEVERITY         --severity=SEVERITY        Minimum severity of errors to consider (error, warning, info, style)\n  -V                  --version                  Print version information\n  -W NUM              --wiki-link-count=NUM      The number of wiki links to show, when applicable\n  -x                  --external-sources         Allow 'source' outside of FILES\n                      --help                     Show this usage summary and exit\n\n</code></pre>"},{"location":"descriptors/bash_shellcheck/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=crate depName=shellcheck-sarif\nARG CARGO_SHELLCHECK_SARIF_VERSION=0.7.0\n# renovate: datasource=docker depName=koalaman/shellcheck\nARG BASH_SHELLCHECK_VERSION=v0.10.0\nFROM koalaman/shellcheck:${BASH_SHELLCHECK_VERSION} AS shellcheck\nCOPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck\n</code></pre> <ul> <li>Cargo packages (Rust):<ul> <li>shellcheck-sarif@0.7.0</li> </ul> </li> </ul>"},{"location":"descriptors/bash_shfmt/","title":"shfmt configuration in MegaLinter","text":""},{"location":"descriptors/bash_shfmt/#shfmt","title":"shfmt","text":""},{"location":"descriptors/bash_shfmt/#shfmt-documentation","title":"shfmt documentation","text":"<ul> <li>Version in MegaLinter: 3.11.0</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/bash_shfmt/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable shfmt by adding <code>BASH_SHFMT</code> in ENABLE_LINTERS variable</li> <li>Disable shfmt by adding <code>BASH_SHFMT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>BASH_SHFMT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value BASH_SHFMT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> BASH_SHFMT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> BASH_SHFMT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file BASH_SHFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file BASH_SHFMT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> BASH_SHFMT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\"\", \".sh\", \".bash\", \".dash\", \".ksh\"]</code> BASH_SHFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file BASH_SHFMT_PRE_COMMANDS List of bash commands to run before the linter None BASH_SHFMT_POST_COMMANDS List of bash commands to run after the linter None BASH_SHFMT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling BASH_SHFMT and its pre/post commands None BASH_SHFMT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> BASH_SHFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> BASH_SHFMT_CLI_EXECUTABLE Override CLI executable <code>['shfmt']</code>"},{"location":"descriptors/bash_shfmt/#ide-integration","title":"IDE Integration","text":"<p>Use shfmt in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom format-shell Visit Web Site Emacs emacs-shfmt Visit Web Site IDEA shell-scripts Visit Web Site micro micro Visit Web Site Sublime Text Sublime-Pretty-Shell Visit Web Site vim vim-shfmt Visit Web Site Visual Studio Code shell-format"},{"location":"descriptors/bash_shfmt/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/bash_shfmt/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/bash_shfmt/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>`,</code>.sh<code>,</code>.bash<code>,</code>.dash<code>,</code>.ksh`</li> <li>Detected file content (regex): <code>^#!/usr/bin/env bash</code>, <code>^#!/bin/bash</code>, <code>^#!/bin/sh</code></li> </ul>"},{"location":"descriptors/bash_shfmt/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>shfmt is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/bash_shfmt/#example-calls","title":"Example calls","text":"<pre><code>shfmt -d myfile.sh\n</code></pre> <pre><code>shfmt -w myfile.sh\n</code></pre>"},{"location":"descriptors/bash_shfmt/#help-content","title":"Help content","text":"<pre><code>usage: shfmt [flags] [path ...]\n\nshfmt formats shell programs. If the only argument is a dash ('-') or no\narguments are given, standard input will be used. If a given path is a\ndirectory, all shell scripts found under that directory will be used.\n\n  --version  show version and exit\n\n  -l[=0], --list[=0]  list files whose formatting differs from shfmt;\n                      paths are separated by a newline or a null character if -l=0\n  -w,     --write     write result to file instead of stdout\n  -d,     --diff      error with a diff when the formatting differs\n  -s,     --simplify  simplify the code\n  -mn,    --minify    minify the code to reduce its size (implies -s)\n  --apply-ignore      always apply EditorConfig ignore rules\n  --filename str      provide a name for the standard input file\n\nParser options:\n\n  -ln, --language-dialect str  bash/posix/mksh/bats, default \"auto\"\n  -p,  --posix                 shorthand for -ln=posix\n\nPrinter options:\n\n  -i,  --indent uint       0 for tabs (default), &gt;0 for number of spaces\n  -bn, --binary-next-line  binary ops like &amp;&amp; and | may start a line\n  -ci, --case-indent       switch cases will be indented\n  -sr, --space-redirects   redirect operators will be followed by a space\n  -kp, --keep-padding      keep column alignment paddings\n  -fn, --func-next-line    function opening braces are placed on a separate line\n\nUtilities:\n\n  -f[=0], --find[=0]  recursively find all shell files and print the paths;\n                      paths are separated by a newline or a null character if -f=0\n  --to-json           print syntax tree to stdout as a typed JSON\n  --from-json         read syntax tree from stdin as a typed JSON\n\nFormatting options can also be read from EditorConfig files; see 'man shfmt'\nfor a detailed description of the tool's behavior.\nFor more information and to report bugs, see https://github.com/mvdan/sh.\n</code></pre>"},{"location":"descriptors/bash_shfmt/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=rhysd/actionlint\nARG BASH_SHFMT_VERSION=v3.11.0-alpine\nFROM mvdan/shfmt:${BASH_SHFMT_VERSION} AS shfmt\nCOPY --link --from=shfmt /bin/shfmt /usr/bin/\n</code></pre>"},{"location":"descriptors/bicep/","title":"BICEP linters in MegaLinter","text":""},{"location":"descriptors/bicep/#bicep","title":"BICEP","text":""},{"location":"descriptors/bicep/#linters","title":"Linters","text":"Linter Additional bicep_linterBICEP_BICEP_LINTER"},{"location":"descriptors/bicep/#linted-files","title":"Linted files","text":""},{"location":"descriptors/bicep/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value BICEP_PRE_COMMANDS List of bash commands to run before the linters None BICEP_POST_COMMANDS List of bash commands to run after the linters None BICEP_FILTER_REGEX_INCLUDE Custom regex including filter BICEP_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/bicep_bicep_linter/","title":"bicep_linter configuration in MegaLinter","text":""},{"location":"descriptors/bicep_bicep_linter/#bicep_linter","title":"bicep_linter","text":"<p>By default, Bicep linter errors are set as warnings. To customize linter settings, use a <code>bicepconfig.json</code> file. For more information, see the documentation for the Bicep Linter</p>"},{"location":"descriptors/bicep_bicep_linter/#bicep_linter-documentation","title":"bicep_linter documentation","text":"<ul> <li>Version in MegaLinter: 0.35.1</li> <li>Visit Official Web Site</li> <li>See How to configure bicep_linter rules</li> <li>See How to disable bicep_linter rules in files</li> <li>See Index of problems detected by bicep_linter</li> </ul>"},{"location":"descriptors/bicep_bicep_linter/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable bicep_linter by adding <code>BICEP_BICEP_LINTER</code> in ENABLE_LINTERS variable</li> <li>Disable bicep_linter by adding <code>BICEP_BICEP_LINTER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value BICEP_BICEP_LINTER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> BICEP_BICEP_LINTER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> BICEP_BICEP_LINTER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file BICEP_BICEP_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file BICEP_BICEP_LINTER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> BICEP_BICEP_LINTER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".bicep\"]</code> BICEP_BICEP_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file BICEP_BICEP_LINTER_PRE_COMMANDS List of bash commands to run before the linter None BICEP_BICEP_LINTER_POST_COMMANDS List of bash commands to run after the linter None BICEP_BICEP_LINTER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling BICEP_BICEP_LINTER and its pre/post commands None BICEP_BICEP_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> BICEP_BICEP_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> BICEP_BICEP_LINTER_CLI_EXECUTABLE Override CLI executable <code>['bicep']</code>"},{"location":"descriptors/bicep_bicep_linter/#ide-integration","title":"IDE Integration","text":"<p>Use bicep_linter in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode Bicep"},{"location":"descriptors/bicep_bicep_linter/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73"},{"location":"descriptors/bicep_bicep_linter/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/bicep_bicep_linter/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.bicep</code></li> </ul>"},{"location":"descriptors/bicep_bicep_linter/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>bicep_linter is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/bicep_bicep_linter/#example-calls","title":"Example calls","text":"<pre><code># Bicep CLI \nbicep build infra.bicep;\n\n# Azure CLI \naz bicep build -f infra.bicep\n\n</code></pre>"},{"location":"descriptors/bicep_bicep_linter/#help-content","title":"Help content","text":"<pre><code>Bicep CLI version 0.35.1 (462f71eb22)\n\nUsage:\n  bicep build [options] [&lt;file&gt;]\n    Builds a .bicep file.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --outdir &lt;dir&gt;                 Saves the output at the specified directory.\n      --outfile &lt;file&gt;               Saves the output as the specified file path.\n      --stdout                       Prints the output to stdout.\n      --no-restore                   Builds the bicep file without restoring external modules.\n      --diagnostics-format &lt;format&gt;  Sets the format with which diagnostics are displayed. Valid values are ( Default | Sarif ).\n      --pattern &lt;pattern&gt;            Builds all files matching the specified glob pattern.\n\n    Examples:\n      bicep build file.bicep\n      bicep build file.bicep --stdout\n      bicep build file.bicep --outdir dir1\n      bicep build file.bicep --outfile file.json\n      bicep build file.bicep --no-restore\n      bicep build file.bicep --diagnostics-format sarif\n      bicep build --pattern './dir/**/*.bicep'\n\n  bicep format [options] [&lt;file&gt;]\n    Formats a .bicep file.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --outdir &lt;dir&gt;            Saves the output at the specified directory.\n      --outfile &lt;file&gt;          Saves the output as the specified file path.\n      --stdout                  Prints the output to stdout.\n      --newline                 Set newline char. Valid values are ( Auto | LF | CRLF | CR ).\n      --indent-kind             Set indentation kind. Valid values are ( Space | Tab ).\n      --indent-size             Number of spaces to indent with (Only valid with --indentKind set to Space).\n      --insert-final-newline    Insert a final newline.\n      --pattern &lt;pattern&gt;       Formats all files matching the specified glob pattern.\n\n    Examples:\n      bicep format file.bicep\n      bicep format file.bicep --stdout\n      bicep format file.bicep --outdir dir1\n      bicep format file.bicep --outfile file.json\n      bicep format file.bicep --indent-kind Tab\n      bicep format --pattern './dir/**/*.bicep'\n\n  bicep decompile [options] &lt;file&gt;\n    Attempts to decompile a template .json file to .bicep.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --outdir &lt;dir&gt;    Saves the output at the specified directory.\n      --outfile &lt;file&gt;  Saves the output as the specified file path.\n      --stdout          Prints the output to stdout.\n      --force           Allows overwriting the output file if it exists (applies only to 'bicep decompile' or 'bicep decompile-params').\n\n    Examples:\n      bicep decompile file.json\n      bicep decompile file.json --stdout\n      bicep decompile file.json --outdir dir1\n      bicep decompile file.json --force\n      bicep decompile file.json --outfile file.bicep\n\n  bicep lint [options] [&lt;file&gt;]\n    Lints a .bicep file.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --no-restore                   Skips restoring external modules.\n      --diagnostics-format &lt;format&gt;  Sets the format with which diagnostics are displayed. Valid values are ( Default | Sarif ).\n      --pattern &lt;pattern&gt;            Lints all files matching the specified glob pattern.\n\n    Examples:\n      bicep lint file.bicep\n      bicep lint file.bicep --no-restore\n      bicep lint file.bicep --diagnostics-format sarif\n      bicep lint --pattern './dir/**/*.bicep'\n\n  bicep decompile-params [options] &lt;file&gt;\n    Attempts to decompile a parameters .json file to .bicepparam.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --outdir &lt;dir&gt;    Saves the output at the specified directory.\n      --outfile &lt;file&gt;  Saves the output as the specified file path.\n      --stdout          Prints the output to stdout.\n      --force           Allows overwriting the output file if it exists (applies only to 'bicep decompile' or 'bicep decompile-params').\n      --bicep-file      Path to the bicep template file that will be referenced in the using declaration\n\n    Examples:\n      bicep decompile-params file.json\n      bicep decompile-params file.json --bicep-file ./dir/main.bicep\n      bicep decompile-params file.json --stdout\n      bicep decompile-params file.json --outdir dir1\n      bicep decompile-params file.json --force\n      bicep decompile-params file.json --outfile file.bicepparam\n\n  bicep generate-params [options] &lt;file&gt;\n    Builds parameters file from the given bicep file, updates if there is an existing parameters file.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --no-restore      Generates the parameters file without restoring external modules.\n      --outdir &lt;dir&gt;    Saves the output at the specified directory.\n      --outfile &lt;file&gt;  Saves the output as the specified file path.\n      --stdout          Prints the output to stdout.\n      --output-format   Selects the output format {json, bicepparam}\n      --include-params  Selects which parameters to include into output {requiredonly, all}\n\n    Examples:\n      bicep generate-params file.bicep\n      bicep generate-params file.bicep --no-restore\n      bicep generate-params file.bicep --stdout\n      bicep generate-params file.bicep --outdir dir1\n      bicep generate-params file.bicep --outfile file.parameters.json\n      bicep generate-params file.bicep --output-format bicepparam --include-params all\n\n  bicep publish &lt;file&gt; --target &lt;ref&gt;\n    Publishes the .bicep file to the module registry.\n\n    Arguments:\n      &lt;file&gt;        The input file (can be a Bicep file or an ARM template file)\n      &lt;ref&gt;         The module reference\n\n    Options:\n      --documentation-uri  Module documentation uri\n      --with-source       [Experimental] Publish source code with the module\n      --force             Overwrite existing published module or file\n\n    Examples:\n      bicep publish file.bicep --target br:example.azurecr.io/hello/world:v1\n      bicep publish file.bicep --target br:example.azurecr.io/hello/world:v1 --force\n      bicep publish file.bicep --target br:example.azurecr.io/hello/world:v1 --documentation-uri https://github.com/hello-world/README.md --with-source\n      bicep publish file.json --target br:example.azurecr.io/hello/world:v1 --documentation-uri https://github.com/hello-world/README.md\n\n  bicep restore [&lt;file&gt;]\n    Restores external modules from the specified Bicep file to the local module cache.\n\n    Arguments:\n      &lt;file&gt;        The input file\n\n    Options:\n      --pattern &lt;pattern&gt;  Restores all files matching the specified glob pattern.\n\n    Examples:\n      bicep restore main.bicep\n      bicep restore --pattern './dir/**/*.bicep'\n\n  bicep [options]\n    Options:\n      --version              -v   Shows bicep version information\n      --help                 -h   Shows this usage information\n      --license                   Prints license information\n      --third-party-notices       Prints third-party notices\n\n  bicep build-params [&lt;file&gt;]\n    Builds a .json file from a .bicepparam file.\n\n    Arguments:\n      &lt;file&gt;        The input Bicepparam file\n\n    Options:\n      --bicep-file &lt;file&gt;            Verifies if the specified bicep file path matches the one provided in the params file using declaration\n      --outdir &lt;dir&gt;                 Saves the output of building the parameter file only (.bicepparam) as json to the specified directory.\n      --outfile &lt;file&gt;               Saves the output of building the parameter file only (.bicepparam) as json to the specified file path.\n      --stdout                       Prints the output of building both the parameter file (.bicepparam) and the template it points to (.bicep) as json to stdout.\n      --no-restore                   Builds the bicep file (referenced in using declaration) without restoring external modules.\n      --diagnostics-format &lt;format&gt;  Sets the format with which diagnostics are displayed. Valid values are ( Default | Sarif ).\n      --pattern &lt;pattern&gt;            Builds all files matching the specified glob pattern.\n\n    Examples:\n      bicep build-params params.bicepparam\n      bicep build-params params.bicepparam --stdout\n      bicep build-params params.bicepparam --outdir dir1\n      bicep build-params params.bicepparam --outfile otherParams.json\n      bicep build-params params.bicepparam --no-restore\n      bicep build-params params.bicepparam --diagnostics-format sarif\n      bicep build-params --pattern './dir/**/*.bicepparam'\n\n  bicep jsonrpc [options]\n    Runs a JSONRPC server for interacting with Bicep programmatically.\n\n    Options:\n      --pipe &lt;name&gt;   Runs the JSONRPC server using a named pipe.\n      --socket &lt;dir&gt;  Runs the JSONRPC server on a specific port.\n      --stdio         Runs the JSONRPC server over stdin/stdout.\n\n    Examples:\n      bicep jsonrpc --pipe /path/to/pipe.sock\n      bicep jsonrpc --stdio\n\n</code></pre>"},{"location":"descriptors/bicep_bicep_linter/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=Azure/bicep\nARG BICEP_VERSION=0.35.1\nARG BICEP_EXE='bicep'\nARG BICEP_DIR='/usr/local/bin'\nRUN curl --retry 5 --retry-delay 5 -sLo ${BICEP_EXE} \"https://github.com/Azure/bicep/releases/download/v${BICEP_VERSION}/bicep-linux-musl-x64\" \\\n    &amp;&amp; chmod +x \"${BICEP_EXE}\" \\\n    &amp;&amp; mv \"${BICEP_EXE}\" \"${BICEP_DIR}\"\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>icu-libs</li> </ul> </li> </ul>"},{"location":"descriptors/c/","title":"C linters in MegaLinter","text":""},{"location":"descriptors/c/#c","title":"C","text":""},{"location":"descriptors/c/#linters","title":"Linters","text":"Linter Additional cppcheckC_CPPCHECK cpplintC_CPPLINT clang-formatC_CLANG_FORMAT"},{"location":"descriptors/c/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.c</code></li> <li><code>.h</code></li> </ul> </li> </ul>"},{"location":"descriptors/c/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value C_PRE_COMMANDS List of bash commands to run before the linters None C_POST_COMMANDS List of bash commands to run after the linters None C_FILTER_REGEX_INCLUDE Custom regex including filter C_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/c_clang_format/","title":"clang-format configuration in MegaLinter","text":""},{"location":"descriptors/c_clang_format/#clang-format","title":"clang-format","text":""},{"location":"descriptors/c_clang_format/#clang-format-documentation","title":"clang-format documentation","text":"<ul> <li>Version in MegaLinter: 19.1.4</li> <li>Visit Official Web Site</li> <li>See How to disable clang-format rules in files</li> <li>See Index of problems detected by clang-format</li> </ul>"},{"location":"descriptors/c_clang_format/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable clang-format by adding <code>C_CLANG_FORMAT</code> in ENABLE_LINTERS variable</li> <li>Disable clang-format by adding <code>C_CLANG_FORMAT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>C_CLANG_FORMAT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value C_CLANG_FORMAT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> C_CLANG_FORMAT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> C_CLANG_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file C_CLANG_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file C_CLANG_FORMAT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> C_CLANG_FORMAT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".c\", \".h\"]</code> C_CLANG_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file C_CLANG_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None C_CLANG_FORMAT_POST_COMMANDS List of bash commands to run after the linter None C_CLANG_FORMAT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling C_CLANG_FORMAT and its pre/post commands None C_CLANG_FORMAT_CONFIG_FILE clang-format configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.clang-format</code> C_CLANG_FORMAT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules C_CLANG_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> C_CLANG_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> C_CLANG_FORMAT_CLI_EXECUTABLE Override CLI executable <code>['clang-format']</code>"},{"location":"descriptors/c_clang_format/#ide-integration","title":"IDE Integration","text":"<p>Use clang-format in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Clang-Format Emacs clang-format Visit Web Site"},{"location":"descriptors/c_clang_format/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56"},{"location":"descriptors/c_clang_format/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/c_clang_format/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.c</code>, <code>.h</code></li> </ul>"},{"location":"descriptors/c_clang_format/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>clang-format is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/c_clang_format/#example-calls","title":"Example calls","text":"<pre><code>clang-format --Werror --dry-run myfile.c\n</code></pre>"},{"location":"descriptors/c_clang_format/#help-content","title":"Help content","text":"<pre><code>OVERVIEW: A tool to format C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code.\n\nIf no arguments are specified, it formats the code from standard input\nand writes the result to the standard output.\nIf &lt;file&gt;s are given, it reformats the files. If -i is specified\ntogether with &lt;file&gt;s, the files are edited in-place. Otherwise, the\nresult is written to the standard output.\n\nUSAGE: clang-format [options] [@&lt;file&gt;] [&lt;file&gt; ...]\n\nOPTIONS:\n\nClang-format options:\n\n  --Werror                       - If set, changes formatting warnings to errors\n  --Wno-error=&lt;value&gt;            - If set don't error out on the specified warning type.\n    =unknown                     -   If set, unknown format options are only warned about.\n                                     This can be used to enable formatting, even if the\n                                     configuration contains unknown (newer) options.\n                                     Use with caution, as this might lead to dramatically\n                                     differing format depending on an option being\n                                     supported or not.\n  --assume-filename=&lt;string&gt;     - Set filename used to determine the language and to find\n                                   .clang-format file.\n                                   Only used when reading from stdin.\n                                   If this is not passed, the .clang-format file is searched\n                                   relative to the current working directory when reading stdin.\n                                   Unrecognized filenames are treated as C++.\n                                   supported:\n                                     CSharp: .cs\n                                     Java: .java\n                                     JavaScript: .mjs .js .ts\n                                     Json: .json\n                                     Objective-C: .m .mm\n                                     Proto: .proto .protodevel\n                                     TableGen: .td\n                                     TextProto: .txtpb .textpb .pb.txt .textproto .asciipb\n                                     Verilog: .sv .svh .v .vh\n  --cursor=&lt;uint&gt;                - The position of the cursor when invoking\n                                   clang-format from an editor integration\n  --dry-run                      - If set, do not actually make the formatting changes\n  --dump-config                  - Dump configuration options to stdout and exit.\n                                   Can be used with -style option.\n  --fail-on-incomplete-format    - If set, fail with exit code 1 on incomplete format.\n  --fallback-style=&lt;string&gt;      - The name of the predefined style used as a\n                                   fallback in case clang-format is invoked with\n                                   -style=file, but can not find the .clang-format\n                                   file to use. Defaults to 'LLVM'.\n                                   Use -fallback-style=none to skip formatting.\n  --ferror-limit=&lt;uint&gt;          - Set the maximum number of clang-format errors to emit\n                                   before stopping (0 = no limit).\n                                   Used only with --dry-run or -n\n  --files=&lt;filename&gt;             - A file containing a list of files to process, one per line.\n  -i                             - Inplace edit &lt;file&gt;s, if specified.\n  --length=&lt;uint&gt;                - Format a range of this length (in bytes).\n                                   Multiple ranges can be formatted by specifying\n                                   several -offset and -length pairs.\n                                   When only a single -offset is specified without\n                                   -length, clang-format will format up to the end\n                                   of the file.\n                                   Can only be used with one input file.\n  --lines=&lt;string&gt;               - &lt;start line&gt;:&lt;end line&gt; - format a range of\n                                   lines (both 1-based).\n                                   Multiple ranges can be formatted by specifying\n                                   several -lines arguments.\n                                   Can't be used with -offset and -length.\n                                   Can only be used with one input file.\n  -n                             - Alias for --dry-run\n  --offset=&lt;uint&gt;                - Format a range starting at this byte offset.\n                                   Multiple ranges can be formatted by specifying\n                                   several -offset and -length pairs.\n                                   Can only be used with one input file.\n  --output-replacements-xml      - Output replacements as XML.\n  --qualifier-alignment=&lt;string&gt; - If set, overrides the qualifier alignment style\n                                   determined by the QualifierAlignment style flag\n  --sort-includes                - If set, overrides the include sorting behavior\n                                   determined by the SortIncludes style flag\n  --style=&lt;string&gt;               - Set coding style. &lt;string&gt; can be:\n                                   1. A preset: LLVM, GNU, Google, Chromium, Microsoft,\n                                      Mozilla, WebKit.\n                                   2. 'file' to load style configuration from a\n                                      .clang-format file in one of the parent directories\n                                      of the source file (for stdin, see --assume-filename).\n                                      If no .clang-format file is found, falls back to\n                                      --fallback-style.\n                                      --style=file is the default.\n                                   3. 'file:&lt;format_file_path&gt;' to explicitly specify\n                                      the configuration file.\n                                   4. \"{key: value, ...}\" to set specific parameters, e.g.:\n                                      --style=\"{BasedOnStyle: llvm, IndentWidth: 8}\"\n  --verbose                      - If set, shows the list of processed files\n\nGeneric Options:\n\n  --help                         - Display available options (--help-hidden for more)\n  --help-list                    - Display list of available options (--help-list-hidden for more)\n  --version                      - Display the version of this program\n</code></pre>"},{"location":"descriptors/c_clang_format/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>APK packages (Linux):<ul> <li>clang19-extra-tools</li> </ul> </li> </ul>"},{"location":"descriptors/c_cppcheck/","title":"cppcheck configuration in MegaLinter","text":""},{"location":"descriptors/c_cppcheck/#cppcheck","title":"cppcheck","text":""},{"location":"descriptors/c_cppcheck/#cppcheck-documentation","title":"cppcheck documentation","text":"<ul> <li>Version in MegaLinter: 2.14.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by cppcheck</li> </ul>"},{"location":"descriptors/c_cppcheck/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cppcheck by adding <code>C_CPPCHECK</code> in ENABLE_LINTERS variable</li> <li>Disable cppcheck by adding <code>C_CPPCHECK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value C_CPPCHECK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> C_CPPCHECK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> C_CPPCHECK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file C_CPPCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file C_CPPCHECK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> C_CPPCHECK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".c\", \".h\"]</code> C_CPPCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file C_CPPCHECK_PRE_COMMANDS List of bash commands to run before the linter None C_CPPCHECK_POST_COMMANDS List of bash commands to run after the linter None C_CPPCHECK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling C_CPPCHECK and its pre/post commands None C_CPPCHECK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> C_CPPCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> C_CPPCHECK_CLI_EXECUTABLE Override CLI executable <code>['cppcheck']</code>"},{"location":"descriptors/c_cppcheck/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 python Optimized for PYTHON based projects 65"},{"location":"descriptors/c_cppcheck/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/c_cppcheck/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.c</code>, <code>.h</code></li> </ul>"},{"location":"descriptors/c_cppcheck/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cppcheck is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/c_cppcheck/#example-calls","title":"Example calls","text":"<pre><code>cppcheck myfile.cpp\n</code></pre>"},{"location":"descriptors/c_cppcheck/#help-content","title":"Help content","text":"<pre><code>Cppcheck - A tool for static C/C++ code analysis\n\nSyntax:\n    cppcheck [OPTIONS] [files or paths]\n\nIf a directory is given instead of a filename, *.cpp, *.cxx, *.cc, *.c++, *.c, *.ipp,\n*.ixx, *.tpp, and *.txx files are checked recursively from the given directory.\n\nOptions:\n    --addon=&lt;addon&gt;\n                         Execute addon. i.e. --addon=misra. If options must be\n                         provided a json configuration is needed.\n    --addon-python=&lt;python interpreter&gt;\n                         You can specify the python interpreter either in the\n                         addon json files or through this command line option.\n                         If not present, Cppcheck will try \"python3\" first and\n                         then \"python\".\n    --cppcheck-build-dir=&lt;dir&gt;\n                         Cppcheck work folder. Advantages:\n                          * whole program analysis\n                          * faster analysis; Cppcheck will reuse the results if\n                            the hash for a file is unchanged.\n                          * some useful debug information, i.e. commands used to\n                            execute clang/clang-tidy/addons.\n    --check-config       Check cppcheck configuration. The normal code\n                         analysis is disabled by this flag.\n    --check-level=&lt;level&gt;\n                         Configure how much checking you want:\n                          * normal: Cppcheck uses some compromises in the checking so\n                            the checking will finish in reasonable time.\n                          * exhaustive: deeper analysis that you choose when you can\n                            wait.\n                         The default choice is 'normal'.\n    --check-library      Show information messages when library files have\n                         incomplete info.\n    --checkers-report=&lt;file&gt;\n                         Write a report of all the active checkers to the given file.\n    --clang=&lt;path&gt;       Experimental: Use Clang parser instead of the builtin Cppcheck\n                         parser. Takes the executable as optional parameter and\n                         defaults to `clang`. Cppcheck will run the given Clang\n                         executable, import the Clang AST and convert it into\n                         Cppcheck data. After that the normal Cppcheck analysis is\n                         used. You must have the executable in PATH if no path is\n                         given.\n    --config-exclude=&lt;dir&gt;\n                         Path (prefix) to be excluded from configuration\n                         checking. Preprocessor configurations defined in\n                         headers (but not sources) matching the prefix will not\n                         be considered for evaluation.\n    --config-excludes-file=&lt;file&gt;\n                         A file that contains a list of config-excludes\n    --disable=&lt;id&gt;       Disable individual checks.\n                         Please refer to the documentation of --enable=&lt;id&gt;\n                         for further details.\n    --dump               Dump xml data for each translation unit. The dump\n                         files have the extension .dump and contain ast,\n                         tokenlist, symboldatabase, valueflow.\n    -D&lt;ID&gt;               Define preprocessor symbol. Unless --max-configs or\n                         --force is used, Cppcheck will only check the given\n                         configuration when -D is used.\n                         Example: '-DDEBUG=1 -D__cplusplus'.\n    -E                   Print preprocessor output on stdout and don't do any\n                         further processing.\n    --enable=&lt;id&gt;        Enable additional checks. The available ids are:\n                          * all\n                                  Enable all checks. It is recommended to only\n                                  use --enable=all when the whole program is\n                                  scanned, because this enables unusedFunction.\n                          * warning\n                                  Enable warning messages\n                          * style\n                                  Enable all coding style checks. All messages\n                                  with the severities 'style', 'warning',\n                                  'performance' and 'portability' are enabled.\n                          * performance\n                                  Enable performance messages\n                          * portability\n                                  Enable portability messages\n                          * information\n                                  Enable information messages\n                          * unusedFunction\n                                  Check for unused functions. It is recommended\n                                  to only enable this when the whole program is\n                                  scanned.\n                          * missingInclude\n                                  Warn if there are missing includes.\n                         Several ids can be given if you separate them with\n                         commas. See also --std\n    --error-exitcode=&lt;n&gt; If errors are found, integer [n] is returned instead of\n                         the default '0'. '1' is returned\n                         if arguments are not valid or if no input files are\n                         provided. Note that your operating system can modify\n                         this value, e.g. '256' can become '0'.\n    --errorlist          Print a list of all the error messages in XML format.\n    --exitcode-suppressions=&lt;file&gt;\n                         Used when certain messages should be displayed but\n                         should not cause a non-zero exitcode.\n    --file-filter=&lt;str&gt;  Analyze only those files matching the given filter str\n                         Can be used multiple times\n                         Example: --file-filter=*bar.cpp analyzes only files\n                                  that end with bar.cpp.\n    --file-list=&lt;file&gt;   Specify the files to check in a text file. Add one\n                         filename per line. When file is '-,' the file list will\n                         be read from standard input.\n    -f, --force          Force checking of all configurations in files. If used\n                         together with '--max-configs=', the last option is the\n                         one that is effective.\n    --fsigned-char       Treat char type as signed.\n    --funsigned-char     Treat char type as unsigned.\n    -h, --help           Print this help.\n    -I &lt;dir&gt;             Give path to search for include files. Give several -I\n                         parameters to give several paths. First given path is\n                         searched for contained header files first. If paths are\n                         relative to source files, this is not needed.\n    --includes-file=&lt;file&gt;\n                         Specify directory paths to search for included header\n                         files in a text file. Add one include path per line.\n                         First given path is searched for contained header\n                         files first. If paths are relative to source files,\n                         this is not needed.\n    --include=&lt;file&gt;\n                         Force inclusion of a file before the checked file.\n    -i &lt;dir or file&gt;     Give a source file or source file directory to exclude\n                         from the check. This applies only to source files so\n                         header files included by source files are not matched.\n                         Directory name is matched to all parts of the path.\n    --inconclusive       Allow that Cppcheck reports even though the analysis is\n                         inconclusive.\n                         There are false positives with this option. Each result\n                         must be carefully investigated before you know if it is\n                         good or bad.\n    --inline-suppr       Enable inline suppressions. Use them by placing one or\n                         more comments, like: '// cppcheck-suppress warningId'\n                         on the lines before the warning to suppress.\n    -j &lt;jobs&gt;            Start &lt;jobs&gt; threads to do the checking simultaneously.\n    -l &lt;load&gt;            Specifies that no new threads should be started if\n                         there are other threads running and the load average is\n                         at least &lt;load&gt;.\n    --language=&lt;language&gt;, -x &lt;language&gt;\n                         Forces cppcheck to check all files as the given\n                         language. Valid values are: c, c++\n    --library=&lt;cfg&gt;      Load file &lt;cfg&gt; that contains information about types\n                         and functions. With such information Cppcheck\n                         understands your code better and therefore you\n                         get better results. The std.cfg file that is\n                         distributed with Cppcheck is loaded automatically.\n                         For more information about library files, read the\n                         manual.\n    --max-configs=&lt;limit&gt;\n                         Maximum number of configurations to check in a file\n                         before skipping it. Default is '12'. If used together\n                         with '--force', the last option is the one that is\n                         effective.\n    --max-ctu-depth=N    Max depth in whole program analysis. The default value\n                         is 2. A larger value will mean more errors can be found\n                         but also means the analysis will be slower.\n    --output-file=&lt;file&gt; Write results to file, rather than standard error.\n    --platform=&lt;type&gt;, --platform=&lt;file&gt;\n                         Specifies platform specific types and sizes. The\n                         available builtin platforms are:\n                          * unix32\n                                 32 bit unix variant\n                          * unix64\n                                 64 bit unix variant\n                          * win32A\n                                 32 bit Windows ASCII character encoding\n                          * win32W\n                                 32 bit Windows UNICODE character encoding\n                          * win64\n                                 64 bit Windows\n                          * avr8\n                                 8 bit AVR microcontrollers\n                          * elbrus-e1cp\n                                 Elbrus e1c+ architecture\n                          * pic8\n                                 8 bit PIC microcontrollers\n                                 Baseline and mid-range architectures\n                          * pic8-enhanced\n                                 8 bit PIC microcontrollers\n                                 Enhanced mid-range and high end (PIC18) architectures\n                          * pic16\n                                 16 bit PIC microcontrollers\n                          * mips32\n                                 32 bit MIPS microcontrollers\n                          * native\n                                 Type sizes of host system are assumed, but no\n                                 further assumptions.\n                          * unspecified\n                                 Unknown type sizes\n    --plist-output=&lt;path&gt;\n                         Generate Clang-plist output files in folder.\n    --project=&lt;file&gt;     Run Cppcheck on project. The &lt;file&gt; can be a Visual\n                         Studio Solution (*.sln), Visual Studio Project\n                         (*.vcxproj), compile database (compile_commands.json),\n                         or Borland C++ Builder 6 (*.bpr). The files to analyse,\n                         include paths, defines, platform and undefines in\n                         the specified file will be used.\n    --project-configuration=&lt;config&gt;\n                         If used together with a Visual Studio Solution (*.sln)\n                         or Visual Studio Project (*.vcxproj) you can limit\n                         the configuration cppcheck should check.\n                         For example: '--project-configuration=Release|Win32'\n    -q, --quiet          Do not show progress reports.\n                         Note that this option is not mutually exclusive with --verbose.\n    -rp=&lt;paths&gt;, --relative-paths=&lt;paths&gt;\n                         Use relative paths in output. When given, &lt;paths&gt; are\n                         used as base. You can separate multiple paths by ';'.\n                         Otherwise path where source files are searched is used.\n                         We use string comparison to create relative paths, so\n                         using e.g. ~ for home folder does not work. It is\n                         currently only possible to apply the base paths to\n                         files that are on a lower level in the directory tree.\n    --report-progress    Report progress messages while checking a file (single job only).\n    --rule=&lt;rule&gt;        Match regular expression.\n    --rule-file=&lt;file&gt;   Use given rule file. For more information, see:\n                         http://sourceforge.net/projects/cppcheck/files/Articles/\n    --showtime=&lt;mode&gt;    Show timing information.\n                         The available modes are:\n                          * none\n                                 Show nothing (default)\n                          * file\n                                 Show for each processed file\n                          * file-total\n                                 Show total time only for each processed file\n                          * summary\n                                 Show a summary at the end\n                          * top5_file\n                                 Show the top 5 for each processed file\n                          * top5_summary\n                                 Show the top 5 summary at the end\n                          * top5\n                                 Alias for top5_file (deprecated)\n    --std=&lt;id&gt;           Set standard.\n                         The available options are:\n                          * c89\n                                 C code is C89 compatible\n                          * c99\n                                 C code is C99 compatible\n                          * c11\n                                 C code is C11 compatible (default)\n                          * c++03\n                                 C++ code is C++03 compatible\n                          * c++11\n                                 C++ code is C++11 compatible\n                          * c++14\n                                 C++ code is C++14 compatible\n                          * c++17\n                                 C++ code is C++17 compatible\n                          * c++20\n                                 C++ code is C++20 compatible (default)\n    --suppress=&lt;spec&gt;    Suppress warnings that match &lt;spec&gt;. The format of\n                         &lt;spec&gt; is:\n                         [error id]:[filename]:[line]\n                         The [filename] and [line] are optional. If [error id]\n                         is a wildcard '*', all error ids match.\n    --suppressions-list=&lt;file&gt;\n                         Suppress warnings listed in the file. Each suppression\n                         is in the same format as &lt;spec&gt; above.\n    --suppress-xml=&lt;file&gt;\n                         Suppress warnings listed in a xml file. XML file should\n                         follow the manual.pdf format specified in section.\n                         `6.4 XML suppressions` .\n    --template='&lt;text&gt;'  Format the error messages. Available fields:\n                           {file}              file name\n                           {line}              line number\n                           {column}            column number\n                           {callstack}         show a callstack. Example:\n                                                 [file.c:1] -&gt; [file.c:100]\n                           {inconclusive:text} if warning is inconclusive, text\n                                               is written\n                           {severity}          severity\n                           {message}           warning message\n                           {id}                warning id\n                           {cwe}               CWE id (Common Weakness Enumeration)\n                           {code}              show the real code\n                                              insert tab\n                           \\n                 insert newline\n                                            insert carriage return\n                         Example formats:\n                         '{file}:{line},{severity},{id},{message}' or\n                         '{file}({line}):({severity}) {message}' or\n                         '{callstack} {message}'\n                         Pre-defined templates: gcc (default), cppcheck1 (old default), vs, edit.\n    --template-location='&lt;text&gt;'\n                         Format error message location. If this is not provided\n                         then no extra location info is shown.\n                         Available fields:\n                           {file}      file name\n                           {line}      line number\n                           {column}    column number\n                           {info}      location info\n                           {code}      show the real code\n                                      insert tab\n                           \\n         insert newline\n                                    insert carriage return\n                         Example format (gcc-like):\n                         '{file}:{line}:{column}: note: {info}\\n{code}'\n    -U&lt;ID&gt;               Undefine preprocessor symbol. Use -U to explicitly\n                         hide certain #ifdef &lt;ID&gt; code paths from checking.\n                         Example: '-UDEBUG'\n    -v, --verbose        Output more detailed error information.\n                         Note that this option is not mutually exclusive with --quiet.\n    --version            Print out version number.\n    --xml                Write results in xml format to error stream (stderr).\n\nExample usage:\n  # Recursively check the current folder. Print the progress on the screen and\n  # write errors to a file:\n  cppcheck . 2&gt; err.txt\n\n  # Recursively check ../myproject/ and don't print progress:\n  cppcheck --quiet ../myproject/\n\n  # Check test.cpp, enable all checks:\n  cppcheck --enable=all --inconclusive --library=posix test.cpp\n\n  # Check f.cpp and search include files from inc1/ and inc2/:\n  cppcheck -I inc1/ -I inc2/ f.cpp\n\nFor more information:\n    https://files.cppchecksolutions.com/manual.pdf\n\nMany thanks to the 3rd party libraries we use:\n * tinyxml2 -- loading project/library/ctu files.\n * picojson -- loading compile database.\n * pcre -- rules.\n * qt -- used in GUI\n\n</code></pre>"},{"location":"descriptors/c_cppcheck/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>APK packages (Linux):<ul> <li>cppcheck</li> </ul> </li> </ul>"},{"location":"descriptors/c_cpplint/","title":"cpplint configuration in MegaLinter","text":""},{"location":"descriptors/c_cpplint/#cpplint","title":"cpplint","text":""},{"location":"descriptors/c_cpplint/#cpplint-documentation","title":"cpplint documentation","text":"<ul> <li>Version in MegaLinter: 2.0.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by cpplint</li> </ul>"},{"location":"descriptors/c_cpplint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cpplint by adding <code>C_CPPLINT</code> in ENABLE_LINTERS variable</li> <li>Disable cpplint by adding <code>C_CPPLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value C_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> C_CPPLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> C_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file C_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file C_CPPLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> C_CPPLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".c\", \".h\"]</code> C_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file C_CPPLINT_PRE_COMMANDS List of bash commands to run before the linter None C_CPPLINT_POST_COMMANDS List of bash commands to run after the linter None C_CPPLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling C_CPPLINT and its pre/post commands None C_CPPLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> C_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> C_CPPLINT_CLI_EXECUTABLE Override CLI executable <code>['cpplint']</code>"},{"location":"descriptors/c_cpplint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 python Optimized for PYTHON based projects 65"},{"location":"descriptors/c_cpplint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/c_cpplint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.c</code>, <code>.h</code></li> </ul>"},{"location":"descriptors/c_cpplint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cpplint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/c_cpplint/#example-calls","title":"Example calls","text":"<pre><code>cpplint myfile.cpp\n</code></pre>"},{"location":"descriptors/c_cpplint/#help-content","title":"Help content","text":"<pre><code>\nSyntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed]\n                   [--filter=-x,+y,...]\n                   [--counting=total|toplevel|detailed] [--root=subdir]\n                   [--repository=path]\n                   [--linelength=digits] [--headers=x,y,...]\n                   [--recursive]\n                   [--exclude=path]\n                   [--extensions=hpp,cpp,...]\n                   [--includeorder=default|standardcfirst]\n                   [--config=filename]\n                   [--quiet]\n                   [--version]\n        &lt;file&gt; [file] ...\n\n  Style checker for C/C++ source files.\n  This is a fork of the Google style checker with minor extensions.\n\n  The style guidelines this tries to follow are those in\n    https://google.github.io/styleguide/cppguide.html\n\n  Every problem is given a confidence score from 1-5, with 5 meaning we are\n  certain of the problem, and 1 meaning it could be a legitimate construct.\n  This will miss some errors, and is not a substitute for a code review.\n\n  To suppress false-positive errors of certain categories, add a\n  'NOLINT(category[, category...])' comment to the line.  NOLINT or NOLINT(*)\n  suppresses errors of all categories on that line. To suppress categories\n  on the next line use NOLINTNEXTLINE instead of NOLINT. To suppress errors in\n  a block of code 'NOLINTBEGIN(category[, category...])' comment to a line at\n  the start of the block and to end the block add a comment with 'NOLINTEND'.\n  NOLINT blocks are inclusive so any statements on the same line as a BEGIN\n  or END will have the error suppression applied.\n\n  The files passed in will be linted; at least one file must be provided.\n  Default linted extensions are ['c', 'c++', 'cc', 'cpp', 'cu', 'cuh', 'cxx', 'h', 'h++', 'hh', 'hpp', 'hxx'].\n  Other file types will be ignored.\n  Change the extensions with the --extensions flag.\n\n  Flags:\n\n    output=emacs|eclipse|vs7|junit|sed|gsed\n      By default, the output is formatted to ease emacs parsing.  Visual Studio\n      compatible output (vs7) may also be used.  Further support exists for\n      eclipse (eclipse), and JUnit (junit). XML parsers such as those used\n      in Jenkins and Bamboo may also be used.\n      The sed format outputs sed commands that should fix some of the errors.\n      Note that this requires gnu sed. If that is installed as gsed on your\n      system (common e.g. on macOS with homebrew) you can use the gsed output\n      format. Sed commands are written to stdout, not stderr, so you should be\n      able to pipe output straight to a shell to run the fixes.\n\n    verbose=#\n      Specify a number 0-5 to restrict errors to certain verbosity levels.\n      Errors with lower verbosity levels have lower confidence and are more\n      likely to be false positives.\n\n    quiet\n      Don't print anything if no errors are found.\n\n    filter=-x,+y,...\n      Specify a comma-separated list of category-filters to apply: only\n      error messages whose category names pass the filters will be printed.\n      (Category names are printed with the message and look like\n      \"[whitespace/indent]\".)  Filters are evaluated left to right.\n      \"-FOO\" means \"do not print categories that start with FOO\".\n      \"+FOO\" means \"do print categories that start with FOO\".\n\n      Examples: --filter=-whitespace,+whitespace/braces\n                --filter=-whitespace,-runtime/printf,+runtime/printf_format\n                --filter=-,+build/include_what_you_use\n\n      To see a list of all the categories used in cpplint, pass no arg:\n         --filter=\n\n      Filters can directly be limited to files and also line numbers. The\n      syntax is category:file:line , where line is optional. The filter limitation\n      works for both + and - and can be combined with ordinary filters:\n\n      Examples: --filter=-whitespace:foo.h,+whitespace/braces:foo.h\n                --filter=-whitespace,-runtime/printf:foo.h:14,+runtime/printf_format:foo.h\n                --filter=-,+build/include_what_you_use:foo.h:321\n\n    counting=total|toplevel|detailed\n      The total number of errors found is always printed. If\n      'toplevel' is provided, then the count of errors in each of\n      the top-level categories like 'build' and 'whitespace' will\n      also be printed. If 'detailed' is provided, then a count\n      is provided for each category like 'legal/copyright'.\n\n    repository=path\n      The top level directory of the repository, used to derive the header\n      guard CPP variable. By default, this is determined by searching for a\n      path that contains .git, .hg, or .svn. When this flag is specified, the\n      given path is used instead. This option allows the header guard CPP\n      variable to remain consistent even if members of a team have different\n      repository root directories (such as when checking out a subdirectory\n      with SVN). In addition, users of non-mainstream version control systems\n      can use this flag to ensure readable header guard CPP variables.\n\n      Examples:\n        Assuming that Alice checks out ProjectName and Bob checks out\n        ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then\n        with no --repository flag, the header guard CPP variable will be:\n\n        Alice =&gt; TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_\n        Bob   =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n\n        If Alice uses the --repository=trunk flag and Bob omits the flag or\n        uses --repository=. then the header guard CPP variable will be:\n\n        Alice =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n        Bob   =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n\n    root=subdir\n      The root directory used for deriving header guard CPP variable.\n      This directory is relative to the top level directory of the repository\n      which by default is determined by searching for a directory that contains\n      .git, .hg, or .svn but can also be controlled with the --repository flag.\n      If the specified directory does not exist, this flag is ignored.\n\n      Examples:\n        Assuming that src is the top level directory of the repository (and\n        cwd=top/src), the header guard CPP variables for\n        src/chrome/browser/ui/browser.h are:\n\n        No flag =&gt; CHROME_BROWSER_UI_BROWSER_H_\n        --root=chrome =&gt; BROWSER_UI_BROWSER_H_\n        --root=chrome/browser =&gt; UI_BROWSER_H_\n        --root=.. =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n\n    linelength=digits\n      This is the allowed line length for the project. The default value is\n      80 characters.\n\n      Examples:\n        --linelength=120\n\n    recursive\n      Search for files to lint recursively. Each directory given in the list\n      of files to be linted is replaced by all files that descend from that\n      directory. Files with extensions not in the valid extensions list are\n      excluded.\n\n    exclude=path\n      Exclude the given path from the list of files to be linted. Relative\n      paths are evaluated relative to the current directory and shell globbing\n      is performed. This flag can be provided multiple times to exclude\n      multiple files.\n\n      Examples:\n        --exclude=one.cc\n        --exclude=src/*.cc\n        --exclude=src/*.cc --exclude=test/*.cc\n\n    extensions=extension,extension,...\n      The allowed file extensions that cpplint will check\n\n      Examples:\n        --extensions=c,c++,cc,cpp,cu,cuh,cxx,h,h++,hh,hpp,hxx\n\n    includeorder=default|standardcfirst\n      For the build/include_order rule, the default is to blindly assume angle\n      bracket includes with file extension are c-system-headers (default),\n      even knowing this will have false classifications.\n      The default is established at google.\n      standardcfirst means to instead use an allow-list of known c headers and\n      treat all others as separate group of \"other system headers\". The C headers\n      included are those of the C-standard lib and closely related ones.\n\n    config=filename\n      Search for config files with the specified name instead of CPPLINT.cfg\n\n    headers=x,y,...\n      The header extensions that cpplint will treat as .h in checks. Values are\n      automatically added to --extensions list.\n     (by default, only files with extensions ['cuh', 'h', 'h++', 'hh', 'hpp', 'hxx'] will be assumed to be headers)\n\n      Examples:\n        --headers=cuh,h,h++,hh,hpp,hxx\n        --headers=hpp,hxx\n        --headers=hpp\n\n    cpplint.py supports per-directory configurations specified in CPPLINT.cfg\n    files. CPPLINT.cfg file can contain a number of key=value pairs.\n    Currently the following options are supported:\n\n      set noparent\n      filter=+filter1,-filter2,...\n      exclude_files=regex\n      linelength=80\n      root=subdir\n      headers=x,y,...\n\n    \"set noparent\" option prevents cpplint from traversing directory tree\n    upwards looking for more .cfg files in parent directories. This option\n    is usually placed in the top-level project directory.\n\n    The \"filter\" option is similar in function to --filter flag. It specifies\n    message filters in addition to the |_DEFAULT_FILTERS| and those specified\n    through --filter command-line flag.\n\n    \"exclude_files\" allows to specify a regular expression to be matched against\n    a file name. If the expression matches, the file is skipped and not run\n    through the linter.\n\n    \"linelength\" allows to specify the allowed line length for the project.\n\n    The \"root\" option is similar in function to the --root flag (see example\n    above). Paths are relative to the directory of the CPPLINT.cfg.\n\n    The \"headers\" option is similar in function to the --headers flag\n    (see example above).\n\n    CPPLINT.cfg has an effect on files in the same directory and all\n    sub-directories, unless overridden by a nested configuration file.\n\n      Example file:\n        filter=-build/include_order,+build/include_alpha\n        exclude_files=.*\\.cc\n\n    The above example disables build/include_order warning and enables\n    build/include_alpha as well as excludes all .cc from being\n    processed by linter, in the current directory (where the .cfg\n    file is located) and all sub-directories.\n</code></pre>"},{"location":"descriptors/c_cpplint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=cpplint\nARG PIP_CPPLINT_VERSION=2.0.2\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>cpplint==2.0.2</li> </ul> </li> </ul>"},{"location":"descriptors/clojure/","title":"CLOJURE linters in MegaLinter","text":""},{"location":"descriptors/clojure/#clojure","title":"CLOJURE","text":""},{"location":"descriptors/clojure/#linters","title":"Linters","text":"Linter Additional clj-kondoCLOJURE_CLJ_KONDO cljstyleCLOJURE_CLJSTYLE"},{"location":"descriptors/clojure/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.clj</code></li> <li><code>.cljs</code></li> <li><code>.cljc</code></li> <li><code>.edn</code></li> </ul> </li> </ul>"},{"location":"descriptors/clojure/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value CLOJURE_PRE_COMMANDS List of bash commands to run before the linters None CLOJURE_POST_COMMANDS List of bash commands to run after the linters None CLOJURE_FILTER_REGEX_INCLUDE Custom regex including filter CLOJURE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/clojure/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/clojure/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=sgerrand/alpine-pkg-glibc\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.34-r0\nENV LANG=C.UTF-8\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" &amp;&amp; \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \\\n    echo \\\n        \"-----BEGIN PUBLIC KEY-----\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\\\n        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\\\n        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\\\n        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\\\n        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\\\n        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\\\n        1QIDAQAB\\\n        -----END PUBLIC KEY-----\" | sed 's/   */\\\\n/g' &gt; \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    wget --quiet --tries=10 --waitretry=10 \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    mv /etc/nsswitch.conf /etc/nsswitch.conf.bak &amp;&amp; \\\n    apk add --no-cache --force-overwrite \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    \\\n    mv /etc/nsswitch.conf.bak /etc/nsswitch.conf &amp;&amp; \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true) &amp;&amp; \\\n    echo \"export LANG=$LANG\" &gt; /etc/profile.d/locale.sh &amp;&amp; \\\n    \\\n    apk del glibc-i18n &amp;&amp; \\\n    \\\n    rm \"/root/.wget-hsts\" &amp;&amp; \\\n    apk del .build-dependencies &amp;&amp; \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n</code></pre>"},{"location":"descriptors/clojure_clj_kondo/","title":"clj-kondo configuration in MegaLinter","text":""},{"location":"descriptors/clojure_clj_kondo/#clj-kondo-documentation","title":"clj-kondo documentation","text":"<ul> <li>Version in MegaLinter: 2025.04.07</li> <li>Visit Official Web Site</li> <li>See How to configure clj-kondo rules<ul> <li>If custom <code>.clj-kondo/config.edn</code> config file isn't found, .clj-kondo/config.edn will be used</li> </ul> </li> <li>See How to disable clj-kondo rules in files</li> <li>See Index of problems detected by clj-kondo</li> </ul>"},{"location":"descriptors/clojure_clj_kondo/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable clj-kondo by adding <code>CLOJURE_CLJ_KONDO</code> in ENABLE_LINTERS variable</li> <li>Disable clj-kondo by adding <code>CLOJURE_CLJ_KONDO</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value CLOJURE_CLJ_KONDO_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CLOJURE_CLJ_KONDO_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CLOJURE_CLJ_KONDO_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> CLOJURE_CLJ_KONDO_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".clj\", \".cljs\", \".cljc\", \".edn\"]</code> CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CLOJURE_CLJ_KONDO_PRE_COMMANDS List of bash commands to run before the linter None CLOJURE_CLJ_KONDO_POST_COMMANDS List of bash commands to run after the linter None CLOJURE_CLJ_KONDO_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CLOJURE_CLJ_KONDO and its pre/post commands None CLOJURE_CLJ_KONDO_CONFIG_FILE clj-kondo configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.clj-kondo/config.edn</code> CLOJURE_CLJ_KONDO_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOJURE_CLJ_KONDO_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CLOJURE_CLJ_KONDO_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CLOJURE_CLJ_KONDO_CLI_EXECUTABLE Override CLI executable <code>['clj-kondo']</code>"},{"location":"descriptors/clojure_clj_kondo/#ide-integration","title":"IDE Integration","text":"<p>Use clj-kondo in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-kondo Visit Web Site Emacs flycheck-clj-kondo Visit Web Site Visual Studio Code clj-kondo Visual Studio Code Clojure lint Visit Web Site"},{"location":"descriptors/clojure_clj_kondo/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 java Optimized for JAVA based projects 53"},{"location":"descriptors/clojure_clj_kondo/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/clojure_clj_kondo/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.clj</code>, <code>.cljs</code>, <code>.cljc</code>, <code>.edn</code></li> </ul>"},{"location":"descriptors/clojure_clj_kondo/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>clj-kondo is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/clojure_clj_kondo/#example-calls","title":"Example calls","text":"<pre><code>clj-kondo --lint myfile.clj\n</code></pre> <pre><code>clj-kondo --lint --config .clj-kondo/config.edn myfile.clj\n</code></pre>"},{"location":"descriptors/clojure_clj_kondo/#help-content","title":"Help content","text":"<pre><code>clj-kondo v2025.04.07\n\nOptions:\n\n  --lint &lt;file&gt;: a file can either be a normal file, directory or classpath. In the\n    case of a directory or classpath, only .clj, .cljs and .cljc will be\n    processed. Use - as filename for reading from stdin.\n\n  --lang &lt;lang&gt;: if lang cannot be derived from the file extension this option will be\n    used. Supported values: clj, cljs, cljc.\n\n  --filename &lt;file&gt;: in case stdin is used for linting, use this to set the\n    reported filename.\n\n  --cache-dir: when this option is provided, the cache will be resolved to this\n    directory. If --cache is false, this option will be ignored.\n\n  --cache: if false, won't use cache. Otherwise, will try to resolve cache\n  using `--cache-dir`. If `--cache-dir` is not set, cache is resolved using the\n  nearest `.clj-kondo` directory in the current and parent directories.\n\n  --config &lt;config&gt;: extra config that is merged. May be a file or an EDN expression. See https://github.com/clj-kondo/clj-kondo/blob/master/doc/config.md.\n\n  --config-dir &lt;config-dir&gt;: use this config directory instead of auto-detected\n    .clj-kondo dir.\n\n  --parallel: lint sources in parallel.\n\n  --dependencies: don't report any findings. Useful for populating cache while linting dependencies.\n\n  --copy-configs: copy configs from dependencies while linting.\n\n  --skip-lint: skip lint/analysis, still check for other tasks like copy-configs.\n\n  --fail-level &lt;level&gt;: minimum severity for exit with error code.  Supported values:\n    warning, error.  The default level if unspecified is warning.\n\n  --report-level &lt;level&gt;: minimum severity for which to report.  Supported values:\n    info, warning, error.  The default level if unspecified is info.\n\n  --repro: ignore home dir configuration\n\n  --debug: print debug information.\n\n</code></pre>"},{"location":"descriptors/clojure_clj_kondo/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=github-tags depName=sgerrand/alpine-pkg-glibc\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.34-r0\nENV LANG=C.UTF-8\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" &amp;&amp; \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \\\n    echo \\\n        \"-----BEGIN PUBLIC KEY-----\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\\\n        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\\\n        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\\\n        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\\\n        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\\\n        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\\\n        1QIDAQAB\\\n        -----END PUBLIC KEY-----\" | sed 's/   */\\\\n/g' &gt; \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    wget --quiet --tries=10 --waitretry=10 \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    mv /etc/nsswitch.conf /etc/nsswitch.conf.bak &amp;&amp; \\\n    apk add --no-cache --force-overwrite \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    \\\n    mv /etc/nsswitch.conf.bak /etc/nsswitch.conf &amp;&amp; \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true) &amp;&amp; \\\n    echo \"export LANG=$LANG\" &gt; /etc/profile.d/locale.sh &amp;&amp; \\\n    \\\n    apk del glibc-i18n &amp;&amp; \\\n    \\\n    rm \"/root/.wget-hsts\" &amp;&amp; \\\n    apk del .build-dependencies &amp;&amp; \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n# Linter install\n# renovate: datasource=github-tags depName=clj-kondo/clj-kondo\nARG CLJ_KONDO_VERSION=2025.01.16\n\nRUN curl --retry 5 --retry-delay 5 -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/refs/tags/v${CLJ_KONDO_VERSION}/script/install-clj-kondo \\\n    &amp;&amp; chmod +x install-clj-kondo \\\n    &amp;&amp; ./install-clj-kondo\n\n</code></pre>"},{"location":"descriptors/clojure_cljstyle/","title":"cljstyle configuration in MegaLinter","text":""},{"location":"descriptors/clojure_cljstyle/#cljstyle","title":"cljstyle","text":""},{"location":"descriptors/clojure_cljstyle/#cljstyle-documentation","title":"cljstyle documentation","text":"<ul> <li>Version in MegaLinter: 0.17.642</li> <li>Visit Official Web Site</li> <li>See How to configure cljstyle rules</li> <li>See How to disable cljstyle rules in files</li> <li>See Index of problems detected by cljstyle</li> </ul>"},{"location":"descriptors/clojure_cljstyle/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cljstyle by adding <code>CLOJURE_CLJSTYLE</code> in ENABLE_LINTERS variable</li> <li>Disable cljstyle by adding <code>CLOJURE_CLJSTYLE</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>CLOJURE_CLJSTYLE</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value CLOJURE_CLJSTYLE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CLOJURE_CLJSTYLE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CLOJURE_CLJSTYLE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CLOJURE_CLJSTYLE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CLOJURE_CLJSTYLE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> CLOJURE_CLJSTYLE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".clj\", \".cljs\", \".cljc\", \".edn\"]</code> CLOJURE_CLJSTYLE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CLOJURE_CLJSTYLE_PRE_COMMANDS List of bash commands to run before the linter None CLOJURE_CLJSTYLE_POST_COMMANDS List of bash commands to run after the linter None CLOJURE_CLJSTYLE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CLOJURE_CLJSTYLE and its pre/post commands None CLOJURE_CLJSTYLE_CONFIG_FILE cljstyle configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.cljstyle</code> CLOJURE_CLJSTYLE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOJURE_CLJSTYLE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CLOJURE_CLJSTYLE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CLOJURE_CLJSTYLE_CLI_EXECUTABLE Override CLI executable <code>['cljstyle']</code>"},{"location":"descriptors/clojure_cljstyle/#ide-integration","title":"IDE Integration","text":"<p>Use cljstyle in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs cljstyle-mode Visit Web Site"},{"location":"descriptors/clojure_cljstyle/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 java Optimized for JAVA based projects 53"},{"location":"descriptors/clojure_cljstyle/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/clojure_cljstyle/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.clj</code>, <code>.cljs</code>, <code>.cljc</code>, <code>.edn</code></li> </ul>"},{"location":"descriptors/clojure_cljstyle/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cljstyle is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/clojure_cljstyle/#example-calls","title":"Example calls","text":"<pre><code>cljstyle check\n</code></pre> <pre><code>cljstyle fix\n</code></pre> <pre><code>cljstyle fix myfile.clj path/to/myfile.clj\n</code></pre>"},{"location":"descriptors/clojure_cljstyle/#help-content","title":"Help content","text":"<pre><code>Usage: cljstyle [options] &lt;command&gt; [args...]\n\nCommands:\n    find      Find files which would be processed.\n    check     Check source files and print a diff for errors.\n    fix       Edit source files to fix formatting errors.\n    pipe      Fixes formatting errors from stdin and pipes the results to stdout.\n    config    Show config used for a given path.\n    migrate   Migrate legacy configuration files.\n    version   Print program version information.\n\nOptions:\n      --ignore PATTERN       Ignore files matching the given pattern. May be set multiple times.\n      --timeout SEC     300  Maximum time to allow the process to run for.\n      --timeout-trace        Dump thread stack traces when the tool times out.\n      --stats FILE           Write formatting stats to the named file. The extension controls the format and may be either 'edn' or 'tsv'.\n      --report               Print stats report at the end of a run.\n      --report-timing        Print detailed rule timings at the end of a run.\n      --no-color             Don't output ANSI color codes.\n  -v, --verbose              Print detailed debugging output.\n  -h, --help                 Show help and usage information.\n</code></pre>"},{"location":"descriptors/clojure_cljstyle/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=github-tags depName=sgerrand/alpine-pkg-glibc\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.34-r0\nENV LANG=C.UTF-8\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" &amp;&amp; \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \\\n    echo \\\n        \"-----BEGIN PUBLIC KEY-----\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\\\n        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\\\n        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\\\n        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\\\n        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\\\n        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\\\n        1QIDAQAB\\\n        -----END PUBLIC KEY-----\" | sed 's/   */\\\\n/g' &gt; \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    wget --quiet --tries=10 --waitretry=10 \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    mv /etc/nsswitch.conf /etc/nsswitch.conf.bak &amp;&amp; \\\n    apk add --no-cache --force-overwrite \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    \\\n    mv /etc/nsswitch.conf.bak /etc/nsswitch.conf &amp;&amp; \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true) &amp;&amp; \\\n    echo \"export LANG=$LANG\" &gt; /etc/profile.d/locale.sh &amp;&amp; \\\n    \\\n    apk del glibc-i18n &amp;&amp; \\\n    \\\n    rm \"/root/.wget-hsts\" &amp;&amp; \\\n    apk del .build-dependencies &amp;&amp; \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n# Linter install\n# renovate: datasource=github-tags depName=greglook/cljstyle\nARG CLJ_STYLE_VERSION=0.17.642\nRUN curl --retry 5 --retry-delay 5 -sLO https://raw.githubusercontent.com/greglook/cljstyle/main/util/install-cljstyle \\\n    &amp;&amp; chmod +x install-cljstyle \\\n    &amp;&amp; ./install-cljstyle --static --version \"$CLJ_STYLE_VERSION\"\n\n</code></pre>"},{"location":"descriptors/cloudformation/","title":"CLOUDFORMATION linters in MegaLinter","text":""},{"location":"descriptors/cloudformation/#cloudformation","title":"CLOUDFORMATION","text":""},{"location":"descriptors/cloudformation/#linters","title":"Linters","text":"Linter Additional cfn-lintCLOUDFORMATION_CFN_LINT"},{"location":"descriptors/cloudformation/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> <li><code>.json</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>AWSTemplateFormatVersion</code></li> <li><code>(AWS|Alexa|Custom)::</code></li> </ul> </li> </ul>"},{"location":"descriptors/cloudformation/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value CLOUDFORMATION_PRE_COMMANDS List of bash commands to run before the linters None CLOUDFORMATION_POST_COMMANDS List of bash commands to run after the linters None CLOUDFORMATION_FILTER_REGEX_INCLUDE Custom regex including filter CLOUDFORMATION_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/cloudformation_cfn_lint/","title":"cfn-lint configuration in MegaLinter","text":""},{"location":"descriptors/cloudformation_cfn_lint/#cfn-lint-documentation","title":"cfn-lint documentation","text":"<ul> <li>Version in MegaLinter: 1.34.2</li> <li>Visit Official Web Site<ul> <li>If custom <code>.cfnlintrc.yml</code> config file isn't found, .cfnlintrc.yml will be used</li> </ul> </li> <li>See Index of problems detected by cfn-lint</li> </ul>"},{"location":"descriptors/cloudformation_cfn_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cfn-lint by adding <code>CLOUDFORMATION_CFN_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable cfn-lint by adding <code>CLOUDFORMATION_CFN_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value CLOUDFORMATION_CFN_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CLOUDFORMATION_CFN_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CLOUDFORMATION_CFN_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\", \".json\"]</code> CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CLOUDFORMATION_CFN_LINT_PRE_COMMANDS List of bash commands to run before the linter None CLOUDFORMATION_CFN_LINT_POST_COMMANDS List of bash commands to run after the linter None CLOUDFORMATION_CFN_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CLOUDFORMATION_CFN_LINT and its pre/post commands None CLOUDFORMATION_CFN_LINT_CONFIG_FILE cfn-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.cfnlintrc.yml</code> CLOUDFORMATION_CFN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CLOUDFORMATION_CFN_LINT_CLI_EXECUTABLE Override CLI executable <code>['cfn-lint']</code>"},{"location":"descriptors/cloudformation_cfn_lint/#ide-integration","title":"IDE Integration","text":"<p>Use cfn-lint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom atom-cfn-lint Visit Web Site IDEA cfn-lint Sublime Text SublimeLinter CloudFormation Visit Web Site Visual Studio Code vscode-cfn-lint"},{"location":"descriptors/cloudformation_cfn_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 security Optimized for security 24"},{"location":"descriptors/cloudformation_cfn_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/cloudformation_cfn_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.yml</code>, <code>.yaml</code>, <code>.json</code></li> <li>Detected file content (regex): <code>AWSTemplateFormatVersion</code>, <code>(AWS|Alexa|Custom)::</code></li> </ul>"},{"location":"descriptors/cloudformation_cfn_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cfn-lint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/cloudformation_cfn_lint/#example-calls","title":"Example calls","text":"<pre><code>cfn-lint myfile.yml\n</code></pre> <pre><code>cfn-lint --config-file .cfnlintrc.yml myfile.yml\n</code></pre>"},{"location":"descriptors/cloudformation_cfn_lint/#help-content","title":"Help content","text":"<pre><code>usage:\nBasic: cfn-lint test.yaml\nIgnore a rule: cfn-lint -i E3012 -- test.yaml\nConfigure a rule: cfn-lint -x E3012:strict=true -t test.yaml\nLint all yaml files in a folder: cfn-lint dir/**/*.yaml\n\nCloudFormation Linter\n\noptions:\n  -h, --help            show this help message and exit\n\nStandard:\n  TEMPLATE              The CloudFormation template to be linted\n  -t TEMPLATE [TEMPLATE ...], --template TEMPLATE [TEMPLATE ...]\n                        The CloudFormation template to be linted\n  -b, --ignore-bad-template\n                        Ignore failures with Bad template\n  --ignore-templates IGNORE_TEMPLATES [IGNORE_TEMPLATES ...]\n                        Ignore templates\n  -f {quiet,parseable,json,junit,pretty,sarif}, --format {quiet,parseable,json,junit,pretty,sarif}\n                        Output Format\n  -l, --list-rules      list all the rules\n  -r REGIONS [REGIONS ...], --regions REGIONS [REGIONS ...]\n                        list the regions to validate against.\n  -i IGNORE_CHECKS [IGNORE_CHECKS ...], --ignore-checks IGNORE_CHECKS [IGNORE_CHECKS ...]\n                        only check rules whose id do not match these values\n  -c INCLUDE_CHECKS [INCLUDE_CHECKS ...], --include-checks INCLUDE_CHECKS [INCLUDE_CHECKS ...]\n                        include rules whose id match these values\n  -m MANDATORY_CHECKS [MANDATORY_CHECKS ...], --mandatory-checks MANDATORY_CHECKS [MANDATORY_CHECKS ...]\n                        always check rules whose id match these values,\n                        regardless of template exclusions\n  -e, --include-experimental\n                        Include experimental rules\n  -x CONFIGURE_RULES [CONFIGURE_RULES ...], --configure-rule CONFIGURE_RULES [CONFIGURE_RULES ...]\n                        Provide configuration for a rule. Format\n                        RuleId:key=value. Example: E3012:strict=true\n  --config-file CONFIG_FILE\n                        Specify the cfnlintrc file to use\n  -z CUSTOM_RULES, --custom-rules CUSTOM_RULES\n                        Allows specification of a custom rule file.\n  -v, --version         Version of cfn-lint\n  --output-file OUTPUT_FILE\n                        Writes the output to the specified file, ideal for\n                        producing reports\n  --merge-configs       Merges lists between configuration layers\n  --non-zero-exit-code {informational,warning,error,none}\n                        Exit code will be non zero from the specified rule\n                        class and higher\n\nAdvanced / Debugging:\n  -D, --debug           Enable debug logging\n  -I, --info            Enable information logging\n  -a APPEND_RULES [APPEND_RULES ...], --append-rules APPEND_RULES [APPEND_RULES ...]\n                        specify one or more rules directories using one or\n                        more --append-rules arguments.\n  -o OVERRIDE_SPEC, --override-spec OVERRIDE_SPEC\n                        A CloudFormation Spec override file that allows\n                        customization\n  -g, --build-graph     Creates a file in the same directory as the template\n                        that models the template's resources in DOT format\n  -s REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...], --registry-schemas REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...]\n                        one or more directories of CloudFormation Registry\n                        Schemas\n  -u, --update-specs    Update the CloudFormation Specs\n  -p, --patch-specs     Patch the CloudFormation Specs in place\n</code></pre>"},{"location":"descriptors/cloudformation_cfn_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=cfn-lint\nARG PIP_CFN_LINT_VERSION=1.34.2\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>cfn-lint[sarif]==1.34.2</li> </ul> </li> </ul>"},{"location":"descriptors/coffee/","title":"COFFEE linters in MegaLinter","text":""},{"location":"descriptors/coffee/#coffee","title":"COFFEE","text":""},{"location":"descriptors/coffee/#linters","title":"Linters","text":"Linter Additional coffeelintCOFFEE_COFFEELINT"},{"location":"descriptors/coffee/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.coffee</code></li> </ul> </li> </ul>"},{"location":"descriptors/coffee/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value COFFEE_PRE_COMMANDS List of bash commands to run before the linters None COFFEE_POST_COMMANDS List of bash commands to run after the linters None COFFEE_FILTER_REGEX_INCLUDE Custom regex including filter COFFEE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/coffee_coffeelint/","title":"coffeelint configuration in MegaLinter","text":""},{"location":"descriptors/coffee_coffeelint/#coffeelint","title":"coffeelint","text":""},{"location":"descriptors/coffee_coffeelint/#coffeelint-documentation","title":"coffeelint documentation","text":"<ul> <li>Version in MegaLinter: 5.2.11</li> <li>Visit Official Web Site<ul> <li>If custom <code>.coffee-lint.json</code> config file isn't found, .coffee-lint.json will be used</li> </ul> </li> <li>See Index of problems detected by coffeelint</li> </ul>"},{"location":"descriptors/coffee_coffeelint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable coffeelint by adding <code>COFFEE_COFFEELINT</code> in ENABLE_LINTERS variable</li> <li>Disable coffeelint by adding <code>COFFEE_COFFEELINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value COFFEE_COFFEELINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> COFFEE_COFFEELINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file COFFEE_COFFEELINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> COFFEE_COFFEELINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".coffee\"]</code> COFFEE_COFFEELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file COFFEE_COFFEELINT_PRE_COMMANDS List of bash commands to run before the linter None COFFEE_COFFEELINT_POST_COMMANDS List of bash commands to run after the linter None COFFEE_COFFEELINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling COFFEE_COFFEELINT and its pre/post commands None COFFEE_COFFEELINT_CONFIG_FILE coffeelint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.coffee-lint.json</code> COFFEE_COFFEELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules COFFEE_COFFEELINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> COFFEE_COFFEELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> COFFEE_COFFEELINT_CLI_EXECUTABLE Override CLI executable <code>['coffeelint']</code>"},{"location":"descriptors/coffee_coffeelint/#ide-integration","title":"IDE Integration","text":"<p>Use coffeelint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-coffeelint Visit Web Site IDEA coffeelint"},{"location":"descriptors/coffee_coffeelint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/coffee_coffeelint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/coffee_coffeelint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.coffee</code></li> </ul>"},{"location":"descriptors/coffee_coffeelint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>coffeelint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/coffee_coffeelint/#example-calls","title":"Example calls","text":"<pre><code>coffeelint myfile.coffee\n</code></pre> <pre><code>coffeelint -f .coffee-lint.json myfile.coffee\n</code></pre>"},{"location":"descriptors/coffee_coffeelint/#help-content","title":"Help content","text":"<pre><code>Usage: coffeelint [options] source [...]\n\nOptions:\n  -f, --file          Specify a custom configuration file.\n      --rules         Specify a custom rule or directory of rules.\n      --makeconfig    Prints a default config file                     [boolean]\n      --trimconfig    Compares your config with the default and prints a minimal\n                      configuration                                    [boolean]\n      --noconfig      Ignores any config file.                         [boolean]\n  -h, --help          Show help                                        [boolean]\n  -v, --version       Show version number                              [boolean]\n  -r                  (not used, but left for backward compatibility)  [boolean]\n      --reporter      built in reporter (default, csv, jslint, checkstyle, raw),\n                      or module, or path to reporter file.\n      --csv           [deprecated] use --reporter csv                  [boolean]\n      --jslint        [deprecated] use --reporter jslint               [boolean]\n      --nocolor       [deprecated] use --color=never                   [boolean]\n      --checkstyle    [deprecated] use --reporter checkstyle           [boolean]\n      --color=&lt;when&gt;  When to colorize the output. &lt;when&gt; can be one of always,\n                      never , or auto.\n  -s, --stdin         Lint the source from stdin                       [boolean]\n  -q, --quiet         Only print errors.                               [boolean]\n      --literate      Used with --stdin to process as Literate CoffeeScript\n                                                                       [boolean]\n  -c, --cache         Cache linting results                            [boolean]\n      --ext           Specify an additional file extension, separated by comma.\n</code></pre>"},{"location":"descriptors/coffee_coffeelint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=@coffeelint/cli\nARG NPM_COFFEELINT_CLI_VERSION=5.2.11\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>@coffeelint/cli@5.2.11</li> </ul> </li> </ul>"},{"location":"descriptors/copypaste/","title":"COPYPASTE linters in MegaLinter","text":""},{"location":"descriptors/copypaste/#copypaste","title":"COPYPASTE","text":""},{"location":"descriptors/copypaste/#linters","title":"Linters","text":"Linter Additional jscpdCOPYPASTE_JSCPD"},{"location":"descriptors/copypaste/#linted-files","title":"Linted files","text":""},{"location":"descriptors/copypaste/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value COPYPASTE_PRE_COMMANDS List of bash commands to run before the linters None COPYPASTE_POST_COMMANDS List of bash commands to run after the linters None COPYPASTE_FILTER_REGEX_INCLUDE Custom regex including filter COPYPASTE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/copypaste_jscpd/","title":"jscpd configuration in MegaLinter","text":"<p>JSCPD browses all files of your repository to detect excessive copy-pastes</p> <p>If you need to ignore folders, files or file extensions, use glob expressions <code>ignore</code> property of local <code>.jscpd.json</code> file</p> <p>Example:</p> <pre><code>{\n  \"threshold\": 0,\n  \"reporters\": [\"html\", \"markdown\"],\n  \"ignore\": [\n    \"**/node_modules/**\",\n    \"**/.git/**\",\n    \"**/*.md\",\n    \"**/myFolderToSkip/**\"\n  ]\n}\n</code></pre>"},{"location":"descriptors/copypaste_jscpd/#jscpd-documentation","title":"jscpd documentation","text":"<ul> <li>Version in MegaLinter: 4.0.5</li> <li>Visit Official Web Site</li> <li>See How to configure jscpd rules<ul> <li>If custom <code>.jscpd.json</code> config file isn't found, .jscpd.json will be used</li> </ul> </li> <li>See How to disable jscpd rules in files</li> </ul>"},{"location":"descriptors/copypaste_jscpd/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable jscpd by adding <code>COPYPASTE_JSCPD</code> in ENABLE_LINTERS variable</li> <li>Disable jscpd by adding <code>COPYPASTE_JSCPD</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value COPYPASTE_JSCPD_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> COPYPASTE_JSCPD_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> COPYPASTE_JSCPD_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> COPYPASTE_JSCPD_PRE_COMMANDS List of bash commands to run before the linter None COPYPASTE_JSCPD_POST_COMMANDS List of bash commands to run after the linter None COPYPASTE_JSCPD_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling COPYPASTE_JSCPD and its pre/post commands None COPYPASTE_JSCPD_CONFIG_FILE jscpd configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.jscpd.json</code> COPYPASTE_JSCPD_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules COPYPASTE_JSCPD_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> COPYPASTE_JSCPD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> COPYPASTE_JSCPD_CLI_EXECUTABLE Override CLI executable <code>['jscpd']</code>"},{"location":"descriptors/copypaste_jscpd/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/copypaste_jscpd/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/copypaste_jscpd/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/copypaste_jscpd/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>jscpd is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using jscpd configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make jscpd analyze only updated files</li> </ul>"},{"location":"descriptors/copypaste_jscpd/#example-calls","title":"Example calls","text":"<pre><code>jscpd --output ./report/copy-paste/ .\n</code></pre> <pre><code>jscpd --output ./report/copy-paste/ -c .jscpd.json .\n</code></pre>"},{"location":"descriptors/copypaste_jscpd/#help-content","title":"Help content","text":"<pre><code>Usage: jscpd [options] &lt;path ...&gt;\n\ndetector of copy/paste in files\n\nOptions:\n  -V, --version              output the version number\n  -l, --min-lines [number]   min size of duplication in code lines (Default is\n                             5)\n  -k, --min-tokens [number]  min size of duplication in code tokens (Default is\n                             50)\n  -x, --max-lines [number]   max size of source in lines (Default is 1000)\n  -z, --max-size [string]    max size of source in bytes, examples: 1kb, 1mb,\n                             120kb (Default is 100kb)\n  -t, --threshold [number]   threshold for duplication, in case duplications &gt;=\n                             threshold jscpd will exit with error\n  -c, --config [string]      path to config file (Default is .jscpd.json in\n                             &lt;path&gt;)\n  -i, --ignore [string]      glob pattern for files what should be excluded\n                             from duplication detection\n  --ignore-pattern [string]  Ignore code blocks matching the regexp patterns\n  -r, --reporters [string]   reporters or list of reporters separated with\n                             comma to use (Default is time,console)\n  -o, --output [string]      reporters to use (Default is ./report/)\n  -m, --mode [string]        mode of quality of search, can be \"strict\", \"mild\" and \"weak\" (Default is \"function mild(token) {\n    return strict(token) &amp;&amp; token.type !== \"empty\" &amp;&amp; token.type !== \"new_line\";\n  }\")\n  -f, --format [string]      format or formats separated by comma (Example\n                             php,javascript,python)\n  -p, --pattern [string]     glob pattern to file search (Example **/*.txt)\n  -b, --blame                blame authors of duplications (get information\n                             about authors from git)\n  -s, --silent               do not write detection progress and result to a\n                             console\n  --store [string]           use for define custom store (e.g. --store leveldb\n                             used for big codebase)\n  -a, --absolute             use absolute path in reports\n  -n, --noSymlinks           dont use symlinks for detection in files\n  --ignoreCase               ignore case of symbols in code (experimental)\n  -g, --gitignore            ignore all files from .gitignore file\n  --formats-exts [string]    list of formats with file extensions\n                             (javascript:es,es6;dart:dt)\n  -d, --debug                show debug information, not run detection\n                             process(options list and selected files)\n  -v, --verbose              show full information during detection process\n  --list                     show list of total supported formats\n  --skipLocal                skip duplicates in local folders, just detect\n                             cross folders duplications\n  --exitCode [number]        exit code to use when code duplications are\n                             detected\n  -h, --help                 display help for command\n</code></pre>"},{"location":"descriptors/copypaste_jscpd/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=jscpd\nARG NPM_JSCPD_VERSION=4.0.5\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>jscpd@4.0.5</li> </ul> </li> </ul>"},{"location":"descriptors/cpp/","title":"CPP linters in MegaLinter","text":""},{"location":"descriptors/cpp/#c","title":"C++","text":""},{"location":"descriptors/cpp/#linters","title":"Linters","text":"Linter Additional cppcheckCPP_CPPCHECK cpplintCPP_CPPLINT clang-formatCPP_CLANG_FORMAT"},{"location":"descriptors/cpp/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.cpp</code></li> <li><code>.h</code></li> <li><code>.cc</code></li> <li><code>.hpp</code></li> <li><code>.cxx</code></li> <li><code>.cu</code></li> <li><code>.hxx</code></li> <li><code>.c++</code></li> <li><code>.hh</code></li> <li><code>.h++</code></li> <li><code>.cuh</code></li> </ul> </li> </ul>"},{"location":"descriptors/cpp/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value CPP_PRE_COMMANDS List of bash commands to run before the linters None CPP_POST_COMMANDS List of bash commands to run after the linters None CPP_FILTER_REGEX_INCLUDE Custom regex including filter CPP_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/cpp_clang_format/","title":"clang-format configuration in MegaLinter","text":""},{"location":"descriptors/cpp_clang_format/#clang-format","title":"clang-format","text":""},{"location":"descriptors/cpp_clang_format/#clang-format-documentation","title":"clang-format documentation","text":"<ul> <li>Version in MegaLinter: 19.1.4</li> <li>Visit Official Web Site</li> <li>See How to disable clang-format rules in files</li> <li>See Index of problems detected by clang-format</li> </ul>"},{"location":"descriptors/cpp_clang_format/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable clang-format by adding <code>CPP_CLANG_FORMAT</code> in ENABLE_LINTERS variable</li> <li>Disable clang-format by adding <code>CPP_CLANG_FORMAT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>CPP_CLANG_FORMAT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value CPP_CLANG_FORMAT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CPP_CLANG_FORMAT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CPP_CLANG_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CPP_CLANG_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CPP_CLANG_FORMAT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> CPP_CLANG_FORMAT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"]</code> CPP_CLANG_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CPP_CLANG_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None CPP_CLANG_FORMAT_POST_COMMANDS List of bash commands to run after the linter None CPP_CLANG_FORMAT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CPP_CLANG_FORMAT and its pre/post commands None CPP_CLANG_FORMAT_CONFIG_FILE clang-format configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.clang-format</code> CPP_CLANG_FORMAT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CPP_CLANG_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CPP_CLANG_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CPP_CLANG_FORMAT_CLI_EXECUTABLE Override CLI executable <code>['clang-format']</code>"},{"location":"descriptors/cpp_clang_format/#ide-integration","title":"IDE Integration","text":"<p>Use clang-format in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Clang-Format Emacs clang-format Visit Web Site"},{"location":"descriptors/cpp_clang_format/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56"},{"location":"descriptors/cpp_clang_format/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/cpp_clang_format/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.cpp</code>, <code>.h</code>, <code>.cc</code>, <code>.hpp</code>, <code>.cxx</code>, <code>.cu</code>, <code>.hxx</code>, <code>.c++</code>, <code>.hh</code>, <code>.h++</code>, <code>.cuh</code></li> </ul>"},{"location":"descriptors/cpp_clang_format/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>clang-format is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/cpp_clang_format/#example-calls","title":"Example calls","text":"<pre><code>clang-format --Werror --dry-run myfile.cpp\n</code></pre>"},{"location":"descriptors/cpp_clang_format/#help-content","title":"Help content","text":"<pre><code>OVERVIEW: A tool to format C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code.\n\nIf no arguments are specified, it formats the code from standard input\nand writes the result to the standard output.\nIf &lt;file&gt;s are given, it reformats the files. If -i is specified\ntogether with &lt;file&gt;s, the files are edited in-place. Otherwise, the\nresult is written to the standard output.\n\nUSAGE: clang-format [options] [@&lt;file&gt;] [&lt;file&gt; ...]\n\nOPTIONS:\n\nClang-format options:\n\n  --Werror                       - If set, changes formatting warnings to errors\n  --Wno-error=&lt;value&gt;            - If set don't error out on the specified warning type.\n    =unknown                     -   If set, unknown format options are only warned about.\n                                     This can be used to enable formatting, even if the\n                                     configuration contains unknown (newer) options.\n                                     Use with caution, as this might lead to dramatically\n                                     differing format depending on an option being\n                                     supported or not.\n  --assume-filename=&lt;string&gt;     - Set filename used to determine the language and to find\n                                   .clang-format file.\n                                   Only used when reading from stdin.\n                                   If this is not passed, the .clang-format file is searched\n                                   relative to the current working directory when reading stdin.\n                                   Unrecognized filenames are treated as C++.\n                                   supported:\n                                     CSharp: .cs\n                                     Java: .java\n                                     JavaScript: .mjs .js .ts\n                                     Json: .json\n                                     Objective-C: .m .mm\n                                     Proto: .proto .protodevel\n                                     TableGen: .td\n                                     TextProto: .txtpb .textpb .pb.txt .textproto .asciipb\n                                     Verilog: .sv .svh .v .vh\n  --cursor=&lt;uint&gt;                - The position of the cursor when invoking\n                                   clang-format from an editor integration\n  --dry-run                      - If set, do not actually make the formatting changes\n  --dump-config                  - Dump configuration options to stdout and exit.\n                                   Can be used with -style option.\n  --fail-on-incomplete-format    - If set, fail with exit code 1 on incomplete format.\n  --fallback-style=&lt;string&gt;      - The name of the predefined style used as a\n                                   fallback in case clang-format is invoked with\n                                   -style=file, but can not find the .clang-format\n                                   file to use. Defaults to 'LLVM'.\n                                   Use -fallback-style=none to skip formatting.\n  --ferror-limit=&lt;uint&gt;          - Set the maximum number of clang-format errors to emit\n                                   before stopping (0 = no limit).\n                                   Used only with --dry-run or -n\n  --files=&lt;filename&gt;             - A file containing a list of files to process, one per line.\n  -i                             - Inplace edit &lt;file&gt;s, if specified.\n  --length=&lt;uint&gt;                - Format a range of this length (in bytes).\n                                   Multiple ranges can be formatted by specifying\n                                   several -offset and -length pairs.\n                                   When only a single -offset is specified without\n                                   -length, clang-format will format up to the end\n                                   of the file.\n                                   Can only be used with one input file.\n  --lines=&lt;string&gt;               - &lt;start line&gt;:&lt;end line&gt; - format a range of\n                                   lines (both 1-based).\n                                   Multiple ranges can be formatted by specifying\n                                   several -lines arguments.\n                                   Can't be used with -offset and -length.\n                                   Can only be used with one input file.\n  -n                             - Alias for --dry-run\n  --offset=&lt;uint&gt;                - Format a range starting at this byte offset.\n                                   Multiple ranges can be formatted by specifying\n                                   several -offset and -length pairs.\n                                   Can only be used with one input file.\n  --output-replacements-xml      - Output replacements as XML.\n  --qualifier-alignment=&lt;string&gt; - If set, overrides the qualifier alignment style\n                                   determined by the QualifierAlignment style flag\n  --sort-includes                - If set, overrides the include sorting behavior\n                                   determined by the SortIncludes style flag\n  --style=&lt;string&gt;               - Set coding style. &lt;string&gt; can be:\n                                   1. A preset: LLVM, GNU, Google, Chromium, Microsoft,\n                                      Mozilla, WebKit.\n                                   2. 'file' to load style configuration from a\n                                      .clang-format file in one of the parent directories\n                                      of the source file (for stdin, see --assume-filename).\n                                      If no .clang-format file is found, falls back to\n                                      --fallback-style.\n                                      --style=file is the default.\n                                   3. 'file:&lt;format_file_path&gt;' to explicitly specify\n                                      the configuration file.\n                                   4. \"{key: value, ...}\" to set specific parameters, e.g.:\n                                      --style=\"{BasedOnStyle: llvm, IndentWidth: 8}\"\n  --verbose                      - If set, shows the list of processed files\n\nGeneric Options:\n\n  --help                         - Display available options (--help-hidden for more)\n  --help-list                    - Display list of available options (--help-list-hidden for more)\n  --version                      - Display the version of this program\n</code></pre>"},{"location":"descriptors/cpp_clang_format/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>APK packages (Linux):<ul> <li>clang19-extra-tools</li> </ul> </li> </ul>"},{"location":"descriptors/cpp_cppcheck/","title":"cppcheck configuration in MegaLinter","text":""},{"location":"descriptors/cpp_cppcheck/#cppcheck","title":"cppcheck","text":""},{"location":"descriptors/cpp_cppcheck/#cppcheck-documentation","title":"cppcheck documentation","text":"<ul> <li>Version in MegaLinter: 2.14.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by cppcheck</li> </ul>"},{"location":"descriptors/cpp_cppcheck/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cppcheck by adding <code>CPP_CPPCHECK</code> in ENABLE_LINTERS variable</li> <li>Disable cppcheck by adding <code>CPP_CPPCHECK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value CPP_CPPCHECK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CPP_CPPCHECK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CPP_CPPCHECK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CPP_CPPCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CPP_CPPCHECK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> CPP_CPPCHECK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"]</code> CPP_CPPCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CPP_CPPCHECK_PRE_COMMANDS List of bash commands to run before the linter None CPP_CPPCHECK_POST_COMMANDS List of bash commands to run after the linter None CPP_CPPCHECK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CPP_CPPCHECK and its pre/post commands None CPP_CPPCHECK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CPP_CPPCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CPP_CPPCHECK_CLI_EXECUTABLE Override CLI executable <code>['cppcheck']</code>"},{"location":"descriptors/cpp_cppcheck/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 python Optimized for PYTHON based projects 65"},{"location":"descriptors/cpp_cppcheck/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/cpp_cppcheck/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.cpp</code>, <code>.h</code>, <code>.cc</code>, <code>.hpp</code>, <code>.cxx</code>, <code>.cu</code>, <code>.hxx</code>, <code>.c++</code>, <code>.hh</code>, <code>.h++</code>, <code>.cuh</code></li> </ul>"},{"location":"descriptors/cpp_cppcheck/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cppcheck is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/cpp_cppcheck/#example-calls","title":"Example calls","text":"<pre><code>cppcheck myfile.cpp\n</code></pre>"},{"location":"descriptors/cpp_cppcheck/#help-content","title":"Help content","text":"<pre><code>Cppcheck - A tool for static C/C++ code analysis\n\nSyntax:\n    cppcheck [OPTIONS] [files or paths]\n\nIf a directory is given instead of a filename, *.cpp, *.cxx, *.cc, *.c++, *.c, *.ipp,\n*.ixx, *.tpp, and *.txx files are checked recursively from the given directory.\n\nOptions:\n    --addon=&lt;addon&gt;\n                         Execute addon. i.e. --addon=misra. If options must be\n                         provided a json configuration is needed.\n    --addon-python=&lt;python interpreter&gt;\n                         You can specify the python interpreter either in the\n                         addon json files or through this command line option.\n                         If not present, Cppcheck will try \"python3\" first and\n                         then \"python\".\n    --cppcheck-build-dir=&lt;dir&gt;\n                         Cppcheck work folder. Advantages:\n                          * whole program analysis\n                          * faster analysis; Cppcheck will reuse the results if\n                            the hash for a file is unchanged.\n                          * some useful debug information, i.e. commands used to\n                            execute clang/clang-tidy/addons.\n    --check-config       Check cppcheck configuration. The normal code\n                         analysis is disabled by this flag.\n    --check-level=&lt;level&gt;\n                         Configure how much checking you want:\n                          * normal: Cppcheck uses some compromises in the checking so\n                            the checking will finish in reasonable time.\n                          * exhaustive: deeper analysis that you choose when you can\n                            wait.\n                         The default choice is 'normal'.\n    --check-library      Show information messages when library files have\n                         incomplete info.\n    --checkers-report=&lt;file&gt;\n                         Write a report of all the active checkers to the given file.\n    --clang=&lt;path&gt;       Experimental: Use Clang parser instead of the builtin Cppcheck\n                         parser. Takes the executable as optional parameter and\n                         defaults to `clang`. Cppcheck will run the given Clang\n                         executable, import the Clang AST and convert it into\n                         Cppcheck data. After that the normal Cppcheck analysis is\n                         used. You must have the executable in PATH if no path is\n                         given.\n    --config-exclude=&lt;dir&gt;\n                         Path (prefix) to be excluded from configuration\n                         checking. Preprocessor configurations defined in\n                         headers (but not sources) matching the prefix will not\n                         be considered for evaluation.\n    --config-excludes-file=&lt;file&gt;\n                         A file that contains a list of config-excludes\n    --disable=&lt;id&gt;       Disable individual checks.\n                         Please refer to the documentation of --enable=&lt;id&gt;\n                         for further details.\n    --dump               Dump xml data for each translation unit. The dump\n                         files have the extension .dump and contain ast,\n                         tokenlist, symboldatabase, valueflow.\n    -D&lt;ID&gt;               Define preprocessor symbol. Unless --max-configs or\n                         --force is used, Cppcheck will only check the given\n                         configuration when -D is used.\n                         Example: '-DDEBUG=1 -D__cplusplus'.\n    -E                   Print preprocessor output on stdout and don't do any\n                         further processing.\n    --enable=&lt;id&gt;        Enable additional checks. The available ids are:\n                          * all\n                                  Enable all checks. It is recommended to only\n                                  use --enable=all when the whole program is\n                                  scanned, because this enables unusedFunction.\n                          * warning\n                                  Enable warning messages\n                          * style\n                                  Enable all coding style checks. All messages\n                                  with the severities 'style', 'warning',\n                                  'performance' and 'portability' are enabled.\n                          * performance\n                                  Enable performance messages\n                          * portability\n                                  Enable portability messages\n                          * information\n                                  Enable information messages\n                          * unusedFunction\n                                  Check for unused functions. It is recommended\n                                  to only enable this when the whole program is\n                                  scanned.\n                          * missingInclude\n                                  Warn if there are missing includes.\n                         Several ids can be given if you separate them with\n                         commas. See also --std\n    --error-exitcode=&lt;n&gt; If errors are found, integer [n] is returned instead of\n                         the default '0'. '1' is returned\n                         if arguments are not valid or if no input files are\n                         provided. Note that your operating system can modify\n                         this value, e.g. '256' can become '0'.\n    --errorlist          Print a list of all the error messages in XML format.\n    --exitcode-suppressions=&lt;file&gt;\n                         Used when certain messages should be displayed but\n                         should not cause a non-zero exitcode.\n    --file-filter=&lt;str&gt;  Analyze only those files matching the given filter str\n                         Can be used multiple times\n                         Example: --file-filter=*bar.cpp analyzes only files\n                                  that end with bar.cpp.\n    --file-list=&lt;file&gt;   Specify the files to check in a text file. Add one\n                         filename per line. When file is '-,' the file list will\n                         be read from standard input.\n    -f, --force          Force checking of all configurations in files. If used\n                         together with '--max-configs=', the last option is the\n                         one that is effective.\n    --fsigned-char       Treat char type as signed.\n    --funsigned-char     Treat char type as unsigned.\n    -h, --help           Print this help.\n    -I &lt;dir&gt;             Give path to search for include files. Give several -I\n                         parameters to give several paths. First given path is\n                         searched for contained header files first. If paths are\n                         relative to source files, this is not needed.\n    --includes-file=&lt;file&gt;\n                         Specify directory paths to search for included header\n                         files in a text file. Add one include path per line.\n                         First given path is searched for contained header\n                         files first. If paths are relative to source files,\n                         this is not needed.\n    --include=&lt;file&gt;\n                         Force inclusion of a file before the checked file.\n    -i &lt;dir or file&gt;     Give a source file or source file directory to exclude\n                         from the check. This applies only to source files so\n                         header files included by source files are not matched.\n                         Directory name is matched to all parts of the path.\n    --inconclusive       Allow that Cppcheck reports even though the analysis is\n                         inconclusive.\n                         There are false positives with this option. Each result\n                         must be carefully investigated before you know if it is\n                         good or bad.\n    --inline-suppr       Enable inline suppressions. Use them by placing one or\n                         more comments, like: '// cppcheck-suppress warningId'\n                         on the lines before the warning to suppress.\n    -j &lt;jobs&gt;            Start &lt;jobs&gt; threads to do the checking simultaneously.\n    -l &lt;load&gt;            Specifies that no new threads should be started if\n                         there are other threads running and the load average is\n                         at least &lt;load&gt;.\n    --language=&lt;language&gt;, -x &lt;language&gt;\n                         Forces cppcheck to check all files as the given\n                         language. Valid values are: c, c++\n    --library=&lt;cfg&gt;      Load file &lt;cfg&gt; that contains information about types\n                         and functions. With such information Cppcheck\n                         understands your code better and therefore you\n                         get better results. The std.cfg file that is\n                         distributed with Cppcheck is loaded automatically.\n                         For more information about library files, read the\n                         manual.\n    --max-configs=&lt;limit&gt;\n                         Maximum number of configurations to check in a file\n                         before skipping it. Default is '12'. If used together\n                         with '--force', the last option is the one that is\n                         effective.\n    --max-ctu-depth=N    Max depth in whole program analysis. The default value\n                         is 2. A larger value will mean more errors can be found\n                         but also means the analysis will be slower.\n    --output-file=&lt;file&gt; Write results to file, rather than standard error.\n    --platform=&lt;type&gt;, --platform=&lt;file&gt;\n                         Specifies platform specific types and sizes. The\n                         available builtin platforms are:\n                          * unix32\n                                 32 bit unix variant\n                          * unix64\n                                 64 bit unix variant\n                          * win32A\n                                 32 bit Windows ASCII character encoding\n                          * win32W\n                                 32 bit Windows UNICODE character encoding\n                          * win64\n                                 64 bit Windows\n                          * avr8\n                                 8 bit AVR microcontrollers\n                          * elbrus-e1cp\n                                 Elbrus e1c+ architecture\n                          * pic8\n                                 8 bit PIC microcontrollers\n                                 Baseline and mid-range architectures\n                          * pic8-enhanced\n                                 8 bit PIC microcontrollers\n                                 Enhanced mid-range and high end (PIC18) architectures\n                          * pic16\n                                 16 bit PIC microcontrollers\n                          * mips32\n                                 32 bit MIPS microcontrollers\n                          * native\n                                 Type sizes of host system are assumed, but no\n                                 further assumptions.\n                          * unspecified\n                                 Unknown type sizes\n    --plist-output=&lt;path&gt;\n                         Generate Clang-plist output files in folder.\n    --project=&lt;file&gt;     Run Cppcheck on project. The &lt;file&gt; can be a Visual\n                         Studio Solution (*.sln), Visual Studio Project\n                         (*.vcxproj), compile database (compile_commands.json),\n                         or Borland C++ Builder 6 (*.bpr). The files to analyse,\n                         include paths, defines, platform and undefines in\n                         the specified file will be used.\n    --project-configuration=&lt;config&gt;\n                         If used together with a Visual Studio Solution (*.sln)\n                         or Visual Studio Project (*.vcxproj) you can limit\n                         the configuration cppcheck should check.\n                         For example: '--project-configuration=Release|Win32'\n    -q, --quiet          Do not show progress reports.\n                         Note that this option is not mutually exclusive with --verbose.\n    -rp=&lt;paths&gt;, --relative-paths=&lt;paths&gt;\n                         Use relative paths in output. When given, &lt;paths&gt; are\n                         used as base. You can separate multiple paths by ';'.\n                         Otherwise path where source files are searched is used.\n                         We use string comparison to create relative paths, so\n                         using e.g. ~ for home folder does not work. It is\n                         currently only possible to apply the base paths to\n                         files that are on a lower level in the directory tree.\n    --report-progress    Report progress messages while checking a file (single job only).\n    --rule=&lt;rule&gt;        Match regular expression.\n    --rule-file=&lt;file&gt;   Use given rule file. For more information, see:\n                         http://sourceforge.net/projects/cppcheck/files/Articles/\n    --showtime=&lt;mode&gt;    Show timing information.\n                         The available modes are:\n                          * none\n                                 Show nothing (default)\n                          * file\n                                 Show for each processed file\n                          * file-total\n                                 Show total time only for each processed file\n                          * summary\n                                 Show a summary at the end\n                          * top5_file\n                                 Show the top 5 for each processed file\n                          * top5_summary\n                                 Show the top 5 summary at the end\n                          * top5\n                                 Alias for top5_file (deprecated)\n    --std=&lt;id&gt;           Set standard.\n                         The available options are:\n                          * c89\n                                 C code is C89 compatible\n                          * c99\n                                 C code is C99 compatible\n                          * c11\n                                 C code is C11 compatible (default)\n                          * c++03\n                                 C++ code is C++03 compatible\n                          * c++11\n                                 C++ code is C++11 compatible\n                          * c++14\n                                 C++ code is C++14 compatible\n                          * c++17\n                                 C++ code is C++17 compatible\n                          * c++20\n                                 C++ code is C++20 compatible (default)\n    --suppress=&lt;spec&gt;    Suppress warnings that match &lt;spec&gt;. The format of\n                         &lt;spec&gt; is:\n                         [error id]:[filename]:[line]\n                         The [filename] and [line] are optional. If [error id]\n                         is a wildcard '*', all error ids match.\n    --suppressions-list=&lt;file&gt;\n                         Suppress warnings listed in the file. Each suppression\n                         is in the same format as &lt;spec&gt; above.\n    --suppress-xml=&lt;file&gt;\n                         Suppress warnings listed in a xml file. XML file should\n                         follow the manual.pdf format specified in section.\n                         `6.4 XML suppressions` .\n    --template='&lt;text&gt;'  Format the error messages. Available fields:\n                           {file}              file name\n                           {line}              line number\n                           {column}            column number\n                           {callstack}         show a callstack. Example:\n                                                 [file.c:1] -&gt; [file.c:100]\n                           {inconclusive:text} if warning is inconclusive, text\n                                               is written\n                           {severity}          severity\n                           {message}           warning message\n                           {id}                warning id\n                           {cwe}               CWE id (Common Weakness Enumeration)\n                           {code}              show the real code\n                                              insert tab\n                           \\n                 insert newline\n                                            insert carriage return\n                         Example formats:\n                         '{file}:{line},{severity},{id},{message}' or\n                         '{file}({line}):({severity}) {message}' or\n                         '{callstack} {message}'\n                         Pre-defined templates: gcc (default), cppcheck1 (old default), vs, edit.\n    --template-location='&lt;text&gt;'\n                         Format error message location. If this is not provided\n                         then no extra location info is shown.\n                         Available fields:\n                           {file}      file name\n                           {line}      line number\n                           {column}    column number\n                           {info}      location info\n                           {code}      show the real code\n                                      insert tab\n                           \\n         insert newline\n                                    insert carriage return\n                         Example format (gcc-like):\n                         '{file}:{line}:{column}: note: {info}\\n{code}'\n    -U&lt;ID&gt;               Undefine preprocessor symbol. Use -U to explicitly\n                         hide certain #ifdef &lt;ID&gt; code paths from checking.\n                         Example: '-UDEBUG'\n    -v, --verbose        Output more detailed error information.\n                         Note that this option is not mutually exclusive with --quiet.\n    --version            Print out version number.\n    --xml                Write results in xml format to error stream (stderr).\n\nExample usage:\n  # Recursively check the current folder. Print the progress on the screen and\n  # write errors to a file:\n  cppcheck . 2&gt; err.txt\n\n  # Recursively check ../myproject/ and don't print progress:\n  cppcheck --quiet ../myproject/\n\n  # Check test.cpp, enable all checks:\n  cppcheck --enable=all --inconclusive --library=posix test.cpp\n\n  # Check f.cpp and search include files from inc1/ and inc2/:\n  cppcheck -I inc1/ -I inc2/ f.cpp\n\nFor more information:\n    https://files.cppchecksolutions.com/manual.pdf\n\nMany thanks to the 3rd party libraries we use:\n * tinyxml2 -- loading project/library/ctu files.\n * picojson -- loading compile database.\n * pcre -- rules.\n * qt -- used in GUI\n\n</code></pre>"},{"location":"descriptors/cpp_cppcheck/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>APK packages (Linux):<ul> <li>cppcheck</li> </ul> </li> </ul>"},{"location":"descriptors/cpp_cpplint/","title":"cpplint configuration in MegaLinter","text":""},{"location":"descriptors/cpp_cpplint/#cpplint","title":"cpplint","text":""},{"location":"descriptors/cpp_cpplint/#cpplint-documentation","title":"cpplint documentation","text":"<ul> <li>Version in MegaLinter: 2.0.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by cpplint</li> </ul>"},{"location":"descriptors/cpp_cpplint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cpplint by adding <code>CPP_CPPLINT</code> in ENABLE_LINTERS variable</li> <li>Disable cpplint by adding <code>CPP_CPPLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value CPP_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CPP_CPPLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CPP_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CPP_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CPP_CPPLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> CPP_CPPLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"]</code> CPP_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CPP_CPPLINT_PRE_COMMANDS List of bash commands to run before the linter None CPP_CPPLINT_POST_COMMANDS List of bash commands to run after the linter None CPP_CPPLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CPP_CPPLINT and its pre/post commands None CPP_CPPLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CPP_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CPP_CPPLINT_CLI_EXECUTABLE Override CLI executable <code>['cpplint']</code>"},{"location":"descriptors/cpp_cpplint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 python Optimized for PYTHON based projects 65"},{"location":"descriptors/cpp_cpplint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/cpp_cpplint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.cpp</code>, <code>.h</code>, <code>.cc</code>, <code>.hpp</code>, <code>.cxx</code>, <code>.cu</code>, <code>.hxx</code>, <code>.c++</code>, <code>.hh</code>, <code>.h++</code>, <code>.cuh</code></li> </ul>"},{"location":"descriptors/cpp_cpplint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cpplint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/cpp_cpplint/#example-calls","title":"Example calls","text":"<pre><code>cpplint myfile.cpp\n</code></pre>"},{"location":"descriptors/cpp_cpplint/#help-content","title":"Help content","text":"<pre><code>\nSyntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed]\n                   [--filter=-x,+y,...]\n                   [--counting=total|toplevel|detailed] [--root=subdir]\n                   [--repository=path]\n                   [--linelength=digits] [--headers=x,y,...]\n                   [--recursive]\n                   [--exclude=path]\n                   [--extensions=hpp,cpp,...]\n                   [--includeorder=default|standardcfirst]\n                   [--config=filename]\n                   [--quiet]\n                   [--version]\n        &lt;file&gt; [file] ...\n\n  Style checker for C/C++ source files.\n  This is a fork of the Google style checker with minor extensions.\n\n  The style guidelines this tries to follow are those in\n    https://google.github.io/styleguide/cppguide.html\n\n  Every problem is given a confidence score from 1-5, with 5 meaning we are\n  certain of the problem, and 1 meaning it could be a legitimate construct.\n  This will miss some errors, and is not a substitute for a code review.\n\n  To suppress false-positive errors of certain categories, add a\n  'NOLINT(category[, category...])' comment to the line.  NOLINT or NOLINT(*)\n  suppresses errors of all categories on that line. To suppress categories\n  on the next line use NOLINTNEXTLINE instead of NOLINT. To suppress errors in\n  a block of code 'NOLINTBEGIN(category[, category...])' comment to a line at\n  the start of the block and to end the block add a comment with 'NOLINTEND'.\n  NOLINT blocks are inclusive so any statements on the same line as a BEGIN\n  or END will have the error suppression applied.\n\n  The files passed in will be linted; at least one file must be provided.\n  Default linted extensions are ['c', 'c++', 'cc', 'cpp', 'cu', 'cuh', 'cxx', 'h', 'h++', 'hh', 'hpp', 'hxx'].\n  Other file types will be ignored.\n  Change the extensions with the --extensions flag.\n\n  Flags:\n\n    output=emacs|eclipse|vs7|junit|sed|gsed\n      By default, the output is formatted to ease emacs parsing.  Visual Studio\n      compatible output (vs7) may also be used.  Further support exists for\n      eclipse (eclipse), and JUnit (junit). XML parsers such as those used\n      in Jenkins and Bamboo may also be used.\n      The sed format outputs sed commands that should fix some of the errors.\n      Note that this requires gnu sed. If that is installed as gsed on your\n      system (common e.g. on macOS with homebrew) you can use the gsed output\n      format. Sed commands are written to stdout, not stderr, so you should be\n      able to pipe output straight to a shell to run the fixes.\n\n    verbose=#\n      Specify a number 0-5 to restrict errors to certain verbosity levels.\n      Errors with lower verbosity levels have lower confidence and are more\n      likely to be false positives.\n\n    quiet\n      Don't print anything if no errors are found.\n\n    filter=-x,+y,...\n      Specify a comma-separated list of category-filters to apply: only\n      error messages whose category names pass the filters will be printed.\n      (Category names are printed with the message and look like\n      \"[whitespace/indent]\".)  Filters are evaluated left to right.\n      \"-FOO\" means \"do not print categories that start with FOO\".\n      \"+FOO\" means \"do print categories that start with FOO\".\n\n      Examples: --filter=-whitespace,+whitespace/braces\n                --filter=-whitespace,-runtime/printf,+runtime/printf_format\n                --filter=-,+build/include_what_you_use\n\n      To see a list of all the categories used in cpplint, pass no arg:\n         --filter=\n\n      Filters can directly be limited to files and also line numbers. The\n      syntax is category:file:line , where line is optional. The filter limitation\n      works for both + and - and can be combined with ordinary filters:\n\n      Examples: --filter=-whitespace:foo.h,+whitespace/braces:foo.h\n                --filter=-whitespace,-runtime/printf:foo.h:14,+runtime/printf_format:foo.h\n                --filter=-,+build/include_what_you_use:foo.h:321\n\n    counting=total|toplevel|detailed\n      The total number of errors found is always printed. If\n      'toplevel' is provided, then the count of errors in each of\n      the top-level categories like 'build' and 'whitespace' will\n      also be printed. If 'detailed' is provided, then a count\n      is provided for each category like 'legal/copyright'.\n\n    repository=path\n      The top level directory of the repository, used to derive the header\n      guard CPP variable. By default, this is determined by searching for a\n      path that contains .git, .hg, or .svn. When this flag is specified, the\n      given path is used instead. This option allows the header guard CPP\n      variable to remain consistent even if members of a team have different\n      repository root directories (such as when checking out a subdirectory\n      with SVN). In addition, users of non-mainstream version control systems\n      can use this flag to ensure readable header guard CPP variables.\n\n      Examples:\n        Assuming that Alice checks out ProjectName and Bob checks out\n        ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then\n        with no --repository flag, the header guard CPP variable will be:\n\n        Alice =&gt; TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_\n        Bob   =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n\n        If Alice uses the --repository=trunk flag and Bob omits the flag or\n        uses --repository=. then the header guard CPP variable will be:\n\n        Alice =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n        Bob   =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n\n    root=subdir\n      The root directory used for deriving header guard CPP variable.\n      This directory is relative to the top level directory of the repository\n      which by default is determined by searching for a directory that contains\n      .git, .hg, or .svn but can also be controlled with the --repository flag.\n      If the specified directory does not exist, this flag is ignored.\n\n      Examples:\n        Assuming that src is the top level directory of the repository (and\n        cwd=top/src), the header guard CPP variables for\n        src/chrome/browser/ui/browser.h are:\n\n        No flag =&gt; CHROME_BROWSER_UI_BROWSER_H_\n        --root=chrome =&gt; BROWSER_UI_BROWSER_H_\n        --root=chrome/browser =&gt; UI_BROWSER_H_\n        --root=.. =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_\n\n    linelength=digits\n      This is the allowed line length for the project. The default value is\n      80 characters.\n\n      Examples:\n        --linelength=120\n\n    recursive\n      Search for files to lint recursively. Each directory given in the list\n      of files to be linted is replaced by all files that descend from that\n      directory. Files with extensions not in the valid extensions list are\n      excluded.\n\n    exclude=path\n      Exclude the given path from the list of files to be linted. Relative\n      paths are evaluated relative to the current directory and shell globbing\n      is performed. This flag can be provided multiple times to exclude\n      multiple files.\n\n      Examples:\n        --exclude=one.cc\n        --exclude=src/*.cc\n        --exclude=src/*.cc --exclude=test/*.cc\n\n    extensions=extension,extension,...\n      The allowed file extensions that cpplint will check\n\n      Examples:\n        --extensions=c,c++,cc,cpp,cu,cuh,cxx,h,h++,hh,hpp,hxx\n\n    includeorder=default|standardcfirst\n      For the build/include_order rule, the default is to blindly assume angle\n      bracket includes with file extension are c-system-headers (default),\n      even knowing this will have false classifications.\n      The default is established at google.\n      standardcfirst means to instead use an allow-list of known c headers and\n      treat all others as separate group of \"other system headers\". The C headers\n      included are those of the C-standard lib and closely related ones.\n\n    config=filename\n      Search for config files with the specified name instead of CPPLINT.cfg\n\n    headers=x,y,...\n      The header extensions that cpplint will treat as .h in checks. Values are\n      automatically added to --extensions list.\n     (by default, only files with extensions ['cuh', 'h', 'h++', 'hh', 'hpp', 'hxx'] will be assumed to be headers)\n\n      Examples:\n        --headers=cuh,h,h++,hh,hpp,hxx\n        --headers=hpp,hxx\n        --headers=hpp\n\n    cpplint.py supports per-directory configurations specified in CPPLINT.cfg\n    files. CPPLINT.cfg file can contain a number of key=value pairs.\n    Currently the following options are supported:\n\n      set noparent\n      filter=+filter1,-filter2,...\n      exclude_files=regex\n      linelength=80\n      root=subdir\n      headers=x,y,...\n\n    \"set noparent\" option prevents cpplint from traversing directory tree\n    upwards looking for more .cfg files in parent directories. This option\n    is usually placed in the top-level project directory.\n\n    The \"filter\" option is similar in function to --filter flag. It specifies\n    message filters in addition to the |_DEFAULT_FILTERS| and those specified\n    through --filter command-line flag.\n\n    \"exclude_files\" allows to specify a regular expression to be matched against\n    a file name. If the expression matches, the file is skipped and not run\n    through the linter.\n\n    \"linelength\" allows to specify the allowed line length for the project.\n\n    The \"root\" option is similar in function to the --root flag (see example\n    above). Paths are relative to the directory of the CPPLINT.cfg.\n\n    The \"headers\" option is similar in function to the --headers flag\n    (see example above).\n\n    CPPLINT.cfg has an effect on files in the same directory and all\n    sub-directories, unless overridden by a nested configuration file.\n\n      Example file:\n        filter=-build/include_order,+build/include_alpha\n        exclude_files=.*\\.cc\n\n    The above example disables build/include_order warning and enables\n    build/include_alpha as well as excludes all .cc from being\n    processed by linter, in the current directory (where the .cfg\n    file is located) and all sub-directories.\n</code></pre>"},{"location":"descriptors/cpp_cpplint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=cpplint\nARG PIP_CPPLINT_VERSION=2.0.2\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>cpplint==2.0.2</li> </ul> </li> </ul>"},{"location":"descriptors/credentials/","title":"Credentials","text":""},{"location":"descriptors/credentials/#credentials","title":"CREDENTIALS","text":""},{"location":"descriptors/credentials/#linters","title":"Linters","text":"Linter Configuration key Status secretlint CREDENTIALS"},{"location":"descriptors/credentials/#linted-files","title":"Linted files","text":""},{"location":"descriptors/credentials/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value CREDENTIALS_FILTER_REGEX_INCLUDE Custom regex including filter CREDENTIALS_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/credentials_secretlint/","title":"Credentials secretlint","text":""},{"location":"descriptors/credentials_secretlint/#secretlint-documentation","title":"secretlint documentation","text":"<ul> <li>Version in MegaLinter: 4.1.0</li> <li>Visit Official Web Site</li> <li>See How to configure secretlint rules<ul> <li>If custom <code>.secretlintrc.json</code> config file is not found, .secretlintrc.json will be used</li> </ul> </li> <li>See Index of problems detected by secretlint</li> </ul>"},{"location":"descriptors/credentials_secretlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable secretlint by adding <code>CREDENTIALS_SECRETLINT</code> in ENABLE_LINTERS variable</li> <li>Disable secretlint by adding <code>CREDENTIALS_SECRETLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value CREDENTIALS_SECRETLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CREDENTIALS_SECRETLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> Exclude every file CREDENTIALS_SECRETLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CREDENTIALS_SECRETLINT_PRE_COMMANDS List of bash commands to run before the linter None CREDENTIALS_SECRETLINT_POST_COMMANDS List of bash commands to run after the linter None CREDENTIALS_SECRETLINT_CONFIG_FILE secretlint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.secretlintrc.json</code> CREDENTIALS_SECRETLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CREDENTIALS_SECRETLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CREDENTIALS_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code>"},{"location":"descriptors/credentials_secretlint/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 dart Optimized for DART based projects 42 documentation MegaLinter for documentation projects 41 dotnet Optimized for C, C++, C# or VB based projects 49 go Optimized for GO based projects 43 java Optimized for JAVA based projects 43 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 50 php Optimized for PHP based projects 46 python Optimized for PYTHON based projects 49 ruby Optimized for RUBY based projects 42 rust Optimized for RUST based projects 42 salesforce Optimized for Salesforce based projects 44 scala Optimized for SCALA based projects 42 swift Optimized for SWIFT based projects 42 terraform Optimized for TERRAFORM based projects 47"},{"location":"descriptors/credentials_secretlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/credentials_secretlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/credentials_secretlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>secretlint is called once on the whole project directory</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using secretlint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> does not make secretlint analyze only updated files</li> </ul>"},{"location":"descriptors/credentials_secretlint/#example-calls","title":"Example calls","text":"<pre><code>secretlint \"*/**\"\n</code></pre> <pre><code>secretlint --secretlintrc .secretlintrc.json \"**/*\"\n</code></pre>"},{"location":"descriptors/credentials_secretlint/#help-content","title":"Help content","text":"<pre><code>\n  Secretlint CLI that scan secret/credential data.\n\n  Usage\n    $ secretlint [file|glob*]\n\n  Note\n    supported glob syntax is based on microglob\n    https://github.com/micromatch/micromatch#matching-features\n\n  Options\n    --init             setup config file. Create .secretlintrc.json file from your package.json\n    --format           [String] formatter name. Default: \"stylish\". Available Formatter: checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, tap, unix, table.d, table\n    --output           [path:String] output file path that is written of reported result.\n    --no-color         disable ANSI-color of output.\n    --no-terminalLink  disable terminalLink of output.\n    --maskSecrets      enable masking of secret values. replace actual secrets with \"***\".\n    --secretlintrc     [path:String] path to .secretlintrc config file. Default: .secretlintrc.*\n    --secretlintignore [path:String] path to .secretlintignore file. Default: .secretlintignore\n\n  Options for Developer\n    --profile          Enable performance profile.\n    --secretlintrcJSON [String] a JSON string of .secretlintrc. use JSON string instead of rc file.\n\n  Experimental Options\n    --locale            [String] locale tag for translating message. Default: en\n\n  Examples\n    $ secretlint ./README.md\n    # glob pattern should be wrapped with double quote\n    $ secretlint \"**/*\"\n    $ secretlint \"source/**/*.ini\"\n\n</code></pre>"},{"location":"descriptors/credentials_secretlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>NPM packages (node.js):<ul> <li>secretlint@4.1.0</li> <li>@secretlint/secretlint-rule-preset-recommend@4.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/csharp/","title":"CSHARP linters in MegaLinter","text":""},{"location":"descriptors/csharp/#c","title":"C","text":""},{"location":"descriptors/csharp/#linters","title":"Linters","text":"Linter Additional dotnet-formatCSHARP_DOTNET_FORMAT csharpierCSHARP_CSHARPIER roslynatorCSHARP_ROSLYNATOR"},{"location":"descriptors/csharp/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.cs</code></li> </ul> </li> </ul>"},{"location":"descriptors/csharp/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value CSHARP_PRE_COMMANDS List of bash commands to run before the linters None CSHARP_POST_COMMANDS List of bash commands to run after the linters None CSHARP_FILTER_REGEX_INCLUDE Custom regex including filter CSHARP_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/csharp/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/csharp/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN apk add --no-cache dotnet9-sdk\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\n</code></pre>"},{"location":"descriptors/csharp_csharpier/","title":"csharpier configuration in MegaLinter","text":""},{"location":"descriptors/csharp_csharpier/#csharpier","title":"csharpier","text":""},{"location":"descriptors/csharp_csharpier/#csharpier-documentation","title":"csharpier documentation","text":"<ul> <li>Version in MegaLinter: 1.0.1</li> <li>Visit Official Web Site</li> <li>See How to configure csharpier rules</li> <li>See How to ignore files and directories with csharpier<ul> <li>You can define a <code>.csharpierignore</code> file to ignore files and folders</li> </ul> </li> </ul>"},{"location":"descriptors/csharp_csharpier/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable csharpier by adding <code>CSHARP_CSHARPIER</code> in ENABLE_LINTERS variable</li> <li>Disable csharpier by adding <code>CSHARP_CSHARPIER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>CSHARP_CSHARPIER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value CSHARP_CSHARPIER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CSHARP_CSHARPIER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CSHARP_CSHARPIER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CSHARP_CSHARPIER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CSHARP_CSHARPIER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> CSHARP_CSHARPIER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".config\", \".cs\", \".csproj\", \".props\", \".targets\"]</code> CSHARP_CSHARPIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CSHARP_CSHARPIER_PRE_COMMANDS List of bash commands to run before the linter None CSHARP_CSHARPIER_POST_COMMANDS List of bash commands to run after the linter None CSHARP_CSHARPIER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CSHARP_CSHARPIER and its pre/post commands None CSHARP_CSHARPIER_CONFIG_FILE csharpier configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.csharpierrc</code> CSHARP_CSHARPIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CSHARP_CSHARPIER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> CSHARP_CSHARPIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CSHARP_CSHARPIER_CLI_EXECUTABLE Override CLI executable <code>['csharpier']</code>"},{"location":"descriptors/csharp_csharpier/#ide-integration","title":"IDE Integration","text":"<p>Use csharpier in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install rider csharpier Visit Web Site visual_studio CSharpier Visit Web Site Visual Studio Code csharpier-vscode"},{"location":"descriptors/csharp_csharpier/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18"},{"location":"descriptors/csharp_csharpier/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/csharp_csharpier/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.config</code>, <code>.cs</code>, <code>.csproj</code>, <code>.props</code>, <code>.targets</code></li> </ul>"},{"location":"descriptors/csharp_csharpier/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>csharpier is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/csharp_csharpier/#example-calls","title":"Example calls","text":"<pre><code>csharpier check myfile.cs myfile2.cs\n</code></pre> <pre><code>csharpier format myfile.cs myfile2.cs\n</code></pre>"},{"location":"descriptors/csharp_csharpier/#help-content","title":"Help content","text":"<pre><code>Description:\n\nUsage:\n  CSharpier [command] [options]\n\nOptions:\n  --version       Show version information\n  -?, -h, --help  Show help and usage information\n\nCommands:\n  format &lt;directoryOrFile&gt;  Format files.\n  check &lt;directoryOrFile&gt;   Check that files are formatted. Will not write any changes.\n  pipe-files                Keep csharpier running so that multiples files can be piped to it via stdin.\n  server                    Run CSharpier as a server so that multiple files may be formatted.\n\n</code></pre>"},{"location":"descriptors/csharp_csharpier/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN apk add --no-cache dotnet9-sdk\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\n# Linter install\n# renovate: datasource=nuget depName=csharpier\nARG CSHARP_CSHARPIER_VERSION=1.0.1\nRUN dotnet tool install --allow-roll-forward --global csharpier --version \"${CSHARP_CSHARPIER_VERSION}\"\n</code></pre>"},{"location":"descriptors/csharp_dotnet_format/","title":"dotnet-format configuration in MegaLinter","text":""},{"location":"descriptors/csharp_dotnet_format/#dotnet-format","title":"dotnet-format","text":"<p>dotnet-format requires a <code>.sln</code> or <code>.csproj</code> file to run correctly.</p>"},{"location":"descriptors/csharp_dotnet_format/#dotnet-format-documentation","title":"dotnet-format documentation","text":"<ul> <li>Version in MegaLinter: 9.0.105</li> <li>Visit Official Web Site</li> <li>See How to configure dotnet-format rules</li> </ul>"},{"location":"descriptors/csharp_dotnet_format/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable dotnet-format by adding <code>CSHARP_DOTNET_FORMAT</code> in ENABLE_LINTERS variable</li> <li>Disable dotnet-format by adding <code>CSHARP_DOTNET_FORMAT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>CSHARP_DOTNET_FORMAT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value CSHARP_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CSHARP_DOTNET_FORMAT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CSHARP_DOTNET_FORMAT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".cs\"]</code> CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CSHARP_DOTNET_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None CSHARP_DOTNET_FORMAT_POST_COMMANDS List of bash commands to run after the linter None CSHARP_DOTNET_FORMAT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CSHARP_DOTNET_FORMAT and its pre/post commands None CSHARP_DOTNET_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> CSHARP_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CSHARP_DOTNET_FORMAT_CLI_EXECUTABLE Override CLI executable <code>['dotnet']</code>"},{"location":"descriptors/csharp_dotnet_format/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18"},{"location":"descriptors/csharp_dotnet_format/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/csharp_dotnet_format/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.cs</code></li> </ul>"},{"location":"descriptors/csharp_dotnet_format/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>dotnet-format is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using dotnet-format configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make dotnet-format analyze only updated files</li> </ul>"},{"location":"descriptors/csharp_dotnet_format/#example-calls","title":"Example calls","text":"<pre><code>dotnet format --verify-no-changes\n</code></pre> <pre><code>dotnet format Solution.sln --verify-no-changes\n</code></pre> <pre><code>dotnet format Folder/Solution.sln --verify-no-changes\n</code></pre> <pre><code>dotnet format Project.csproj --verify-no-changes\n</code></pre> <pre><code>dotnet format\n</code></pre>"},{"location":"descriptors/csharp_dotnet_format/#help-content","title":"Help content","text":"<pre><code>Description:\n  Formats code to match editorconfig settings.\n\nUsage:\n  dotnet-format [&lt;PROJECT | SOLUTION&gt;] [command] [options]\n\nArguments:\n  &lt;PROJECT | SOLUTION&gt;  The project or solution file to operate on. If a file is not specified, the command will search the current directory for one. [default: /]\n\nOptions:\n  -?, -h, --help                                                           Show help and usage information\n  --version                                                                Show version information\n  --diagnostics                                                            A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. []\n  --exclude-diagnostics                                                    A space separated list of diagnostic ids to ignore when fixing code style or 3rd party issues. []\n  --severity &lt;error|info|warn&gt;                                             The severity of diagnostics to fix. Allowed values are info, warn, and error.\n  --no-restore                                                             Doesn't execute an implicit restore before formatting.\n  --verify-no-changes                                                      Verify no formatting changes would be performed. Terminates with a non-zero exit code if any files would have been formatted.\n  --include                                                                A list of relative file or folder paths to include in formatting. All files are formatted if empty. []\n  --exclude                                                                A list of relative file or folder paths to exclude from formatting. []\n  --include-generated                                                      Format files generated by the SDK.\n  -v, --verbosity &lt;d|detailed|diag|diagnostic|m|minimal|n|normal|q|quiet&gt;  Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]\n  --binarylog &lt;binary-log-path&gt;                                            Log all project or solution load information to a binary log file.\n  --report &lt;report-path&gt;                                                   Accepts a file path which if provided will produce a json report in the given directory.\n\nCommands:\n  whitespace &lt;PROJECT | SOLUTION&gt;  Run whitespace formatting. [default: /]\n  style &lt;PROJECT | SOLUTION&gt;       Run code style analyzers and apply fixes. [default: /]\n  analyzers &lt;PROJECT | SOLUTION&gt;   Run 3rd party analyzers and apply fixes. [default: /]\n\n</code></pre>"},{"location":"descriptors/csharp_dotnet_format/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":""},{"location":"descriptors/csharp_roslynator/","title":"roslynator configuration in MegaLinter","text":""},{"location":"descriptors/csharp_roslynator/#roslynator","title":"roslynator","text":""},{"location":"descriptors/csharp_roslynator/#roslynator-documentation","title":"roslynator documentation","text":"<ul> <li>Version in MegaLinter: 0.10.1.0</li> <li>Visit Official Web Site</li> <li>See How to configure roslynator rules</li> <li>See How to disable roslynator rules in files</li> <li>See Index of problems detected by roslynator</li> </ul>"},{"location":"descriptors/csharp_roslynator/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable roslynator by adding <code>CSHARP_ROSLYNATOR</code> in ENABLE_LINTERS variable</li> <li>Disable roslynator by adding <code>CSHARP_ROSLYNATOR</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>CSHARP_ROSLYNATOR</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value CSHARP_ROSLYNATOR_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CSHARP_ROSLYNATOR_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CSHARP_ROSLYNATOR_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CSHARP_ROSLYNATOR_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CSHARP_ROSLYNATOR_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> CSHARP_ROSLYNATOR_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".csproj\"]</code> CSHARP_ROSLYNATOR_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CSHARP_ROSLYNATOR_PRE_COMMANDS List of bash commands to run before the linter None CSHARP_ROSLYNATOR_POST_COMMANDS List of bash commands to run after the linter None CSHARP_ROSLYNATOR_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CSHARP_ROSLYNATOR and its pre/post commands None CSHARP_ROSLYNATOR_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> CSHARP_ROSLYNATOR_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CSHARP_ROSLYNATOR_CLI_EXECUTABLE Override CLI executable <code>['roslynator']</code>"},{"location":"descriptors/csharp_roslynator/#ide-integration","title":"IDE Integration","text":"<p>Use roslynator in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install visual_studio Roslynator 2022 Visit Web Site Visual Studio Code Roslynator"},{"location":"descriptors/csharp_roslynator/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18"},{"location":"descriptors/csharp_roslynator/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/csharp_roslynator/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.csproj</code></li> </ul>"},{"location":"descriptors/csharp_roslynator/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>roslynator is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/csharp_roslynator/#example-calls","title":"Example calls","text":"<pre><code>roslynator analyze myproject.csproj\n</code></pre> <pre><code>roslynator fix myproject.csproj\n</code></pre>"},{"location":"descriptors/csharp_roslynator/#help-content","title":"Help content","text":"<pre><code>Roslynator Command Line Tool version 0.10.1.0 (Roslyn version 4.12.0.0)\nUsage: roslynator [command] [arguments]\n\nCommands:\n  analyze            Analyzes specified project or solution and reports diagnostics.\n  find-symbol        Finds symbols in the specified project or solution.\n  fix                Fixes diagnostics in the specified project or solution.\n  format             Formats whitespace in the specified project or solution.\n  generate-doc       Generates reference documentation from specified project/solution.\n  generate-doc-root  [deprecated] Generates root documentation file from specified project/solution.\n  list-symbols       Lists symbols from the specified project or solution.\n  lloc               Counts logical lines of code in the specified project or solution.\n  loc                Counts physical lines of code in the specified project or solution.\n  migrate            Migrates analyzers to a new version.\n  rename-symbol      Rename symbols in the specified project or solution.\n  spellcheck         Searches the specified project or solution for possible misspellings or typos.\n\nRun 'roslynator help [command]' for more information on a command.\n</code></pre>"},{"location":"descriptors/csharp_roslynator/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN apk add --no-cache dotnet9-sdk\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\n# Linter install\n# renovate: datasource=nuget depName=roslynator.dotnet.cli\nARG CSHARP_ROSLYNATOR_VERSION=0.10.1\nRUN dotnet tool install --allow-roll-forward --global roslynator.dotnet.cli --version \"${CSHARP_ROSLYNATOR_VERSION}\"\n</code></pre>"},{"location":"descriptors/css/","title":"CSS linters in MegaLinter","text":""},{"location":"descriptors/css/#css","title":"CSS","text":""},{"location":"descriptors/css/#linters","title":"Linters","text":"Linter Additional stylelintCSS_STYLELINT"},{"location":"descriptors/css/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.css</code></li> <li><code>.scss</code></li> <li><code>.saas</code></li> </ul> </li> </ul>"},{"location":"descriptors/css/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value CSS_PRE_COMMANDS List of bash commands to run before the linters None CSS_POST_COMMANDS List of bash commands to run after the linters None CSS_FILTER_REGEX_INCLUDE Custom regex including filter CSS_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/css_stylelint/","title":"stylelint configuration in MegaLinter","text":""},{"location":"descriptors/css_stylelint/#stylelint-documentation","title":"stylelint documentation","text":"<ul> <li>Version in MegaLinter: 16.19.1</li> <li>Visit Official Web Site</li> <li>See How to configure stylelint rules<ul> <li>If custom <code>.stylelintrc.json</code> config file isn't found, .stylelintrc.json will be used</li> </ul> </li> <li>See How to disable stylelint rules in files</li> <li>See Index of problems detected by stylelint</li> </ul>"},{"location":"descriptors/css_stylelint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable stylelint by adding <code>CSS_STYLELINT</code> in ENABLE_LINTERS variable</li> <li>Disable stylelint by adding <code>CSS_STYLELINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>CSS_STYLELINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value CSS_STYLELINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> CSS_STYLELINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> CSS_STYLELINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file CSS_STYLELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file CSS_STYLELINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> CSS_STYLELINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".css\", \".scss\", \".saas\"]</code> CSS_STYLELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file CSS_STYLELINT_PRE_COMMANDS List of bash commands to run before the linter None CSS_STYLELINT_POST_COMMANDS List of bash commands to run after the linter None CSS_STYLELINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling CSS_STYLELINT and its pre/post commands None CSS_STYLELINT_CONFIG_FILE stylelint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.stylelintrc.json</code> CSS_STYLELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CSS_STYLELINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> CSS_STYLELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> CSS_STYLELINT_CLI_EXECUTABLE Override CLI executable <code>['stylelint']</code>"},{"location":"descriptors/css_stylelint/#ide-integration","title":"IDE Integration","text":"<p>Use stylelint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-stylelint Visit Web Site Emacs flycheck Visit Web Site Sublime Text SublimeLinter-stylelint Visit Web Site Sublime Text SublimeLinter-contrib-stylelint_d Visit Web Site vim ale Visit Web Site Visual Studio Code vscode-stylelint"},{"location":"descriptors/css_stylelint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/css_stylelint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/css_stylelint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.css</code>, <code>.scss</code>, <code>.saas</code></li> </ul>"},{"location":"descriptors/css_stylelint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>stylelint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/css_stylelint/#example-calls","title":"Example calls","text":"<pre><code>stylelint myfile.css\n</code></pre> <pre><code>stylelint --config .stylelintrc.json myfile.css myfile2.css myfile3.css\n</code></pre> <pre><code>stylelint --fix --config .stylelintrc.json myfile.css myfile2.css myfile3.css\n</code></pre>"},{"location":"descriptors/css_stylelint/#help-content","title":"Help content","text":"<pre><code>\n  A mighty CSS linter that helps you avoid errors and enforce conventions.\n\n  Usage: stylelint [input] [options]\n\n  Input: Files(s), glob(s), or nothing to use stdin.\n\n    If an input argument is wrapped in quotation marks, it will be passed to\n    globby for cross-platform glob support. \"node_modules\" are always ignored.\n    You can also pass no input and use stdin, instead.\n\n  Options:\n\n    --config, -c &lt;path_or_module&gt;\n\n      A path to a specific configuration file (JSON, YAML, CommonJS, or ES module),\n      or a module name in \"node_modules\" that points to one. If no argument is\n      provided, Stylelint will search for configuration files in the following\n      places, in this order:\n\n        - a \"stylelint\" property in \"package.json\"\n        - a \".stylelintrc\" file\n        - a \".stylelintrc.{cjs,mjs,js,json,yaml,yml}\" file\n        - a \"stylelint.config.{cjs,mjs,js}\" file\n\n      The search will begin in the working directory and move up the directory\n      tree until a configuration file is found.\n\n    --config-basedir &lt;path&gt;\n\n      An absolute path to the directory that relative paths defining \"extends\",\n      \"plugins\", and \"customSyntax\" are *relative to*. Only necessary if these\n      values are relative paths.\n\n    --print-config\n\n      Print the configuration for the given input file path. Globs are unsupported.\n\n    --ignore-path, -i &lt;path&gt;\n\n      A path to a file containing patterns that describe files to ignore. The\n      path can be absolute or relative to \"process.cwd()\". You can repeat the\n      option to provide multiple paths. By default, Stylelint looks for\n      \".stylelintignore\" in \"process.cwd()\". Multiple can be set.\n\n    --ignore-pattern, --ip &lt;pattern&gt;\n\n      A pattern of files to ignore (in addition to those in \".stylelintignore\").\n      Multiple can be set.\n\n    --fix [&lt;mode&gt;]\n\n      Automatically fix problems of certain rules. The modes are as follows:\n\n        lax          attempting to fix as much as possible even with syntax errors (default)\n        strict       only fixing when there are no syntax errors\n\n    --compute-edit-info, --cei\n\n      Compute edit information for fixable problems.\n\n    --custom-syntax &lt;name_or_path&gt;\n\n      A module name or path to a JS file exporting a PostCSS-compatible syntax.\n\n    --stdin\n\n      Accept stdin input even if it is empty.\n\n    --stdin-filename &lt;name&gt;\n\n      A filename to assign stdin input.\n\n    --ignore-disables, --id\n\n      Ignore \"stylelint-disable\" comments.\n\n    --disable-default-ignores, --di\n\n      Allow linting of \"node_modules\".\n\n    --[no-]cache\n\n      Store the info about processed files in order to only operate on the\n      changed ones the next time you run Stylelint. By default, the cache is\n      stored in \"./.stylelintcache\". To adjust this, use \"--cache-location\".\n      Cache is disabled by default.\n\n    --cache-location &lt;path&gt;\n\n      A path to a file or directory to be used for the cache location. If a\n      directory is specified, a cache file will be created inside the specified\n      folder, with a name derived from a hash of the current working directory.\n\n      If the directory for the cache does not exist, make sure you add a trailing \"/\"\n      on *nix systems or \"\\\" on Windows. Otherwise the path will be assumed to\n      be a file.\n\n    --cache-strategy &lt;strategy&gt;\n\n      A strategy for the cache to use for detecting changed files. Either one of:\n\n        metadata     by metadata of a file (default)\n        content      by content of a file\n\n      The \"content\" strategy can be useful in cases where the modification time\n      of your files changes even if their contents have not. For example, this can\n      happen during git operations like \"git clone\" because git does not track file\n      modification time.\n\n    --formatter, -f &lt;formatter&gt;\n\n      An output formatter. The variants are as follows:\n\n        string       human-readable strings (default)\n        compact      similar to ESLint's compact formatter\n        github       workflow commands for GitHub Actions (DEPRECATED)\n        json         JSON format\n        tap          TAP format\n        unix         C compiler-like format\n        verbose      extend \"string\" to include a file list and a tally\n\n    --custom-formatter &lt;path_or_module&gt;\n\n      A path to a JS file or module name exporting a custom formatting function.\n\n    --quiet, -q\n\n      Only register problems for rules with an \"error\"-level severity (ignore\n      \"warning\"-level).\n\n    --quiet-deprecation-warnings\n\n      Ignore deprecations warnings.\n\n    --[no-]color\n\n      Force enabling/disabling of color.\n\n    --[no-]validate\n\n      Force enable/disable the validation of the rules' options.\n\n    --report-needless-disables, --rd\n\n      Also report errors for \"stylelint-disable\" comments that are not blocking\n      a lint warning. The process will exit with code 2 if needless disables are found.\n\n    --report-invalid-scope-disables, --risd\n\n      Report \"stylelint-disable\" comments that used for rules that don't exist\n      within the configuration object. The process will exit with code 2 if invalid\n      scope disables are found.\n\n    --report-descriptionless-disables, --rdd\n\n      Report \"stylelint-disable\" comments without a description. The process will\n      exit with code 2 if descriptionless disables are found.\n\n    --max-warnings, --mw &lt;number&gt;\n\n      The number of warnings above which the process will exit with code 2.\n      Useful when setting \"defaultSeverity\" to \"warning\" and expecting the process\n      to fail on warnings (e.g. CI build).\n\n    --output-file, -o &lt;path&gt;\n\n      A file path to write a report.\n\n    --allow-empty-input, --aei\n\n      When a glob pattern matches no files, the process will exit without throwing an error.\n\n    --globby-options, --go &lt;json&gt;\n\n      Options in JSON format passed to globby.\n\n    --version, -v\n\n      Show the version.\n\n    --help, -h\n\n      Show the help.\n\n</code></pre>"},{"location":"descriptors/css_stylelint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=stylelint\nARG NPM_STYLELINT_VERSION=16.19.1\n# renovate: datasource=npm depName=stylelint-config-standard\nARG NPM_STYLELINT_CONFIG_STANDARD_VERSION=38.0.0\n# renovate: datasource=npm depName=stylelint-config-sass-guidelines\nARG NPM_STYLELINT_CONFIG_SASS_GUIDELINES_VERSION=12.1.0\n# renovate: datasource=npm depName=stylelint-scss\nARG NPM_STYLELINT_SCSS_VERSION=6.11.1\n# renovate: datasource=pypi depName=cpplint\nARG PIP_CPPLINT_VERSION=2.0.2\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>stylelint@16.19.1</li> <li>stylelint-config-standard@38.0.0</li> <li>stylelint-config-sass-guidelines@12.1.0</li> <li>stylelint-scss@6.11.1</li> </ul> </li> <li>PIP packages (Python):<ul> <li>cpplint==2.0.2</li> </ul> </li> </ul>"},{"location":"descriptors/dart/","title":"DART linters in MegaLinter","text":""},{"location":"descriptors/dart/#dart","title":"DART","text":""},{"location":"descriptors/dart/#linters","title":"Linters","text":"Linter Additional dartanalyzerDART_DARTANALYZER"},{"location":"descriptors/dart/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.dart</code></li> </ul> </li> </ul>"},{"location":"descriptors/dart/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value DART_PRE_COMMANDS List of bash commands to run before the linters None DART_POST_COMMANDS List of bash commands to run after the linters None DART_FILTER_REGEX_INCLUDE Custom regex including filter DART_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/dart/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/dart/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=sgerrand/alpine-pkg-glibc\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.34-r0\nENV LANG=C.UTF-8\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" &amp;&amp; \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \\\n    echo \\\n        \"-----BEGIN PUBLIC KEY-----\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\\\n        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\\\n        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\\\n        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\\\n        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\\\n        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\\\n        1QIDAQAB\\\n        -----END PUBLIC KEY-----\" | sed 's/   */\\\\n/g' &gt; \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    wget --quiet --tries=10 --waitretry=10 \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    mv /etc/nsswitch.conf /etc/nsswitch.conf.bak &amp;&amp; \\\n    apk add --no-cache --force-overwrite \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    \\\n    mv /etc/nsswitch.conf.bak /etc/nsswitch.conf &amp;&amp; \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true) &amp;&amp; \\\n    echo \"export LANG=$LANG\" &gt; /etc/profile.d/locale.sh &amp;&amp; \\\n    \\\n    apk del glibc-i18n &amp;&amp; \\\n    \\\n    rm \"/root/.wget-hsts\" &amp;&amp; \\\n    apk del .build-dependencies &amp;&amp; \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n</code></pre>"},{"location":"descriptors/dart_dartanalyzer/","title":"dartanalyzer configuration in MegaLinter","text":""},{"location":"descriptors/dart_dartanalyzer/#dartanalyzer","title":"dartanalyzer","text":""},{"location":"descriptors/dart_dartanalyzer/#dartanalyzer-documentation","title":"dartanalyzer documentation","text":"<ul> <li>Version in MegaLinter: 3.7.3</li> <li>Visit Official Web Site</li> <li>See How to configure dartanalyzer rules</li> <li>See How to disable dartanalyzer rules in files</li> <li>See Index of problems detected by dartanalyzer</li> </ul>"},{"location":"descriptors/dart_dartanalyzer/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable dartanalyzer by adding <code>DART_DARTANALYZER</code> in ENABLE_LINTERS variable</li> <li>Disable dartanalyzer by adding <code>DART_DARTANALYZER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value DART_DARTANALYZER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> DART_DARTANALYZER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> DART_DARTANALYZER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file DART_DARTANALYZER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file DART_DARTANALYZER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> DART_DARTANALYZER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".dart\"]</code> DART_DARTANALYZER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file DART_DARTANALYZER_PRE_COMMANDS List of bash commands to run before the linter None DART_DARTANALYZER_POST_COMMANDS List of bash commands to run after the linter None DART_DARTANALYZER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling DART_DARTANALYZER and its pre/post commands None DART_DARTANALYZER_CONFIG_FILE dartanalyzer configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>analysis_options.yaml</code> DART_DARTANALYZER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules DART_DARTANALYZER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> DART_DARTANALYZER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> DART_DARTANALYZER_CLI_EXECUTABLE Override CLI executable <code>['dart']</code>"},{"location":"descriptors/dart_dartanalyzer/#ide-integration","title":"IDE Integration","text":"<p>Use dartanalyzer in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA dart-jetbrains-plugin Visual Studio Code dart-code"},{"location":"descriptors/dart_dartanalyzer/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/dart_dartanalyzer/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/dart_dartanalyzer/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.dart</code></li> </ul>"},{"location":"descriptors/dart_dartanalyzer/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>dartanalyzer is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/dart_dartanalyzer/#example-calls","title":"Example calls","text":"<pre><code>dart analyze --fatal-infos --fatal-warnings myfile.dart\n</code></pre>"},{"location":"descriptors/dart_dartanalyzer/#help-content","title":"Help content","text":"<pre><code>Analyze Dart code in a directory.\n\nUsage: dart analyze [arguments] [&lt;directory&gt;]\n-h, --help                   Print this usage information.\n    --fatal-infos            Treat info level issues as fatal.\n    --[no-]fatal-warnings    Treat warning level issues as fatal.\n                             (defaults to on)\n\nRun \"dart help\" to see global options.\n</code></pre>"},{"location":"descriptors/dart_dartanalyzer/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=github-tags depName=sgerrand/alpine-pkg-glibc\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.34-r0\nENV LANG=C.UTF-8\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" &amp;&amp; \\\n    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" &amp;&amp; \\\n    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \\\n    echo \\\n        \"-----BEGIN PUBLIC KEY-----\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\\\n        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\\\n        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\\\n        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\\\n        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\\\n        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\\\n        1QIDAQAB\\\n        -----END PUBLIC KEY-----\" | sed 's/   */\\\\n/g' &gt; \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    wget --quiet --tries=10 --waitretry=10 \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    mv /etc/nsswitch.conf /etc/nsswitch.conf.bak &amp;&amp; \\\n    apk add --no-cache --force-overwrite \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" &amp;&amp; \\\n    \\\n    mv /etc/nsswitch.conf.bak /etc/nsswitch.conf &amp;&amp; \\\n    rm \"/etc/apk/keys/sgerrand.rsa.pub\" &amp;&amp; \\\n    (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true) &amp;&amp; \\\n    echo \"export LANG=$LANG\" &gt; /etc/profile.d/locale.sh &amp;&amp; \\\n    \\\n    apk del glibc-i18n &amp;&amp; \\\n    \\\n    rm \"/root/.wget-hsts\" &amp;&amp; \\\n    apk del .build-dependencies &amp;&amp; \\\n    rm \\\n        \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \\\n        \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n\n# Linter install\n# renovate: datasource=dart-version depName=dart\nARG DART_VERSION='3.7.3'\nRUN wget --tries=5 https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-x64-release.zip -O - -q | unzip -q - \\\n    &amp;&amp; mkdir -p /usr/lib/dart \\\n    &amp;&amp; mv dart-sdk/* /usr/lib/dart/ \\\n    &amp;&amp; chmod +x /usr/lib/dart/bin/dart \\\n    &amp;&amp; rm -r dart-sdk/\n\nENV PATH=\"/usr/lib/dart/bin:${PATH}\"\n</code></pre>"},{"location":"descriptors/dockerfile/","title":"DOCKERFILE linters in MegaLinter","text":""},{"location":"descriptors/dockerfile/#dockerfile","title":"DOCKERFILE","text":""},{"location":"descriptors/dockerfile/#linters","title":"Linters","text":"Linter Additional hadolintDOCKERFILE_HADOLINT"},{"location":"descriptors/dockerfile/#linted-files","title":"Linted files","text":"<ul> <li>File names:<ul> <li><code>Containerfile</code></li> <li><code>Dockerfile</code></li> </ul> </li> </ul>"},{"location":"descriptors/dockerfile/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value DOCKERFILE_PRE_COMMANDS List of bash commands to run before the linters None DOCKERFILE_POST_COMMANDS List of bash commands to run after the linters None DOCKERFILE_FILTER_REGEX_INCLUDE Custom regex including filter DOCKERFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/dockerfile_hadolint/","title":"hadolint configuration in MegaLinter","text":""},{"location":"descriptors/dockerfile_hadolint/#hadolint","title":"hadolint","text":""},{"location":"descriptors/dockerfile_hadolint/#hadolint-documentation","title":"hadolint documentation","text":"<ul> <li>Version in MegaLinter: 2.12.0</li> <li>Visit Official Web Site</li> <li>See How to configure hadolint rules<ul> <li>If custom <code>.hadolint.yaml</code> config file isn't found, .hadolint.yaml will be used</li> </ul> </li> <li>See How to disable hadolint rules in files</li> <li>See Index of problems detected by hadolint</li> </ul>"},{"location":"descriptors/dockerfile_hadolint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable hadolint by adding <code>DOCKERFILE_HADOLINT</code> in ENABLE_LINTERS variable</li> <li>Disable hadolint by adding <code>DOCKERFILE_HADOLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value DOCKERFILE_HADOLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> DOCKERFILE_HADOLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file DOCKERFILE_HADOLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> DOCKERFILE_HADOLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> Exclude every file DOCKERFILE_HADOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> <code>[\"Containerfile\", \"Dockerfile\"]</code> DOCKERFILE_HADOLINT_PRE_COMMANDS List of bash commands to run before the linter None DOCKERFILE_HADOLINT_POST_COMMANDS List of bash commands to run after the linter None DOCKERFILE_HADOLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling DOCKERFILE_HADOLINT and its pre/post commands None DOCKERFILE_HADOLINT_CONFIG_FILE hadolint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.hadolint.yaml</code> DOCKERFILE_HADOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules DOCKERFILE_HADOLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> DOCKERFILE_HADOLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> DOCKERFILE_HADOLINT_CLI_EXECUTABLE Override CLI executable <code>['hadolint']</code>"},{"location":"descriptors/dockerfile_hadolint/#ide-integration","title":"IDE Integration","text":"<p>Use hadolint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-hadolint Visit Web Site Visual Studio Code hadolint"},{"location":"descriptors/dockerfile_hadolint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/dockerfile_hadolint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/dockerfile_hadolint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File names (regex): <code>Containerfile</code>, <code>Dockerfile</code></li> </ul>"},{"location":"descriptors/dockerfile_hadolint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>hadolint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/dockerfile_hadolint/#example-calls","title":"Example calls","text":"<pre><code>hadolint Dockerfile\n</code></pre> <pre><code>hadolint --config .hadolint.yml Dockerfile\n</code></pre>"},{"location":"descriptors/dockerfile_hadolint/#help-content","title":"Help content","text":"<pre><code>hadolint - Dockerfile Linter written in Haskell\n\nUsage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...]\n                [--file-path-in-report FILEPATHINREPORT] [--no-fail]\n                [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE]\n                [--warning RULECODE] [--info RULECODE] [--style RULECODE]\n                [--ignore RULECODE]\n                [--trusted-registry REGISTRY (e.g. docker.io)]\n                [--require-label LABELSCHEMA (e.g. maintainer:text)]\n                [--strict-labels] [--disable-ignore-pragma]\n                [-t|--failure-threshold THRESHOLD]\n\n  Lint Dockerfile for errors and best practices\n\nAvailable options:\n  -h,--help                Show this help text\n  -v,--version             Show version\n  -c,--config FILENAME     Path to the configuration file\n  --file-path-in-report FILEPATHINREPORT\n                           The file path referenced in the generated report.\n                           This only applies for the 'checkstyle' format and is\n                           useful when running Hadolint with Docker to set the\n                           correct file path.\n  --no-fail                Don't exit with a failure status code when any rule\n                           is violated\n  --no-color               Don't colorize output\n  -V,--verbose             Enables verbose logging of hadolint's output to\n                           stderr\n  -f,--format ARG          The output format for the results [tty | json |\n                           checkstyle | codeclimate | gitlab_codeclimate | gnu |\n                           codacy | sonarqube | sarif] (default: tty)\n  --error RULECODE         Make the rule `RULECODE` have the level `error`\n  --warning RULECODE       Make the rule `RULECODE` have the level `warning`\n  --info RULECODE          Make the rule `RULECODE` have the level `info`\n  --style RULECODE         Make the rule `RULECODE` have the level `style`\n  --ignore RULECODE        A rule to ignore. If present, the ignore list in the\n                           config file is ignored\n  --trusted-registry REGISTRY (e.g. docker.io)\n                           A docker registry to allow to appear in FROM\n                           instructions\n  --require-label LABELSCHEMA (e.g. maintainer:text)\n                           The option --require-label=label:format makes\n                           Hadolint check that the label `label` conforms to\n                           format requirement `format`\n  --strict-labels          Do not permit labels other than specified in\n                           `label-schema`\n  --disable-ignore-pragma  Disable inline ignore pragmas `# hadolint\n                           ignore=DLxxxx`\n  -t,--failure-threshold THRESHOLD\n                           Exit with failure code only when rules with a\n                           severity equal to or above THRESHOLD are violated.\n                           Accepted values: [error | warning | info | style |\n                           ignore | none] (default: info)\n</code></pre>"},{"location":"descriptors/dockerfile_hadolint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=hadolint/hadolint\nARG DOCKERFILE_HADOLINT_VERSION=v2.12.0-alpine\nFROM hadolint/hadolint:${DOCKERFILE_HADOLINT_VERSION} AS hadolint\nCOPY --link --from=hadolint /bin/hadolint /usr/bin/hadolint\n</code></pre>"},{"location":"descriptors/editorconfig/","title":"EDITORCONFIG linters in MegaLinter","text":""},{"location":"descriptors/editorconfig/#editorconfig","title":"EDITORCONFIG","text":""},{"location":"descriptors/editorconfig/#linters","title":"Linters","text":"Linter Additional editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER"},{"location":"descriptors/editorconfig/#linted-files","title":"Linted files","text":"<ul> <li>Activated only if at least one of these files is found: <code>.editorconfig</code></li> <li>File extensions:<ul> <li><code>*</code></li> </ul> </li> </ul>"},{"location":"descriptors/editorconfig/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value EDITORCONFIG_PRE_COMMANDS List of bash commands to run before the linters None EDITORCONFIG_POST_COMMANDS List of bash commands to run after the linters None EDITORCONFIG_FILTER_REGEX_INCLUDE Custom regex including filter EDITORCONFIG_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/editorconfig_editorconfig_checker/","title":"editorconfig-checker configuration in MegaLinter","text":""},{"location":"descriptors/editorconfig_editorconfig_checker/#editorconfig-checker-documentation","title":"editorconfig-checker documentation","text":"<ul> <li>Version in MegaLinter: 3.2.1</li> <li>Visit Official Web Site</li> <li>See How to configure editorconfig-checker rules</li> <li>See How to disable editorconfig-checker rules in files</li> </ul>"},{"location":"descriptors/editorconfig_editorconfig_checker/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable editorconfig-checker by adding <code>EDITORCONFIG_EDITORCONFIG_CHECKER</code> in ENABLE_LINTERS variable</li> <li>Disable editorconfig-checker by adding <code>EDITORCONFIG_EDITORCONFIG_CHECKER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> EDITORCONFIG_EDITORCONFIG_CHECKER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\"*\"]</code> EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_PRE_COMMANDS List of bash commands to run before the linter None EDITORCONFIG_EDITORCONFIG_CHECKER_POST_COMMANDS List of bash commands to run after the linter None EDITORCONFIG_EDITORCONFIG_CHECKER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling EDITORCONFIG_EDITORCONFIG_CHECKER and its pre/post commands None EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE editorconfig-checker configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.editorconfig-checker.json</code> EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_EXECUTABLE Override CLI executable <code>['editorconfig-checker']</code>"},{"location":"descriptors/editorconfig_editorconfig_checker/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/editorconfig_editorconfig_checker/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/editorconfig_editorconfig_checker/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.editorconfig</code></li> <li>File extensions: <code>*</code></li> </ul>"},{"location":"descriptors/editorconfig_editorconfig_checker/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>editorconfig-checker is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/editorconfig_editorconfig_checker/#example-calls","title":"Example calls","text":"<pre><code>editorconfig-checker myfile.js\n</code></pre>"},{"location":"descriptors/editorconfig_editorconfig_checker/#help-content","title":"Help content","text":"<pre><code>USAGE:\n  -color\n      enables printing color\n  -config string\n      config\n  -debug\n      print debugging information\n  -disable-end-of-line\n      disables the trailing whitespace check\n  -disable-indent-size\n      disables only the indent-size check\n  -disable-indentation\n      disables the indentation check\n  -disable-insert-final-newline\n      disables the final newline check\n  -disable-max-line-length\n      disables only the max-line-length check\n  -disable-trim-trailing-whitespace\n      disables the trailing whitespace check\n  -dry-run\n      show which files would be checked\n  -exclude string\n      a regex which files should be excluded from checking - needs to be a valid regular expression\n  -f value\n      specify the output format: default, codeclimate, gcc, github-actions (default default)\n  -format value\n      specify the output format: default, codeclimate, gcc, github-actions (default default)\n  -h  print the help\n  -help\n      print the help\n  -ignore-defaults\n      ignore default excludes\n  -init\n      creates an initial configuration\n  -no-color\n      disables printing color\n  -v  print debugging information\n  -verbose\n      print debugging information\n  -version\n      print the version number\n</code></pre>"},{"location":"descriptors/editorconfig_editorconfig_checker/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=mstruebing/editorconfig-checker\nARG EDITORCONFIG_EDITORCONFIG_CHECKER_VERSION=v3.2.1\nFROM mstruebing/editorconfig-checker:${EDITORCONFIG_EDITORCONFIG_CHECKER_VERSION} AS editorconfig-checker\nCOPY --link --from=editorconfig-checker /usr/bin/ec /usr/bin/editorconfig-checker\n</code></pre>"},{"location":"descriptors/env/","title":"ENV linters in MegaLinter","text":""},{"location":"descriptors/env/#env","title":"ENV","text":""},{"location":"descriptors/env/#linters","title":"Linters","text":"Linter Additional dotenv-linterENV_DOTENV_LINTER"},{"location":"descriptors/env/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.env</code></li> </ul> </li> </ul>"},{"location":"descriptors/env/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value ENV_PRE_COMMANDS List of bash commands to run before the linters None ENV_POST_COMMANDS List of bash commands to run after the linters None ENV_FILTER_REGEX_INCLUDE Custom regex including filter ENV_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/env_dotenv_linter/","title":"dotenv-linter configuration in MegaLinter","text":""},{"location":"descriptors/env_dotenv_linter/#dotenv-linter-documentation","title":"dotenv-linter documentation","text":"<ul> <li>Version in MegaLinter: 3.3.0</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by dotenv-linter</li> </ul>"},{"location":"descriptors/env_dotenv_linter/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable dotenv-linter by adding <code>ENV_DOTENV_LINTER</code> in ENABLE_LINTERS variable</li> <li>Disable dotenv-linter by adding <code>ENV_DOTENV_LINTER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>ENV_DOTENV_LINTER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value ENV_DOTENV_LINTER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> ENV_DOTENV_LINTER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file ENV_DOTENV_LINTER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> ENV_DOTENV_LINTER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".env\"]</code> ENV_DOTENV_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file ENV_DOTENV_LINTER_PRE_COMMANDS List of bash commands to run before the linter None ENV_DOTENV_LINTER_POST_COMMANDS List of bash commands to run after the linter None ENV_DOTENV_LINTER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling ENV_DOTENV_LINTER and its pre/post commands None ENV_DOTENV_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> ENV_DOTENV_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> ENV_DOTENV_LINTER_CLI_EXECUTABLE Override CLI executable <code>['dotenv-linter']</code>"},{"location":"descriptors/env_dotenv_linter/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/env_dotenv_linter/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/env_dotenv_linter/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.env</code></li> </ul>"},{"location":"descriptors/env_dotenv_linter/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>dotenv-linter is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/env_dotenv_linter/#example-calls","title":"Example calls","text":"<pre><code>dotenv-linter myfile.env\n</code></pre> <pre><code>dotenv-linter fix myfile.env\n</code></pre>"},{"location":"descriptors/env_dotenv_linter/#help-content","title":"Help content","text":"<pre><code>dotenv-linter 3.3.0\nMikhail Grachev &lt;work@mgrachev.com&gt;\nLightning-fast linter for .env files\n\nUSAGE:\n    dotenv-linter [OPTIONS] [input]... [SUBCOMMAND]\n\nARGS:\n    &lt;input&gt;...    files or paths [default: /]\n\nOPTIONS:\n    -e, --exclude &lt;FILE_NAME&gt;...    Excludes files from check\n    -h, --help                      Print help information\n        --no-color                  Turns off the colored output\n        --not-check-updates         Doesn't check for updates\n    -q, --quiet                     Doesn't display additional information\n    -r, --recursive                 Recursively searches and checks .env files\n    -s, --skip &lt;CHECK_NAME&gt;...      Skips checks\n    -v, --version                   Print version information\n\nSUBCOMMANDS:\n    compare    Compares if files have the same keys [aliases: c]\n    fix        Automatically fixes warnings [aliases: f]\n    list       Shows list of available checks [aliases: l]\n</code></pre>"},{"location":"descriptors/env_dotenv_linter/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s\n</code></pre>"},{"location":"descriptors/gherkin/","title":"GHERKIN linters in MegaLinter","text":""},{"location":"descriptors/gherkin/#gherkin","title":"GHERKIN","text":""},{"location":"descriptors/gherkin/#linters","title":"Linters","text":"Linter Additional gherkin-lintGHERKIN_GHERKIN_LINT"},{"location":"descriptors/gherkin/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.feature</code></li> </ul> </li> </ul>"},{"location":"descriptors/gherkin/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value GHERKIN_PRE_COMMANDS List of bash commands to run before the linters None GHERKIN_POST_COMMANDS List of bash commands to run after the linters None GHERKIN_FILTER_REGEX_INCLUDE Custom regex including filter GHERKIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/gherkin_gherkin_lint/","title":"gherkin-lint configuration in MegaLinter","text":""},{"location":"descriptors/gherkin_gherkin_lint/#gherkin-lint","title":"gherkin-lint","text":""},{"location":"descriptors/gherkin_gherkin_lint/#gherkin-lint-documentation","title":"gherkin-lint documentation","text":"<ul> <li>Visit Official Web Site</li> <li>See How to configure gherkin-lint rules<ul> <li>If custom <code>.gherkin-lintrc</code> config file isn't found, .gherkin-lintrc will be used</li> </ul> </li> <li>See Index of problems detected by gherkin-lint</li> </ul>"},{"location":"descriptors/gherkin_gherkin_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable gherkin-lint by adding <code>GHERKIN_GHERKIN_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable gherkin-lint by adding <code>GHERKIN_GHERKIN_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value GHERKIN_GHERKIN_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> GHERKIN_GHERKIN_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file GHERKIN_GHERKIN_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".feature\"]</code> GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file GHERKIN_GHERKIN_LINT_PRE_COMMANDS List of bash commands to run before the linter None GHERKIN_GHERKIN_LINT_POST_COMMANDS List of bash commands to run after the linter None GHERKIN_GHERKIN_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling GHERKIN_GHERKIN_LINT and its pre/post commands None GHERKIN_GHERKIN_LINT_CONFIG_FILE gherkin-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.gherkin-lintrc</code> GHERKIN_GHERKIN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GHERKIN_GHERKIN_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> GHERKIN_GHERKIN_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> GHERKIN_GHERKIN_LINT_CLI_EXECUTABLE Override CLI executable <code>['gherkin-lint']</code>"},{"location":"descriptors/gherkin_gherkin_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73"},{"location":"descriptors/gherkin_gherkin_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/gherkin_gherkin_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.feature</code></li> </ul>"},{"location":"descriptors/gherkin_gherkin_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>gherkin-lint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/gherkin_gherkin_lint/#example-calls","title":"Example calls","text":"<pre><code>gherkin-lint myfile.feature\n</code></pre> <pre><code>gherkin-lint -c .gherkin-lintrc myfile.feature\n</code></pre>"},{"location":"descriptors/gherkin_gherkin_lint/#help-content","title":"Help content","text":"<pre><code>Usage: gherkin-lint [options] &lt;feature-files&gt;\n\nOptions:\n  -f, --format [format]  output format. Possible values: json, stylish, xunit.\n                         Defaults to stylish\n  -i, --ignore &lt;...&gt;     comma seperated list of files/glob patterns that the\n                         linter should ignore, overrides .gherkin-lintignore\n                         file\n  -c, --config [config]  configuration file, defaults to .gherkin-lintrc\n  -r, --rulesdir &lt;...&gt;   additional rule directories (default: [])\n  -h, --help             display help for command\n</code></pre>"},{"location":"descriptors/gherkin_gherkin_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=gherkin-lint\nARG NPM_GHERKIN_LINT_VERSION=4.2.4\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>gherkin-lint@4.2.4</li> </ul> </li> </ul>"},{"location":"descriptors/git/","title":"Git","text":""},{"location":"descriptors/git/#git","title":"GIT","text":""},{"location":"descriptors/git/#linters","title":"Linters","text":"Linter Configuration key Status git_diff GIT"},{"location":"descriptors/git/#linted-files","title":"Linted files","text":""},{"location":"descriptors/git/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value GIT_FILTER_REGEX_INCLUDE Custom regex including filter GIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/git/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/git/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN git config --global core.autocrlf true\n</code></pre>"},{"location":"descriptors/git_git_diff/","title":"Git git diff","text":""},{"location":"descriptors/git_git_diff/#git_diff","title":"git_diff","text":"<p>Git diff checks for git conflicts markers in files</p>"},{"location":"descriptors/git_git_diff/#git_diff-documentation","title":"git_diff documentation","text":"<ul> <li>Version in MegaLinter: 2.30.3</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/git_git_diff/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable git_diff by adding <code>GIT_GIT_DIFF</code> in ENABLE_LINTERS variable</li> <li>Disable git_diff by adding <code>GIT_GIT_DIFF</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value GIT_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> GIT_GIT_DIFF_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> Exclude every file GIT_GIT_DIFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file GIT_GIT_DIFF_PRE_COMMANDS List of bash commands to run before the linter None GIT_GIT_DIFF_POST_COMMANDS List of bash commands to run after the linter None GIT_GIT_DIFF_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> GIT_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code>"},{"location":"descriptors/git_git_diff/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 16 dart Optimized for DART based projects 42 documentation MegaLinter for documentation projects 41 dotnet Optimized for C, C++, C# or VB based projects 49 go Optimized for GO based projects 43 java Optimized for JAVA based projects 43 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 50 php Optimized for PHP based projects 46 python Optimized for PYTHON based projects 49 ruby Optimized for RUBY based projects 42 rust Optimized for RUST based projects 42 salesforce Optimized for Salesforce based projects 44 scala Optimized for SCALA based projects 42 swift Optimized for SWIFT based projects 42 terraform Optimized for TERRAFORM based projects 47"},{"location":"descriptors/git_git_diff/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/git_git_diff/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/git_git_diff/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>git_diff is called once on the whole project directory</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using git_diff configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> does not make git_diff analyze only updated files</li> </ul>"},{"location":"descriptors/git_git_diff/#example-calls","title":"Example calls","text":"<pre><code>git diff --check\n</code></pre>"},{"location":"descriptors/git_git_diff/#help-content","title":"Help content","text":"<pre><code>usage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n           &lt;command&gt; [&lt;args&gt;]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone             Clone a repository into a new directory\n   init              Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add               Add file contents to the index\n   mv                Move or rename a file, a directory, or a symlink\n   restore           Restore working tree files\n   rm                Remove files from the working tree and from the index\n   sparse-checkout   Initialize and modify the sparse-checkout\n\nexamine the history and state (see also: git help revisions)\n   bisect            Use binary search to find the commit that introduced a bug\n   diff              Show changes between commits, commit and working tree, etc\n   grep              Print lines matching a pattern\n   log               Show commit logs\n   show              Show various types of objects\n   status            Show the working tree status\n\ngrow, mark and tweak your common history\n   branch            List, create, or delete branches\n   commit            Record changes to the repository\n   merge             Join two or more development histories together\n   rebase            Reapply commits on top of another base tip\n   reset             Reset current HEAD to the specified state\n   switch            Switch branches\n   tag               Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch             Download objects and refs from another repository\n   pull              Fetch from and integrate with another repository or a local branch\n   push              Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help &lt;command&gt;' or 'git help &lt;concept&gt;'\nto read about a specific subcommand or concept.\nSee 'git help git' for an overview of the system.\n</code></pre>"},{"location":"descriptors/git_git_diff/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":""},{"location":"descriptors/git_git_diff/#example-success-log","title":"Example success log","text":"<pre><code>Results of git_diff linter (version 2.26.2)\nSee documentation on https://megalinter.io/descriptors/git_git_diff/\n-----------------------------------------------\n\n[SUCCESS] .automation/test/git_diff/good\n\n\n</code></pre>"},{"location":"descriptors/go/","title":"GO linters in MegaLinter","text":""},{"location":"descriptors/go/#go","title":"GO","text":""},{"location":"descriptors/go/#linters","title":"Linters","text":"Linter Additional golangci-lintGO_GOLANGCI_LINT reviveGO_REVIVE"},{"location":"descriptors/go/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.go</code></li> </ul> </li> </ul>"},{"location":"descriptors/go/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value GO_PRE_COMMANDS List of bash commands to run before the linters None GO_POST_COMMANDS List of bash commands to run after the linters None GO_FILTER_REGEX_INCLUDE Custom regex including filter GO_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/go/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/go/#installation","title":"Installation","text":"<ul> <li>APK packages (Linux):<ul> <li>go</li> </ul> </li> </ul>"},{"location":"descriptors/go_golangci_lint/","title":"golangci-lint configuration in MegaLinter","text":""},{"location":"descriptors/go_golangci_lint/#golangci-lint-documentation","title":"golangci-lint documentation","text":"<ul> <li>Version in MegaLinter: 2.1.5</li> <li>Visit Official Web Site</li> <li>See How to configure golangci-lint rules<ul> <li>If custom <code>.golangci.yml</code> config file isn't found, .golangci.yml will be used</li> </ul> </li> <li>See How to disable golangci-lint rules in files</li> <li>See Index of problems detected by golangci-lint</li> </ul>"},{"location":"descriptors/go_golangci_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable golangci-lint by adding <code>GO_GOLANGCI_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable golangci-lint by adding <code>GO_GOLANGCI_LINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>GO_GOLANGCI_LINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value GO_GOLANGCI_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> GO_GOLANGCI_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> GO_GOLANGCI_LINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> GO_GOLANGCI_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".go\"]</code> GO_GOLANGCI_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file GO_GOLANGCI_LINT_PRE_COMMANDS List of bash commands to run before the linter None GO_GOLANGCI_LINT_POST_COMMANDS List of bash commands to run after the linter None GO_GOLANGCI_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling GO_GOLANGCI_LINT and its pre/post commands None GO_GOLANGCI_LINT_CONFIG_FILE golangci-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.golangci.yml</code> GO_GOLANGCI_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GO_GOLANGCI_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> GO_GOLANGCI_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> GO_GOLANGCI_LINT_CLI_EXECUTABLE Override CLI executable <code>['golangci-lint']</code>"},{"location":"descriptors/go_golangci_lint/#ide-integration","title":"IDE Integration","text":"<p>Use golangci-lint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom go-plus Visit Web Site Emacs flycheck-golandci-lint Visit Web Site Emacs SpaceMacs Visit Web Site goland goland Visit Web Site Sublime Text SublimeLinter-contrib-golang-cilint Visit Web Site vim vim-go Visit Web Site Visual Studio Code vscode.Go"},{"location":"descriptors/go_golangci_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 go Optimized for GO based projects 51"},{"location":"descriptors/go_golangci_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/go_golangci_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.go</code></li> </ul>"},{"location":"descriptors/go_golangci_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>golangci-lint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using golangci-lint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make golangci-lint analyze only updated files</li> </ul>"},{"location":"descriptors/go_golangci_lint/#example-calls","title":"Example calls","text":"<pre><code>golangci-lint run myfile.go\n</code></pre> <pre><code>golangci-lint run -c .golangci.yml myfile.go\n</code></pre>"},{"location":"descriptors/go_golangci_lint/#help-content","title":"Help content","text":"<pre><code>Smart, fast linters runner.\n\nUsage:\n  golangci-lint [flags]\n  golangci-lint [command]\n\nAvailable Commands:\n  cache       Cache control and information\n  completion  Generate the autocompletion script for the specified shell\n  config      Config file information\n  custom      Build a version of golangci-lint with custom linters\n  fmt         Format Go source files\n  formatters  List current formatters configuration\n  help        Help\n  linters     List current linters configuration\n  migrate     Migrate configuration file from v1 to v2\n  run         Run the linters\n  version     Version\n\nFlags:\n      --color string   Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\")\n  -h, --help           Help for a command\n  -v, --verbose        Verbose output\n      --version        Print version\n\nUse \"golangci-lint [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/go_golangci_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=golangci/golangci-lint\nARG GO_GOLANGCI_LINT_VERSION=2.1.5\nRUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s \"v${GO_GOLANGCI_LINT_VERSION}\" \\\n    &amp;&amp; golangci-lint --version\n\n</code></pre>"},{"location":"descriptors/go_revive/","title":"revive configuration in MegaLinter","text":""},{"location":"descriptors/go_revive/#revive","title":"revive","text":""},{"location":"descriptors/go_revive/#revive-documentation","title":"revive documentation","text":"<ul> <li>Version in MegaLinter: 1.9.0</li> <li>Visit Official Web Site</li> <li>See How to configure revive rules</li> <li>See Index of problems detected by revive</li> </ul>"},{"location":"descriptors/go_revive/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable revive by adding <code>GO_REVIVE</code> in ENABLE_LINTERS variable</li> <li>Disable revive by adding <code>GO_REVIVE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value GO_REVIVE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> GO_REVIVE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> GO_REVIVE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file GO_REVIVE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file GO_REVIVE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> GO_REVIVE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".go\"]</code> GO_REVIVE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file GO_REVIVE_PRE_COMMANDS List of bash commands to run before the linter None GO_REVIVE_POST_COMMANDS List of bash commands to run after the linter None GO_REVIVE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling GO_REVIVE and its pre/post commands None GO_REVIVE_CONFIG_FILE revive configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>revive.toml</code> GO_REVIVE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GO_REVIVE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> GO_REVIVE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> GO_REVIVE_CLI_EXECUTABLE Override CLI executable <code>['revive']</code>"},{"location":"descriptors/go_revive/#ide-integration","title":"IDE Integration","text":"<p>Use revive in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-revive Visit Web Site vim ale Visit Web Site Visual Studio Code vscode.Go"},{"location":"descriptors/go_revive/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 go Optimized for GO based projects 51"},{"location":"descriptors/go_revive/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/go_revive/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.go</code></li> </ul>"},{"location":"descriptors/go_revive/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>revive is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/go_revive/#example-calls","title":"Example calls","text":"<pre><code>revive myfile.go\n</code></pre> <pre><code>revive -config myfile.go\n</code></pre>"},{"location":"descriptors/go_revive/#help-content","title":"Help content","text":"<pre><code>\n _ __ _____   _(_)__  _____\n| '__/ _ \\ \\ / / \\ \\ / / _ \\\n| | |  __/\\ V /| |\\ V /  __/\n|_|  \\___| \\_/ |_| \\_/ \\___|\n\nExample:\n  revive -config c.toml -formatter friendly -exclude a.go -exclude b.go ./...\n\nUsage of revive:\n  -config string\n      path to the configuration TOML file, defaults to $XDG_CONFIG_HOME/revive.toml or $HOME/revive.toml, if present (i.e. -config myconf.toml)\n  -exclude value\n      list of globs which specify files to be excluded (i.e. -exclude foo/...)\n  -formatter string\n      formatter to be used for the output (i.e. -formatter stylish)\n  -max_open_files int\n      maximum number of open files at the same time\n  -set_exit_status\n      set exit status to 1 if any issues are found, overwrites errorCode and warningCode in config\n  -version\n      get revive version\n</code></pre>"},{"location":"descriptors/go_revive/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=mgechev/revive\nARG GO_REVIVE_VERSION=v1.9.0\nFROM golang:1-alpine AS revive\n## The golang image used as a builder is a temporary workaround (https://github.com/mgechev/revive/issues/787)\n## for the released revive binaries not returning version numbers (devel).\n## The install command should then be what is commented in the go.megalinter-descriptor.yml\nARG GO_REVIVE_VERSION\nRUN GOBIN=/usr/bin go install github.com/mgechev/revive@$GO_REVIVE_VERSION\nCOPY --link --from=revive /usr/bin/revive /usr/bin/revive\n</code></pre>"},{"location":"descriptors/graphql/","title":"GRAPHQL linters in MegaLinter","text":""},{"location":"descriptors/graphql/#graphql","title":"GRAPHQL","text":""},{"location":"descriptors/graphql/#linters","title":"Linters","text":"Linter Additional graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER"},{"location":"descriptors/graphql/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.graphql</code></li> </ul> </li> </ul>"},{"location":"descriptors/graphql/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value GRAPHQL_PRE_COMMANDS List of bash commands to run before the linters None GRAPHQL_POST_COMMANDS List of bash commands to run after the linters None GRAPHQL_FILTER_REGEX_INCLUDE Custom regex including filter GRAPHQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/graphql_graphql_schema_linter/","title":"graphql-schema-linter configuration in MegaLinter","text":""},{"location":"descriptors/graphql_graphql_schema_linter/#graphql-schema-linter","title":"graphql-schema-linter","text":""},{"location":"descriptors/graphql_graphql_schema_linter/#graphql-schema-linter-documentation","title":"graphql-schema-linter documentation","text":"<ul> <li>Version in MegaLinter: 3.0.1</li> <li>Visit Official Web Site</li> <li>See How to configure graphql-schema-linter rules</li> <li>See How to disable graphql-schema-linter rules in files</li> <li>See Index of problems detected by graphql-schema-linter</li> </ul>"},{"location":"descriptors/graphql_graphql_schema_linter/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable graphql-schema-linter by adding <code>GRAPHQL_GRAPHQL_SCHEMA_LINTER</code> in ENABLE_LINTERS variable</li> <li>Disable graphql-schema-linter by adding <code>GRAPHQL_GRAPHQL_SCHEMA_LINTER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".graphql\"]</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_PRE_COMMANDS List of bash commands to run before the linter None GRAPHQL_GRAPHQL_SCHEMA_LINTER_POST_COMMANDS List of bash commands to run after the linter None GRAPHQL_GRAPHQL_SCHEMA_LINTER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling GRAPHQL_GRAPHQL_SCHEMA_LINTER and its pre/post commands None GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE graphql-schema-linter configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.graphql-schema-linterrc</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_EXECUTABLE Override CLI executable <code>['graphql-schema-linter']</code>"},{"location":"descriptors/graphql_graphql_schema_linter/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/graphql_graphql_schema_linter/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/graphql_graphql_schema_linter/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.graphql</code></li> </ul>"},{"location":"descriptors/graphql_graphql_schema_linter/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>graphql-schema-linter is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/graphql_graphql_schema_linter/#example-calls","title":"Example calls","text":"<pre><code>graphql-schema-linter myfile.graphql\n</code></pre>"},{"location":"descriptors/graphql_graphql_schema_linter/#help-content","title":"Help content","text":"<pre><code>Usage: graphql-schema-linter [options] [schema.graphql ...]\n\nOptions:\n  -r, --rules &lt;rules&gt;                 only the rules specified will be used to validate the schema. Example: fields-have-descriptions,types-have-descriptions\n  -o, --rules-options &lt;rulesOptions&gt;  configure the specified rules with the passed in configuration options. example: {\"enum-values-sorted-alphabetically\":{\"sortOrder\":\"lexicographical\"}}\n  -i, --ignore &lt;ignore list&gt;          ignore errors for specific schema members, example: {'fields-have-descriptions':['Obvious','Query.obvious','Query.something.obvious']}\n  -f, --format &lt;format&gt;               choose the output format of the report. Possible values: json, text, compact\n  -s, --stdin                         schema definition will be read from STDIN instead of specified file.\n  -c, --config-directory &lt;path&gt;       path to begin searching for config files.\n  -p, --custom-rule-paths &lt;paths&gt;     path to additional custom rules to be loaded. Example: rules/*.js\n  --comment-descriptions              use old way of defining descriptions in GraphQL SDL\n  --old-implements-syntax             use old way of defining implemented interfaces in GraphQL SDL\n  -o, --only &lt;rules&gt;                  This option is DEPRECATED. Use `--rules` instead.\n  -e, --except &lt;rules&gt;                This option is DEPRECATED. Use `--rules` instead.\n  --version                           output the version number\n  -h, --help                          output usage information\n</code></pre>"},{"location":"descriptors/graphql_graphql_schema_linter/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=graphql\nARG NPM_GRAPHQL_VERSION=16.11.0\n# renovate: datasource=npm depName=graphql-schema-linter\nARG NPM_GRAPHQL_SCHEMA_LINTER_VERSION=3.0.1\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>graphql@16.11.0</li> <li>graphql-schema-linter@3.0.1</li> </ul> </li> </ul>"},{"location":"descriptors/groovy/","title":"GROOVY linters in MegaLinter","text":""},{"location":"descriptors/groovy/#groovy","title":"GROOVY","text":""},{"location":"descriptors/groovy/#linters","title":"Linters","text":"Linter Additional npm-groovy-lintGROOVY_NPM_GROOVY_LINT"},{"location":"descriptors/groovy/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.groovy</code></li> <li><code>.gvy</code></li> <li><code>.gradle</code></li> <li><code>.nf</code></li> </ul> </li> </ul> <ul> <li>File names:<ul> <li><code>Jenkinsfile</code></li> </ul> </li> </ul>"},{"location":"descriptors/groovy/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value GROOVY_PRE_COMMANDS List of bash commands to run before the linters None GROOVY_POST_COMMANDS List of bash commands to run after the linters None GROOVY_FILTER_REGEX_INCLUDE Custom regex including filter GROOVY_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/groovy_npm_groovy_lint/","title":"npm-groovy-lint configuration in MegaLinter","text":""},{"location":"descriptors/groovy_npm_groovy_lint/#npm-groovy-lint","title":"npm-groovy-lint","text":""},{"location":"descriptors/groovy_npm_groovy_lint/#npm-groovy-lint-documentation","title":"npm-groovy-lint documentation","text":"<ul> <li>Version in MegaLinter: 15.1.0</li> <li>Visit Official Web Site</li> <li>See How to configure npm-groovy-lint rules<ul> <li>If custom <code>.groovylintrc.json</code> config file isn't found, .groovylintrc.json will be used</li> </ul> </li> <li>See How to disable npm-groovy-lint rules in files</li> <li>See Index of problems detected by npm-groovy-lint</li> </ul>"},{"location":"descriptors/groovy_npm_groovy_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable npm-groovy-lint by adding <code>GROOVY_NPM_GROOVY_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable npm-groovy-lint by adding <code>GROOVY_NPM_GROOVY_LINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>GROOVY_NPM_GROOVY_LINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value GROOVY_NPM_GROOVY_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> GROOVY_NPM_GROOVY_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file GROOVY_NPM_GROOVY_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".groovy\", \".gvy\", \".gradle\", \".nf\"]</code> GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> <code>[\"Jenkinsfile\"]</code> GROOVY_NPM_GROOVY_LINT_PRE_COMMANDS List of bash commands to run before the linter None GROOVY_NPM_GROOVY_LINT_POST_COMMANDS List of bash commands to run after the linter None GROOVY_NPM_GROOVY_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling GROOVY_NPM_GROOVY_LINT and its pre/post commands None GROOVY_NPM_GROOVY_LINT_CONFIG_FILE npm-groovy-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.groovylintrc.json</code> GROOVY_NPM_GROOVY_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> GROOVY_NPM_GROOVY_LINT_CLI_EXECUTABLE Override CLI executable <code>['npm-groovy-lint']</code>"},{"location":"descriptors/groovy_npm_groovy_lint/#ide-integration","title":"IDE Integration","text":"<p>Use npm-groovy-lint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode Groovy Lint"},{"location":"descriptors/groovy_npm_groovy_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/groovy_npm_groovy_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/groovy_npm_groovy_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.groovy</code>, <code>.gvy</code>, <code>.gradle</code>, <code>.nf</code></li> <li>File names (regex): <code>Jenkinsfile</code></li> </ul>"},{"location":"descriptors/groovy_npm_groovy_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>npm-groovy-lint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/groovy_npm_groovy_lint/#example-calls","title":"Example calls","text":"<pre><code>npm-groovy-lint myfile.groovy\n</code></pre> <pre><code>npm-groovy-lint -c .groovylintrc.json \n</code></pre> <pre><code>npm-groovy-lint -c .groovylintrc.json --fix myfile.groovy myfile2.groovy\n</code></pre>"},{"location":"descriptors/groovy_npm_groovy_lint/#help-content","title":"Help content","text":"<pre><code>npm-groovy-lint [options]\n\n  --ext [String]               Specify Groovy file extensions\n  -s, --source String          Source text to lint (if no path/files arguments)\n  --sourcefilepath String      Full path of the file whose content is sent in source argument\n  --parse                      Try to parse the source code with GroovyShell and return errors (use argument --no-parse if you want to deactivate)\n  -c, --config String          Custom path to directory containing GroovyLint config file.\n Default: Found groovylintrc.js/json/yml/package.json config file, or default npm-groovy-lint config if not defined.\nNote: command-line arguments have priority on config file properties - default: /\n  --format                     Format source code\n  --fix                        Automatically fix problems when possible\n  -x, --fixrules String        Option for --fix argument: List of rule identifiers to fix (if not specified, all available fixes will be applied) - default: all\n  -i, --ignorepattern String   Comma-separated list of Ant-style file patterns specifying files that must be ignored. Default: none\n  -r, --rulesets String        RuleSet file(s) to use for linting. If it is a directory, all rulesets will be used. RuleSet file definition: http://codenarc.github.io/CodeNarc/codenarc-creating-ruleset.html. If not specified, npm-groovy-script default one will be used. Can also be a list of rule identifiers with parameters\n  --rulesetsoverridetype String  If list of rules sent in rulesets option, defines if they replace rules defined in .groovylintrc.json, or if they are appended - either: replaceConfig or appendConfig - default: replaceConfig\n  -o, --output String          Output format (txt,json,sarif,html,xml), or path to a file with one of these extensions - default: txt\n  -l, --loglevel String        Log level (error,warning,info) - either: error, warning, or info - default: info\n  --verbose                    More outputs in console, including performed fixes\n  --failon String              Defines the error level where CLI will fail (return code = 1). error,warning,info or none. Every failure level includes the more critical ones. - either: error, warning, info, or none - default: info\n  --failonerror                (Deprecated) Fails if at least one error is found\n  --failonwarning              (Deprecated) Fails if at least one warning is found\n  --failoninfo                 (Deprecated) Fails if at least one error is found\n  --codenarcargs               Use core CodeNarc arguments (all npm-groovy-lint arguments will be ignored). Doc: http://codenarc.github.io/CodeNarc/codenarc-command-line.html\n  --noserver                   For better performances, npm-groovy-lint runs a local server to eep CodeNarc alive instead of loading java/groovy at each call. If you don't want that, send this argument\n  --serverhost String          If use of CodeNarc server, host where is the CodeNarc server (default: localhost) - default: http://localhost\n  --serverport String          If use of CodeNarc server, port of the CodeNarc server (default: 7484) - default: 7484\n  -j, --javaexecutable String  If you do not want to use default java executable to run CodeNarcServer, you can override it - default: java\n  --javaoptions String         Override java options - default: -Xms256m,-Xmx2048m\n  --killserver                 Terminate the CodeNarcServer if running\n  --nolintafter                Do not lint again after format and fix options (useful for client calling Npm Groovy Lint)\n  --returnrules                Return rule descriptions and url if this argument is set\n  --insight                    npm-groovy-lint collects anonymous usage statistics using package https://www.npmjs.com/package/insight. If you want to enable them, use --insight option\n  -h, --help                   Show help (npm-groovy-lint -help OPTIONNAME to see option detail)\n  -v, --version                Show version\n  -p, --path path::String      (DEPRECATED) Directory containing the files to lint (default: current directory) - default: .\n  -f, --files String           (DEPRECATED) Comma-separated list of Ant-style file patterns specifying files that must be included\n</code></pre>"},{"location":"descriptors/groovy_npm_groovy_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>ENV JAVA_HOME_17=/usr/lib/jvm/java-17-openjdk\n# renovate: datasource=npm depName=npm-groovy-lint\nARG NPM_GROOVY_LINT_VERSION=15.1.0\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>openjdk17</li> </ul> </li> <li>NPM packages (node.js):<ul> <li>npm-groovy-lint@15.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/html/","title":"HTML linters in MegaLinter","text":""},{"location":"descriptors/html/#html","title":"HTML","text":""},{"location":"descriptors/html/#linters","title":"Linters","text":"Linter Additional djlintHTML_DJLINT htmlhintHTML_HTMLHINT"},{"location":"descriptors/html/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.html</code></li> <li><code>.htm</code></li> </ul> </li> </ul>"},{"location":"descriptors/html/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value HTML_PRE_COMMANDS List of bash commands to run before the linters None HTML_POST_COMMANDS List of bash commands to run after the linters None HTML_FILTER_REGEX_INCLUDE Custom regex including filter HTML_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/html_djlint/","title":"djlint configuration in MegaLinter","text":"<p>DjLint can analyse multiple formats of HTML:</p> <ul> <li>html (default)</li> <li>django</li> <li>jinja</li> <li>nunjucks (for nunjucks and twig)</li> <li>handlebars (for handlebars and mustache)</li> <li>golang</li> <li>angular</li> </ul> <p>For example, define <code>HTML_DJLINT_ARGUMENTS: [\"--profile\", \"django\"]</code> to select django format</p>"},{"location":"descriptors/html_djlint/#djlint-documentation","title":"djlint documentation","text":"<ul> <li>Version in MegaLinter: 1.36.4</li> <li>Visit Official Web Site</li> <li>See How to configure djlint rules</li> <li>See How to disable djlint rules in files</li> <li>See Index of problems detected by djlint</li> </ul>"},{"location":"descriptors/html_djlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable djlint by adding <code>HTML_DJLINT</code> in ENABLE_LINTERS variable</li> <li>Disable djlint by adding <code>HTML_DJLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value HTML_DJLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> HTML_DJLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> HTML_DJLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file HTML_DJLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file HTML_DJLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> HTML_DJLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".html\", \".htm\"]</code> HTML_DJLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file HTML_DJLINT_PRE_COMMANDS List of bash commands to run before the linter None HTML_DJLINT_POST_COMMANDS List of bash commands to run after the linter None HTML_DJLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling HTML_DJLINT and its pre/post commands None HTML_DJLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> HTML_DJLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> HTML_DJLINT_CLI_EXECUTABLE Override CLI executable <code>['djlint']</code>"},{"location":"descriptors/html_djlint/#ide-integration","title":"IDE Integration","text":"<p>Use djlint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Sublime Text SublimeLinter-contrib-djlint Visit Web Site Visual Studio Code djlint-vscode"},{"location":"descriptors/html_djlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/html_djlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/html_djlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.html</code>, <code>.htm</code></li> </ul>"},{"location":"descriptors/html_djlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>djlint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/html_djlint/#example-calls","title":"Example calls","text":"<pre><code>djlint myfile1.html myfile2.html\n</code></pre>"},{"location":"descriptors/html_djlint/#help-content","title":"Help content","text":"<pre><code>Usage: djlint [OPTIONS] SRC ...\n\n  djLint \u00b7 HTML template linter and formatter.\n\nOptions:\n  --version                       Show the version and exit.\n  -e, --extension TEXT            File extension to check [default: html]\n  -i, --ignore TEXT               Codes to ignore. ex: \"H014,H017\"\n  --reformat                      Reformat the file(s).\n  --check                         Check formatting on the file(s).\n  --indent INTEGER                Indent spacing. [default: 4]\n  --quiet                         Do not print diff when reformatting.\n  --profile TEXT                  Enable defaults by template language. ops:\n                                  django, jinja, nunjucks, handlebars, golang,\n                                  angular, html [default: html]\n  --require-pragma                Only format or lint files that starts with a\n                                  comment with the text 'djlint:on'\n  --lint                          Lint for common issues. [default option]\n  --use-gitignore                 Use .gitignore file to extend excludes.\n  --warn                          Return errors as warnings.\n  --preserve-leading-space        Attempt to preserve leading space on text.\n  --preserve-blank-lines          Attempt to preserve blank lines.\n  --format-css                    Also format contents of &lt;style&gt; tags.\n  --format-js                     Also format contents of &lt;script&gt; tags.\n  --configuration FILE            Path to global configuration file in\n                                  djlint.toml or .djlintrc format\n  --statistics                    Count the number of occurrences of each\n                                  error/warning code.\n  --include TEXT                  Codes to include. ex: \"H014,H017\"\n  --ignore-case                   Do not fix case on known html tags.\n  --ignore-blocks TEXT            Comma list of template blocks to not indent.\n  --blank-line-after-tag TEXT     Add an additional blank line after {% &lt;tag&gt;\n                                  ... %} tag groups.\n  --blank-line-before-tag TEXT    Add an additional blank line before {% &lt;tag&gt;\n                                  ... %} tag groups.\n  --line-break-after-multiline-tag\n                                  Do not condense the content of multi-line\n                                  tags into the line of the last attribute.\n  --custom-blocks TEXT            Indent custom template blocks. For example\n                                  {% toc %}...{% endtoc %}\n  --custom-html TEXT              Indent custom HTML tags. For example &lt;mjml&gt;\n  --exclude TEXT                  Override the default exclude paths.\n  --extend-exclude TEXT           Add additional paths to the default exclude.\n  --linter-output-format TEXT     Customize order of linter output message.\n  --max-line-length INTEGER       Max line length. [default: 120]\n  --max-attribute-length INTEGER  Max attribute length. [default: 70]\n  --format-attribute-template-tags\n                                  Attempt to format template syntax inside of\n                                  tag attributes.\n  --per-file-ignores &lt;TEXT TEXT&gt;...\n                                  Ignore linter rules on a per-file basis.\n  --indent-css INTEGER            Set CSS indent level.\n  --indent-js INTEGER             Set JS indent level.\n  --close-void-tags               Add closing mark on known void tags. Ex:\n                                  &lt;img&gt; becomse &lt;img /&gt;\n  --no-line-after-yaml            Do not add a blank line after yaml front\n                                  matter.\n  --no-function-formatting        Do not attempt to format function contents.\n  --no-set-formatting             Do not attempt to format set contents.\n  --max-blank-lines INTEGER       Consolidate blank lines down to x lines.\n                                  [default: 0]\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"descriptors/html_djlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=djlint\nARG PIP_DJLINT_VERSION=1.36.4\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>djlint==1.36.4</li> </ul> </li> </ul>"},{"location":"descriptors/html_htmlhint/","title":"htmlhint configuration in MegaLinter","text":""},{"location":"descriptors/html_htmlhint/#htmlhint","title":"htmlhint","text":""},{"location":"descriptors/html_htmlhint/#htmlhint-documentation","title":"htmlhint documentation","text":"<ul> <li>Version in MegaLinter: 1.1.4</li> <li>Visit Official Web Site</li> <li>See How to configure htmlhint rules<ul> <li>If custom <code>.htmlhintrc</code> config file isn't found, .htmlhintrc will be used</li> </ul> </li> <li>See How to disable htmlhint rules in files</li> <li>See Index of problems detected by htmlhint</li> </ul>"},{"location":"descriptors/html_htmlhint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable htmlhint by adding <code>HTML_HTMLHINT</code> in ENABLE_LINTERS variable</li> <li>Disable htmlhint by adding <code>HTML_HTMLHINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value HTML_HTMLHINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> HTML_HTMLHINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> HTML_HTMLHINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file HTML_HTMLHINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file HTML_HTMLHINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> HTML_HTMLHINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".html\", \".htm\"]</code> HTML_HTMLHINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file HTML_HTMLHINT_PRE_COMMANDS List of bash commands to run before the linter None HTML_HTMLHINT_POST_COMMANDS List of bash commands to run after the linter None HTML_HTMLHINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling HTML_HTMLHINT and its pre/post commands None HTML_HTMLHINT_CONFIG_FILE htmlhint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.htmlhintrc</code> HTML_HTMLHINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules HTML_HTMLHINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> HTML_HTMLHINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> HTML_HTMLHINT_CLI_EXECUTABLE Override CLI executable <code>['htmlhint']</code>"},{"location":"descriptors/html_htmlhint/#ide-integration","title":"IDE Integration","text":"<p>Use htmlhint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom atom-htmlhint Visit Web Site Brackets brackets-htmlhint Visit Web Site Sublime Text SublimeLinter-contrib-htmlhint Visit Web Site Visual Studio Code vscode-htmlhint"},{"location":"descriptors/html_htmlhint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/html_htmlhint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/html_htmlhint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.html</code>, <code>.htm</code></li> </ul>"},{"location":"descriptors/html_htmlhint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>htmlhint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/html_htmlhint/#example-calls","title":"Example calls","text":"<pre><code>htmlhint myfile.html\n</code></pre> <pre><code>htmlhint --config .htmlhintrc myfile.html\n</code></pre>"},{"location":"descriptors/html_htmlhint/#help-content","title":"Help content","text":"<pre><code>Usage: htmlhint &lt;file|folder|pattern|stdin|url ...&gt; [options]\n\nOptions:\n  -V, --version                                                    output the version number\n  -l, --list                                                       show all of the rules available\n  -c, --config &lt;file&gt;                                              custom configuration file\n  -r, --rules &lt;ruleid, ruleid=value ...&gt;                           set all of the rules available\n  -R, --rulesdir &lt;file|folder&gt;                                     load custom rules from file or folder\n  -f, --format &lt;checkstyle|compact|html|json|junit|markdown|unix&gt;  output messages as custom format\n  -i, --ignore &lt;pattern, pattern ...&gt;                              add pattern to exclude matches\n  --nocolor                                                        disable color\n  --warn                                                           Warn only, exit with 0\n  -h, --help                                                       display help for command\n  Examples:\n\n    htmlhint\n    htmlhint www\n    htmlhint www/test.html\n    htmlhint www/**/*.xhtml\n    htmlhint www/**/*.{htm,html}\n    htmlhint http://www.alibaba.com/\n    cat test.html | htmlhint stdin\n    htmlhint --list\n    htmlhint --rules tag-pair,id-class-value=underline test.html\n    htmlhint --config .htmlhintrc test.html\n    htmlhint --ignore **/build/**,**/test/**\n    htmlhint --rulesdir ./rules/\n\n</code></pre>"},{"location":"descriptors/html_htmlhint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=htmlhint\nARG NPM_HTMLHINT_VERSION=1.1.4\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>htmlhint@1.1.4</li> </ul> </li> </ul>"},{"location":"descriptors/java/","title":"JAVA linters in MegaLinter","text":""},{"location":"descriptors/java/#java","title":"JAVA","text":""},{"location":"descriptors/java/#linters","title":"Linters","text":"Linter Additional checkstyleJAVA_CHECKSTYLE pmdJAVA_PMD"},{"location":"descriptors/java/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.java</code></li> </ul> </li> </ul>"},{"location":"descriptors/java/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value JAVA_PRE_COMMANDS List of bash commands to run before the linters None JAVA_POST_COMMANDS List of bash commands to run after the linters None JAVA_FILTER_REGEX_INCLUDE Custom regex including filter JAVA_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/java/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/java/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>openjdk21</li> </ul> </li> </ul>"},{"location":"descriptors/java_checkstyle/","title":"checkstyle configuration in MegaLinter","text":""},{"location":"descriptors/java_checkstyle/#checkstyle-documentation","title":"checkstyle documentation","text":"<ul> <li>Version in MegaLinter: 10.23.1</li> <li>Visit Official Web Site</li> <li>See How to configure checkstyle rules<ul> <li>If custom <code>sun_checks.xml</code> config file isn't found, sun_checks.xml will be used</li> </ul> </li> <li>See How to disable checkstyle rules in files</li> <li>See Index of problems detected by checkstyle</li> </ul>"},{"location":"descriptors/java_checkstyle/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable checkstyle by adding <code>JAVA_CHECKSTYLE</code> in ENABLE_LINTERS variable</li> <li>Disable checkstyle by adding <code>JAVA_CHECKSTYLE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value JAVA_CHECKSTYLE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JAVA_CHECKSTYLE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JAVA_CHECKSTYLE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JAVA_CHECKSTYLE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".java\"]</code> JAVA_CHECKSTYLE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JAVA_CHECKSTYLE_PRE_COMMANDS List of bash commands to run before the linter None JAVA_CHECKSTYLE_POST_COMMANDS List of bash commands to run after the linter None JAVA_CHECKSTYLE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JAVA_CHECKSTYLE and its pre/post commands None JAVA_CHECKSTYLE_CONFIG_FILE checkstyle configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>sun_checks.xml</code> JAVA_CHECKSTYLE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVA_CHECKSTYLE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JAVA_CHECKSTYLE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JAVA_CHECKSTYLE_CLI_EXECUTABLE Override CLI executable <code>['java']</code>"},{"location":"descriptors/java_checkstyle/#ide-integration","title":"IDE Integration","text":"<p>Use checkstyle in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Eclipse eclipse-cs Visit Web Site IDEA checkstyle-idea Visual Studio Code vscode-checkstyle"},{"location":"descriptors/java_checkstyle/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 java Optimized for JAVA based projects 53"},{"location":"descriptors/java_checkstyle/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/java_checkstyle/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.java</code></li> </ul>"},{"location":"descriptors/java_checkstyle/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>checkstyle is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/java_checkstyle/#example-calls","title":"Example calls","text":"<pre><code>java -jar /usr/bin/checkstyle myfile.java\n</code></pre> <pre><code>java -jar /usr/bin/checkstyle -c sun_checks.xml myfile.java\n</code></pre>"},{"location":"descriptors/java_checkstyle/#help-content","title":"Help content","text":"<pre><code>Usage: java [options] &lt;mainclass&gt; [args...]\n           (to execute a class)\n   or  java [options] -jar &lt;jarfile&gt; [args...]\n           (to execute a jar file)\n   or  java [options] -m &lt;module&gt;[/&lt;mainclass&gt;] [args...]\n       java [options] --module &lt;module&gt;[/&lt;mainclass&gt;] [args...]\n           (to execute the main class in a module)\n   or  java [options] &lt;sourcefile&gt; [args]\n           (to execute a single source-file program)\n\n Arguments following the main class, source file, -jar &lt;jarfile&gt;,\n -m or --module &lt;module&gt;/&lt;mainclass&gt; are passed as the arguments to\n main class.\n\n where options include:\n\n    -cp &lt;class search path of directories and zip/jar files&gt;\n    -classpath &lt;class search path of directories and zip/jar files&gt;\n    --class-path &lt;class search path of directories and zip/jar files&gt;\n                  A : separated list of directories, JAR archives,\n                  and ZIP archives to search for class files.\n    -p &lt;module path&gt;\n    --module-path &lt;module path&gt;...\n                  A : separated list of elements, each element is a file path\n                  to a module or a directory containing modules. Each module is either\n                  a modular JAR or an exploded-module directory.\n    --upgrade-module-path &lt;module path&gt;...\n                  A : separated list of elements, each element is a file path\n                  to a module or a directory containing modules to replace\n                  upgradeable modules in the runtime image. Each module is either\n                  a modular JAR or an exploded-module directory.\n    --add-modules &lt;module name&gt;[,&lt;module name&gt;...]\n                  root modules to resolve in addition to the initial module.\n                  &lt;module name&gt; can also be ALL-DEFAULT, ALL-SYSTEM,\n                  ALL-MODULE-PATH.\n    --enable-native-access &lt;module name&gt;[,&lt;module name&gt;...]\n                  modules that are permitted to perform restricted native operations.\n                  &lt;module name&gt; can also be ALL-UNNAMED.\n    --list-modules\n                  list observable modules and exit\n    -d &lt;module name&gt;\n    --describe-module &lt;module name&gt;\n                  describe a module and exit\n    --dry-run     create VM and load main class but do not execute main method.\n                  The --dry-run option may be useful for validating the\n                  command-line options such as the module system configuration.\n    --validate-modules\n                  validate all modules and exit\n                  The --validate-modules option may be useful for finding\n                  conflicts and other errors with modules on the module path.\n    -D&lt;name&gt;=&lt;value&gt;\n                  set a system property\n    -verbose:[class|module|gc|jni]\n                  enable verbose output for the given subsystem\n    -version      print product version to the error stream and exit\n    --version     print product version to the output stream and exit\n    -showversion  print product version to the error stream and continue\n    --show-version\n                  print product version to the output stream and continue\n    --show-module-resolution\n                  show module resolution output during startup\n    -? -h -help\n                  print this help message to the error stream\n    --help        print this help message to the output stream\n    -X            print help on extra options to the error stream\n    --help-extra  print help on extra options to the output stream\n    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]\n    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]\n                  enable assertions with specified granularity\n    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]\n    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]\n                  disable assertions with specified granularity\n    -esa | -enablesystemassertions\n                  enable system assertions\n    -dsa | -disablesystemassertions\n                  disable system assertions\n    -agentlib:&lt;libname&gt;[=&lt;options&gt;]\n                  load native agent library &lt;libname&gt;, e.g. -agentlib:jdwp\n                  see also -agentlib:jdwp=help\n    -agentpath:&lt;pathname&gt;[=&lt;options&gt;]\n                  load native agent library by full pathname\n    -javaagent:&lt;jarpath&gt;[=&lt;options&gt;]\n                  load Java programming language agent, see java.lang.instrument\n    -splash:&lt;imagepath&gt;\n                  show splash screen with specified image\n                  HiDPI scaled images are automatically supported and used\n                  if available. The unscaled image filename, e.g. image.ext,\n                  should always be passed as the argument to the -splash option.\n                  The most appropriate scaled image provided will be picked up\n                  automatically.\n                  See the SplashScreen API documentation for more information\n    @argument files\n                  one or more argument files containing options\n    --disable-@files\n                  prevent further argument file expansion\n    --enable-preview\n                  allow classes to depend on preview features of this release\nTo specify an argument for a long option, you can use --&lt;name&gt;=&lt;value&gt; or\n--&lt;name&gt; &lt;value&gt;.\n\n</code></pre>"},{"location":"descriptors/java_checkstyle/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n# Linter install\nRUN CHECKSTYLE_LATEST=$(curl -s \\\n    -H \"Accept: application/vnd.github+json\" \\\n    -H \"Authorization: Bearer $(cat /run/secrets/GITHUB_TOKEN)\" \\\n    https://api.github.com/repos/checkstyle/checkstyle/releases/latest \\\n        | grep browser_download_url \\\n        | grep \".jar\" \\\n        | cut -d '\"' -f 4) \\\n    &amp;&amp; curl --retry 5 --retry-delay 5 -sSL $CHECKSTYLE_LATEST \\\n        --output /usr/bin/checkstyle\n\n</code></pre>"},{"location":"descriptors/java_pmd/","title":"pmd configuration in MegaLinter","text":""},{"location":"descriptors/java_pmd/#pmd","title":"pmd","text":""},{"location":"descriptors/java_pmd/#pmd-documentation","title":"pmd documentation","text":"<ul> <li>Version in MegaLinter: 7.13.0</li> <li>Visit Official Web Site</li> <li>See How to configure pmd rules<ul> <li>If custom <code>java-pmd-ruleset.xml</code> config file isn't found, java-pmd-ruleset.xml will be used</li> </ul> </li> <li>See How to disable pmd rules in files</li> <li>See Index of problems detected by pmd</li> </ul>"},{"location":"descriptors/java_pmd/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable pmd by adding <code>JAVA_PMD</code> in ENABLE_LINTERS variable</li> <li>Disable pmd by adding <code>JAVA_PMD</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value JAVA_PMD_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JAVA_PMD_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JAVA_PMD_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JAVA_PMD_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JAVA_PMD_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JAVA_PMD_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".java\"]</code> JAVA_PMD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JAVA_PMD_PRE_COMMANDS List of bash commands to run before the linter None JAVA_PMD_POST_COMMANDS List of bash commands to run after the linter None JAVA_PMD_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JAVA_PMD and its pre/post commands None JAVA_PMD_CONFIG_FILE pmd configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>java-pmd-ruleset.xml</code> JAVA_PMD_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVA_PMD_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JAVA_PMD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JAVA_PMD_CLI_EXECUTABLE Override CLI executable <code>['/usr/bin/pmd/bin/pmd']</code>"},{"location":"descriptors/java_pmd/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 java Optimized for JAVA based projects 53"},{"location":"descriptors/java_pmd/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/java_pmd/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.java</code></li> </ul>"},{"location":"descriptors/java_pmd/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>pmd is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/java_pmd/#example-calls","title":"Example calls","text":"<pre><code>pmd --rulesets java-pmd-ruleset.xml --dir myfile.java\n</code></pre> <pre><code>pmd --rulesets java-pmd-ruleset.xml --file-list /tmp/list-off-files-generated-by-megalinter.txt\n</code></pre> <pre><code>pmd --rulesets java-pmd-ruleset.xml --dir /path/to/sources\n</code></pre>"},{"location":"descriptors/java_pmd/#help-content","title":"Help content","text":"<pre><code>Usage: pmd [-hV] [COMMAND]\n  -h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\nCommands:\n  check                The PMD standard source code analyzer\n  cpd                  Copy/Paste Detector - find duplicate code\n  designer             The PMD visual rule designer\n  cpd-gui              GUI for the Copy/Paste Detector\n                         Warning: May not support the full CPD feature set\n  ast-dump             Dumps the AST of parsing source code\n  generate-completion  Generate bash/zsh completion script for pmd.\nExit Codes:\n  0   Successful analysis, no violations found\n  1   An unexpected error occurred during execution\n  2   Usage error, please refer to the command help\n  4   Successful analysis, at least 1 violation found\n</code></pre>"},{"location":"descriptors/java_pmd/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n# Linter install\n# renovate: datasource=github-tags depName=pmd/pmd extractVersion=^pmd_releases/(?&lt;version&gt;.*)$\nARG PMD_VERSION=7.13.0\n\nRUN wget --quiet https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-dist-${PMD_VERSION}-bin.zip &amp;&amp; \\\n    unzip pmd-dist-${PMD_VERSION}-bin.zip || echo \"Error unzipping\" &amp;&amp; \\\n    rm pmd-dist-${PMD_VERSION}-bin.zip || echo \"Error rm\" &amp;&amp; \\\n    mv pmd-bin-${PMD_VERSION} /usr/bin/pmd || echo \"Error mv\" &amp;&amp; \\\n    chmod +x /usr/bin/pmd/bin/pmd || echo \"Error chmod\"\n\n</code></pre>"},{"location":"descriptors/javascript/","title":"JAVASCRIPT linters in MegaLinter","text":""},{"location":"descriptors/javascript/#javascript","title":"JAVASCRIPT","text":""},{"location":"descriptors/javascript/#linters","title":"Linters","text":"Linter Additional eslintJAVASCRIPT_ES standardJAVASCRIPT_STANDARD prettierJAVASCRIPT_PRETTIER"},{"location":"descriptors/javascript/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.js</code></li> </ul> </li> </ul>"},{"location":"descriptors/javascript/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value JAVASCRIPT_PRE_COMMANDS List of bash commands to run before the linters None JAVASCRIPT_POST_COMMANDS List of bash commands to run after the linters None JAVASCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter JAVASCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/javascript_eslint/","title":"eslint configuration in MegaLinter","text":"<p>eslint requires a custom configuration file applicable to your project.</p> <p>You can create it by typing <code>npx eslint --init</code> in the root of your repository</p>"},{"location":"descriptors/javascript_eslint/#eslint-documentation","title":"eslint documentation","text":"<ul> <li>Version in MegaLinter: 8.57.1</li> <li>Visit Official Web Site</li> <li>See How to configure eslint rules</li> <li>See How to disable eslint rules in files</li> <li>See How to ignore files and directories with eslint<ul> <li>You can define a <code>.eslintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by eslint</li> </ul>"},{"location":"descriptors/javascript_eslint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable eslint by adding <code>JAVASCRIPT_ES</code> in ENABLE_LINTERS variable</li> <li>Disable eslint by adding <code>JAVASCRIPT_ES</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>JAVASCRIPT_ES</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value JAVASCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JAVASCRIPT_ES_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JAVASCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JAVASCRIPT_ES_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JAVASCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".js\", \".vue\"]</code> JAVASCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JAVASCRIPT_ES_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_ES_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_ES_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JAVASCRIPT_ES and its pre/post commands None JAVASCRIPT_ES_CONFIG_FILE eslint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.eslintrc.json</code> JAVASCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVASCRIPT_ES_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JAVASCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JAVASCRIPT_ES_CLI_EXECUTABLE Override CLI executable <code>['eslint']</code>"},{"location":"descriptors/javascript_eslint/#ide-integration","title":"IDE Integration","text":"<p>Use eslint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint"},{"location":"descriptors/javascript_eslint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/javascript_eslint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/javascript_eslint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig</code></li> <li>File extensions: <code>.js</code>, <code>.vue</code></li> </ul>"},{"location":"descriptors/javascript_eslint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>eslint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/javascript_eslint/#example-calls","title":"Example calls","text":"<pre><code>eslint myfile.js\n</code></pre> <pre><code>eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.js\n</code></pre> <pre><code>eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.js\n</code></pre>"},{"location":"descriptors/javascript_eslint/#help-content","title":"Help content","text":"<pre><code>eslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-eslintrc                    Disable use of configuration from .eslintrc.*\n  -c, --config path::String        Use this configuration, overriding .eslintrc.* config options if present\n  --env [String]                   Specify environments\n  --ext [String]                   Specify JavaScript file extensions\n  --global [String]                Define global variables\n  --parser String                  Specify the parser to be used\n  --parser-options Object          Specify parser options\n  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\nSpecify Rules and Plugins:\n  --plugin [String]                Specify plugins\n  --rule Object                    Specify rules\n  --rulesdir [path::String]        Load additional rules from this directory. Deprecated: Use rules from plugins\n\nFix Problems:\n  --fix                            Automatically fix problems\n  --fix-dry-run                    Automatically fix problems without saving the changes to the file system\n  --fix-type Array                 Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --ignore-path path::String       Specify path of ignore file\n  --no-ignore                      Disable use of ignore files and patterns\n  --ignore-pattern [String]        Pattern of files to ignore (in addition to those in .eslintignore)\n\nUse stdin:\n  --stdin                          Lint code provided on &lt;STDIN&gt; - default: false\n  --stdin-filename String          Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                          Report errors only - default: false\n  --max-warnings Int               Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String   Specify file to write report to\n  -f, --format String              Use a specific output format - default: stylish\n  --color, --no-color              Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config               Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and eslint-enable directives - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                          Only check changed files - default: false\n  --cache-file path::String        Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String    Path to the cache file or directory\n  --cache-strategy String          Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata\n\nMiscellaneous:\n  --init                           Run config initialization wizard - default: false\n  --env-info                       Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error            Exit with exit code 2 in case of fatal error - default: false\n  --debug                          Output debugging information\n  -h, --help                       Show help\n  -v, --version                    Output the version number\n  --print-config path::String      Print the configuration for the given file\n</code></pre>"},{"location":"descriptors/javascript_eslint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=eslint\nARG NPM_ESLINT_VERSION=8.57.1\n# renovate: datasource=npm depName=eslint-config-airbnb\nARG NPM_ESLINT_CONFIG_AIRBNB_VERSION=19.0.4\n# renovate: datasource=npm depName=eslint-config-prettier\nARG NPM_ESLINT_CONFIG_PRETTIER_VERSION=10.1.2\n# renovate: datasource=npm depName=eslint-config-standard\nARG NPM_ESLINT_CONFIG_STANDARD_VERSION=17.1.0\n# renovate: datasource=npm depName=eslint-plugin-import\nARG NPM_ESLINT_PLUGIN_IMPORT_VERSION=2.31.0\n# renovate: datasource=npm depName=eslint-plugin-jest\nARG NPM_ESLINT_PLUGIN_JEST_VERSION=28.11.0\n# renovate: datasource=npm depName=eslint-plugin-n\nARG NPM_ESLINT_PLUGIN_N_VERSION=16.6.2\n# renovate: datasource=npm depName=eslint-plugin-prettier\nARG NPM_ESLINT_PLUGIN_PRETTIER_VERSION=5.3.1\n# renovate: datasource=npm depName=eslint-plugin-promise\nARG NPM_ESLINT_PLUGIN_PROMISE_VERSION=6.6.0\n# renovate: datasource=npm depName=eslint-plugin-vue\nARG NPM_ESLINT_PLUGIN_VUE_VERSION=10.1.0\n# renovate: datasource=npm depName=@babel/core\nARG NPM_BABEL_CORE_VERSION=7.27.1\n# renovate: datasource=npm depName=@babel/eslint-parser\nARG NPM_BABEL_ESLINT_PARSER_VERSION=7.27.1\n# renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif\nARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>eslint@8.57.1</li> <li>eslint-config-airbnb@19.0.4</li> <li>eslint-config-prettier@10.1.2</li> <li>eslint-config-standard@17.1.0</li> <li>eslint-plugin-import@2.31.0</li> <li>eslint-plugin-jest@28.11.0</li> <li>eslint-plugin-n@16.6.2</li> <li>eslint-plugin-prettier@5.3.1</li> <li>eslint-plugin-promise@6.6.0</li> <li>eslint-plugin-vue@10.1.0</li> <li>@babel/core@7.27.1</li> <li>@babel/eslint-parser@7.27.1</li> <li>@microsoft/eslint-formatter-sarif@3.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/javascript_prettier/","title":"prettier configuration in MegaLinter","text":""},{"location":"descriptors/javascript_prettier/#prettier-documentation","title":"prettier documentation","text":"<ul> <li>Version in MegaLinter: 3.5.3</li> <li>Visit Official Web Site</li> <li>See How to configure prettier rules</li> <li>See How to disable prettier rules in files</li> <li>See Index of problems detected by prettier</li> </ul>"},{"location":"descriptors/javascript_prettier/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable prettier by adding <code>JAVASCRIPT_PRETTIER</code> in ENABLE_LINTERS variable</li> <li>Disable prettier by adding <code>JAVASCRIPT_PRETTIER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>JAVASCRIPT_PRETTIER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For prettier to be active, JAVASCRIPT_DEFAULT_STYLE must be <code>prettier</code> <code>standard</code> JAVASCRIPT_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JAVASCRIPT_PRETTIER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JAVASCRIPT_PRETTIER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JAVASCRIPT_PRETTIER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".js\"]</code> JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JAVASCRIPT_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_PRETTIER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JAVASCRIPT_PRETTIER and its pre/post commands None JAVASCRIPT_PRETTIER_CONFIG_FILE prettier configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.prettierrc.json</code> JAVASCRIPT_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVASCRIPT_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> JAVASCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JAVASCRIPT_PRETTIER_CLI_EXECUTABLE Override CLI executable <code>['prettier']</code>"},{"location":"descriptors/javascript_prettier/#ide-integration","title":"IDE Integration","text":"<p>Use prettier in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA Prettier Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode"},{"location":"descriptors/javascript_prettier/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/javascript_prettier/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/javascript_prettier/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.js</code></li> </ul>"},{"location":"descriptors/javascript_prettier/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>prettier is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/javascript_prettier/#example-calls","title":"Example calls","text":"<pre><code>prettier --check myfile.js\n</code></pre> <pre><code>prettier --config .prettierrc.json --check myfile.js\n</code></pre> <pre><code>prettier --config .prettierrc.json --write myfile.js\n</code></pre>"},{"location":"descriptors/javascript_prettier/#help-content","title":"Help content","text":"<pre><code>Usage: prettier [options] [file/dir/glob ...]\n\nBy default, output is written to stdout.\nStdin is read if it is piped to Prettier and no files are given.\n\nOutput options:\n\n  -c, --check              Check if the given files are formatted, print a human-friendly summary\n                           message and paths to unformatted files (see also --list-different).\n  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).\n  -w, --write              Edit files in-place. (Beware!)\n\nFormat options:\n\n  --arrow-parens &lt;always|avoid&gt;\n                           Include parentheses around a sole arrow function parameter.\n                           Defaults to always.\n  --bracket-same-line      Put &gt; of opening tags on the last line instead of on a new line.\n                           Defaults to false.\n  --no-bracket-spacing     Do not print spaces between brackets.\n  --embedded-language-formatting &lt;auto|off&gt;\n                           Control how Prettier formats quoted code embedded in the file.\n                           Defaults to auto.\n  --end-of-line &lt;lf|crlf|cr|auto&gt;\n                           Which end of line characters to apply.\n                           Defaults to lf.\n  --experimental-operator-position &lt;start|end&gt;\n                           Where to print operators when binary expressions wrap lines.\n                           Defaults to end.\n  --no-experimental-ternaries\n                           Default behavior of ternaries; keep question marks on the same line as the consequent.\n  --html-whitespace-sensitivity &lt;css|strict|ignore&gt;\n                           How to handle whitespaces in HTML.\n                           Defaults to css.\n  --jsx-single-quote       Use single quotes in JSX.\n                           Defaults to false.\n  --object-wrap &lt;preserve|collapse&gt;\n                           How to wrap object literals.\n                           Defaults to preserve.\n  --parser &lt;flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|jsonc|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc&gt;\n                           Which parser to use.\n  --print-width &lt;int&gt;      The line length where Prettier will try wrap.\n                           Defaults to 80.\n  --prose-wrap &lt;always|never|preserve&gt;\n                           How to wrap prose.\n                           Defaults to preserve.\n  --quote-props &lt;as-needed|consistent|preserve&gt;\n                           Change when properties in objects are quoted.\n                           Defaults to as-needed.\n  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.\n  --single-attribute-per-line\n                           Enforce single attribute per line in HTML, Vue and JSX.\n                           Defaults to false.\n  --single-quote           Use single quotes instead of double quotes.\n                           Defaults to false.\n  --tab-width &lt;int&gt;        Number of spaces per indentation level.\n                           Defaults to 2.\n  --trailing-comma &lt;all|es5|none&gt;\n                           Print trailing commas wherever possible when multi-line.\n                           Defaults to all.\n  --use-tabs               Indent with tabs instead of spaces.\n                           Defaults to false.\n  --vue-indent-script-and-style\n                           Indent script and style tags in Vue files.\n                           Defaults to false.\n\nConfig options:\n\n  --config &lt;path&gt;          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).\n  --no-config              Do not look for a configuration file.\n  --config-precedence &lt;cli-override|file-override|prefer-file&gt;\n                           Define in which order config files and CLI options should be evaluated.\n                           Defaults to cli-override.\n  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.\n  --find-config-path &lt;path&gt;\n                           Find and print the path to a configuration file for the given input file.\n  --ignore-path &lt;path&gt;     Path to a file with patterns describing files to ignore.\n                           Multiple values are accepted.\n                           Defaults to [.gitignore, .prettierignore].\n  --plugin &lt;path&gt;          Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\n                           Defaults to [].\n  --with-node-modules      Process files inside 'node_modules' directory.\n\nEditor options:\n\n  --cursor-offset &lt;int&gt;    Print (to stderr) where a cursor at the given position would move to after formatting.\n                           Defaults to -1.\n  --range-end &lt;int&gt;        Format code ending at a given character offset (exclusive).\n                           The range will extend forwards to the end of the selected statement.\n                           Defaults to Infinity.\n  --range-start &lt;int&gt;      Format code starting at a given character offset.\n                           The range will extend backwards to the start of the first line containing the selected statement.\n                           Defaults to 0.\n\nOther options:\n\n  --cache                  Only format changed files. Cannot use with --stdin-filepath.\n                           Defaults to false.\n  --cache-location &lt;path&gt;  Path to the cache file.\n  --cache-strategy &lt;metadata|content&gt;\n                           Strategy for the cache to use for detecting changed files.\n  --no-color               Do not colorize error messages.\n  --no-error-on-unmatched-pattern\n                           Prevent errors when pattern is unmatched.\n  --file-info &lt;path&gt;       Extract the following info (as JSON) for a given file path. Reported fields:\n                           * ignored (boolean) - true if file path is filtered by --ignore-path\n                           * inferredParser (string | null) - name of parser inferred from file path\n  -h, --help &lt;flag&gt;        Show CLI usage, or details about the given flag.\n                           Example: --help write\n  -u, --ignore-unknown     Ignore unknown files.\n  --insert-pragma          Insert @format pragma into file's first docblock comment.\n                           Defaults to false.\n  --log-level &lt;silent|error|warn|log|debug&gt;\n                           What level of logs to report.\n                           Defaults to log.\n  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment\n                           in order for it to be formatted.\n                           Defaults to false.\n  --stdin-filepath &lt;path&gt;  Path to the file to pretend that stdin comes from.\n  --support-info           Print support information as JSON.\n  -v, --version            Print Prettier version.\n\n\n</code></pre>"},{"location":"descriptors/javascript_prettier/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=prettier\nARG NPM_PRETTIER_VERSION=3.5.3\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>prettier@3.5.3</li> </ul> </li> </ul>"},{"location":"descriptors/javascript_standard/","title":"standard configuration in MegaLinter","text":""},{"location":"descriptors/javascript_standard/#standard-documentation","title":"standard documentation","text":"<ul> <li>Version in MegaLinter: 17.1.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by standard</li> </ul>"},{"location":"descriptors/javascript_standard/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable standard by adding <code>JAVASCRIPT_STANDARD</code> in ENABLE_LINTERS variable</li> <li>Disable standard by adding <code>JAVASCRIPT_STANDARD</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>JAVASCRIPT_STANDARD</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For standard to be active, JAVASCRIPT_DEFAULT_STYLE must be <code>standard</code> <code>standard</code> JAVASCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JAVASCRIPT_STANDARD_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JAVASCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JAVASCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".js\"]</code> JAVASCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JAVASCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_STANDARD_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JAVASCRIPT_STANDARD and its pre/post commands None JAVASCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JAVASCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JAVASCRIPT_STANDARD_CLI_EXECUTABLE Override CLI executable <code>['standard']</code>"},{"location":"descriptors/javascript_standard/#ide-integration","title":"IDE Integration","text":"<p>Use standard in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-js-standard Visit Web Site Atom linter-js-standard-engine Visit Web Site Atom standard-formatter Visit Web Site Brackets brackets-standard Visit Web Site IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code vscode-standard"},{"location":"descriptors/javascript_standard/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/javascript_standard/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/javascript_standard/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.js</code></li> </ul>"},{"location":"descriptors/javascript_standard/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>standard is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/javascript_standard/#example-calls","title":"Example calls","text":"<pre><code>standard myfile.js\n</code></pre> <pre><code>standard --fix myfile.js\n</code></pre>"},{"location":"descriptors/javascript_standard/#help-content","title":"Help content","text":"<pre><code>standard - Use JavaScript Standard Style (https://standardjs.com)\n\nUsage:\n    standard &lt;flags&gt; [FILES...]\n\n    If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs)\n    in the current working directory are checked, recursively.\n\n    Certain paths (node_modules/, coverage/, vendor/, *.min.js, and\n    files/folders that begin with '.' like .git/) are automatically ignored.\n\n    Paths in a project's root .gitignore file are also automatically ignored.\n\nFlags:\n        --fix       Automatically fix problems\n        --version   Show current version\n    -h, --help      Show usage information\n\nFlags (advanced):\n        --stdin     Read file text from stdin\n        --ext       Specify JavaScript file extensions\n        --ignore    Specify files to ignore\n        --global    Declare global variable\n        --plugin    Use custom eslint plugin\n        --env       Use custom eslint environment\n        --parser    Use custom js parser (e.g. babel-eslint)\n\n</code></pre>"},{"location":"descriptors/javascript_standard/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=standard\nARG NPM_STANDARD_VERSION=17.1.2\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>standard@17.1.2</li> </ul> </li> </ul>"},{"location":"descriptors/json/","title":"JSON linters in MegaLinter","text":""},{"location":"descriptors/json/#json","title":"JSON","text":""},{"location":"descriptors/json/#linters","title":"Linters","text":"Linter Additional jsonlintJSON_JSONLINT eslint-plugin-jsoncJSON_ESLINT_PLUGIN_JSONC v8rJSON_V8R prettierJSON_PRETTIER npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT"},{"location":"descriptors/json/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.json</code></li> </ul> </li> </ul>"},{"location":"descriptors/json/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value JSON_PRE_COMMANDS List of bash commands to run before the linters None JSON_POST_COMMANDS List of bash commands to run after the linters None JSON_FILTER_REGEX_INCLUDE Custom regex including filter JSON_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/json_eslint_plugin_jsonc/","title":"eslint-plugin-jsonc configuration in MegaLinter","text":"<p>This linter has been disabled in this version</p> <p>Disabled reason: Bug in eslint-plugin-jsonc: https://github.com/ota-meshi/eslint-plugin-jsonc/issues/328</p> <p>eslint-plugin-jsonc uses eslint to lint json, jsonc and json5 (extended JSON with comments &amp; more).</p> <ul> <li>To override default configuration, create a <code>.eslintrc-json.json</code> custom configuration file applicable to your project</li> <li>If you have <code>.json</code> files with comments in your project, you may disable <code>jsonlint</code> to avoid false positive errors, by adding the following content in your <code>.mega-linter.yml</code> configuration file</li> </ul> <pre><code>DISABLE_LINTERS:\n  - JSON_JSONLINT\n</code></pre> <ul> <li>If you have your own local <code>.eslintrc.json</code> (or <code>.yaml</code> or <code>.js</code> equivalent) config in your project, you must<ul> <li>add <code>JSON_ESLINT_PLUGIN_JSONC_FILE_NAME: .eslintrc.json</code> (or <code>.yaml</code> or <code>.js</code> equivalent) in your <code>.mega-linter.yml</code> config file</li> <li> <p>add <code>overrides</code> property in it</p> <p> See code</p> <p><pre>\n  <code>\n  {\n      \"overrides\": [\n          {\n              \"files\": [\".json\"],\n              \"extends\": [\n                  \"plugin:jsonc/recommended-with-json\"\n              ],\n              \"parser\": \"jsonc-eslint-parser\",\n                  \"parserOptions\": {\n                      \"jsonSyntax\": \"JSON\"\n              }\n          },\n          {\n              \"files\": [\".jsonc\"],\n              \"extends\": [\n                  \"plugin:jsonc/recommended-with-jsonc\"\n              ],\n              \"parser\": \"jsonc-eslint-parser\",\n                  \"parserOptions\": {\n                      \"jsonSyntax\": \"JSONC\"\n              }\n          },\n          {\n              \"files\": [\"*.json5\"],\n              \"extends\": [\n                  \"plugin:jsonc/recommended-with-json5\"\n              ],\n              \"parser\": \"jsonc-eslint-parser\",\n                  \"parserOptions\": {\n                      \"jsonSyntax\": \"JSON5\"\n              }\n          }\n      ]\n  }\n  </code>\n</pre> </p> </li> </ul> </li> </ul>"},{"location":"descriptors/json_eslint_plugin_jsonc/#eslint-plugin-jsonc-documentation","title":"eslint-plugin-jsonc documentation","text":"<ul> <li>Version in MegaLinter: 2.15.1</li> <li>Visit Official Web Site</li> <li>See How to configure eslint-plugin-jsonc rules<ul> <li>If custom <code>.eslintrc-json.json</code> config file isn't found, .eslintrc-json.json will be used</li> </ul> </li> <li>See How to disable eslint-plugin-jsonc rules in files</li> <li>See How to ignore files and directories with eslint-plugin-jsonc<ul> <li>You can define a <code>.eslintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by eslint-plugin-jsonc</li> </ul>"},{"location":"descriptors/json_eslint_plugin_jsonc/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable eslint-plugin-jsonc by adding <code>JSON_ESLINT_PLUGIN_JSONC</code> in ENABLE_LINTERS variable</li> <li>Disable eslint-plugin-jsonc by adding <code>JSON_ESLINT_PLUGIN_JSONC</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>JSON_ESLINT_PLUGIN_JSONC</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JSON_ESLINT_PLUGIN_JSONC_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JSON_ESLINT_PLUGIN_JSONC_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".json\", \".json5\", \".jsonc\"]</code> JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JSON_ESLINT_PLUGIN_JSONC_PRE_COMMANDS List of bash commands to run before the linter None JSON_ESLINT_PLUGIN_JSONC_POST_COMMANDS List of bash commands to run after the linter None JSON_ESLINT_PLUGIN_JSONC_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JSON_ESLINT_PLUGIN_JSONC and its pre/post commands None JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE eslint-plugin-jsonc configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.eslintrc-json.json</code> JSON_ESLINT_PLUGIN_JSONC_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JSON_ESLINT_PLUGIN_JSONC_CLI_EXECUTABLE Override CLI executable <code>['eslint']</code>"},{"location":"descriptors/json_eslint_plugin_jsonc/#ide-integration","title":"IDE Integration","text":"<p>Use eslint-plugin-jsonc in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code vscode-eslint Visit Web Site"},{"location":"descriptors/json_eslint_plugin_jsonc/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/json_eslint_plugin_jsonc/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/json_eslint_plugin_jsonc/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.json</code>, <code>.json5</code>, <code>.jsonc</code></li> </ul>"},{"location":"descriptors/json_eslint_plugin_jsonc/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>eslint-plugin-jsonc is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/json_eslint_plugin_jsonc/#example-calls","title":"Example calls","text":"<pre><code>eslint myfile.json\n</code></pre> <pre><code>eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json\n</code></pre> <pre><code>eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json5\n</code></pre> <pre><code>eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.jsonc\n</code></pre> <pre><code>eslint --fix -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json\n</code></pre>"},{"location":"descriptors/json_eslint_plugin_jsonc/#help-content","title":"Help content","text":"<pre><code>eslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-eslintrc                    Disable use of configuration from .eslintrc.*\n  -c, --config path::String        Use this configuration, overriding .eslintrc.* config options if present\n  --env [String]                   Specify environments\n  --ext [String]                   Specify JavaScript file extensions\n  --global [String]                Define global variables\n  --parser String                  Specify the parser to be used\n  --parser-options Object          Specify parser options\n  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\nSpecify Rules and Plugins:\n  --plugin [String]                Specify plugins\n  --rule Object                    Specify rules\n  --rulesdir [path::String]        Load additional rules from this directory. Deprecated: Use rules from plugins\n\nFix Problems:\n  --fix                            Automatically fix problems\n  --fix-dry-run                    Automatically fix problems without saving the changes to the file system\n  --fix-type Array                 Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --ignore-path path::String       Specify path of ignore file\n  --no-ignore                      Disable use of ignore files and patterns\n  --ignore-pattern [String]        Pattern of files to ignore (in addition to those in .eslintignore)\n\nUse stdin:\n  --stdin                          Lint code provided on &lt;STDIN&gt; - default: false\n  --stdin-filename String          Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                          Report errors only - default: false\n  --max-warnings Int               Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String   Specify file to write report to\n  -f, --format String              Use a specific output format - default: stylish\n  --color, --no-color              Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config               Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and eslint-enable directives - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                          Only check changed files - default: false\n  --cache-file path::String        Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String    Path to the cache file or directory\n  --cache-strategy String          Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata\n\nMiscellaneous:\n  --init                           Run config initialization wizard - default: false\n  --env-info                       Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error            Exit with exit code 2 in case of fatal error - default: false\n  --debug                          Output debugging information\n  -h, --help                       Show help\n  -v, --version                    Output the version number\n  --print-config path::String      Print the configuration for the given file\n</code></pre>"},{"location":"descriptors/json_eslint_plugin_jsonc/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=eslint\nARG NPM_ESLINT_VERSION=8.57.1\n# renovate: datasource=npm depName=eslint-plugin-jsonc\nARG NPM_ESLINT_PLUGIN_JSONC_VERSION=2.20.0\n# renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif\nARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>eslint@8.57.1</li> <li>eslint-plugin-jsonc</li> <li>@microsoft/eslint-formatter-sarif@3.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/json_jsonlint/","title":"jsonlint configuration in MegaLinter","text":""},{"location":"descriptors/json_jsonlint/#jsonlint","title":"jsonlint","text":""},{"location":"descriptors/json_jsonlint/#jsonlint-documentation","title":"jsonlint documentation","text":"<ul> <li>Version in MegaLinter: 16.0.0</li> <li>Visit Official Web Site</li> <li>See How to configure jsonlint rules</li> <li>See Index of problems detected by jsonlint</li> </ul>"},{"location":"descriptors/json_jsonlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable jsonlint by adding <code>JSON_JSONLINT</code> in ENABLE_LINTERS variable</li> <li>Disable jsonlint by adding <code>JSON_JSONLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value JSON_JSONLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JSON_JSONLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JSON_JSONLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JSON_JSONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JSON_JSONLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JSON_JSONLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".json\"]</code> JSON_JSONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JSON_JSONLINT_PRE_COMMANDS List of bash commands to run before the linter None JSON_JSONLINT_POST_COMMANDS List of bash commands to run after the linter None JSON_JSONLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JSON_JSONLINT and its pre/post commands None JSON_JSONLINT_CONFIG_FILE jsonlint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.jsonlintrc</code> JSON_JSONLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_JSONLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JSON_JSONLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JSON_JSONLINT_CLI_EXECUTABLE Override CLI executable <code>['jsonlint']</code>"},{"location":"descriptors/json_jsonlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/json_jsonlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/json_jsonlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.json</code></li> </ul>"},{"location":"descriptors/json_jsonlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>jsonlint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/json_jsonlint/#example-calls","title":"Example calls","text":"<pre><code>jsonlint myfile1.json myfile2.json\n</code></pre>"},{"location":"descriptors/json_jsonlint/#help-content","title":"Help content","text":"<pre><code>JSON/CJSON/JSON5 parser, syntax and schema validator and pretty-printer.\n\nUsage: jsonlint [options] [--] [&lt;file, directory, pattern&gt; ...]\n\nOptions:\n  -f, --config &lt;file&gt;          read options from a custom configuration file\n  -F, --no-config              disable searching for configuration files\n  --ignore-proto-key           ignore occurrences of \"__proto__\" object key\n  --ignore-prototype-keys      ignore all keys from \"Object.prototype\"\n  -s, --sort-keys              sort object keys (not when prettifying)\n  --sort-keys-ignore-case      sort object keys ignoring the letter case\n  --sort-keys-locale &lt;id&gt;      locale identifier to sort object keys with\n                               (or \"default\" for the system default)\n  --sort-keys-case-first &lt;id&gt;  order if only letter case is different\n                               (\"upper\", \"lower\" and \"false\" are allowed)\n  --sort-keys-numeric          sort by numbers recognised in object keys\n  -E, --extensions &lt;ext...&gt;    file extensions to process for directory walk\n                               (default: json, JSON)\n  -i, --in-place               overwrite the input files\n  -j, --diff                   print difference instead of writing the output\n  -k, --check                  check that the input is equal to the output\n  -t, --indent &lt;num|char&gt;      number of spaces or specific characters to use\n                               for indentation or a string with whitespace\n  -c, --compact                compact error display\n  -M, --mode &lt;mode&gt;            set other parsing flags according to the format\n                               of the input data (default: json)\n  -B, --bom                    ignore the leading UTF-8 byte-order mark\n  -C, --comments               recognize and ignore JavaScript-style comments\n  -S, --single-quoted-strings  support single quotes as string delimiters\n  -T, --trailing-commas        ignore trailing commas in objects and arrays\n  -D, --no-duplicate-keys      report duplicate object keys as an error\n  -V, --validate &lt;file...&gt;     JSON Schema file(s) to use for validation\n  -e, --environment &lt;env&gt;      which version of JSON Schema the validation\n                               should use\n  -x, --context &lt;num&gt;          line number used as the diff context\n                               (default: 3)\n  -l, --log-files              print only the parsed file names to stdout\n  -q, --quiet                  do not print the parsed json to stdout\n  -n, --continue               continue with other files if an error occurs\n  -p, --pretty-print           prettify the input instead of stringifying\n                               the parsed object\n  -P, --pretty-print-invalid   force pretty-printing even for invalid input\n  -r, --trailing-newline       ensure a line break at the end of the output\n  -R, --no-trailing-newline    ensure no line break at the end of the output\n  --prune-comments             omit comments from the prettified output\n  --strip-object-keys          strip quotes from object keys if possible\n  --enforce-double-quotes      surrounds all strings with double quotes\n  --enforce-single-quotes      surrounds all strings with single quotes\n  --trim-trailing-commas       omit trailing commas from objects and arrays\n  --succeed-with-no-files      succeed (exit code 0) if no files were found\n  -v, --version                output the version number\n  -h, --help                   display help for command\n\nExamples:\n  $ jsonlint myfile.json\n  $ jsonlint --in-place --pretty-print mydir\n  $ jsonlint --comments --trailing-commas --no-duplicate-keys \\\n      --log-files --compact --continue '**/*.json' '!**/node_modules'\n</code></pre>"},{"location":"descriptors/json_jsonlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=@prantlf/jsonlint\nARG NPM_PRANTLF_JSONLINT_VERSION=16.0.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>@prantlf/jsonlint@16.0.0</li> </ul> </li> </ul>"},{"location":"descriptors/json_npm_package_json_lint/","title":"npm-package-json-lint configuration in MegaLinter","text":""},{"location":"descriptors/json_npm_package_json_lint/#npm-package-json-lint","title":"npm-package-json-lint","text":""},{"location":"descriptors/json_npm_package_json_lint/#npm-package-json-lint-documentation","title":"npm-package-json-lint documentation","text":"<ul> <li>Version in MegaLinter: 8.0.0</li> <li>Visit Official Web Site</li> <li>See How to configure npm-package-json-lint rules<ul> <li>If custom <code>.npmpackagejsonlintrc.json</code> config file isn't found, .npmpackagejsonlintrc.json will be used</li> </ul> </li> <li>See How to ignore files and directories with npm-package-json-lint<ul> <li>You can define a <code>.npmpackagejsonlintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by npm-package-json-lint</li> </ul>"},{"location":"descriptors/json_npm_package_json_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable npm-package-json-lint by adding <code>JSON_NPM_PACKAGE_JSON_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable npm-package-json-lint by adding <code>JSON_NPM_PACKAGE_JSON_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value JSON_NPM_PACKAGE_JSON_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JSON_NPM_PACKAGE_JSON_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JSON_NPM_PACKAGE_JSON_LINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> JSON_NPM_PACKAGE_JSON_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".json\"]</code> JSON_NPM_PACKAGE_JSON_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> <code>[\"package\\\\.json\"]</code> JSON_NPM_PACKAGE_JSON_LINT_PRE_COMMANDS List of bash commands to run before the linter None JSON_NPM_PACKAGE_JSON_LINT_POST_COMMANDS List of bash commands to run after the linter None JSON_NPM_PACKAGE_JSON_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JSON_NPM_PACKAGE_JSON_LINT and its pre/post commands None JSON_NPM_PACKAGE_JSON_LINT_CONFIG_FILE npm-package-json-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.npmpackagejsonlintrc.json</code> JSON_NPM_PACKAGE_JSON_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_NPM_PACKAGE_JSON_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JSON_NPM_PACKAGE_JSON_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JSON_NPM_PACKAGE_JSON_LINT_CLI_EXECUTABLE Override CLI executable <code>['npmPkgJsonLint']</code>"},{"location":"descriptors/json_npm_package_json_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 salesforce Optimized for Salesforce based projects 54"},{"location":"descriptors/json_npm_package_json_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/json_npm_package_json_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>package.json</code></li> <li>File extensions: <code>.json</code></li> <li>File names (regex): <code>package\\.json</code></li> </ul>"},{"location":"descriptors/json_npm_package_json_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>npm-package-json-lint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using npm-package-json-lint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make npm-package-json-lint analyze only updated files</li> </ul>"},{"location":"descriptors/json_npm_package_json_lint/#example-calls","title":"Example calls","text":"<pre><code>npmPkgJsonLint .\n</code></pre> <pre><code>npmPkgJsonLint --configFile .npmpackagejsonlintrc.json .\n</code></pre>"},{"location":"descriptors/json_npm_package_json_lint/#help-content","title":"Help content","text":"<pre><code>\n  Configurable linter for package.json files.\n\n  Usage\n    $ npmPkgJsonLint &lt;patterns&gt;\n\n  Options\n    --quiet, -q Report errors only\n    --noConfigFiles, -ncf Disables use of .npmpackagejsonlintrc.json files, npmpackagejsonlint.config.js files, and npmpackagejsonlint object in package.json file.\n    --configFile, -c File path of .npmpackagejsonlintrc.json\n    --ignorePath, -i Path to a file containing patterns that describe files to ignore. The path can be absolute or relative to process.cwd(). By default, npm-package-json-lint looks for .npmpackagejsonlintignore in process.cwd().\n    --maxWarnings, -mw Maximum number of warnings that can be detected before an error is thrown.\n    --allowEmptyTargets Do not throw an error when a list of targets is empty.\n\n  Examples\n    $ npmPkgJsonLint --version\n    $ npmPkgJsonLint .\n    $ npmPkgJsonLint ./packages\n    $ npmPkgJsonLint ./package1 ./package2\n    $ npmPkgJsonLint -c ./config/.npmpackagejsonlintrc.json .\n    $ npmPkgJsonLint --configFile ./config/npmpackagejsonlint.config.json .\n    $ npmPkgJsonLint -q .\n    $ npmPkgJsonLint --quiet ./packages\n    $ npmPkgJsonLint . --ignorePath .gitignore\n    $ npmPkgJsonLint . -i .gitignore\n    $ npmPkgJsonLint . --maxWarnings 10\n    $ npmPkgJsonLint . -mw 10\n\n</code></pre>"},{"location":"descriptors/json_npm_package_json_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=npm-package-json-lint\nARG NPM_PACKAGE_JSON_LINT_VERSION=8.0.0\n# renovate: datasource=npm depName=npm-package-json-lint-config-default\nARG NPM_PACKAGE_JSON_LINT_CONFIG_DEFAULT_VERSION=7.0.1\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>npm-package-json-lint@8.0.0</li> <li>npm-package-json-lint-config-default@7.0.1</li> </ul> </li> </ul>"},{"location":"descriptors/json_prettier/","title":"prettier configuration in MegaLinter","text":""},{"location":"descriptors/json_prettier/#prettier-documentation","title":"prettier documentation","text":"<ul> <li>Version in MegaLinter: 3.5.3</li> <li>Visit Official Web Site</li> <li>See How to configure prettier rules</li> <li>See How to disable prettier rules in files</li> <li>See Index of problems detected by prettier</li> </ul>"},{"location":"descriptors/json_prettier/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable prettier by adding <code>JSON_PRETTIER</code> in ENABLE_LINTERS variable</li> <li>Disable prettier by adding <code>JSON_PRETTIER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>JSON_PRETTIER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value JSON_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JSON_PRETTIER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JSON_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JSON_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JSON_PRETTIER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JSON_PRETTIER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".json\"]</code> JSON_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JSON_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None JSON_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None JSON_PRETTIER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JSON_PRETTIER and its pre/post commands None JSON_PRETTIER_CONFIG_FILE prettier configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.prettierrc.json</code> JSON_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> JSON_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JSON_PRETTIER_CLI_EXECUTABLE Override CLI executable <code>['prettier']</code>"},{"location":"descriptors/json_prettier/#ide-integration","title":"IDE Integration","text":"<p>Use prettier in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA Prettier Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode"},{"location":"descriptors/json_prettier/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/json_prettier/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/json_prettier/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.json</code></li> </ul>"},{"location":"descriptors/json_prettier/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>prettier is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/json_prettier/#example-calls","title":"Example calls","text":"<pre><code>prettier --check myfile.json\n</code></pre> <pre><code>prettier --config .prettierrc.json --check myfile.json\n</code></pre> <pre><code>prettier --config .prettierrc.json --write myfile.json\n</code></pre>"},{"location":"descriptors/json_prettier/#help-content","title":"Help content","text":"<pre><code>Usage: prettier [options] [file/dir/glob ...]\n\nBy default, output is written to stdout.\nStdin is read if it is piped to Prettier and no files are given.\n\nOutput options:\n\n  -c, --check              Check if the given files are formatted, print a human-friendly summary\n                           message and paths to unformatted files (see also --list-different).\n  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).\n  -w, --write              Edit files in-place. (Beware!)\n\nFormat options:\n\n  --arrow-parens &lt;always|avoid&gt;\n                           Include parentheses around a sole arrow function parameter.\n                           Defaults to always.\n  --bracket-same-line      Put &gt; of opening tags on the last line instead of on a new line.\n                           Defaults to false.\n  --no-bracket-spacing     Do not print spaces between brackets.\n  --embedded-language-formatting &lt;auto|off&gt;\n                           Control how Prettier formats quoted code embedded in the file.\n                           Defaults to auto.\n  --end-of-line &lt;lf|crlf|cr|auto&gt;\n                           Which end of line characters to apply.\n                           Defaults to lf.\n  --experimental-operator-position &lt;start|end&gt;\n                           Where to print operators when binary expressions wrap lines.\n                           Defaults to end.\n  --no-experimental-ternaries\n                           Default behavior of ternaries; keep question marks on the same line as the consequent.\n  --html-whitespace-sensitivity &lt;css|strict|ignore&gt;\n                           How to handle whitespaces in HTML.\n                           Defaults to css.\n  --jsx-single-quote       Use single quotes in JSX.\n                           Defaults to false.\n  --object-wrap &lt;preserve|collapse&gt;\n                           How to wrap object literals.\n                           Defaults to preserve.\n  --parser &lt;flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|jsonc|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc&gt;\n                           Which parser to use.\n  --print-width &lt;int&gt;      The line length where Prettier will try wrap.\n                           Defaults to 80.\n  --prose-wrap &lt;always|never|preserve&gt;\n                           How to wrap prose.\n                           Defaults to preserve.\n  --quote-props &lt;as-needed|consistent|preserve&gt;\n                           Change when properties in objects are quoted.\n                           Defaults to as-needed.\n  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.\n  --single-attribute-per-line\n                           Enforce single attribute per line in HTML, Vue and JSX.\n                           Defaults to false.\n  --single-quote           Use single quotes instead of double quotes.\n                           Defaults to false.\n  --tab-width &lt;int&gt;        Number of spaces per indentation level.\n                           Defaults to 2.\n  --trailing-comma &lt;all|es5|none&gt;\n                           Print trailing commas wherever possible when multi-line.\n                           Defaults to all.\n  --use-tabs               Indent with tabs instead of spaces.\n                           Defaults to false.\n  --vue-indent-script-and-style\n                           Indent script and style tags in Vue files.\n                           Defaults to false.\n\nConfig options:\n\n  --config &lt;path&gt;          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).\n  --no-config              Do not look for a configuration file.\n  --config-precedence &lt;cli-override|file-override|prefer-file&gt;\n                           Define in which order config files and CLI options should be evaluated.\n                           Defaults to cli-override.\n  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.\n  --find-config-path &lt;path&gt;\n                           Find and print the path to a configuration file for the given input file.\n  --ignore-path &lt;path&gt;     Path to a file with patterns describing files to ignore.\n                           Multiple values are accepted.\n                           Defaults to [.gitignore, .prettierignore].\n  --plugin &lt;path&gt;          Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\n                           Defaults to [].\n  --with-node-modules      Process files inside 'node_modules' directory.\n\nEditor options:\n\n  --cursor-offset &lt;int&gt;    Print (to stderr) where a cursor at the given position would move to after formatting.\n                           Defaults to -1.\n  --range-end &lt;int&gt;        Format code ending at a given character offset (exclusive).\n                           The range will extend forwards to the end of the selected statement.\n                           Defaults to Infinity.\n  --range-start &lt;int&gt;      Format code starting at a given character offset.\n                           The range will extend backwards to the start of the first line containing the selected statement.\n                           Defaults to 0.\n\nOther options:\n\n  --cache                  Only format changed files. Cannot use with --stdin-filepath.\n                           Defaults to false.\n  --cache-location &lt;path&gt;  Path to the cache file.\n  --cache-strategy &lt;metadata|content&gt;\n                           Strategy for the cache to use for detecting changed files.\n  --no-color               Do not colorize error messages.\n  --no-error-on-unmatched-pattern\n                           Prevent errors when pattern is unmatched.\n  --file-info &lt;path&gt;       Extract the following info (as JSON) for a given file path. Reported fields:\n                           * ignored (boolean) - true if file path is filtered by --ignore-path\n                           * inferredParser (string | null) - name of parser inferred from file path\n  -h, --help &lt;flag&gt;        Show CLI usage, or details about the given flag.\n                           Example: --help write\n  -u, --ignore-unknown     Ignore unknown files.\n  --insert-pragma          Insert @format pragma into file's first docblock comment.\n                           Defaults to false.\n  --log-level &lt;silent|error|warn|log|debug&gt;\n                           What level of logs to report.\n                           Defaults to log.\n  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment\n                           in order for it to be formatted.\n                           Defaults to false.\n  --stdin-filepath &lt;path&gt;  Path to the file to pretend that stdin comes from.\n  --support-info           Print support information as JSON.\n  -v, --version            Print Prettier version.\n\n\n</code></pre>"},{"location":"descriptors/json_prettier/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=prettier\nARG NPM_PRETTIER_VERSION=3.5.3\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>prettier@3.5.3</li> </ul> </li> </ul>"},{"location":"descriptors/json_v8r/","title":"v8r configuration in MegaLinter","text":""},{"location":"descriptors/json_v8r/#v8r","title":"v8r","text":"<p>v8r checks the validity of JSON/YAML files if they have a matching schema defined on schemastore.org</p>"},{"location":"descriptors/json_v8r/#v8r-documentation","title":"v8r documentation","text":"<ul> <li>Version in MegaLinter: 4.4.0</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by v8r</li> </ul>"},{"location":"descriptors/json_v8r/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable v8r by adding <code>JSON_V8R</code> in ENABLE_LINTERS variable</li> <li>Disable v8r by adding <code>JSON_V8R</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value JSON_V8R_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JSON_V8R_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JSON_V8R_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JSON_V8R_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JSON_V8R_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JSON_V8R_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".json\"]</code> JSON_V8R_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JSON_V8R_PRE_COMMANDS List of bash commands to run before the linter None JSON_V8R_POST_COMMANDS List of bash commands to run after the linter None JSON_V8R_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JSON_V8R and its pre/post commands None JSON_V8R_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JSON_V8R_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JSON_V8R_CLI_EXECUTABLE Override CLI executable <code>['v8r']</code>"},{"location":"descriptors/json_v8r/#ide-integration","title":"IDE Integration","text":"<p>Use v8r in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Eclipse native support Visit Web Site IDEA native support Visit Web Site vim vison Visit Web Site Visual Studio Code native support Visit Web Site"},{"location":"descriptors/json_v8r/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/json_v8r/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/json_v8r/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.json</code></li> </ul>"},{"location":"descriptors/json_v8r/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>v8r is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/json_v8r/#example-calls","title":"Example calls","text":"<pre><code>v8r --ignore-errors myfile.json\n</code></pre>"},{"location":"descriptors/json_v8r/#help-content","title":"Help content","text":"<pre><code>\u2139 No config file found\nv8r &lt;patterns..&gt;\n\nValidate local json/json5/toml/yaml files against schema(s)\n\nPositionals:\n  patterns  One or more filenames or glob patterns describing local file or file\n            s to validate\n\nOptions:\n      --help                     Show help                             [boolean]\n      --version                  Show version number                   [boolean]\n  -v, --verbose                  Run with verbose logging. Can be stacked e.g: -\n                                 vv -vvv                                 [count]\n  -s, --schema                   Local path or URL of a schema to validate again\n                                 st. If not supplied, we will attempt to find an\n                                  appropriate schema on schemastore.org using th\n                                 e filename. If passed with glob pattern(s) matc\n                                 hing multiple files, all matching files will be\n                                  validated against this schema         [string]\n  -c, --catalogs                 A list of local paths or URLs of custom catalog\n                                 s to use prior to schemastore.org       [array]\n      --ignore-errors            Exit with code 0 even if an error was encounter\n                                 ed. Passing this flag means a non-zero exit cod\n                                 e is only issued if validation could be complet\n                                 ed successfully and one or more files were inva\n                                 lid                  [boolean] [default: false]\n      --ignore-pattern-files     A list of files containing glob patterns to ign\n                                 ore           [array] [default: [\".v8rignore\"]]\n      --no-ignore                Disable all ignore files              [boolean]\n      --cache-ttl                Remove cached HTTP responses older than &lt;cache-\n                                 ttl&gt; seconds old. Passing 0 clears and disables\n                                  cache completely       [number] [default: 600]\n      --output-format, --format  Output format for validation results. The '--fo\n                                 rmat' alias is deprecated.\n                            [string] [choices: \"text\", \"json\"] [default: \"text\"]\n\nExamples:\n  v8r file.json                 Validate a single file\n  v8r file1.json file2.json     Validate multiple files\n  v8r 'dir/*.yml' 'dir/*.yaml'  Specify files to validate with glob patterns\n</code></pre>"},{"location":"descriptors/json_v8r/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=v8r\nARG NPM_V8R_VERSION=4.4.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>v8r@4.4.0</li> </ul> </li> </ul>"},{"location":"descriptors/jsx/","title":"JSX linters in MegaLinter","text":""},{"location":"descriptors/jsx/#jsx","title":"JSX","text":""},{"location":"descriptors/jsx/#linters","title":"Linters","text":"Linter Additional eslintJSX_ESLINT"},{"location":"descriptors/jsx/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.jsx</code></li> </ul> </li> </ul>"},{"location":"descriptors/jsx/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value JSX_PRE_COMMANDS List of bash commands to run before the linters None JSX_POST_COMMANDS List of bash commands to run after the linters None JSX_FILTER_REGEX_INCLUDE Custom regex including filter JSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/jsx_eslint/","title":"eslint configuration in MegaLinter","text":"<p>eslint requires a custom configuration file applicable to your project. You can create it by typing <code>npx eslint --init</code> in the root of your repository</p>"},{"location":"descriptors/jsx_eslint/#eslint-documentation","title":"eslint documentation","text":"<ul> <li>Version in MegaLinter: 8.57.1</li> <li>Visit Official Web Site</li> <li>See How to configure eslint rules</li> <li>See How to disable eslint rules in files</li> <li>See How to ignore files and directories with eslint<ul> <li>You can define a <code>.eslintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by eslint</li> </ul>"},{"location":"descriptors/jsx_eslint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable eslint by adding <code>JSX_ESLINT</code> in ENABLE_LINTERS variable</li> <li>Disable eslint by adding <code>JSX_ESLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>JSX_ESLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value JSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> JSX_ESLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> JSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file JSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file JSX_ESLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> JSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".jsx\"]</code> JSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file JSX_ESLINT_PRE_COMMANDS List of bash commands to run before the linter None JSX_ESLINT_POST_COMMANDS List of bash commands to run after the linter None JSX_ESLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling JSX_ESLINT and its pre/post commands None JSX_ESLINT_CONFIG_FILE eslint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>eslint.config.js</code> JSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSX_ESLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> JSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> JSX_ESLINT_CLI_EXECUTABLE Override CLI executable <code>['eslint']</code>"},{"location":"descriptors/jsx_eslint/#ide-integration","title":"IDE Integration","text":"<p>Use eslint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint"},{"location":"descriptors/jsx_eslint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/jsx_eslint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/jsx_eslint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>eslint.config.js, eslint.config.mjs, eslint.config.cjs, .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig</code></li> <li>File extensions: <code>.jsx</code></li> </ul>"},{"location":"descriptors/jsx_eslint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>eslint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/jsx_eslint/#example-calls","title":"Example calls","text":"<pre><code>eslint myfile.jsx\n</code></pre> <pre><code>eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx\n</code></pre> <pre><code>eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx\n</code></pre>"},{"location":"descriptors/jsx_eslint/#help-content","title":"Help content","text":"<pre><code>eslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-eslintrc                    Disable use of configuration from .eslintrc.*\n  -c, --config path::String        Use this configuration, overriding .eslintrc.* config options if present\n  --env [String]                   Specify environments\n  --ext [String]                   Specify JavaScript file extensions\n  --global [String]                Define global variables\n  --parser String                  Specify the parser to be used\n  --parser-options Object          Specify parser options\n  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\nSpecify Rules and Plugins:\n  --plugin [String]                Specify plugins\n  --rule Object                    Specify rules\n  --rulesdir [path::String]        Load additional rules from this directory. Deprecated: Use rules from plugins\n\nFix Problems:\n  --fix                            Automatically fix problems\n  --fix-dry-run                    Automatically fix problems without saving the changes to the file system\n  --fix-type Array                 Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --ignore-path path::String       Specify path of ignore file\n  --no-ignore                      Disable use of ignore files and patterns\n  --ignore-pattern [String]        Pattern of files to ignore (in addition to those in .eslintignore)\n\nUse stdin:\n  --stdin                          Lint code provided on &lt;STDIN&gt; - default: false\n  --stdin-filename String          Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                          Report errors only - default: false\n  --max-warnings Int               Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String   Specify file to write report to\n  -f, --format String              Use a specific output format - default: stylish\n  --color, --no-color              Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config               Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and eslint-enable directives - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                          Only check changed files - default: false\n  --cache-file path::String        Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String    Path to the cache file or directory\n  --cache-strategy String          Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata\n\nMiscellaneous:\n  --init                           Run config initialization wizard - default: false\n  --env-info                       Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error            Exit with exit code 2 in case of fatal error - default: false\n  --debug                          Output debugging information\n  -h, --help                       Show help\n  -v, --version                    Output the version number\n  --print-config path::String      Print the configuration for the given file\n</code></pre>"},{"location":"descriptors/jsx_eslint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=eslint\nARG NPM_ESLINT_VERSION=8.57.1\n# renovate: datasource=npm depName=eslint-plugin-react\nARG NPM_ESLINT_PLUGIN_REACT_VERSION=7.37.5\n# renovate: datasource=npm depName=eslint-plugin-jsx-a11y\nARG NPM_ESLINT_PLUGIN_JSX_ALLY_VERSION=6.10.2\n# renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif\nARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>eslint@8.57.1</li> <li>eslint-plugin-react@7.37.5</li> <li>eslint-plugin-jsx-a11y@6.10.2</li> <li>@microsoft/eslint-formatter-sarif@3.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/kotlin/","title":"KOTLIN linters in MegaLinter","text":""},{"location":"descriptors/kotlin/#kotlin","title":"KOTLIN","text":""},{"location":"descriptors/kotlin/#linters","title":"Linters","text":"Linter Additional ktlintKOTLIN_KTLINT detektKOTLIN_DETEKT"},{"location":"descriptors/kotlin/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.kt</code></li> <li><code>.kts</code></li> </ul> </li> </ul>"},{"location":"descriptors/kotlin/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value KOTLIN_PRE_COMMANDS List of bash commands to run before the linters None KOTLIN_POST_COMMANDS List of bash commands to run after the linters None KOTLIN_FILTER_REGEX_INCLUDE Custom regex including filter KOTLIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/kotlin/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/kotlin/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>openjdk21</li> </ul> </li> </ul>"},{"location":"descriptors/kotlin_detekt/","title":"detekt configuration in MegaLinter","text":""},{"location":"descriptors/kotlin_detekt/#detekt-documentation","title":"detekt documentation","text":"<ul> <li>Version in MegaLinter: 1.23.8</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by detekt</li> </ul>"},{"location":"descriptors/kotlin_detekt/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable detekt by adding <code>KOTLIN_DETEKT</code> in ENABLE_LINTERS variable</li> <li>Disable detekt by adding <code>KOTLIN_DETEKT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value KOTLIN_DETEKT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> KOTLIN_DETEKT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> KOTLIN_DETEKT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> KOTLIN_DETEKT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".kt\", \".kts\"]</code> KOTLIN_DETEKT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file KOTLIN_DETEKT_PRE_COMMANDS List of bash commands to run before the linter None KOTLIN_DETEKT_POST_COMMANDS List of bash commands to run after the linter None KOTLIN_DETEKT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling KOTLIN_DETEKT and its pre/post commands None KOTLIN_DETEKT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> KOTLIN_DETEKT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> KOTLIN_DETEKT_CLI_EXECUTABLE Override CLI executable <code>['detekt-cli']</code>"},{"location":"descriptors/kotlin_detekt/#ide-integration","title":"IDE Integration","text":"<p>Use detekt in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs flycheck-kotlin Visit Web Site vim ale Visit Web Site"},{"location":"descriptors/kotlin_detekt/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/kotlin_detekt/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/kotlin_detekt/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.kt</code>, <code>.kts</code></li> </ul>"},{"location":"descriptors/kotlin_detekt/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>detekt is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using detekt configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make detekt analyze only updated files</li> </ul>"},{"location":"descriptors/kotlin_detekt/#example-calls","title":"Example calls","text":"<pre><code>detekt-cli\n</code></pre> <pre><code>detekt-cli --report html:folder/kotlin_detekt_result.html\n</code></pre>"},{"location":"descriptors/kotlin_detekt/#help-content","title":"Help content","text":"<pre><code>Usage: detekt [options]\n  Options:\n    --all-rules\n      Activates all available (even unstable) rules.\n      Default: false\n    --auto-correct, -ac\n      Allow rules to auto correct code if they support it. The default rule\n      sets do NOT support auto correcting and won't change any line in the\n      users code base. However custom rules can be written to support auto\n      correcting. The additional 'formatting' rule set, added with\n      '--plugins', does support it and needs this flag.\n      Default: false\n    --base-path, -bp\n      Specifies a directory as the base path.Currently it impacts all file\n      paths in the formatted reports. File paths in console output and txt\n      report are not affected and remain as absolute paths.\n    --baseline, -b\n      If a baseline xml file is passed in, only new code smells not in the\n      baseline are printed in the console.\n    --build-upon-default-config\n      Preconfigures detekt with a bunch of rules and some opinionated defaults\n      for you. Allows additional provided configurations to override the\n      defaults.\n      Default: false\n    --classpath, -cp\n      EXPERIMENTAL: Paths where to find user class files and depending jar\n      files. Used for type resolution.\n    --config, -c\n      Path to the config file (path/to/config.yml). Multiple configuration\n      files can be specified with ',' or ';' as separator.\n    --config-resource, -cr\n      Path to the config resource on detekt's classpath (path/to/config.yml).\n    --create-baseline, -cb\n      Treats current analysis findings as a smell baseline for future detekt\n      runs.\n      Default: false\n    --debug\n      Prints extra information about configurations and extensions.\n      Default: false\n    --disable-default-rulesets, -dd\n      Disables default rule sets.\n      Default: false\n    --excludes, -ex\n      Globbing patterns describing paths to exclude from the analysis.\n    --generate-config, -gc\n      Export default config. Path can be specified with --config option\n      (default path: default-detekt-config.yml)\n      Default: false\n    --help, -h\n      Shows the usage.\n    --includes, -in\n      Globbing patterns describing paths to include in the analysis. Useful in\n      combination with 'excludes' patterns.\n    --input, -i\n      Input paths to analyze. Multiple paths are separated by comma. If not\n      specified the current working directory is used.\n    --jdk-home\n      EXPERIMENTAL: Use a custom JDK home directory to include into the\n      classpath\n    --jvm-target\n      EXPERIMENTAL: Target version of the generated JVM bytecode that was\n      generated during compilation and is now being used for type resolution\n      (1.8, 9, 10, ..., 20)\n      Default: 1.8\n    --language-version\n      EXPERIMENTAL: Compatibility mode for Kotlin language version X.Y,\n      reports errors for all language features that came out later\n      Possible Values: [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2]\n    --max-issues\n      Return exit code 0 only when found issues count does not exceed\n      specified issues count.\n    --parallel\n      Enables parallel compilation and analysis of source files. Do some\n      benchmarks first before enabling this flag. Heuristics show performance\n      benefits starting from 2000 lines of Kotlin code.\n      Default: false\n    --plugins, -p\n      Extra paths to plugin jars separated by ',' or ';'.\n    --report, -r\n      Generates a report for given 'report-id' and stores it on given 'path'.\n      Entry should consist of: [report-id:path]. Available 'report-id' values:\n      'txt', 'xml', 'html', 'md', 'sarif'. These can also be used in\n      combination with each other e.g. '-r txt:reports/detekt.txt -r\n      xml:reports/detekt.xml'\n    --version\n      Prints the detekt CLI version.\n      Default: false\n\n</code></pre>"},{"location":"descriptors/kotlin_detekt/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n# Linter install\n# renovate: datasource=github-tags depName=detekt/detekt\nARG DETEKT_VERSION=1.23.8\n\nRUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/detekt/detekt/releases/download/v${DETEKT_VERSION}/detekt-cli-${DETEKT_VERSION}.zip &amp;&amp; \\\n    unzip detekt-cli-${DETEKT_VERSION}.zip &amp;&amp; \\\n    chmod a+x detekt-cli-${DETEKT_VERSION}/bin/* &amp;&amp; \\\n    chmod a+x detekt-cli-${DETEKT_VERSION}/lib/* &amp;&amp; \\\n    mv -n detekt-cli-${DETEKT_VERSION}/bin/* usr/bin &amp;&amp; \\\n    mv -n detekt-cli-${DETEKT_VERSION}/lib/* usr/lib\n\n</code></pre>"},{"location":"descriptors/kotlin_ktlint/","title":"ktlint configuration in MegaLinter","text":""},{"location":"descriptors/kotlin_ktlint/#ktlint-documentation","title":"ktlint documentation","text":"<ul> <li>Version in MegaLinter: 1.5.0</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by ktlint</li> </ul>"},{"location":"descriptors/kotlin_ktlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ktlint by adding <code>KOTLIN_KTLINT</code> in ENABLE_LINTERS variable</li> <li>Disable ktlint by adding <code>KOTLIN_KTLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>KOTLIN_KTLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value KOTLIN_KTLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> KOTLIN_KTLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> KOTLIN_KTLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file KOTLIN_KTLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> KOTLIN_KTLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".kt\", \".kts\"]</code> KOTLIN_KTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file KOTLIN_KTLINT_PRE_COMMANDS List of bash commands to run before the linter None KOTLIN_KTLINT_POST_COMMANDS List of bash commands to run after the linter None KOTLIN_KTLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling KOTLIN_KTLINT and its pre/post commands None KOTLIN_KTLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> KOTLIN_KTLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> KOTLIN_KTLINT_CLI_EXECUTABLE Override CLI executable <code>['ktlint']</code>"},{"location":"descriptors/kotlin_ktlint/#ide-integration","title":"IDE Integration","text":"<p>Use ktlint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs flycheck-kotlin Visit Web Site vim ale Visit Web Site"},{"location":"descriptors/kotlin_ktlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/kotlin_ktlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/kotlin_ktlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.kt</code>, <code>.kts</code></li> </ul>"},{"location":"descriptors/kotlin_ktlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>ktlint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/kotlin_ktlint/#example-calls","title":"Example calls","text":"<pre><code>ktlint myfile.kt\n</code></pre> <pre><code>ktlint --format myfile.kt\n</code></pre>"},{"location":"descriptors/kotlin_ktlint/#help-content","title":"Help content","text":"<pre><code>Usage: ktlint [&lt;options&gt;] [&lt;arguments&gt;]... &lt;command&gt; [&lt;args&gt;]...\n\n  An anti-bikeshedding Kotlin linter with built-in formatter.\n  (https://pinterest.github.io/ktlint/latest/).\n\n  Usage on Windows: java -jar ktlint.jar [&lt;options&gt;] [&lt;arguments&gt;]... &lt;command&gt;\n  [&lt;args&gt;]...\n\n  # EXAMPLES\n\n  ## Use default patterns\n\n  Check the style of all Kotlin files (ending with '.kt' or '.kts') inside the\n  current dir (recursively). Hidden folders will be skipped.\n\n  `ktlint`\n\n  ## Specify patterns\n\n  Check only certain locations starting from the current directory. Prepend !\n  to negate the pattern, KtLint uses .gitignore pattern style syntax. Globs are\n  applied starting from the last one.\n\n  Check all '.kt' files in 'src/' directory, but ignore files ending with\n  'Test.kt':\n\n  `ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\"`\n\n  Check all '.kt' files in 'src/' directory, but ignore 'generated' directory\n  and its subdirectories:\n\n  `ktlint \"src/**/*.kt\" \"!src/**/generated/**\"`\n\n  ## Auto-correct style violations\n\n  Check all '.kt' files in 'src/' directory, and when possible automatically\n  correct the lint violations:\n\n  `ktlint -F \"src/**/*.kt\"`\n\n  ## Using custom reporter jar and overriding report location\n\n  `ktlint\n  --reporter=csv,artifact=/path/to/reporter/csv.jar,output=my-custom-report.csv`\n\n  # Options and commands\n\nOptions:\n  -v, --version            Show the version and exit\n  --code-style=(android_studio|intellij_idea|ktlint_official)\n                           (deprecated)\n  --color                  Make output colorful\n  --color-name=&lt;text&gt;      Customize the output color\n  -F, --format             Fix deviations from the code style when possible\n  --limit=&lt;int&gt;            Maximum number of errors to show (default: show all)\n  --relative               Print files relative to the working directory (e.g.\n                           dir/file.kt instead of\n                           /home/user/project/dir/file.kt)\n  --reporter=&lt;text&gt;        A reporter to use (built-in: plain (default),\n                           plain?group_by_file, plain-summary, json, sarif,\n                           checkstyle, html). To usea third-party reporter\n                           specify a path to a JAR file on the filesystem via\n                           ',artifact=' option. To override reporter output,\n                           use ',output=' option.\n  -R, --ruleset=&lt;text&gt;     A path to a JAR file containing additional\n                           ruleset(s)\n  --stdin                  Read file from stdin\n  --stdin-path=&lt;text&gt;      Virtual file location for stdin. When combined with\n                           option '--format' the actual file will not be\n                           overwritten\n  --patterns-from-stdin[=&lt;text&gt;]\n                           Read additional patterns to check/format from stdin.\n                           Patterns are delimited by the given argument.\n                           (default is newline). If the argument is an empty\n                           string, the NUL byte is used.\n  --editorconfig=&lt;text&gt;    Path to the default '.editorconfig'. A property\n                           value from this file is used only when no\n                           '.editorconfig' file on the path to the source file\n                           specifies that property. Note: up until ktlint 0.46\n                           the property value in this file used to override\n                           values found in '.editorconfig' files on the path to\n                           the source file.\n  --baseline=&lt;text&gt;        Defines a baseline file to check against\n  -l, --log-level=&lt;value&gt;  Defines the minimum log level (trace, debug, info,\n                           warn, error) or none to suppress all logging\n  -h, --help               Show this message and exit\n\nCommands:\n  generateEditorConfig     Generate kotlin style section for '.editorconfig'\n                           file. Output should be copied manually to the\n                           '.editorconfig' file.\n  installGitPreCommitHook  Install git hook to automatically check files for\n                           style violations on commit\n  installGitPrePushHook    Install git hook to automatically check files for\n                           style violations before push\n</code></pre>"},{"location":"descriptors/kotlin_ktlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n# Linter install\n# renovate: datasource=github-tags depName=pinterest/ktlint\nARG KTLINT_VERSION=1.5.0\n\nRUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/download/${KTLINT_VERSION}/ktlint &amp;&amp; \\\n    chmod a+x ktlint &amp;&amp; \\\n    mv \"ktlint\" /usr/bin/\n\n</code></pre>"},{"location":"descriptors/kubernetes/","title":"KUBERNETES linters in MegaLinter","text":""},{"location":"descriptors/kubernetes/#kubernetes","title":"KUBERNETES","text":""},{"location":"descriptors/kubernetes/#linters","title":"Linters","text":"Linter Additional kubeconformKUBERNETES_KUBECONFORM helmKUBERNETES_HELM kubescapeKUBERNETES_KUBESCAPE"},{"location":"descriptors/kubernetes/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> <li><code>.json</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>apiVersion:</code></li> <li><code>kustomize\\.config\\.k8s\\.io</code></li> <li><code>tekton</code></li> </ul> </li> </ul>"},{"location":"descriptors/kubernetes/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value KUBERNETES_PRE_COMMANDS List of bash commands to run before the linters None KUBERNETES_POST_COMMANDS List of bash commands to run after the linters None KUBERNETES_FILTER_REGEX_INCLUDE Custom regex including filter KUBERNETES_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/kubernetes_helm/","title":"helm configuration in MegaLinter","text":"<p><code>helm lint</code> examine a chart for possible issues.</p>"},{"location":"descriptors/kubernetes_helm/#helm-documentation","title":"helm documentation","text":"<ul> <li>Version in MegaLinter: 3.16.3</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/kubernetes_helm/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable helm by adding <code>KUBERNETES_HELM</code> in ENABLE_LINTERS variable</li> <li>Disable helm by adding <code>KUBERNETES_HELM</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value KUBERNETES_HELM_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> KUBERNETES_HELM_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> KUBERNETES_HELM_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> KUBERNETES_HELM_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\", \".json\"]</code> KUBERNETES_HELM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file KUBERNETES_HELM_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_HELM_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_HELM_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling KUBERNETES_HELM and its pre/post commands None KUBERNETES_HELM_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> KUBERNETES_HELM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> KUBERNETES_HELM_CLI_EXECUTABLE Override CLI executable <code>['helm']</code> KUBERNETES_DIRECTORY Directory containing KUBERNETES files (use <code>any</code> to always activate the linter) ``"},{"location":"descriptors/kubernetes_helm/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/kubernetes_helm/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/kubernetes_helm/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>` is found. (directory name can be overridden with</code>KUBERNETES_DIRECTORY`)</li> <li>Activated only if one of these files is found: <code>Chart.yml, Chart.yaml</code></li> <li>File extensions: <code>.yml</code>, <code>.yaml</code>, <code>.json</code></li> <li>Detected file content (regex): <code>apiVersion:</code>, <code>kustomize\\.config\\.k8s\\.io</code>, <code>tekton</code></li> </ul>"},{"location":"descriptors/kubernetes_helm/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>helm is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using helm configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make helm analyze only updated files</li> </ul>"},{"location":"descriptors/kubernetes_helm/#example-calls","title":"Example calls","text":"<pre><code>helm lint .\n</code></pre> <pre><code>helm lint --with-subcharts .\n</code></pre>"},{"location":"descriptors/kubernetes_helm/#help-content","title":"Help content","text":"<pre><code>The Kubernetes package manager\n\nCommon actions for Helm:\n\n- helm search:    search for charts\n- helm pull:      download a chart to your local directory to view\n- helm install:   upload the chart to Kubernetes\n- helm list:      list releases of charts\n\nEnvironment variables:\n\n| Name                               | Description                                                                                                |\n|------------------------------------|------------------------------------------------------------------------------------------------------------|\n| $HELM_CACHE_HOME                   | set an alternative location for storing cached files.                                                      |\n| $HELM_CONFIG_HOME                  | set an alternative location for storing Helm configuration.                                                |\n| $HELM_DATA_HOME                    | set an alternative location for storing Helm data.                                                         |\n| $HELM_DEBUG                        | indicate whether or not Helm is running in Debug mode                                                      |\n| $HELM_DRIVER                       | set the backend storage driver. Values are: configmap, secret, memory, sql.                                |\n| $HELM_DRIVER_SQL_CONNECTION_STRING | set the connection string the SQL storage driver should use.                                               |\n| $HELM_MAX_HISTORY                  | set the maximum number of helm release history.                                                            |\n| $HELM_NAMESPACE                    | set the namespace used for the helm operations.                                                            |\n| $HELM_NO_PLUGINS                   | disable plugins. Set HELM_NO_PLUGINS=1 to disable plugins.                                                 |\n| $HELM_PLUGINS                      | set the path to the plugins directory                                                                      |\n| $HELM_REGISTRY_CONFIG              | set the path to the registry config file.                                                                  |\n| $HELM_REPOSITORY_CACHE             | set the path to the repository cache directory                                                             |\n| $HELM_REPOSITORY_CONFIG            | set the path to the repositories file.                                                                     |\n| $KUBECONFIG                        | set an alternative Kubernetes configuration file (default \"~/.kube/config\")                                |\n| $HELM_KUBEAPISERVER                | set the Kubernetes API Server Endpoint for authentication                                                  |\n| $HELM_KUBECAFILE                   | set the Kubernetes certificate authority file.                                                             |\n| $HELM_KUBEASGROUPS                 | set the Groups to use for impersonation using a comma-separated list.                                      |\n| $HELM_KUBEASUSER                   | set the Username to impersonate for the operation.                                                         |\n| $HELM_KUBECONTEXT                  | set the name of the kubeconfig context.                                                                    |\n| $HELM_KUBETOKEN                    | set the Bearer KubeToken used for authentication.                                                          |\n| $HELM_KUBEINSECURE_SKIP_TLS_VERIFY | indicate if the Kubernetes API server's certificate validation should be skipped (insecure)                |\n| $HELM_KUBETLS_SERVER_NAME          | set the server name used to validate the Kubernetes API server certificate                                 |\n| $HELM_BURST_LIMIT                  | set the default burst limit in the case the server contains many CRDs (default 100, -1 to disable)         |\n| $HELM_QPS                          | set the Queries Per Second in cases where a high number of calls exceed the option for higher burst values |\n\nHelm stores cache, configuration, and data based on the following configuration order:\n\n- If a HELM_*_HOME environment variable is set, it will be used\n- Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used\n- When no other location is set a default location will be used based on the operating system\n\nBy default, the default directories depend on the Operating System. The defaults are listed below:\n\n| Operating System | Cache Path                | Configuration Path             | Data Path               |\n|------------------|---------------------------|--------------------------------|-------------------------|\n| Linux            | $HOME/.cache/helm         | $HOME/.config/helm             | $HOME/.local/share/helm |\n| macOS            | $HOME/Library/Caches/helm | $HOME/Library/Preferences/helm | $HOME/Library/helm      |\n| Windows          | %TEMP%\\helm               | %APPDATA%\\helm                 | %APPDATA%\\helm          |\n\nUsage:\n  helm [command]\n\nAvailable Commands:\n  completion  generate autocompletion scripts for the specified shell\n  create      create a new chart with the given name\n  dependency  manage a chart's dependencies\n  env         helm client environment information\n  get         download extended information of a named release\n  help        Help about any command\n  history     fetch release history\n  install     install a chart\n  lint        examine a chart for possible issues\n  list        list releases\n  package     package a chart directory into a chart archive\n  plugin      install, list, or uninstall Helm plugins\n  pull        download a chart from a repository and (optionally) unpack it in local directory\n  push        push a chart to remote\n  registry    login to or logout from a registry\n  repo        add, list, remove, update, and index chart repositories\n  rollback    roll back a release to a previous revision\n  search      search for a keyword in charts\n  show        show information of a chart\n  status      display the status of the named release\n  template    locally render templates\n  test        run tests for a release\n  uninstall   uninstall a release\n  upgrade     upgrade a release\n  verify      verify that a chart at the given path has been signed and is valid\n  version     print the client version information\n\nFlags:\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n  -h, --help                            help for helm\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"/root/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"/root/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"/root/.config/helm/repositories.yaml\")\n\nUse \"helm [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/kubernetes_helm/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>APK packages (Linux):<ul> <li>helm</li> </ul> </li> </ul>"},{"location":"descriptors/kubernetes_kubeconform/","title":"kubeconform configuration in MegaLinter","text":"<p><code>kubeconform</code> is a schema-aware Kubernetes manifest validation tool, that tends to have more up-to-date schema definitions than <code>kubeval</code>.</p>"},{"location":"descriptors/kubernetes_kubeconform/#kubeconform-documentation","title":"kubeconform documentation","text":"<ul> <li>Version in MegaLinter: 0.6.7</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/kubernetes_kubeconform/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable kubeconform by adding <code>KUBERNETES_KUBECONFORM</code> in ENABLE_LINTERS variable</li> <li>Disable kubeconform by adding <code>KUBERNETES_KUBECONFORM</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value KUBERNETES_KUBECONFORM_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> KUBERNETES_KUBECONFORM_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> KUBERNETES_KUBECONFORM_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file KUBERNETES_KUBECONFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file KUBERNETES_KUBECONFORM_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> KUBERNETES_KUBECONFORM_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\", \".json\"]</code> KUBERNETES_KUBECONFORM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file KUBERNETES_KUBECONFORM_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_KUBECONFORM_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_KUBECONFORM_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling KUBERNETES_KUBECONFORM and its pre/post commands None KUBERNETES_KUBECONFORM_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> KUBERNETES_KUBECONFORM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> KUBERNETES_KUBECONFORM_CLI_EXECUTABLE Override CLI executable <code>['kubeconform']</code> KUBERNETES_DIRECTORY Directory containing KUBERNETES files (use <code>any</code> to always activate the linter) <code>kubernetes</code>"},{"location":"descriptors/kubernetes_kubeconform/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/kubernetes_kubeconform/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/kubernetes_kubeconform/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>kubernetes</code> is found. (directory name can be overridden with <code>KUBERNETES_DIRECTORY</code>)</li> <li>File extensions: <code>.yml</code>, <code>.yaml</code>, <code>.json</code></li> <li>Detected file content (regex): <code>apiVersion:</code>, <code>kustomize\\.config\\.k8s\\.io</code>, <code>tekton</code></li> </ul>"},{"location":"descriptors/kubernetes_kubeconform/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>kubeconform is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/kubernetes_kubeconform/#example-calls","title":"Example calls","text":"<pre><code>kubeconform myfile.yml\n</code></pre> <pre><code>kubeconform -ignore-missing-schemas -skip SomeCRD,AnotherCRD -kubernetes-version '1.18.0' -strict myfile.yml\n</code></pre>"},{"location":"descriptors/kubernetes_kubeconform/#help-content","title":"Help content","text":"<pre><code>Usage: kubeconform [OPTION]... [FILE OR FOLDER]...\n  -cache string\n      cache schemas downloaded via HTTP to this folder\n  -debug\n      print debug information\n  -exit-on-error\n      immediately stop execution when the first error is encountered\n  -h  show help information\n  -ignore-filename-pattern value\n      regular expression specifying paths to ignore (can be specified multiple times)\n  -ignore-missing-schemas\n      skip files with missing schemas instead of failing\n  -insecure-skip-tls-verify\n      disable verification of the server's SSL certificate. This will make your HTTPS connections insecure\n  -kubernetes-version value\n      version of Kubernetes to validate against, e.g.: 1.18.0 (default master)\n  -n int\n      number of goroutines to run concurrently (default 4)\n  -output string\n      output format - json, junit, pretty, tap, text (default \"text\")\n  -reject string\n      comma-separated list of kinds or GVKs to reject\n  -schema-location value\n      override schemas location search path (can be specified multiple times)\n  -skip string\n      comma-separated list of kinds or GVKs to ignore\n  -strict\n      disallow additional properties not in schema or duplicated keys\n  -summary\n      print a summary at the end (ignored for junit output)\n  -v  show version information\n  -verbose\n      print results for all resources (ignored for tap and junit output)\n\n</code></pre>"},{"location":"descriptors/kubernetes_kubeconform/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=ghcr.io/yannh/kubeconform\nARG KUBERNETES_KUBECONFORM_VERSION=v0.6.7-alpine\nFROM ghcr.io/yannh/kubeconform:${KUBERNETES_KUBECONFORM_VERSION} AS kubeconform\nCOPY --link --from=kubeconform /kubeconform /usr/bin/\n</code></pre>"},{"location":"descriptors/kubernetes_kubescape/","title":"kubescape configuration in MegaLinter","text":"<p><code>kubescape scan</code> examines charts and kubernetes files for possible issues, best practices and security vulnerabilities.</p>"},{"location":"descriptors/kubernetes_kubescape/#kubescape-documentation","title":"kubescape documentation","text":"<ul> <li>Version in MegaLinter: 3.0.34</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/kubernetes_kubescape/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable kubescape by adding <code>KUBERNETES_KUBESCAPE</code> in ENABLE_LINTERS variable</li> <li>Disable kubescape by adding <code>KUBERNETES_KUBESCAPE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value KUBERNETES_KUBESCAPE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> KUBERNETES_KUBESCAPE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> KUBERNETES_KUBESCAPE_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> KUBERNETES_KUBESCAPE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\", \".json\"]</code> KUBERNETES_KUBESCAPE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file KUBERNETES_KUBESCAPE_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_KUBESCAPE_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_KUBESCAPE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling KUBERNETES_KUBESCAPE and its pre/post commands None KUBERNETES_KUBESCAPE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> KUBERNETES_KUBESCAPE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> KUBERNETES_KUBESCAPE_CLI_EXECUTABLE Override CLI executable <code>['kubescape']</code> KUBERNETES_DIRECTORY Directory containing KUBERNETES files (use <code>any</code> to always activate the linter) ``"},{"location":"descriptors/kubernetes_kubescape/#ide-integration","title":"IDE Integration","text":"<p>Use kubescape in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Kubescape"},{"location":"descriptors/kubernetes_kubescape/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/kubernetes_kubescape/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/kubernetes_kubescape/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>` is found. (directory name can be overridden with</code>KUBERNETES_DIRECTORY`)</li> <li>Activated only if one of these files is found: <code>Chart.yml, Chart.yaml</code></li> <li>File extensions: <code>.yml</code>, <code>.yaml</code>, <code>.json</code></li> <li>Detected file content (regex): <code>apiVersion:</code>, <code>kustomize\\.config\\.k8s\\.io</code>, <code>tekton</code></li> </ul>"},{"location":"descriptors/kubernetes_kubescape/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>kubescape is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using kubescape configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make kubescape analyze only updated files</li> </ul>"},{"location":"descriptors/kubernetes_kubescape/#example-calls","title":"Example calls","text":"<pre><code>kubescape scan .\n</code></pre>"},{"location":"descriptors/kubernetes_kubescape/#help-content","title":"Help content","text":"<pre><code>Kubescape is a tool for testing Kubernetes security posture. Docs: https://hub.armosec.io/docs\n\nUsage:\n  kubescape [command]\n\nExamples:\n\n  # Scan a Kubernetes cluster or YAML files for image vulnerabilities and misconfigurations\n  kubescape scan\n\n  # List supported controls\n  kubescape list controls\n\n  # Download artifacts (air-gapped environment support)\n  kubescape download artifacts\n\n  # View cached configurations\n  kubescape config view\n\n\nAvailable Commands:\n  completion    Generate autocompletion script\n  config        Handle cached configurations\n  download      Download artifacts,attack-tracks,control,controls-inputs,exceptions,framework\n  fix           Propose a fix for the misconfiguration found when scanning Kubernetes manifest files\n  help          Help about any command\n  list          List frameworks/controls will list the supported frameworks and controls\n  operator      The operator is used to communicate with the Kubescape Operator within the cluster components.\n  patch         Patch container images with vulnerabilities\n  prerequisites Check prerequisites for installing Kubescape Operator\n  scan          Scan a Kubernetes cluster or YAML files for image vulnerabilities and misconfigurations\n  update        Update to latest release version\n  vap           Helper commands for managing Validating Admission Policies in a Kubernetes cluster\n  version       Get current version\n\nFlags:\n      --cache-dir string      Cache directory [$KS_CACHE_DIR] (default \"/root/.kubescape\")\n  -h, --help                  help for kubescape\n      --kube-context string   Kube context. Default will use the current-context\n  -l, --logger string         Logger level. Supported: debug/info/success/warning/error/fatal [$KS_LOGGER] (default \"info\")\n      --server string         Backend discovery server URL\n\nUse \"kubescape [command] --help\" for more information about a command.\n{\"level\":\"info\",\"ts\":\"2025-05-04T12:23:48Z\",\"msg\":\"Received interrupt signal, exiting...\"}\n</code></pre>"},{"location":"descriptors/kubernetes_kubescape/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=kubescape/kubescape\nARG KUBERNETES_KUBESCAPE_VERSION=3.0.34\nRUN ln -s /lib/libc.so.6 /usr/lib/libresolv.so.2 &amp;&amp; \\\n    curl --retry 5 --retry-delay 5 -sLv https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash -s -- -v \"v${KUBERNETES_KUBESCAPE_VERSION}\"\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>curl</li> <li>gcompat</li> <li>libstdc++</li> </ul> </li> </ul>"},{"location":"descriptors/latex/","title":"LATEX linters in MegaLinter","text":""},{"location":"descriptors/latex/#latex","title":"LATEX","text":""},{"location":"descriptors/latex/#linters","title":"Linters","text":"Linter Additional chktexLATEX_CHKTEX"},{"location":"descriptors/latex/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.tex</code></li> </ul> </li> </ul>"},{"location":"descriptors/latex/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value LATEX_PRE_COMMANDS List of bash commands to run before the linters None LATEX_POST_COMMANDS List of bash commands to run after the linters None LATEX_FILTER_REGEX_INCLUDE Custom regex including filter LATEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/latex_chktex/","title":"chktex configuration in MegaLinter","text":""},{"location":"descriptors/latex_chktex/#chktex","title":"chktex","text":""},{"location":"descriptors/latex_chktex/#chktex-documentation","title":"chktex documentation","text":"<ul> <li>Version in MegaLinter: 1.7.8</li> <li>Visit Official Web Site</li> <li>See How to configure chktex rules<ul> <li>If custom <code>.chktexrc</code> config file isn't found, .chktexrc will be used</li> </ul> </li> </ul>"},{"location":"descriptors/latex_chktex/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable chktex by adding <code>LATEX_CHKTEX</code> in ENABLE_LINTERS variable</li> <li>Disable chktex by adding <code>LATEX_CHKTEX</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value LATEX_CHKTEX_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> LATEX_CHKTEX_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> LATEX_CHKTEX_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file LATEX_CHKTEX_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file LATEX_CHKTEX_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> LATEX_CHKTEX_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".tex\"]</code> LATEX_CHKTEX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file LATEX_CHKTEX_PRE_COMMANDS List of bash commands to run before the linter None LATEX_CHKTEX_POST_COMMANDS List of bash commands to run after the linter None LATEX_CHKTEX_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling LATEX_CHKTEX and its pre/post commands None LATEX_CHKTEX_CONFIG_FILE chktex configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.chktexrc</code> LATEX_CHKTEX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LATEX_CHKTEX_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> LATEX_CHKTEX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> LATEX_CHKTEX_CLI_EXECUTABLE Override CLI executable <code>['chktex']</code>"},{"location":"descriptors/latex_chktex/#ide-integration","title":"IDE Integration","text":"<p>Use chktex in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-chktex Visit Web Site Visual Studio Code latex-workshop"},{"location":"descriptors/latex_chktex/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/latex_chktex/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/latex_chktex/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.tex</code></li> </ul>"},{"location":"descriptors/latex_chktex/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>chktex is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/latex_chktex/#example-calls","title":"Example calls","text":"<pre><code>chktex -q myfile.tex\n</code></pre> <pre><code>chktex -q -l .chktexrc myfile.tex\n</code></pre>"},{"location":"descriptors/latex_chktex/#help-content","title":"Help content","text":"<pre><code>ChkTeX v1.7.8 - Copyright 1995-96 Jens T. Berger Thielemann.\nCompiled with POSIX extended regex support.\nChkTeX comes with ABSOLUTELY NO WARRANTY; details on this and\ndistribution conditions in the GNU General Public License file.\nType \"ChkTeX -h\" for help, \"ChkTeX -i\" for distribution info.\nAuthor: Jens Berger.\nBug reports: https://savannah.nongnu.org/bugs/?group=chktex\n             or darthandrus@gmail.com\nPress Ctrl-D to terminate stdin input.\n\n\n                         Usage of ChkTeX v1.7.8\n                         ~~~~~~~~~~~~~~~~~~~~~~\n\n                               Template\n                               ~~~~~~~~\nchktex [-hiqrW] [-v[0-...]] [-l &lt;rcfile&gt;] [-[wemn] &lt;[1-42]|all&gt;]\n       [-d[0-...]] [-p &lt;name&gt;] [-o &lt;outfile&gt;] [-[btxgI][0|1]]\n       file1 file2 ...\n\n----------------------------------------------------------------------\n                       Description of options:\n                       ~~~~~~~~~~~~~~~~~~~~~~~\nMisc. options\n~~~~~~~~~~~~~\n    -h  --help      : This text.\n    -i  --license   : Show distribution information\n    -l  --localrc   : Read local .chktexrc formatted file.\n    -d  --debug     : Debug information. A bit field with 5 bits.\n                      Each bit shows a different type of information.\n    -r  --reset     : Reset settings to default.\n    -S  --set       : Read it's argument as if from chktexrc.\n                      e.g., -S TabSize=8 will override the TabSize.\n\nMuting warning messages:\n~~~~~~~~~~~~~~~~~~~~~~~~\n    -w  --warnon    : Makes msg # given a warning and turns it on.\n    -e  --erroron   : Makes msg # given an error and turns it on.\n    -m  --msgon     : Makes msg # given a message and turns it on.\n    -n  --nowarn    : Mutes msg # given.\n    -L  --nolinesupp: Disables per-line and per-file suppressions.\n\nOutput control flags:\n~~~~~~~~~~~~~~~~~~~~~\n    -v  --verbosity : How errors are displayed.\n                      Default 1, 0=Less, 2=Fancy, 3=lacheck.\n    -V  --pipeverb  : How errors are displayed when stdout != tty.\n                      Defaults to the same as -v.\n    -s  --splitchar : String used to split fields when doing -v0\n    -o  --output    : Redirect error report to a file.\n    -q  --quiet     : Shuts up about version information.\n    -p  --pseudoname: Input file-name when reporting.\n    -f  --format    : Format to use for output\n\nBoolean switches (1 -&gt; enables / 0 -&gt; disables):\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    -b  --backup    : Backup output file.\n    -x  --wipeverb  : Ignore contents of `\\verb' commands.\n    -g  --globalrc  : Read global .chktexrc file.\n    -I  --inputfiles: Execute \\input statements.\n    -H  --headererr : Show errors found before \\begin{document}\n\nMiscellaneous switches:\n~~~~~~~~~~~~~~~~~~~~~~~\n    -W  --version   : Version information\n\n----------------------------------------------------------------------\nIf no LaTeX files are specified on the command line, we will read from\nstdin.   For explanation of warning/error messages, please consult the\nmain documentation ChkTeX.dvi, ChkTeX.ps or ChkTeX.pdf:\n  http://www.nongnu.org/chktex/ChkTeX.pdf\n\nAny of the above arguments can be made permanent by setting them in the\nchktexrc file (~/.chktexrc).\n</code></pre>"},{"location":"descriptors/latex_chktex/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>FROM ghcr.io/assignuser/chktex-alpine:latest AS chktex\nCOPY --link --from=chktex /usr/bin/chktex /usr/bin/\nRUN cd ~ &amp;&amp; touch .chktexrc &amp;&amp; cd /\n</code></pre>"},{"location":"descriptors/lua/","title":"LUA linters in MegaLinter","text":""},{"location":"descriptors/lua/#lua","title":"LUA","text":""},{"location":"descriptors/lua/#linters","title":"Linters","text":"Linter Additional luacheckLUA_LUACHECK seleneLUA_SELENE styluaLUA_STYLUA"},{"location":"descriptors/lua/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.lua</code></li> </ul> </li> </ul>"},{"location":"descriptors/lua/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value LUA_PRE_COMMANDS List of bash commands to run before the linters None LUA_POST_COMMANDS List of bash commands to run after the linters None LUA_FILTER_REGEX_INCLUDE Custom regex including filter LUA_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/lua/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/lua/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\\n    &amp;&amp; cd lua-5.3.5 \\\n    &amp;&amp; make linux \\\n    &amp;&amp; make install \\\n    &amp;&amp; cd .. &amp;&amp; rm -r lua-5.3.5/\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>readline-dev</li> </ul> </li> </ul>"},{"location":"descriptors/lua_luacheck/","title":"luacheck configuration in MegaLinter","text":""},{"location":"descriptors/lua_luacheck/#luacheck","title":"luacheck","text":""},{"location":"descriptors/lua_luacheck/#luacheck-documentation","title":"luacheck documentation","text":"<ul> <li>Version in MegaLinter: 1.2.0</li> <li>Visit Official Web Site</li> <li>See How to configure luacheck rules<ul> <li>If custom <code>.luacheckrc</code> config file isn't found, .luacheckrc will be used</li> </ul> </li> <li>See How to disable luacheck rules in files</li> <li>See Index of problems detected by luacheck</li> </ul>"},{"location":"descriptors/lua_luacheck/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable luacheck by adding <code>LUA_LUACHECK</code> in ENABLE_LINTERS variable</li> <li>Disable luacheck by adding <code>LUA_LUACHECK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value LUA_LUACHECK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> LUA_LUACHECK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> LUA_LUACHECK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file LUA_LUACHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file LUA_LUACHECK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> LUA_LUACHECK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".lua\"]</code> LUA_LUACHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file LUA_LUACHECK_PRE_COMMANDS List of bash commands to run before the linter None LUA_LUACHECK_POST_COMMANDS List of bash commands to run after the linter None LUA_LUACHECK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling LUA_LUACHECK and its pre/post commands None LUA_LUACHECK_CONFIG_FILE luacheck configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.luacheckrc</code> LUA_LUACHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LUA_LUACHECK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> LUA_LUACHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> LUA_LUACHECK_CLI_EXECUTABLE Override CLI executable <code>['luacheck']</code>"},{"location":"descriptors/lua_luacheck/#ide-integration","title":"IDE Integration","text":"<p>Use luacheck in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-luacheck Visit Web Site Brackets brackets-luacheck Visit Web Site Emacs flycheck Visit Web Site Sublime Text SublimeLinter-luacheck Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-luacheck"},{"location":"descriptors/lua_luacheck/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/lua_luacheck/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/lua_luacheck/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.lua</code></li> </ul>"},{"location":"descriptors/lua_luacheck/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>luacheck is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/lua_luacheck/#example-calls","title":"Example calls","text":"<pre><code>luacheck myfile.lua\n</code></pre> <pre><code>luacheck --config .chktexrc myfile.lua\n</code></pre>"},{"location":"descriptors/lua_luacheck/#help-content","title":"Help content","text":"<pre><code>Usage: luacheck ([--config &lt;config&gt;] | [--no-config])\n       ([--default-config &lt;default_config&gt;] | [--no-default-config])\n       [-h] [-g] [-u] [-r] [-a] [-s] [--no-self] [--std &lt;std&gt;] [-c]\n       [-d] [-t] [-m] [--max-line-length &lt;length&gt;]\n       [--no-max-line-length] [--max-code-line-length &lt;length&gt;]\n       [--no-max-code-line-length] [--max-string-line-length &lt;length&gt;]\n       [--no-max-string-line-length]\n       [--max-comment-line-length &lt;length&gt;]\n       [--no-max-comment-line-length]\n       [--max-cyclomatic-complexity &lt;complexity&gt;]\n       [--no-max-cyclomatic-complexity] [--filename &lt;filename&gt;]\n       [-j &lt;jobs&gt;] [--formatter &lt;formatter&gt;] [-q] [--codes] [--ranges]\n       [--no-color] [-v] &lt;file&gt; [&lt;file&gt;] ...\n       ([--cache [&lt;cache&gt;]] | [--no-cache])\n       [--ignore &lt;patt&gt; [&lt;patt&gt;] ...] [--enable &lt;patt&gt; [&lt;patt&gt;] ...]\n       [--only &lt;patt&gt; [&lt;patt&gt;] ...] [--operators &lt;patt&gt; [&lt;patt&gt;] ...]\n       [--globals [&lt;name&gt;] ...] [--read-globals [&lt;name&gt;] ...]\n       [--new-globals [&lt;name&gt;] ...] [--new-read-globals [&lt;name&gt;] ...]\n       [--not-globals [&lt;name&gt;] ...]\n       [--exclude-files &lt;glob&gt; [&lt;glob&gt;] ...]\n       [--include-files &lt;glob&gt; [&lt;glob&gt;] ...]\n\nluacheck 1.2.0, a linter and a static analyzer for Lua.\n\nArguments:\n   files                 List of files, directories and rockspecs to check. Pass\n                         '-' to check stdin.\n\nOptions for filtering warnings:\n   -g, --no-global       Filter out warnings related to global variables.\n                         Equivalent to --ignore 1.\n   -u, --no-unused       Filter out warnings related to unused variables and\n                         values. Equivalent to --ignore [23].\n   -r, --no-redefined    Filter out warnings related to redefined variables.\n                         Equivalent to --ignore 4.\n   -a, --no-unused-args  Filter out warnings related to unused arguments and\n                         loop variables. Equivalent to --ignore 21[23].\n   -s, --no-unused-secondaries\n                         Filter out warnings related to unused variables set\n                         together with used ones.\n   --no-self             Filter out warnings related to implicit self argument.\n   --ignore &lt;patt&gt; [&lt;patt&gt;] ...,\n         -i &lt;patt&gt; [&lt;patt&gt;] ...\n                         Filter out warnings matching these patterns.\n                         If a pattern contains slash, part before slash matches\n                         warning code and part after it matches name of related\n                         variable. Otherwise, if the pattern contains letters or\n                         underscore, it matches name of related variable.\n                         Otherwise, the pattern matches warning code.\n   --enable &lt;patt&gt; [&lt;patt&gt;] ...,\n         -e &lt;patt&gt; [&lt;patt&gt;] ...\n                         Do not filter out warnings matching these patterns.\n   --only &lt;patt&gt; [&lt;patt&gt;] ...,\n       -o &lt;patt&gt; [&lt;patt&gt;] ...\n                         Filter out warnings not matching these patterns.\n   --operators &lt;patt&gt; [&lt;patt&gt;] ...\n                         Allow compound operators matching patterns\n\nOptions for configuring allowed globals:\n   --std &lt;std&gt;           Set standard globals, default is max. &lt;std&gt; can be one\n                         of:\n                            max - union of globals of Lua 5.1, Lua 5.2, Lua 5.3\n                            and LuaJIT 2.x;\n                            min - intersection of globals of Lua 5.1, Lua 5.2,\n                            Lua 5.3 and LuaJIT 2.x;\n                            lua51 - globals of Lua 5.1 without deprecated ones;\n                            lua51c - globals of Lua 5.1;\n                            lua52 - globals of Lua 5.2;\n                            lua52c - globals of Lua 5.2 with LUA_COMPAT_ALL;\n                            lua53 - globals of Lua 5.3;\n                            lua53c - globals of Lua 5.3 with LUA_COMPAT_5_2;\n                            lua54 - globals of Lua 5.4;\n                            lua54c - globals of Lua 5.4 with LUA_COMPAT_5_3;\n                            luajit - globals of LuaJIT 2.x;\n                            ngx_lua - globals of Openresty lua-nginx-module\n                            0.10.10, including standard LuaJIT 2.x globals;\n                            love - globals added by L\u00d6VE;\n                            minetest - globals added by minetest;\n                            playdate - globals added by the Playdate SDK;\n                            busted - globals added by Busted 2.0, by default\n                            added for files ending with _spec.lua within spec,\n                            test, and tests subdirectories;\n                            rockspec - globals allowed in rockspecs, by default\n                            added for files ending with .rockspec;\n                            luacheckrc - globals allowed in Luacheck configs, by\n                            default added for files ending with .luacheckrc;\n                            none - no standard globals.\n\n                         Sets can be combined using '+'. Extra sets can be\n                         defined in config by adding to `stds` global in config.\n   -c, --compat          Equivalent to --std max.\n   --globals [&lt;name&gt;] ...\n                         Add custom global variables (e.g. foo) or fields (e.g.\n                         foo.bar) on top of standard ones.\n   --read-globals [&lt;name&gt;] ...\n                         Add read-only global variables or fields.\n   --new-globals [&lt;name&gt;] ...\n                         Set custom global variables or fields. Removes custom\n                         globals added previously.\n   --new-read-globals [&lt;name&gt;] ...\n                         Set read-only global variables or fields. Removes\n                         read-only globals added previously.\n   --not-globals [&lt;name&gt;] ...\n                         Remove custom and standard global variables or fields.\n   -d, --allow-defined   Allow defining globals implicitly by setting them.\n   -t, --allow-defined-top\n                         Allow defining globals implicitly by setting them in\n                         the top level scope.\n   -m, --module          Limit visibility of implicitly defined globals to their\n                         files.\n\nOptions for configuring line length limits:\n   --max-line-length &lt;length&gt;\n                         Set maximum allowed line length (default: 120).\n   --no-max-line-length  Do not limit line length.\n   --max-code-line-length &lt;length&gt;\n                         Set maximum allowed length for lines ending with code\n                         (default: 120).\n   --no-max-code-line-length\n                         Do not limit code line length.\n   --max-string-line-length &lt;length&gt;\n                         Set maximum allowed length for lines within a string\n                         (default: 120).\n   --no-max-string-line-length\n                         Do not limit string line length.\n   --max-comment-line-length &lt;length&gt;\n                         Set maximum allowed length for comment lines (default:\n                         120).\n   --no-max-comment-line-length\n                         Do not limit comment line length.\n\nConfiguration file options:\n   --config &lt;config&gt;     Path to configuration file. (default: .luacheckrc)\n   --no-config           Do not look up configuration file.\n   --default-config &lt;default_config&gt;\n                         Path to configuration file to use if --[no-]config is\n                         not used and project-specific .luacheckrc is not found.\n                         (default: /root/.config/luacheck/.luacheckrc)\n   --no-default-config   Do not use default configuration file.\n\nFile filtering options:\n   --exclude-files &lt;glob&gt; [&lt;glob&gt;] ...\n                         Do not check files matching these globbing patterns.\n   --include-files &lt;glob&gt; [&lt;glob&gt;] ...\n                         Do not check files not matching these globbing\n                         patterns.\n\nPerformance optimization options:\n   --cache [&lt;cache&gt;]     Path to cache directory. (default:\n                         /root/.cache/luacheck)\n   --no-cache            Do not use cache.\n       -j &lt;jobs&gt;,        Check &lt;jobs&gt; files in parallel (default: 1).\n   --jobs &lt;jobs&gt;         Warning: LuaLanes not found, parallel checking\n                         disabled.\n\nOutput formatting options:\n   --formatter &lt;formatter&gt;\n                         Use custom formatter. &lt;formatter&gt; must be a module name\n                         or one of:\n                            TAP - Test Anything Protocol formatter;\n                            JUnit - JUnit XML formatter;\n                            visual_studio - MSBuild/Visual Studio aware\n                            formatter;\n                            plain - simple warning-per-line formatter;\n                            default - standard formatter.\n   -q, --quiet           Suppress output for files without warnings.\n                         -qq: Suppress output of warnings.\n                         -qqq: Only print total number of warnings and errors.\n   --codes               Show warning codes.\n   --ranges              Show ranges of columns related to warnings.\n   --no-color            Do not color output.\n\nOther options:\n   -h, --help            Show this help message and exit.\n   --max-cyclomatic-complexity &lt;complexity&gt;\n                         Set maximum cyclomatic complexity for functions.\n   --no-max-cyclomatic-complexity\n                         Do not limit function cyclomatic complexity (default).\n   --filename &lt;filename&gt; Use another filename in output and for selecting\n                         configuration overrides.\n   -v, --version         Show version info and exit.\n\nLinks:\n\n   Luacheck on GitHub: https://github.com/lunarmodules/luacheck\n   Luacheck documentation: https://luacheck.readthedocs.org\n</code></pre>"},{"location":"descriptors/lua_luacheck/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\\n    &amp;&amp; cd lua-5.3.5 \\\n    &amp;&amp; make linux \\\n    &amp;&amp; make install \\\n    &amp;&amp; cd .. &amp;&amp; rm -r lua-5.3.5/\n\n# Linter install\n# renovate: datasource=github-tags depName=cvega/luarocks\nARG LUA_LUACHECK_VERSION=3.3.1\n\nRUN wget --tries=5 https://github.com/cvega/luarocks/archive/v${LUA_LUACHECK_VERSION}-super-linter.tar.gz -O - -q | tar -xzf - \\\n    &amp;&amp; cd luarocks-${LUA_LUACHECK_VERSION}-super-linter \\\n    &amp;&amp; ./configure --with-lua-include=/usr/local/include \\\n    &amp;&amp; make \\\n    &amp;&amp; make -b install \\\n    &amp;&amp; cd .. &amp;&amp; rm -r luarocks-${LUA_LUACHECK_VERSION}-super-linter/ \\\n    &amp;&amp; luarocks install luacheck \\\n    &amp;&amp; cd /\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>readline-dev</li> <li>openssl</li> </ul> </li> </ul>"},{"location":"descriptors/lua_selene/","title":"selene configuration in MegaLinter","text":""},{"location":"descriptors/lua_selene/#selene","title":"selene","text":""},{"location":"descriptors/lua_selene/#selene-documentation","title":"selene documentation","text":"<ul> <li>Version in MegaLinter: 0.28.0</li> <li>Visit Official Web Site</li> <li>See How to configure selene rules</li> <li>See How to disable selene rules in files</li> <li>See Index of problems detected by selene</li> </ul>"},{"location":"descriptors/lua_selene/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable selene by adding <code>LUA_SELENE</code> in ENABLE_LINTERS variable</li> <li>Disable selene by adding <code>LUA_SELENE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value LUA_SELENE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> LUA_SELENE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> LUA_SELENE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file LUA_SELENE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file LUA_SELENE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> LUA_SELENE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".lua\"]</code> LUA_SELENE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file LUA_SELENE_PRE_COMMANDS List of bash commands to run before the linter None LUA_SELENE_POST_COMMANDS List of bash commands to run after the linter None LUA_SELENE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling LUA_SELENE and its pre/post commands None LUA_SELENE_CONFIG_FILE selene configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>selene.toml</code> LUA_SELENE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LUA_SELENE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> LUA_SELENE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> LUA_SELENE_CLI_EXECUTABLE Override CLI executable <code>['selene']</code>"},{"location":"descriptors/lua_selene/#ide-integration","title":"IDE Integration","text":"<p>Use selene in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install neovim ['nvim-lint', 'none-ls'] Visit Web Site Sublime Text SublimeLinter-contrib-selene Visit Web Site Visual Studio Code selene-vscode"},{"location":"descriptors/lua_selene/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/lua_selene/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/lua_selene/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.lua</code></li> </ul>"},{"location":"descriptors/lua_selene/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>selene is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/lua_selene/#example-calls","title":"Example calls","text":"<pre><code>selene myfile.lua\n</code></pre> <pre><code>selene --config chktexrc.toml myfile.lua\n</code></pre>"},{"location":"descriptors/lua_selene/#help-content","title":"Help content","text":"<pre><code>selene 0.28.0\n\nUSAGE:\n    selene [FLAGS] [OPTIONS] &lt;files&gt;...\n    selene &lt;SUBCOMMAND&gt;\n\nFLAGS:\n        --allow-warnings    Pass when only warnings occur\n    -h, --help              Prints help information\n        --no-exclude\n    -n, --no-summary        Suppress summary information\n    -q, --quiet             Display only the necessary information. Equivalent to --display-style=\"quiet\"\n    -V, --version           Prints version information\n\nOPTIONS:\n        --color &lt;color&gt;                     [default: auto]  [possible values: Always, Auto, Never]\n        --config &lt;config&gt;                  A toml file to configure the behavior of selene [default: selene.toml]\n        --display-style &lt;display-style&gt;    Sets the display method [possible values: Json, Json2, Rich, Quiet]\n        --num-threads &lt;num-threads&gt;        Number of threads to run on, default to the numbers of logical cores on your\n                                           system [default: 4]\n        --pattern &lt;pattern&gt;...             A glob to match files with to check\n\nARGS:\n    &lt;files&gt;...\n\nSUBCOMMANDS:\n    capabilities           Prints the capabilities of the current build\n    generate-roblox-std\n    help                   Prints this message or the help of the given subcommand(s)\n    update-roblox-std\n    upgrade-std\n    validate-config\n</code></pre>"},{"location":"descriptors/lua_selene/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\\n    &amp;&amp; cd lua-5.3.5 \\\n    &amp;&amp; make linux \\\n    &amp;&amp; make install \\\n    &amp;&amp; cd .. &amp;&amp; rm -r lua-5.3.5/\n\n# Linter install\n# renovate: datasource=crate depName=selene\nARG CARGO_SELENE_VERSION=0.28.0\n</code></pre> <ul> <li>Cargo packages (Rust):<ul> <li>selene@0.28.0</li> </ul> </li> </ul>"},{"location":"descriptors/lua_stylua/","title":"stylua configuration in MegaLinter","text":""},{"location":"descriptors/lua_stylua/#stylua","title":"stylua","text":""},{"location":"descriptors/lua_stylua/#stylua-documentation","title":"stylua documentation","text":"<ul> <li>Version in MegaLinter: 2.0.0</li> <li>Visit Official Web Site</li> <li>See How to configure stylua rules</li> <li>See How to disable stylua rules in files</li> <li>See Index of problems detected by stylua</li> </ul>"},{"location":"descriptors/lua_stylua/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable stylua by adding <code>LUA_STYLUA</code> in ENABLE_LINTERS variable</li> <li>Disable stylua by adding <code>LUA_STYLUA</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value LUA_STYLUA_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> LUA_STYLUA_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> LUA_STYLUA_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file LUA_STYLUA_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file LUA_STYLUA_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> LUA_STYLUA_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".lua\"]</code> LUA_STYLUA_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file LUA_STYLUA_PRE_COMMANDS List of bash commands to run before the linter None LUA_STYLUA_POST_COMMANDS List of bash commands to run after the linter None LUA_STYLUA_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling LUA_STYLUA and its pre/post commands None LUA_STYLUA_CONFIG_FILE stylua configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>stylua.toml</code> LUA_STYLUA_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LUA_STYLUA_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> LUA_STYLUA_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> LUA_STYLUA_CLI_EXECUTABLE Override CLI executable <code>['stylua']</code>"},{"location":"descriptors/lua_stylua/#ide-integration","title":"IDE Integration","text":"<p>Use stylua in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install neovim ['nvim-lint', 'none-ls', 'stylua-nvim', 'stylua.nvim'] Visit Web Site Visual Studio Code Stylua Sublime Text Sublime-Pretty-Lua Visit Web Site"},{"location":"descriptors/lua_stylua/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/lua_stylua/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/lua_stylua/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.lua</code></li> </ul>"},{"location":"descriptors/lua_stylua/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>stylua is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/lua_stylua/#example-calls","title":"Example calls","text":"<pre><code>stylua --check myfile.lua\n</code></pre> <pre><code>stylua --config-path chktexrc.toml --check myfile.lua\n</code></pre>"},{"location":"descriptors/lua_stylua/#help-content","title":"Help content","text":"<pre><code>stylua 2.0.0\nA utility to format Lua code\n\nUSAGE:\n    stylua [OPTIONS] [FILES]...\n\nARGS:\n    &lt;FILES&gt;...    A list of files to format\n\nOPTIONS:\n    -a, --allow-hidden\n            Whether to traverse hidden files/directories\n\n    -c, --check\n            Runs in 'check' mode\n\n        --color &lt;COLOR&gt;\n            Use colored output [default: Auto] [possible values: Always, Auto, Never]\n\n    -f, --config-path &lt;CONFIG_PATH&gt;\n            Specify path to stylua.toml configuration file\n\n    -g, --glob &lt;GLOB&gt;\n            Glob patterns to test against which files to check\n\n    -h, --help\n            Print help information\n\n        --no-editorconfig\n            Disables the EditorConfig feature\n\n        --num-threads &lt;NUM_THREADS&gt;\n            The number of threads to use to format files in parallel [default: 4]\n\n        --output-format &lt;OUTPUT_FORMAT&gt;\n            Configures the diff output when using 'check' mode [default: Standard] [possible values:\n            Standard, Unified, Json, Summary]\n\n        --range-end &lt;RANGE_END&gt;\n            An ending range to format files, given as a byte offset from the beginning of the file\n\n        --range-start &lt;RANGE_START&gt;\n            A starting range to format files, given as a byte offset from the beginning of the file\n\n        --respect-ignores\n            Respect .styluaignore and glob matching for file paths provided directly to the tool\n\n    -s, --search-parent-directories\n            Search parent directories for stylua.toml, if not found in current directory. Ignored if\n            config_path is provided\n\n        --stdin-filepath &lt;STDIN_FILEPATH&gt;\n            Specify the location of the file that is being passed into stdin. Ignored if not taking\n            in input from stdin\n\n    -v, --verbose\n            Enables verbose output\n\n    -V, --version\n            Print version information\n\n        --verify\n            Verifies the output correctness after formatting\n\nFORMATTING OPTIONS:\n        --call-parentheses &lt;CALL_PARENTHESES&gt;\n            Specify whether to apply parentheses on function calls with single string or table arg\n            [possible values: Always, NoSingleString, NoSingleTable, None, Input]\n\n        --collapse-simple-statement &lt;COLLAPSE_SIMPLE_STATEMENT&gt;\n            Specify whether to collapse simple statements [possible values: Never, FunctionOnly,\n            ConditionalOnly, Always]\n\n        --column-width &lt;COLUMN_WIDTH&gt;\n            The column width to use to attempt to wrap lines\n\n        --indent-type &lt;INDENT_TYPE&gt;\n            The type of indents to use [possible values: Tabs, Spaces]\n\n        --indent-width &lt;INDENT_WIDTH&gt;\n            The width of a single indentation level\n\n        --line-endings &lt;LINE_ENDINGS&gt;\n            The type of line endings to use [possible values: Unix, Windows]\n\n        --quote-style &lt;QUOTE_STYLE&gt;\n            The style of quotes to use in string literals [possible values: AutoPreferDouble,\n            AutoPreferSingle, ForceDouble, ForceSingle]\n\n        --sort-requires\n            Enable requires sorting\n\n        --space-after-function-names &lt;SPACE_AFTER_FUNCTION_NAMES&gt;\n            [possible values: Never, Definitions, Calls, Always]\n\n        --syntax &lt;SYNTAX&gt;\n            The type of Lua syntax to parse [possible values: All, Lua51]\n</code></pre>"},{"location":"descriptors/lua_stylua/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\\n    &amp;&amp; cd lua-5.3.5 \\\n    &amp;&amp; make linux \\\n    &amp;&amp; make install \\\n    &amp;&amp; cd .. &amp;&amp; rm -r lua-5.3.5/\n\n# Linter install\n# renovate: datasource=crate depName=stylua\nARG CARGO_STYLUA_VERSION=2.0.0\n</code></pre> <ul> <li>Cargo packages (Rust):<ul> <li>stylua@2.0.0</li> </ul> </li> </ul>"},{"location":"descriptors/makefile/","title":"MAKEFILE linters in MegaLinter","text":""},{"location":"descriptors/makefile/#makefile","title":"MAKEFILE","text":""},{"location":"descriptors/makefile/#linters","title":"Linters","text":"Linter Additional checkmakeMAKEFILE_CHECKMAKE"},{"location":"descriptors/makefile/#linted-files","title":"Linted files","text":"<ul> <li>File names:<ul> <li><code>Makefile</code></li> </ul> </li> </ul>"},{"location":"descriptors/makefile/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value MAKEFILE_PRE_COMMANDS List of bash commands to run before the linters None MAKEFILE_POST_COMMANDS List of bash commands to run after the linters None MAKEFILE_FILTER_REGEX_INCLUDE Custom regex including filter MAKEFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/makefile_checkmake/","title":"checkmake configuration in MegaLinter","text":""},{"location":"descriptors/makefile_checkmake/#checkmake","title":"checkmake","text":"<p>This linter has been disabled in this version</p> <p>Disabled reason: Security issues: https://github.com/mrtazz/checkmake/issues/99</p>"},{"location":"descriptors/makefile_checkmake/#checkmake-documentation","title":"checkmake documentation","text":"<ul> <li>Version in MegaLinter: 0.2.0</li> <li>Visit Official Web Site</li> <li>See How to configure checkmake rules</li> </ul>"},{"location":"descriptors/makefile_checkmake/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable checkmake by adding <code>MAKEFILE_CHECKMAKE</code> in ENABLE_LINTERS variable</li> <li>Disable checkmake by adding <code>MAKEFILE_CHECKMAKE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value MAKEFILE_CHECKMAKE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> MAKEFILE_CHECKMAKE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> MAKEFILE_CHECKMAKE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file MAKEFILE_CHECKMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file MAKEFILE_CHECKMAKE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> MAKEFILE_CHECKMAKE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> Exclude every file MAKEFILE_CHECKMAKE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> <code>[\"Makefile\"]</code> MAKEFILE_CHECKMAKE_PRE_COMMANDS List of bash commands to run before the linter None MAKEFILE_CHECKMAKE_POST_COMMANDS List of bash commands to run after the linter None MAKEFILE_CHECKMAKE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling MAKEFILE_CHECKMAKE and its pre/post commands None MAKEFILE_CHECKMAKE_CONFIG_FILE checkmake configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.checkmake.ini</code> MAKEFILE_CHECKMAKE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MAKEFILE_CHECKMAKE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> MAKEFILE_CHECKMAKE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> MAKEFILE_CHECKMAKE_CLI_EXECUTABLE Override CLI executable <code>['checkmake']</code>"},{"location":"descriptors/makefile_checkmake/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/makefile_checkmake/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/makefile_checkmake/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File names (regex): <code>Makefile</code></li> </ul>"},{"location":"descriptors/makefile_checkmake/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>checkmake is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/makefile_checkmake/#example-calls","title":"Example calls","text":"<pre><code>checkmake Makefile\n</code></pre> <pre><code>checkmake --config .checkmake.ini Makefile\n</code></pre>"},{"location":"descriptors/makefile_checkmake/#help-content","title":"Help content","text":"<pre><code>checkmake.\n\n  Usage:\n  checkmake [options] &lt;makefile&gt;\n  checkmake -h | --help\n  checkmake --version\n  checkmake --list-rules\n\n  Options:\n  -h --help               Show this screen.\n  --version               Show version.\n  --debug                 Enable debug mode\n  --config=&lt;configPath&gt;   Configuration file to read\n  --format=&lt;format&gt;       Output format as a Golang text/template template\n  --list-rules            List registered rules\n</code></pre>"},{"location":"descriptors/makefile_checkmake/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>FROM mrtazz/checkmake:latest AS checkmake\nCOPY --link --from=checkmake /checkmake /usr/bin/checkmake\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>make</li> </ul> </li> </ul>"},{"location":"descriptors/markdown/","title":"MARKDOWN linters in MegaLinter","text":""},{"location":"descriptors/markdown/#markdown","title":"MARKDOWN","text":""},{"location":"descriptors/markdown/#linters","title":"Linters","text":"Linter Additional markdownlintMARKDOWN_MARKDOWNLINT remark-lintMARKDOWN_REMARK_LINT markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER"},{"location":"descriptors/markdown/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.md</code></li> </ul> </li> </ul>"},{"location":"descriptors/markdown/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value MARKDOWN_PRE_COMMANDS List of bash commands to run before the linters None MARKDOWN_POST_COMMANDS List of bash commands to run after the linters None MARKDOWN_FILTER_REGEX_INCLUDE Custom regex including filter MARKDOWN_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/markdown_markdown_link_check/","title":"markdown-link-check configuration in MegaLinter","text":""},{"location":"descriptors/markdown_markdown_link_check/#markdown-link-check","title":"markdown-link-check","text":""},{"location":"descriptors/markdown_markdown_link_check/#markdown-link-check-documentation","title":"markdown-link-check documentation","text":"<ul> <li>Version in MegaLinter: 3.12.2</li> <li>Visit Official Web Site</li> <li>See How to configure markdown-link-check rules<ul> <li>If custom <code>.markdown-link-check.json</code> config file isn't found, .markdown-link-check.json will be used</li> </ul> </li> <li>See How to disable markdown-link-check rules in files</li> </ul>"},{"location":"descriptors/markdown_markdown_link_check/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable markdown-link-check by adding <code>MARKDOWN_MARKDOWN_LINK_CHECK</code> in ENABLE_LINTERS variable</li> <li>Disable markdown-link-check by adding <code>MARKDOWN_MARKDOWN_LINK_CHECK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWN_LINK_CHECK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file MARKDOWN_MARKDOWN_LINK_CHECK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\"]</code> MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file MARKDOWN_MARKDOWN_LINK_CHECK_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWN_LINK_CHECK_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWN_LINK_CHECK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling MARKDOWN_MARKDOWN_LINK_CHECK and its pre/post commands None MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE markdown-link-check configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.markdown-link-check.json</code> MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> MARKDOWN_MARKDOWN_LINK_CHECK_CLI_EXECUTABLE Override CLI executable <code>['markdown-link-check']</code>"},{"location":"descriptors/markdown_markdown_link_check/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/markdown_markdown_link_check/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/markdown_markdown_link_check/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.md</code></li> </ul>"},{"location":"descriptors/markdown_markdown_link_check/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>markdown-link-check is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/markdown_markdown_link_check/#example-calls","title":"Example calls","text":"<pre><code>markdown-link-check myfile.md\n</code></pre> <pre><code>markdown-link-check -c .markdown-link-check.json myfile.md\n</code></pre>"},{"location":"descriptors/markdown_markdown_link_check/#help-content","title":"Help content","text":"<pre><code>Usage: markdown-link-check [options] [filenamesOrUrls...]\n\nOptions:\n  -V, --version           output the version number\n  -p, --progress          show progress bar\n  -c, --config [config]   apply a config file (JSON), holding e.g. url specific\n                          header configuration\n  -q, --quiet             displays errors only\n  -v, --verbose           displays detailed error information\n  -i --ignore &lt;paths&gt;     ignore input paths including an ignore path\n  -a, --alive &lt;code&gt;      comma separated list of HTTP codes to be considered\n                          as alive\n  -r, --retry             retry after the duration indicated in 'retry-after'\n                          header when HTTP code is 429\n  --projectBaseUrl &lt;url&gt;  the URL to use for {{BASEURL}} replacement\n  -h, --help              display help for command\n</code></pre>"},{"location":"descriptors/markdown_markdown_link_check/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=markdown-link-check\nARG NPM_MARKDOWN_LINK_CHECK_VERSION=3.12.2\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>markdown-link-check@3.12.2</li> </ul> </li> </ul>"},{"location":"descriptors/markdown_markdown_table_formatter/","title":"markdown-table-formatter configuration in MegaLinter","text":""},{"location":"descriptors/markdown_markdown_table_formatter/#markdown-table-formatter","title":"markdown-table-formatter","text":"<p>markdown-table-formatter detects wrongly formatted markdown tables and can automatically reformat them</p>"},{"location":"descriptors/markdown_markdown_table_formatter/#markdown-table-formatter-documentation","title":"markdown-table-formatter documentation","text":"<ul> <li>Version in MegaLinter: 1.6.1</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/markdown_markdown_table_formatter/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable markdown-table-formatter by adding <code>MARKDOWN_MARKDOWN_TABLE_FORMATTER</code> in ENABLE_LINTERS variable</li> <li>Disable markdown-table-formatter by adding <code>MARKDOWN_MARKDOWN_TABLE_FORMATTER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>MARKDOWN_MARKDOWN_TABLE_FORMATTER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWN_TABLE_FORMATTER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\"]</code> MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file MARKDOWN_MARKDOWN_TABLE_FORMATTER_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWN_TABLE_FORMATTER_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWN_TABLE_FORMATTER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling MARKDOWN_MARKDOWN_TABLE_FORMATTER and its pre/post commands None MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_EXECUTABLE Override CLI executable <code>['markdown-table-formatter']</code>"},{"location":"descriptors/markdown_markdown_table_formatter/#ide-integration","title":"IDE Integration","text":"<p>Use markdown-table-formatter in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Markdown Table Prettify Extension Visit Web Site"},{"location":"descriptors/markdown_markdown_table_formatter/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/markdown_markdown_table_formatter/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/markdown_markdown_table_formatter/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.md</code></li> </ul>"},{"location":"descriptors/markdown_markdown_table_formatter/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>markdown-table-formatter is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/markdown_markdown_table_formatter/#example-calls","title":"Example calls","text":"<pre><code>markdown-table-formatter --check myfile.md\n</code></pre> <pre><code>markdown-table-formatter myfile.md\n</code></pre> <pre><code>markdown-table-formatter myfile.md myfile2.md myfile3.md\n</code></pre>"},{"location":"descriptors/markdown_markdown_table_formatter/#help-content","title":"Help content","text":"<pre><code>markdown-table-formatter [options]\n\n  -c, --check              Check only (exits 1 if wrongly formatted markdown tables are found)\n  -p, --columnpadding Int  Override table columns padding number of spaces\n  -h, --help               Show help\n  -v, --version            Show version\n  -z, --verbose            Verbose mode\n</code></pre>"},{"location":"descriptors/markdown_markdown_table_formatter/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=markdown-table-formatter\nARG NPM_MARKDOWN_TABLE_FORMATTER_VERSION=1.6.1\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>markdown-table-formatter@1.6.1</li> </ul> </li> </ul>"},{"location":"descriptors/markdown_markdown_table_prettify/","title":"Markdown markdown table prettify","text":""},{"location":"descriptors/markdown_markdown_table_prettify/#markdown-table-prettify","title":"markdown-table-prettify","text":"<p>markdown-table-prettify detects wrongly formatted markdown tables and can automatically reformat them</p>"},{"location":"descriptors/markdown_markdown_table_prettify/#markdown-table-prettify-documentation","title":"markdown-table-prettify documentation","text":"<ul> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/markdown_markdown_table_prettify/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable markdown-table-prettify by adding <code>MARKDOWN_MARKDOWN_TABLE_PRETTIFY</code> in ENABLE_LINTERS variable</li> <li>Disable markdown-table-prettify by adding <code>MARKDOWN_MARKDOWN_TABLE_PRETTIFY</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable auto-fixes by adding <code>MARKDOWN_MARKDOWN_TABLE_PRETTIFY</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src|lib)</code> Include every file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test|examples)</code> Exclude no file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\"]</code> MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code>"},{"location":"descriptors/markdown_markdown_table_prettify/#ide-integration","title":"IDE Integration","text":"<p>Use markdown-table-prettify in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Markdown Table Prettify Extension Visit Web Site"},{"location":"descriptors/markdown_markdown_table_prettify/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 80 dart Optimized for DART based projects 36 documentation MegaLinter for documentation projects 35 dotnet Optimized for C, C++, C# or VB based projects 41 go Optimized for GO based projects 36 java Optimized for JAVA based projects 36 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 44 php Optimized for PHP based projects 39 python Optimized for PYTHON based projects 42 ruby Optimized for RUBY based projects 36 rust Optimized for RUST based projects 36 salesforce Optimized for Salesforce based projects 36 scala Optimized for SCALA based projects 36 terraform Optimized for TERRAFORM based projects 38"},{"location":"descriptors/markdown_markdown_table_prettify/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/markdown_markdown_table_prettify/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.md</code></li> </ul>"},{"location":"descriptors/markdown_markdown_table_prettify/#example-calls","title":"Example calls","text":"<pre><code>markdown-table-prettify --check myfile.md\n</code></pre> <pre><code>markdown-table-prettify myfile.md\n</code></pre>"},{"location":"descriptors/markdown_markdown_table_prettify/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>NPM packages (node.js):<ul> <li>markdown-table-prettify</li> </ul> </li> </ul>"},{"location":"descriptors/markdown_markdownlint/","title":"markdownlint configuration in MegaLinter","text":""},{"location":"descriptors/markdown_markdownlint/#markdownlint","title":"markdownlint","text":"<p>Checks for errors in Markdown files, and can also auto-fix some of them.</p> <p>MarkdownLint is run through markdownlint-cli</p> <p>To see MarkdownLint version, you can have a look in the dependencies of latest markdownlint-cli version.</p>"},{"location":"descriptors/markdown_markdownlint/#markdownlint-documentation","title":"markdownlint documentation","text":"<ul> <li>Version in MegaLinter: 0.44.0</li> <li>Visit Official Web Site</li> <li>See How to configure markdownlint rules<ul> <li>If custom <code>.markdownlint.json</code> config file isn't found, .markdownlint.json will be used</li> </ul> </li> <li>See How to disable markdownlint rules in files</li> <li>See How to ignore files and directories with markdownlint</li> <li>See Index of problems detected by markdownlint</li> </ul>"},{"location":"descriptors/markdown_markdownlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable markdownlint by adding <code>MARKDOWN_MARKDOWNLINT</code> in ENABLE_LINTERS variable</li> <li>Disable markdownlint by adding <code>MARKDOWN_MARKDOWNLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>MARKDOWN_MARKDOWNLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value MARKDOWN_DEFAULT_STYLE For markdownlint to be active, MARKDOWN_DEFAULT_STYLE must be <code>markdownlint</code> <code>markdownlint</code> MARKDOWN_MARKDOWNLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWNLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file MARKDOWN_MARKDOWNLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\"]</code> MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file MARKDOWN_MARKDOWNLINT_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWNLINT_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWNLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling MARKDOWN_MARKDOWNLINT and its pre/post commands None MARKDOWN_MARKDOWNLINT_CONFIG_FILE markdownlint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.markdownlint.json</code> MARKDOWN_MARKDOWNLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> MARKDOWN_MARKDOWNLINT_CLI_EXECUTABLE Override CLI executable <code>['markdownlint']</code>"},{"location":"descriptors/markdown_markdownlint/#ide-integration","title":"IDE Integration","text":"<p>Use markdownlint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-node-markdownlint Visit Web Site Sublime Text SublimeLinter-contrib-markdownlint Visit Web Site vim coc-markdownlint Visit Web Site Visual Studio Code vscode-markdownlint"},{"location":"descriptors/markdown_markdownlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/markdown_markdownlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/markdown_markdownlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.md</code></li> </ul>"},{"location":"descriptors/markdown_markdownlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>markdownlint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/markdown_markdownlint/#example-calls","title":"Example calls","text":"<pre><code>markdownlint myfile.md\n</code></pre> <pre><code>markdownlint -c .markdownlint.json myfile.md\n</code></pre> <pre><code>markdownlint --fix -c .markdownlint.json myfile.md\n</code></pre>"},{"location":"descriptors/markdown_markdownlint/#help-content","title":"Help content","text":"<pre><code>Usage: markdownlint [options] [files|directories|globs...]\n\nMarkdownLint Command Line Interface\n\nArguments:\n  files|directories|globs                    files, directories, and/or globs to lint\n\nOptions:\n  -V, --version                              output the version number\n  -c, --config &lt;configFile&gt;                  configuration file (JSON, JSONC, JS, YAML, or TOML)\n  --configPointer &lt;pointer&gt;                  JSON Pointer to object within configuration file (default: \"\")\n  -d, --dot                                  include files/folders with a dot (for example `.github`)\n  -f, --fix                                  fix basic errors (does not work with STDIN)\n  -i, --ignore &lt;file|directory|glob&gt;         file(s) to ignore/exclude (default: [])\n  -j, --json                                 write issues in json format\n  -o, --output &lt;outputFile&gt;                  write issues to file (no console)\n  -p, --ignore-path &lt;file&gt;                   path to file with ignore pattern(s)\n  -q, --quiet                                do not write issues to STDOUT\n  -r, --rules &lt;file|directory|glob|package&gt;  include custom rule files (default: [])\n  -s, --stdin                                read from STDIN (does not work with files)\n  --enable &lt;rules...&gt;                        Enable certain rules, e.g. --enable MD013 MD041 --\n  --disable &lt;rules...&gt;                       Disable certain rules, e.g. --disable MD013 MD041 --\n  -h, --help                                 display help for command\n</code></pre>"},{"location":"descriptors/markdown_markdownlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=markdownlint-cli\nARG NPM_MARKDOWNLINT_CLI_VERSION=0.44.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>markdownlint-cli@0.44.0</li> </ul> </li> </ul>"},{"location":"descriptors/markdown_remark_lint/","title":"remark-lint configuration in MegaLinter","text":""},{"location":"descriptors/markdown_remark_lint/#remark-lint","title":"remark-lint","text":"<p>This linter has been disabled in this version</p> <p>Disabled reason: Bug in remark-lint: https://github.com/remarkjs/remark-lint/issues/322</p>"},{"location":"descriptors/markdown_remark_lint/#remark-lint-documentation","title":"remark-lint documentation","text":"<ul> <li>Version in MegaLinter: 14.0.2</li> <li>Visit Official Web Site</li> <li>See How to configure remark-lint rules<ul> <li>If custom <code>.remarkrc</code> config file isn't found, .remarkrc will be used</li> </ul> </li> <li>See How to disable remark-lint rules in files</li> <li>See Index of problems detected by remark-lint</li> </ul>"},{"location":"descriptors/markdown_remark_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable remark-lint by adding <code>MARKDOWN_REMARK_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable remark-lint by adding <code>MARKDOWN_REMARK_LINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>MARKDOWN_REMARK_LINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value MARKDOWN_DEFAULT_STYLE For remark-lint to be active, MARKDOWN_DEFAULT_STYLE must be <code>remark-lint</code> <code>markdownlint</code> MARKDOWN_REMARK_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> MARKDOWN_REMARK_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file MARKDOWN_REMARK_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> MARKDOWN_REMARK_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\"]</code> MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file MARKDOWN_REMARK_LINT_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_REMARK_LINT_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_REMARK_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling MARKDOWN_REMARK_LINT and its pre/post commands None MARKDOWN_REMARK_LINT_CONFIG_FILE remark-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.remarkrc</code> MARKDOWN_REMARK_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_REMARK_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> MARKDOWN_REMARK_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> MARKDOWN_REMARK_LINT_CLI_EXECUTABLE Override CLI executable <code>['remark']</code>"},{"location":"descriptors/markdown_remark_lint/#ide-integration","title":"IDE Integration","text":"<p>Use remark-lint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-remark Visit Web Site Sublime Text SublimeLinter-contrib-remark-lint Visit Web Site vim ale Visit Web Site Visual Studio Code vscode-remark-lint Visit Web Site"},{"location":"descriptors/markdown_remark_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/markdown_remark_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/markdown_remark_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.md</code></li> </ul>"},{"location":"descriptors/markdown_remark_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>remark-lint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/markdown_remark_lint/#example-calls","title":"Example calls","text":"<pre><code>remark --frail myfile.md\n</code></pre> <pre><code>remark --frail --rc-path .remarkrc myfile.md\n</code></pre> <pre><code>remark --frail -o --rc-path .remarkrc myfile.md\n</code></pre>"},{"location":"descriptors/markdown_remark_lint/#help-content","title":"Help content","text":"<pre><code>Usage: remark [options] [path | glob ...]\n\n  Command line interface to inspect and change markdown files with remark\n\nOptions:\n\n  -h  --help                              output usage information\n  -v  --version                           output version number\n  -o  --output [path]                     specify output location\n  -r  --rc-path &lt;path&gt;                    specify configuration file\n  -i  --ignore-path &lt;path&gt;                specify ignore file\n  -s  --setting &lt;settings&gt;                specify settings\n  -e  --ext &lt;extensions&gt;                  specify extensions\n  -u  --use &lt;plugins&gt;                     use plugins\n  -w  --watch                             watch for changes and reprocess\n  -q  --quiet                             output only warnings and errors\n  -S  --silent                            output only errors\n  -f  --frail                             exit with 1 on warnings\n  -t  --tree                              specify input and output as syntax tree\n      --report &lt;reporter&gt;                 specify reporter\n      --file-path &lt;path&gt;                  specify path to process as\n      --ignore-path-resolve-from dir|cwd  resolve patterns in `ignore-path` from its directory or cwd\n      --ignore-pattern &lt;globs&gt;            specify ignore patterns\n      --silently-ignore                   do not fail when given ignored files\n      --tree-in                           specify input as syntax tree\n      --tree-out                          output syntax tree\n      --inspect                           output formatted syntax tree\n      --[no-]stdout                       specify writing to stdout (on by default)\n      --[no-]color                        specify color in report (on by default)\n      --[no-]config                       search for configuration files (on by default)\n      --[no-]ignore                       search for ignore files (on by default)\n\nExamples:\n\n  # Process `input.md`\n  $ remark input.md -o output.md\n\n  # Pipe\n  $ remark &lt; input.md &gt; output.md\n\n  # Rewrite all applicable files\n  $ remark . -o\n</code></pre>"},{"location":"descriptors/markdown_remark_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=remark-cli\nARG NPM_REMARK_CLI_VERSION=12.0.1\n# renovate: datasource=npm depName=remark-preset-lint-recommended\nARG NPM_REMARK_PRESET_LINT_RECOMMENDED_VERSION=7.0.1\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>remark-cli</li> <li>remark-preset-lint-recommended</li> </ul> </li> </ul>"},{"location":"descriptors/openapi/","title":"OPENAPI linters in MegaLinter","text":""},{"location":"descriptors/openapi/#openapi","title":"OPENAPI","text":""},{"location":"descriptors/openapi/#linters","title":"Linters","text":"Linter Additional spectralOPENAPI_SPECTRAL"},{"location":"descriptors/openapi/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> <li><code>.json</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>\"openapi\":</code></li> <li><code>\"swagger\":</code></li> <li><code>openapi:</code></li> <li><code>swagger:</code></li> </ul> </li> </ul>"},{"location":"descriptors/openapi/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value OPENAPI_PRE_COMMANDS List of bash commands to run before the linters None OPENAPI_POST_COMMANDS List of bash commands to run after the linters None OPENAPI_FILTER_REGEX_INCLUDE Custom regex including filter OPENAPI_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/perl/","title":"PERL linters in MegaLinter","text":""},{"location":"descriptors/perl/#perl","title":"PERL","text":""},{"location":"descriptors/perl/#linters","title":"Linters","text":"Linter Additional perlcriticPERL_PERLCRITIC"},{"location":"descriptors/perl/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.pl</code></li> <li><code>.pm</code></li> <li><code>.t</code></li> <li>``</li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>^#!/usr/bin/env perl</code></li> <li><code>^#!/usr/bin/perl</code></li> </ul> </li> </ul>"},{"location":"descriptors/perl/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value PERL_PRE_COMMANDS List of bash commands to run before the linters None PERL_POST_COMMANDS List of bash commands to run after the linters None PERL_FILTER_REGEX_INCLUDE Custom regex including filter PERL_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/perl/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/perl/#installation","title":"Installation","text":"<ul> <li>APK packages (Linux):<ul> <li>perl</li> <li>perl-dev</li> </ul> </li> </ul>"},{"location":"descriptors/perl_perlcritic/","title":"perlcritic configuration in MegaLinter","text":""},{"location":"descriptors/perl_perlcritic/#perlcritic-documentation","title":"perlcritic documentation","text":"<ul> <li>Version in MegaLinter: 1.156</li> <li>Visit Official Web Site</li> <li>See How to configure perlcritic rules</li> <li>See How to disable perlcritic rules in files</li> <li>See Index of problems detected by perlcritic</li> </ul>"},{"location":"descriptors/perl_perlcritic/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable perlcritic by adding <code>PERL_PERLCRITIC</code> in ENABLE_LINTERS variable</li> <li>Disable perlcritic by adding <code>PERL_PERLCRITIC</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PERL_PERLCRITIC_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PERL_PERLCRITIC_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PERL_PERLCRITIC_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PERL_PERLCRITIC_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> PERL_PERLCRITIC_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".pl\", \".pm\", \".t\", \"\"]</code> PERL_PERLCRITIC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PERL_PERLCRITIC_PRE_COMMANDS List of bash commands to run before the linter None PERL_PERLCRITIC_POST_COMMANDS List of bash commands to run after the linter None PERL_PERLCRITIC_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PERL_PERLCRITIC and its pre/post commands None PERL_PERLCRITIC_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PERL_PERLCRITIC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PERL_PERLCRITIC_CLI_EXECUTABLE Override CLI executable <code>['perlcritic']</code>"},{"location":"descriptors/perl_perlcritic/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/perl_perlcritic/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/perl_perlcritic/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.pl</code>, <code>.pm</code>, <code>.t</code>, ``</li> <li>Detected file content (regex): <code>^#!/usr/bin/env perl</code>, <code>^#!/usr/bin/perl</code></li> </ul>"},{"location":"descriptors/perl_perlcritic/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>perlcritic is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/perl_perlcritic/#example-calls","title":"Example calls","text":"<pre><code>perlcritic myfile.pl\n</code></pre>"},{"location":"descriptors/perl_perlcritic/#help-content","title":"Help content","text":"<pre><code>Usage:\n      perlcritic [-12345 | --brutal | --cruel | --harsh | --stern | --gentle]\n                 [--severity number | name] [{-p | --profile} file | --noprofile]\n                 [--top [ number ]] [--theme expression] [--include pattern]\n                 [--exclude pattern] [{-s | --single-policy} pattern]\n                 [--only | --noonly] [--profile-strictness {warn|fatal|quiet}]\n                 [--force | --noforce] [--statistics] [--statistics-only]\n                 [--count | -C] [--verbose {number | format}] [--allow-unsafe]\n                 [--color | --nocolor] [--pager pager] [--quiet]\n                 [--color-severity-highest color_specification]\n                 [--color-severity-high color_specification]\n                 [--color-severity-medium color_specification]\n                 [--color-severity-low color_specification]\n                 [--color-severity-lowest color_specification]\n                 [--files-with-violations | -l]\n                 [--files-without-violations | -L]\n                 [--program-extensions file_name_extension]\n                 {FILE | DIRECTORY | STDIN}\n\n      perlcritic --profile-proto\n\n      perlcritic { --list | --list-enabled | --list-themes | --doc pattern [...] }\n\n      perlcritic { --help | --options | --man | --version }\n\n</code></pre>"},{"location":"descriptors/perl_perlcritic/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=skaji/cpm\nARG PERL_PERLCRITIC_VERSION=0.997023\n\nRUN curl -fsSL https://raw.githubusercontent.com/skaji/cpm/refs/tags/${PERL_PERLCRITIC_VERSION}/cpm | perl - install -g --show-build-log-on-failure --without-build --without-test --without-runtime Perl::Critic \\\n    &amp;&amp; rm -rf /root/.perl-cpm\n\n</code></pre>"},{"location":"descriptors/php/","title":"PHP linters in MegaLinter","text":""},{"location":"descriptors/php/#php","title":"PHP","text":""},{"location":"descriptors/php/#linters","title":"Linters","text":"Linter Additional phpcsPHP_PHPCS phpstanPHP_PHPSTAN psalmPHP_PSALM phplintPHP_PHPLINT php-cs-fixerPHP_PHPCSFIXER"},{"location":"descriptors/php/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.php</code></li> </ul> </li> </ul>"},{"location":"descriptors/php/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value PHP_PRE_COMMANDS List of bash commands to run before the linters None PHP_POST_COMMANDS List of bash commands to run after the linters None PHP_FILTER_REGEX_INCLUDE Custom regex including filter PHP_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/php/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110\nCOPY --from=composer/composer:2-bin /composer /usr/bin/composer\nENV PATH=\"/root/.composer/vendor/bin:${PATH}\"\nENV PHP_CS_FIXER_IGNORE_ENV=true\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>gnupg</li> <li>php84</li> <li>php84-phar</li> <li>php84-mbstring</li> <li>php84-xmlwriter</li> <li>php84-tokenizer</li> <li>php84-ctype</li> <li>php84-curl</li> <li>php84-dom</li> <li>php84-opcache</li> <li>php84-openssl</li> <li>php84-common</li> <li>php84-simplexml</li> <li>dpkg</li> </ul> </li> </ul>"},{"location":"descriptors/php_php/","title":"Php php","text":""},{"location":"descriptors/php_php/#php-documentation","title":"php documentation","text":"<ul> <li>Version in MegaLinter: 7.4.26</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/php_php/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable php by adding <code>PHP_BUILTIN</code> in ENABLE_LINTERS variable</li> <li>Disable php by adding <code>PHP_BUILTIN</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PHP_BUILTIN_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PHP_BUILTIN_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PHP_BUILTIN_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PHP_BUILTIN_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>file</code> PHP_BUILTIN_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".php\"]</code> PHP_BUILTIN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PHP_BUILTIN_PRE_COMMANDS List of bash commands to run before the linter None PHP_BUILTIN_POST_COMMANDS List of bash commands to run after the linter None PHP_BUILTIN_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PHP_BUILTIN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code>"},{"location":"descriptors/php_php/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 php Optimized for PHP based projects 46"},{"location":"descriptors/php_php/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php_php/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.php</code></li> </ul>"},{"location":"descriptors/php_php/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>php is called one time by identified file</li> </ul>"},{"location":"descriptors/php_php/#example-calls","title":"Example calls","text":"<pre><code>php -l myfile.js\n</code></pre>"},{"location":"descriptors/php_php/#help-content","title":"Help content","text":"<pre><code>Usage: php [options] [-f] &lt;file&gt; [--] [args...]\n   php [options] -r &lt;code&gt; [--] [args...]\n   php [options] [-B &lt;begin_code&gt;] -R &lt;code&gt; [-E &lt;end_code&gt;] [--] [args...]\n   php [options] [-B &lt;begin_code&gt;] -F &lt;file&gt; [-E &lt;end_code&gt;] [--] [args...]\n   php [options] -S &lt;addr&gt;:&lt;port&gt; [-t docroot] [router]\n   php [options] -- [args...]\n   php [options] -a\n\n  -a               Run as interactive shell\n  -c &lt;path&gt;|&lt;file&gt; Look for php.ini file in this directory\n  -n               No configuration (ini) files will be used\n  -d foo[=bar]     Define INI entry foo with value 'bar'\n  -e               Generate extended information for debugger/profiler\n  -f &lt;file&gt;        Parse and execute &lt;file&gt;.\n  -h               This help\n  -i               PHP information\n  -l               Syntax check only (lint)\n  -m               Show compiled in modules\n  -r &lt;code&gt;        Run PHP &lt;code&gt; without using script tags &lt;?..?&gt;\n  -B &lt;begin_code&gt;  Run PHP &lt;begin_code&gt; before processing input lines\n  -R &lt;code&gt;        Run PHP &lt;code&gt; for every input line\n  -F &lt;file&gt;        Parse and execute &lt;file&gt; for every input line\n  -E &lt;end_code&gt;    Run PHP &lt;end_code&gt; after processing all input lines\n  -H               Hide any passed arguments from external tools.\n  -S &lt;addr&gt;:&lt;port&gt; Run with built-in web server.\n  -t &lt;docroot&gt;     Specify document root &lt;docroot&gt; for built-in web server.\n  -s               Output HTML syntax highlighted source.\n  -v               Version number\n  -w               Output source with stripped comments and whitespace.\n  -z &lt;file&gt;        Load Zend extension &lt;file&gt;.\n\n  args...          Arguments passed to script. Use -- args when first argument\n                   starts with - or script is read from stdin\n\n  --ini            Show configuration file names\n\n  --rf &lt;name&gt;      Show information about function &lt;name&gt;.\n  --rc &lt;name&gt;      Show information about class &lt;name&gt;.\n  --re &lt;name&gt;      Show information about extension &lt;name&gt;.\n  --rz &lt;name&gt;      Show information about Zend extension &lt;name&gt;.\n  --ri &lt;name&gt;      Show configuration for extension &lt;name&gt;.\n\n</code></pre>"},{"location":"descriptors/php_php/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":""},{"location":"descriptors/php_php_cs_fixer/","title":"php-cs-fixer configuration in MegaLinter","text":""},{"location":"descriptors/php_php_cs_fixer/#php-cs-fixer","title":"php-cs-fixer","text":"<p>PHP-CS-Fixer is able to fix rule violations detected, and even those marked as (risky)</p> <ul> <li>Enable autofixes by adding <code>PHP_PHPCSFIXER</code> in APPLY_FIXES variable</li> <li>Add \"--allow-risky=yes\" option in PHP_PHPCSFIXER_ARGUMENTS variable</li> </ul>"},{"location":"descriptors/php_php_cs_fixer/#php-cs-fixer-documentation","title":"php-cs-fixer documentation","text":"<ul> <li>Version in MegaLinter: 3.75.0</li> <li>Visit Official Web Site<ul> <li>If custom <code>.php-cs-fixer.dist.php</code> config file isn't found, .php-cs-fixer.dist.php will be used</li> </ul> </li> </ul>"},{"location":"descriptors/php_php_cs_fixer/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable php-cs-fixer by adding <code>PHP_PHPCSFIXER</code> in ENABLE_LINTERS variable</li> <li>Disable php-cs-fixer by adding <code>PHP_PHPCSFIXER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PHP_PHPCSFIXER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PHP_PHPCSFIXER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PHP_PHPCSFIXER_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> PHP_PHPCSFIXER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".php\"]</code> PHP_PHPCSFIXER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PHP_PHPCSFIXER_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPCSFIXER_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPCSFIXER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PHP_PHPCSFIXER and its pre/post commands None PHP_PHPCSFIXER_CONFIG_FILE php-cs-fixer configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.php-cs-fixer.dist.php</code> PHP_PHPCSFIXER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPCSFIXER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PHP_PHPCSFIXER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PHP_PHPCSFIXER_CLI_EXECUTABLE Override CLI executable <code>['php-cs-fixer']</code>"},{"location":"descriptors/php_php_cs_fixer/#ide-integration","title":"IDE Integration","text":"<p>Use php-cs-fixer in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install netbeans PHP-CS-Fixer Visit Web Site IDEA php-cs-fixer Visit Web Site Sublime Text sublime-phpcs Visit Web Site vim vim-php-cs-fixer Visit Web Site Visual Studio Code vscode-php-cs-fixer Visit Web Site"},{"location":"descriptors/php_php_cs_fixer/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 php Optimized for PHP based projects 54"},{"location":"descriptors/php_php_cs_fixer/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php_php_cs_fixer/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.php</code></li> </ul>"},{"location":"descriptors/php_php_cs_fixer/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>php-cs-fixer is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using php-cs-fixer configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make php-cs-fixer analyze only updated files</li> </ul>"},{"location":"descriptors/php_php_cs_fixer/#example-calls","title":"Example calls","text":"<pre><code>php-cs-fixer check myfile.php\n</code></pre> <pre><code>php-cs-fixer check mydir\n</code></pre> <pre><code>php-cs-fixer check --config .php-cs-fixer.php\n</code></pre>"},{"location":"descriptors/php_php_cs_fixer/#help-content","title":"Help content","text":"<pre><code>PHP needs to be a minimum version of PHP 7.4.0 and maximum version of PHP 8.3.*.\nCurrent PHP version: 8.4.5.\nIgnoring environment requirements because `PHP_CS_FIXER_IGNORE_ENV` is set. Execution may be unstable.\nDescription:\n  List commands\n\nUsage:\n  list [options] [--] [&lt;namespace&gt;]\n\nArguments:\n  namespace             The namespace name\n\nOptions:\n      --raw             To output raw command list\n      --format=FORMAT   The output format (txt, xml, json, or md) [default: \"txt\"]\n      --short           To skip describing commands' arguments\n  -h, --help            Display help for the given command. When no command is given display help for the list command\n      --silent          Do not output any message\n  -q, --quiet           Only errors are displayed. All other output is suppressed\n  -V, --version         Display this application version\n      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output\n  -n, --no-interaction  Do not ask any interactive question\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nHelp:\n  The list command lists all commands:\n\n    /root/.composer/vendor/bin/php-cs-fixer list\n\n  You can also display the commands for a specific namespace:\n\n    /root/.composer/vendor/bin/php-cs-fixer list test\n\n  You can also output the information in other formats by using the --format option:\n\n    /root/.composer/vendor/bin/php-cs-fixer list --format=xml\n\n  It's also possible to get raw list of commands (useful for embedding command runner):\n\n    /root/.composer/vendor/bin/php-cs-fixer list --raw\n</code></pre>"},{"location":"descriptors/php_php_cs_fixer/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110\nCOPY --from=composer/composer:2-bin /composer /usr/bin/composer\nENV PATH=\"/root/.composer/vendor/bin:${PATH}\"\nENV PHP_CS_FIXER_IGNORE_ENV=true\n# Linter install\n# renovate: datasource=packagist depName=friendsofphp/php-cs-fixer\nARG PHP_FRIENDSOFPHP_PHP_CS_FIXER_VERSION=v3.75.0\nRUN GITHUB_AUTH_TOKEN=\"$(cat /run/secrets/GITHUB_TOKEN)\" &amp;&amp; export GITHUB_AUTH_TOKEN &amp;&amp; composer global require friendsofphp/php-cs-fixer:${PHP_FRIENDSOFPHP_PHP_CS_FIXER_VERSION} --with-all-dependencies\n\n</code></pre>"},{"location":"descriptors/php_phpcs/","title":"phpcs configuration in MegaLinter","text":""},{"location":"descriptors/php_phpcs/#phpcs","title":"phpcs","text":""},{"location":"descriptors/php_phpcs/#phpcs-documentation","title":"phpcs documentation","text":"<ul> <li>Version in MegaLinter: 3.12.2</li> <li>Visit Official Web Site</li> <li>See How to configure phpcs rules<ul> <li>If custom <code>phpcs.xml</code> config file isn't found, phpcs.xml will be used</li> </ul> </li> <li>See How to disable phpcs rules in files</li> <li>See How to ignore files and directories with phpcs</li> <li>See Index of problems detected by phpcs</li> </ul>"},{"location":"descriptors/php_phpcs/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable phpcs by adding <code>PHP_PHPCS</code> in ENABLE_LINTERS variable</li> <li>Disable phpcs by adding <code>PHP_PHPCS</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PHP_PHPCS_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PHP_PHPCS_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PHP_PHPCS_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PHP_PHPCS_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PHP_PHPCS_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PHP_PHPCS_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".php\"]</code> PHP_PHPCS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PHP_PHPCS_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPCS_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPCS_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PHP_PHPCS and its pre/post commands None PHP_PHPCS_CONFIG_FILE phpcs configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>phpcs.xml</code> PHP_PHPCS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPCS_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PHP_PHPCS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PHP_PHPCS_CLI_EXECUTABLE Override CLI executable <code>['phpcs']</code>"},{"location":"descriptors/php_phpcs/#ide-integration","title":"IDE Integration","text":"<p>Use phpcs in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-phpcs Visit Web Site Atom atom-phpcs Visit Web Site IDEA phpcs Visit Web Site Sublime Text sublime-phpcs Visit Web Site Sublime Text SublimeLinter-phpcs Visit Web Site Visual Studio Code vscode-phpcs"},{"location":"descriptors/php_phpcs/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 php Optimized for PHP based projects 54"},{"location":"descriptors/php_phpcs/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php_phpcs/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.php</code></li> </ul>"},{"location":"descriptors/php_phpcs/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>phpcs is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/php_phpcs/#example-calls","title":"Example calls","text":"<pre><code>phpcs myfile.php\n</code></pre> <pre><code>phpcs --standard=phpcs.xml myfile.php\n</code></pre> <pre><code>phpcs --standard=phpcs.xml mydir/ myfile.php\n</code></pre>"},{"location":"descriptors/php_phpcs/#help-content","title":"Help content","text":"<pre><code>\n\nUsage:\n  phpcs [options] &lt;file|directory&gt;\n\nScan targets:\n  &lt;file|directory&gt;               One or more files and/or directories to check,\n                                 space separated.\n  -                              Check STDIN instead of local files and\n                                 directories.\n  --stdin-path=&lt;stdinPath&gt;       If processing STDIN, the file path that STDIN\n                                 will be processed as.\n  --file-list=&lt;fileList&gt;         Check the files and/or directories which are\n                                 defined in the file to which the path is\n                                 provided (one per line).\n  --filter=&lt;filter&gt;              Check based on a predefined file filter. Use\n                                 either the \"GitModified\" or \"GitStaged\" filter,\n                                 or specify the path to a custom filter class.\n  --ignore=&lt;patterns&gt;            Ignore files based on a comma-separated list of\n                                 patterns matching files and/or directories.\n  --extensions=&lt;extensions&gt;      Check files with the specified file extensions\n                                 (comma-separated list). Defaults to\n                                 php,inc/php,js,css.\n                                 The type of the file can be specified using:\n                                 ext/type; e.g. module/php,es/js.\n  -l                             Check local directory only, no recursion.\n\nRule Selection Options:\n  --standard=&lt;standard&gt;          The name of, or the path to, the coding\n                                 standard to use. Can be a comma-separated list\n                                 specifying multiple standards. If no standard\n                                 is specified, PHP_CodeSniffer will look for a\n                                 [.]phpcs.xml[.dist] custom ruleset file in the\n                                 current directory and those above it.\n  --sniffs=&lt;sniffs&gt;              A comma-separated list of sniff codes to limit\n                                 the scan to. All sniffs must be part of the\n                                 standard in use.\n  --exclude=&lt;sniffs&gt;             A comma-separated list of sniff codes to\n                                 exclude from the scan. All sniffs must be part\n                                 of the standard in use.\n\n  -i                             Show a list of installed coding standards.\n  -e                             Explain a standard by showing the names of all\n                                 the sniffs it includes.\n  --generator=&lt;generator&gt;        Show documentation for a standard. Use either\n                                 the \"HTML\", \"Markdown\" or \"Text\" generator.\n\nRun Options:\n  -a                             Run in interactive mode, pausing after each\n                                 file.\n  --bootstrap=&lt;bootstrap&gt;        Run the specified file(s) before processing\n                                 begins. A list of files can be provided,\n                                 separated by commas.\n  --cache[=&lt;cacheFile&gt;]          Cache results between runs. Optionally,\n                                 &lt;cacheFile&gt; can be provided to use a specific\n                                 file for caching. Otherwise, a temporary file\n                                 is used.\n  --no-cache                     Do not cache results between runs (default).\n  --parallel=&lt;processes&gt;         The number of files to be checked\n                                 simultaneously. Defaults to 1 (no parallel\n                                 processing).\n                                 If enabled, this option only takes effect if\n                                 the PHP PCNTL (Process Control) extension is\n                                 available.\n\n  -d &lt;key[=value]&gt;               Set the [key] php.ini value to [value] or set\n                                 to [true] if value is omitted.\n                                 Note: only php.ini settings which can be\n                                 changed at runtime are supported.\n\nReporting Options:\n  --report=&lt;report&gt;              Print either the \"full\", \"xml\", \"checkstyle\",\n                                 \"csv\", \"json\", \"junit\", \"emacs\", \"source\",\n                                 \"summary\", \"diff\", \"svnblame\", \"gitblame\",\n                                 \"hgblame\", \"notifysend\" or \"performance\" report\n                                 or specify the path to a custom report class.\n                                 By default, the \"full\" report is displayed.\n  --report-file=&lt;reportFile&gt;     Write the report to the specified file path.\n  --report-&lt;report&gt;=&lt;reportFile&gt; Write the report specified in &lt;report&gt; to the\n                                 specified file path.\n  --report-width=&lt;reportWidth&gt;   How many columns wide screen reports should be.\n                                 Set to \"auto\" to use current screen width,\n                                 where supported.\n  --basepath=&lt;basepath&gt;          Strip a path from the front of file paths\n                                 inside reports.\n\n  -w                             Include both warnings and errors (default).\n  -n                             Do not include warnings. Shortcut for\n                                 \"--warning-severity=0\".\n  --severity=&lt;severity&gt;          The minimum severity required to display an\n                                 error or warning. Defaults to 5.\n  --error-severity=&lt;severity&gt;    The minimum severity required to display an\n                                 error. Defaults to 5.\n  --warning-severity=&lt;severity&gt;  The minimum severity required to display a\n                                 warning. Defaults to 5.\n\n  -s                             Show sniff error codes in all reports.\n  --ignore-annotations           Ignore all \"phpcs:...\" annotations in code\n                                 comments.\n  --colors                       Use colors in screen output.\n  --no-colors                    Do not use colors in screen output (default).\n  -p                             Show progress of the run.\n  -q                             Quiet mode; disables progress and verbose\n                                 output.\n  -m                             Stop error messages from being recorded. This\n                                 saves a lot of memory but stops many reports\n                                 from being used.\n\nConfiguration Options:\n  --encoding=&lt;encoding&gt;          The encoding of the files being checked.\n                                 Defaults to \"utf-8\".\n  --tab-width=&lt;tabWidth&gt;         The number of spaces each tab represents.\n\n  Default values for a selection of options can be stored in a user-specific\n  CodeSniffer.conf configuration file.\n  This applies to the following options: \"default_standard\", \"report_format\",\n  \"tab_width\", \"encoding\", \"severity\", \"error_severity\", \"warning_severity\",\n  \"show_warnings\", \"report_width\", \"show_progress\", \"quiet\", \"colors\", \"cache\",\n  \"parallel\", \"installed_paths\", \"php_version\", \"ignore_errors_on_exit\",\n  \"ignore_warnings_on_exit\".\n  --config-show                  Show the configuration options which are\n                                 currently stored in the applicable\n                                 CodeSniffer.conf file.\n  --config-set &lt;key&gt; &lt;value&gt;     Save a configuration option to the\n                                 CodeSniffer.conf file.\n  --config-delete &lt;key&gt;          Delete a configuration option from the\n                                 CodeSniffer.conf file.\n  --runtime-set &lt;key&gt; &lt;value&gt;    Set a configuration option to be applied to the\n                                 current scan run only.\n\nMiscellaneous Options:\n  -h, -?, --help                 Print this help message.\n  --version                      Print version information.\n  -v                             Verbose output: Print processed files.\n  -vv                            Verbose output: Print ruleset and token output.\n  -vvv                           Verbose output: Print sniff processing\n                                 information.\n\n</code></pre>"},{"location":"descriptors/php_phpcs/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110\nCOPY --from=composer/composer:2-bin /composer /usr/bin/composer\nENV PATH=\"/root/.composer/vendor/bin:${PATH}\"\nENV PHP_CS_FIXER_IGNORE_ENV=true\n# Linter install\n# renovate: datasource=packagist depName=squizlabs/php_codesniffer\nARG PHP_SQUIZLABS_PHP_CODESNIFFER_VERSION=3.12.2\n# renovate: datasource=packagist depName=bartlett/sarif-php-converters\nARG PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION=1.1.2\nRUN GITHUB_AUTH_TOKEN=\"$(cat /run/secrets/GITHUB_TOKEN)\" &amp;&amp; export GITHUB_AUTH_TOKEN &amp;&amp; composer global require squizlabs/php_codesniffer:${PHP_SQUIZLABS_PHP_CODESNIFFER_VERSION} bartlett/sarif-php-converters:${PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION}\n\n</code></pre>"},{"location":"descriptors/php_phplint/","title":"phplint configuration in MegaLinter","text":""},{"location":"descriptors/php_phplint/#phplint","title":"phplint","text":""},{"location":"descriptors/php_phplint/#phplint-documentation","title":"phplint documentation","text":"<ul> <li>Version in MegaLinter: 9.6.2</li> <li>Visit Official Web Site<ul> <li>If custom <code>.phplint.yml</code> config file isn't found, .phplint.yml will be used</li> </ul> </li> </ul>"},{"location":"descriptors/php_phplint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable phplint by adding <code>PHP_PHPLINT</code> in ENABLE_LINTERS variable</li> <li>Disable phplint by adding <code>PHP_PHPLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PHP_PHPLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PHP_PHPLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PHP_PHPLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PHP_PHPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PHP_PHPLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PHP_PHPLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".php\"]</code> PHP_PHPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PHP_PHPLINT_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPLINT_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PHP_PHPLINT and its pre/post commands None PHP_PHPLINT_CONFIG_FILE phplint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.phplint.yml</code> PHP_PHPLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PHP_PHPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PHP_PHPLINT_CLI_EXECUTABLE Override CLI executable <code>['phplint']</code>"},{"location":"descriptors/php_phplint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 php Optimized for PHP based projects 54"},{"location":"descriptors/php_phplint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php_phplint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.php</code></li> </ul>"},{"location":"descriptors/php_phplint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>phplint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/php_phplint/#example-calls","title":"Example calls","text":"<pre><code>phplint myfile.php\n</code></pre> <pre><code>phplint mydir\n</code></pre> <pre><code>phplint mydir myfile.php\n</code></pre> <pre><code>phplint mydir -vvv\n</code></pre>"},{"location":"descriptors/php_phplint/#help-content","title":"Help content","text":"<pre><code>Description:\n  Files syntax check only\n\nUsage:\n  lint [options] [--] [&lt;path&gt;...]\n\nArguments:\n  path                               Path to file or directory to lint (default: working directory)\n\nOptions:\n      --exclude=EXCLUDE              Path to file or directory to exclude from linting (multiple values allowed)\n      --extensions=EXTENSIONS        Check only files with selected extensions (multiple values allowed)\n  -j, --jobs=JOBS                    Number of paralleled jobs to run\n  -c, --configuration=CONFIGURATION  Read configuration from config file [default: \".phplint.yml\"]\n      --no-configuration             Ignore default configuration file (.phplint.yml)\n      --cache=CACHE                  Path to the cache directory (Deprecated option, use \"cache-dir\" instead)\n      --cache-dir=CACHE-DIR          Path to the cache directory\n      --cache-ttl=CACHE-TTL          Limit cached data for a period of time (&gt;0: time to live in seconds) [default: 3600]\n      --no-cache                     Ignore cached data\n  -p, --progress=PROGRESS            Show the progress output\n      --no-progress                  Hide the progress output\n  -o, --output=OUTPUT                Generate an output to the specified path (default: standard output)\n      --format=FORMAT                Format of requested reports (multiple values allowed)\n  -w, --warning                      Also show warnings\n      --memory-limit=MEMORY-LIMIT    Memory limit for analysis\n      --ignore-exit-code             Ignore exit codes so there are no \"failure\" exit code even when no files processed\n      --bootstrap=BOOTSTRAP          A PHP script that is included before the linter run\n  -h, --help                         Display help for the given command. When no command is given display help for the lint command\n      --silent                       Do not output any message\n  -q, --quiet                        Only errors are displayed. All other output is suppressed\n  -V, --version                      Display this application version\n      --ansi|--no-ansi               Force (or disable --no-ansi) ANSI output\n  -n, --no-interaction               Do not ask any interactive question\n  -v|vv|vvv, --verbose               Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n</code></pre>"},{"location":"descriptors/php_phplint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110\nCOPY --from=composer/composer:2-bin /composer /usr/bin/composer\nENV PATH=\"/root/.composer/vendor/bin:${PATH}\"\nENV PHP_CS_FIXER_IGNORE_ENV=true\n# Linter install\n# renovate: datasource=packagist depName=overtrue/phplint\nARG PHP_OVERTRUE_PHPLINT_VERSION=9.6.2\n# renovate: datasource=packagist depName=bartlett/sarif-php-converters\nARG PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION=1.1.2\nRUN GITHUB_AUTH_TOKEN=\"$(cat /run/secrets/GITHUB_TOKEN)\" &amp;&amp; export GITHUB_AUTH_TOKEN &amp;&amp; composer global require overtrue/phplint:${PHP_OVERTRUE_PHPLINT_VERSION} bartlett/sarif-php-converters:${PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION}\n\n</code></pre>"},{"location":"descriptors/php_phpstan/","title":"phpstan configuration in MegaLinter","text":""},{"location":"descriptors/php_phpstan/#phpstan","title":"phpstan","text":""},{"location":"descriptors/php_phpstan/#phpstan-documentation","title":"phpstan documentation","text":"<ul> <li>Version in MegaLinter: 2.1.14</li> <li>Visit Official Web Site</li> <li>See How to configure phpstan rules<ul> <li>If custom <code>phpstan.neon.dist</code> config file isn't found, phpstan.neon.dist will be used</li> </ul> </li> <li>See How to disable phpstan rules in files</li> </ul>"},{"location":"descriptors/php_phpstan/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable phpstan by adding <code>PHP_PHPSTAN</code> in ENABLE_LINTERS variable</li> <li>Disable phpstan by adding <code>PHP_PHPSTAN</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PHP_PHPSTAN_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PHP_PHPSTAN_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PHP_PHPSTAN_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PHP_PHPSTAN_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PHP_PHPSTAN_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PHP_PHPSTAN_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".php\"]</code> PHP_PHPSTAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PHP_PHPSTAN_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPSTAN_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPSTAN_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PHP_PHPSTAN and its pre/post commands None PHP_PHPSTAN_CONFIG_FILE phpstan configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>phpstan.neon.dist</code> PHP_PHPSTAN_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPSTAN_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PHP_PHPSTAN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PHP_PHPSTAN_CLI_EXECUTABLE Override CLI executable <code>['phpstan']</code>"},{"location":"descriptors/php_phpstan/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 php Optimized for PHP based projects 54"},{"location":"descriptors/php_phpstan/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php_phpstan/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.php</code></li> </ul>"},{"location":"descriptors/php_phpstan/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>phpstan is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/php_phpstan/#example-calls","title":"Example calls","text":"<pre><code>phpstan analyse --no-progress --no-ansi myfile.php\n</code></pre> <pre><code>phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php\n</code></pre> <pre><code>phpstan analyse --no-progress --no-ansi myfile1.php myfile2.php\n</code></pre> <pre><code>phpstan analyse --no-progress --no-ansi mydir1/ mydir2/ myfile.php\n</code></pre>"},{"location":"descriptors/php_phpstan/#help-content","title":"Help content","text":"<pre><code>Description:\n  Analyses source code\n\nUsage:\n  analyse [options] [--] [&lt;paths&gt;...]\n  analyze\n\nArguments:\n  paths                                        Paths with source code to run analysis on\n\nOptions:\n  -c, --configuration=CONFIGURATION            Path to project configuration file\n  -l, --level=LEVEL                            Level of rule options - the higher the stricter\n      --no-progress                            Do not show progress bar, only results\n      --debug                                  Show debug information - which file is analysed, do not catch internal errors\n  -a, --autoload-file=AUTOLOAD-FILE            Project's additional autoload file path\n      --error-format=ERROR-FORMAT              Format in which to print the result of the analysis\n  -b, --generate-baseline[=GENERATE-BASELINE]  Path to a file where the baseline should be saved [default: false]\n      --allow-empty-baseline                   Do not error out when the generated baseline is empty\n      --memory-limit=MEMORY-LIMIT              Memory limit for analysis\n      --xdebug                                 Allow running with Xdebug for debugging purposes\n      --fix                                    Launch PHPStan Pro\n      --watch                                  Launch PHPStan Pro\n      --pro                                    Launch PHPStan Pro\n      --fail-without-result-cache              Return non-zero exit code when result cache is not used\n  -h, --help                                   Display help for the given command. When no command is given display help for the analyse command\n  -q, --quiet                                  Do not output any message\n  -V, --version                                Display this application version\n      --ansi|--no-ansi                         Force (or disable --no-ansi) ANSI output\n  -n, --no-interaction                         Do not ask any interactive question\n  -v|vv|vvv, --verbose                         Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n</code></pre>"},{"location":"descriptors/php_phpstan/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110\nCOPY --from=composer/composer:2-bin /composer /usr/bin/composer\nENV PATH=\"/root/.composer/vendor/bin:${PATH}\"\nENV PHP_CS_FIXER_IGNORE_ENV=true\n# Linter install\n# renovate: datasource=packagist depName=phpstan/phpstan\nARG PHP_PHPSTAN_PHPSTAN_VERSION=2.1.14\n# renovate: datasource=packagist depName=phpstan/extension-installer\nARG PHP_PHPSTAN_EXTENSION_INSTALLER_VERSION=1.4.3\n# renovate: datasource=packagist depName=bartlett/sarif-php-converters\nARG PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION=1.1.2\nRUN GITHUB_AUTH_TOKEN=\"$(cat /run/secrets/GITHUB_TOKEN)\" &amp;&amp; export GITHUB_AUTH_TOKEN &amp;&amp; composer config --global allow-plugins.phpstan/extension-installer true &amp;&amp; composer global require phpstan/phpstan:${PHP_PHPSTAN_PHPSTAN_VERSION} phpstan/extension-installer:${PHP_PHPSTAN_EXTENSION_INSTALLER_VERSION} bartlett/sarif-php-converters:${PHP_BARTLETT_SARIF_PHP_CONVERTERS_VERSION}\n</code></pre>"},{"location":"descriptors/php_psalm/","title":"psalm configuration in MegaLinter","text":""},{"location":"descriptors/php_psalm/#psalm-documentation","title":"psalm documentation","text":"<ul> <li>Version in MegaLinter: Psalm.6.10.2@</li> <li>Visit Official Web Site</li> <li>See How to configure psalm rules<ul> <li>If custom <code>psalm.xml</code> config file isn't found, psalm.xml will be used</li> </ul> </li> <li>See How to disable psalm rules in files</li> <li>See Index of problems detected by psalm</li> </ul>"},{"location":"descriptors/php_psalm/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable psalm by adding <code>PHP_PSALM</code> in ENABLE_LINTERS variable</li> <li>Disable psalm by adding <code>PHP_PSALM</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PHP_PSALM_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PHP_PSALM_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PHP_PSALM_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PHP_PSALM_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PHP_PSALM_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PHP_PSALM_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".php\"]</code> PHP_PSALM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PHP_PSALM_PRE_COMMANDS List of bash commands to run before the linter None PHP_PSALM_POST_COMMANDS List of bash commands to run after the linter None PHP_PSALM_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PHP_PSALM and its pre/post commands None PHP_PSALM_CONFIG_FILE psalm configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>psalm.xml</code> PHP_PSALM_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PSALM_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PHP_PSALM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PHP_PSALM_CLI_EXECUTABLE Override CLI executable <code>['psalm']</code>"},{"location":"descriptors/php_psalm/#ide-integration","title":"IDE Integration","text":"<p>Use psalm in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA PHPStan / Psalm / Generics Visual Studio Code Psalm VSCode Plugin"},{"location":"descriptors/php_psalm/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 php Optimized for PHP based projects 54"},{"location":"descriptors/php_psalm/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/php_psalm/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.php</code></li> </ul>"},{"location":"descriptors/php_psalm/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>psalm is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/php_psalm/#example-calls","title":"Example calls","text":"<pre><code>psalm myfile.php\n</code></pre> <pre><code>psalm myfile.php mydir/\n</code></pre> <pre><code>psalm --config=psalm.xml myfile.php\n</code></pre> <pre><code>psalm --config=psalm.xml myfile.php mydir/\n</code></pre>"},{"location":"descriptors/php_psalm/#help-content","title":"Help content","text":"<pre><code>Usage:\n    psalm [options] [file...]\n\nBasic configuration:\n    -c, --config=psalm.xml\n        Path to a psalm.xml configuration file. Run psalm --init to create one.\n\n    --use-ini-defaults\n        Use PHP-provided ini defaults for memory and error display\n\n    --memory-limit=LIMIT\n        Use a specific memory limit. Cannot be combined with --use-ini-defaults\n\n    --disable-extension=[extension]\n        Used to disable certain extensions while Psalm is running.\n\n    --force-jit\n        If set, requires JIT acceleration to be available in order to run Psalm, exiting immediately if it cannot be enabled.\n\n    --threads=INT\n        If greater than one, Psalm will run the scan and analysis on multiple threads, speeding things up.\n\n    --scan-threads=INT\n        If greater than one, Psalm will run the scan on multiple threads, speeding things up (if specified, takes priority over the --threads flag).\n\n    --no-diff\n        Turns off Psalm\u2019s diff mode, checks all files regardless of whether they\u2019ve changed.\n\n    --php-version=PHP_VERSION\n        Explicitly set PHP version to analyse code against.\n\n    --error-level=ERROR_LEVEL\n        Set the error reporting level\n\nSurfacing issues:\n    --show-info[=BOOLEAN]\n        Show non-exception parser findings (defaults to false).\n\n    --show-snippet[=true]\n        Show code snippets with errors. Options are 'true' or 'false'\n\n    --find-dead-code[=auto]\n    --find-unused-code[=auto]\n        Look for unused code. Options are 'auto' or 'always'. If no value is specified, default is 'auto'\n\n    --find-unused-psalm-suppress\n        Finds all @psalm-suppress annotations that aren\u2019t used\n\n    --find-references-to=[class|method|property]\n        Searches the codebase for references to the given fully-qualified class or method,\n        where method is in the format class::methodName\n\n    --no-suggestions\n        Hide suggestions\n\n    --taint-analysis\n        Run Psalm in taint analysis mode \u2013 see https://psalm.dev/docs/security_analysis for more info\n\n    --dump-taint-graph=OUTPUT_PATH\n        Output the taint graph using the DOT language \u2013 requires --taint-analysis\n\nIssue baselines:\n    --set-baseline[=PATH]\n        Save all current error level issues to a file, to mark them as info in subsequent runs\n\n        Add --include-php-versions to also include a list of PHP extension versions\n\n        Default value is `psalm-baseline.xml`\n\n    --use-baseline=PATH\n        Allows you to use a baseline other than the default baseline provided in your config\n\n    --ignore-baseline\n        Ignore the error baseline\n\n    --update-baseline\n        Update the baseline by removing fixed issues. This will not add new issues to the baseline\n\n        Add --include-php-versions to also include a list of PHP extension versions\n\nPlugins:\n    --plugin=PATH\n        Executes a plugin, an alternative to using the Psalm config\n\nOutput:\n    -m, --monochrome\n        Enable monochrome output\n\n    --output-format=console\n        Changes the output format.\n        Available formats:\n            by-issue-level, checkstyle, codeclimate, compact, console, count, emacs,\n            github, json, json-summary, junit, phpstorm, pylint, sarif, sonarqube,\n            text, xml\n\n    --no-progress\n        Disable the progress indicator\n\n    --long-progress\n        Use a progress indicator suitable for Continuous Integration logs\n\n    --stats\n        Shows a breakdown of Psalm\u2019s ability to infer types in the codebase\n\nReports:\n    --report=PATH\n        The path where to output report file. The output format is based on the file extension.\n        (Currently supported formats: \".console\", \".emacs\", \".json\", \".pylint\", \".sarif\", \".sarif.json\", \".txt\",\n        \".xml\", \"checkstyle.xml\", \"codeclimate.json\", \"count.txt\", \"junit.xml\",\n        \"sonarqube.json\", \"summary.json\")\n\n    --report-show-info[=BOOLEAN]\n        Whether the report should include non-errors in its output (defaults to true)\n\nCaching:\n    --clear-cache\n        Clears all cache files that Psalm uses for this specific project\n\n    --clear-global-cache\n        Clears all cache files that Psalm uses for all projects\n\n    --no-cache\n        Runs Psalm without using cache\n\n    --no-reflection-cache\n        Runs Psalm without using cached representations of unchanged classes and files.\n        Useful if you want the afterClassLikeVisit plugin hook to run every time you visit a file.\n\n    --no-file-cache\n        Runs Psalm without using caching every single file for later diffing.\n        This reduces the space Psalm uses on disk and file I/O.\n\nMiscellaneous:\n    -h, --help\n        Display this help message\n\n    -v, --version\n        Display the Psalm version\n\n    -i, --init [source_dir=src] [level=3]\n        Create a psalm config file in the current directory that points to [source_dir]\n        at the required level, from 1, most strict, to 8, most permissive.\n\n    --debug\n        Debug information\n\n    --debug-by-line\n        Debug information on a line-by-line level\n\n    --debug-emitted-issues\n        Print a php backtrace to stderr when emitting issues.\n\n    -r, --root\n        If running Psalm globally you\u2019ll need to specify a project root. Defaults to cwd\n\n    --generate-json-map=PATH\n        Generate a map of node references and types in JSON format, saved to the given path.\n\n    --generate-stubs=PATH\n        Generate stubs for the project and dump the file in the given path\n\n    --shepherd[=endpoint]\n        Send analysis statistics to Shepherd (shepherd.dev) or your server.\n\n    --alter\n        Run Psalter\n\n    --review\n        Run the psalm-review tool\n\n    --language-server\n        Run Psalm Language Server\n</code></pre>"},{"location":"descriptors/php_psalm/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nRUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110\nCOPY --from=composer/composer:2-bin /composer /usr/bin/composer\nENV PATH=\"/root/.composer/vendor/bin:${PATH}\"\nENV PHP_CS_FIXER_IGNORE_ENV=true\n# Linter install\n# renovate: datasource=packagist depName=vimeo/psalm\nARG PHP_VIMEO_PSALM_VERSION=6.10.2\nRUN GITHUB_AUTH_TOKEN=\"$(cat /run/secrets/GITHUB_TOKEN)\" &amp;&amp; export GITHUB_AUTH_TOKEN &amp;&amp; composer global require vimeo/psalm:${PHP_VIMEO_PSALM_VERSION}\n\n</code></pre>"},{"location":"descriptors/powershell/","title":"POWERSHELL linters in MegaLinter","text":""},{"location":"descriptors/powershell/#powershell","title":"POWERSHELL","text":""},{"location":"descriptors/powershell/#linters","title":"Linters","text":"Linter Additional powershellPOWERSHELL_POWERSHELL powershell_formatterPOWERSHELL_POWERSHELL_FORMATTER"},{"location":"descriptors/powershell/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.ps1</code></li> <li><code>.psm1</code></li> <li><code>.psd1</code></li> <li><code>.ps1xml</code></li> <li><code>.pssc</code></li> <li><code>.psrc</code></li> <li><code>.cdxml</code></li> </ul> </li> </ul>"},{"location":"descriptors/powershell/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value POWERSHELL_PRE_COMMANDS List of bash commands to run before the linters None POWERSHELL_POST_COMMANDS List of bash commands to run after the linters None POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/powershell/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/powershell/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=PowerShell/PowerShell\nARG POWERSHELL_VERSION=7.5.1\n\nRUN curl -L https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-musl-x64.tar.gz -o /tmp/powershell.tar.gz \\\n    &amp;&amp; mkdir -p /opt/microsoft/powershell/7 \\\n    &amp;&amp; tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 \\\n    &amp;&amp; chmod +x /opt/microsoft/powershell/7/pwsh \\\n    &amp;&amp; ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>icu-libs</li> </ul> </li> </ul>"},{"location":"descriptors/powershell_powershell/","title":"powershell configuration in MegaLinter","text":""},{"location":"descriptors/powershell_powershell/#powershell","title":"powershell","text":""},{"location":"descriptors/powershell_powershell/#powershell-documentation","title":"powershell documentation","text":"<ul> <li>Version in MegaLinter: 7.5.1</li> <li>Visit Official Web Site</li> <li>See How to configure powershell rules</li> <li>See How to disable powershell rules in files</li> <li>See Index of problems detected by powershell</li> </ul>"},{"location":"descriptors/powershell_powershell/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable powershell by adding <code>POWERSHELL_POWERSHELL</code> in ENABLE_LINTERS variable</li> <li>Disable powershell by adding <code>POWERSHELL_POWERSHELL</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>POWERSHELL_POWERSHELL</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value POWERSHELL_POWERSHELL_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> POWERSHELL_POWERSHELL_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file POWERSHELL_POWERSHELL_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> POWERSHELL_POWERSHELL_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".ps1\", \".psm1\", \".psd1\", \".ps1xml\", \".pssc\", \".psrc\", \".cdxml\"]</code> POWERSHELL_POWERSHELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file POWERSHELL_POWERSHELL_PRE_COMMANDS List of bash commands to run before the linter None POWERSHELL_POWERSHELL_POST_COMMANDS List of bash commands to run after the linter None POWERSHELL_POWERSHELL_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling POWERSHELL_POWERSHELL and its pre/post commands None POWERSHELL_POWERSHELL_CONFIG_FILE powershell configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.powershell-psscriptanalyzer.psd1</code> POWERSHELL_POWERSHELL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules POWERSHELL_POWERSHELL_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> POWERSHELL_POWERSHELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> POWERSHELL_POWERSHELL_CLI_EXECUTABLE Override CLI executable <code>['powershell']</code>"},{"location":"descriptors/powershell_powershell/#ide-integration","title":"IDE Integration","text":"<p>Use powershell in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode PowerShell extension"},{"location":"descriptors/powershell_powershell/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73"},{"location":"descriptors/powershell_powershell/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/powershell_powershell/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.ps1</code>, <code>.psm1</code>, <code>.psd1</code>, <code>.ps1xml</code>, <code>.pssc</code>, <code>.psrc</code>, <code>.cdxml</code></li> </ul>"},{"location":"descriptors/powershell_powershell/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>powershell is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/powershell_powershell/#example-calls","title":"Example calls","text":"<pre><code>pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Path myfile.ps1\"\n</code></pre> <pre><code>pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Settings .powershell-psscriptanalyzer.psd1 -Path myfile.ps1\"\n</code></pre>"},{"location":"descriptors/powershell_powershell/#help-content","title":"Help content","text":"<pre><code>\nUsage: pwsh[.exe] [-Login] [[-File] &lt;filePath&gt; [args]]\n                  [-Command { - | &lt;script-block&gt; [-args &lt;arg-array&gt;]\n                                | &lt;string&gt; [&lt;CommandParameters&gt;] } ]\n                  [-CommandWithArgs &lt;string&gt; [&lt;CommandParameters&gt;]\n                  [-ConfigurationName &lt;string&gt;] [-ConfigurationFile &lt;filePath&gt;]\n                  [-CustomPipeName &lt;string&gt;] [-EncodedCommand &lt;Base64EncodedCommand&gt;]\n                  [-ExecutionPolicy &lt;ExecutionPolicy&gt;] [-InputFormat {Text | XML}]\n                  [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile]\n                  [-NoProfileLoadTime] [-OutputFormat {Text | XML}]\n                  [-SettingsFile &lt;filePath&gt;] [-SSHServerMode] [-STA]\n                  [-Version] [-WindowStyle &lt;style&gt;]\n                  [-WorkingDirectory &lt;directoryPath&gt;]\n\n       pwsh[.exe] -h | -Help | -? | /?\n\nPowerShell Online Help https://aka.ms/powershell-docs\n\nAll parameters are case-insensitive.\n\n-File | -f\n\n    If the value of File is \"-\", the command text is read from standard input.\n    Running \"pwsh -File -\" without redirected standard input starts a regular\n    session. This is the same as not specifying the File parameter at all.\n\n    This is the default parameter if no parameters are present but values are\n    present in the command line. The specified script runs in the local scope\n    (\"dot-sourced\"), so that the functions and variables that the script\n    creates are available in the current session. Enter the script file path\n    and any parameters. File must be the last parameter in the command, because\n    all characters typed after the File parameter name are interpreted as the\n    script file path followed by the script parameters.\n\n    Typically, the switch parameters of a script are either included or\n    omitted. For example, the following command uses the All parameter of the\n    Get-Script.ps1 script file: \"-File .\\Get-Script.ps1 -All\"\n\n    In rare cases, you might need to provide a BOOLEAN value for a switch\n    parameter. To provide a BOOLEAN value for a switch parameter in the value\n    of the FILE parameter, Use the parameter normally followed immediately by a\n    colon and the boolean value, such as the following:\n    \"-File .\\Get-Script.ps1 -All:$False\".\n\n    Parameters passed to the script are passed as literal strings, after\n    interpretation by the current shell. For example, if you are in cmd.exe and\n    want to pass an environment variable value, you would use the cmd.exe\n    syntax: \"pwsh -File .  est.ps1 -TestParam %windir%\"\n\n    In contrast, running \"pwsh -File .  est.ps1 -TestParam $env:windir\" in\n    cmd.exe results in the script receiving the literal string \"$env:windir\"\n    because it has no special meaning to the current cmd.exe shell. The\n    \"$env:windir\" style of environment variable reference can be used inside a\n    Command parameter, since there it is interpreted as PowerShell code.\n\n    Similarly, if you want to execute the same command from a Batch script,\n    you would use \"%~dp0\" instead of \".\\\" or \"$PSScriptRoot\" to represent the current\n    execution directory: \"pwsh -File %~dp0test.ps1 -TestParam %windir%\". If you\n    instead used \".  est.ps1\", PowerShell would throw an error because it cannot\n    find the literal path \".  est.ps1\".\n\n    When the script file invoked terminates with an exit command, the process\n    exit code is set to the numeric argument used with the exit command. With\n    normal termination, the exit code is always 0.\n\n    Similar to -Command, when a script-terminating error occurs, the exit code\n    is set to 1. However, unlike with -Command, when the execution is\n    interrupted with Ctrl-C the exit code is 0.\n\n-Command | -c\n\n    Executes the specified commands (and any parameters) as though they were\n    typed at the PowerShell command prompt, and then exits, unless the NoExit\n    parameter is specified.\n\n    The value of Command can be \"-\", a script block, or a string. If the value\n    of Command is \"-\", the command text is read from standard input.\n\n    The Command parameter only accepts a script block for execution when it can\n    recognize the value passed to Command as a ScriptBlock type. This is only\n    possible when running pwsh from another PowerShell host. The ScriptBlock\n    type may be contained in an existing variable, returned from an expression,\n    or parsed by the PowerShell host as a literal script block enclosed in\n    curly braces \"{}\", before being passed to pwsh.\n\n        pwsh -Command {Get-WinEvent -LogName security}\n\n    In cmd.exe, there is no such thing as a script block (or ScriptBlock type),\n    so the value passed to Command will always be a string. You can write a\n    script block inside the string, but instead of being executed it will\n    behave exactly as though you typed it at a typical PowerShell prompt,\n    printing the contents of the script block back out to you.\n\n    A string passed to Command is still executed as PowerShell script, so the\n    script block curly braces are often not required in the first place when\n    running from cmd.exe. To execute an inline script block defined inside a\n    string, the call operator \"&amp;\" can be used:\n\n        pwsh -Command \"&amp; {Get-WinEvent -LogName security}\"\n\n    If the value of Command is a string, Command must be the last parameter for\n    pwsh, because all arguments following it are interpreted as part of the\n    command to execute.\n\n    When called from within an existing PowerShell session, the results are\n    returned to the parent shell as deserialized XML objects, not live objects.\n    For other shells, the results are returned as strings.\n\n    If the value of Command is \"-\", the command text is read from standard\n    input. You must redirect standard input when using the Command parameter\n    with standard input. For example:\n\n        @'\n        \"in\"\n\n        \"hi\" |\n        % { \"$_ there\" }\n\n        \"out\"\n        '@ | powershell -NoProfile -Command -\n\n    This example produces the following output:\n\n        in\n        hi there\n        out\n\n    The process exit code is determined by status of the last (executed)\n    command within the script block. The exit code is 0 when $? is $true or 1\n    when $? is $false. If the last command is an external program or a\n    PowerShell script that explicitly sets an exit code other than 0 or 1, that\n    exit code is converted to 1 for process exit code. To preserve the specific\n    exit code, add exit $LASTEXITCODE to your command string or script block.\n\n    Similarly, the value 1 is returned when a script-terminating\n    (runspace-terminating) error, such as a throw or -ErrorAction Stop, occurs\n    or when execution is interrupted with Ctrl-C.\n\n-CommandWithArgs | -cwa\n\n    [Experimental]\n    Executes a PowerShell command with arguments.  Unlike `-Command`, this\n    parameter populates the `$args built-in variable which can be used by the\n    command.\n\n    The first string is the command and subsequent strings delimited by whitespace\n    are the arguments.\n\n    For example:\n\n        pwsh -CommandWithArgs '$args | % { \"arg: $_\" }' arg1 arg2\n\n    This example produces the following output:\n\n        arg: arg1\n        arg: arg2\n\n-ConfigurationName | -config\n\n    Specifies a configuration endpoint in which PowerShell is run. This can be\n    any endpoint registered on the local machine including the default\n    PowerShell remoting endpoints or a custom endpoint having specific user\n    role capabilities.\n\n    Example: \"pwsh -ConfigurationName AdminRoles\"\n\n-ConfigurationFile\n\n    Specifies a session configuration (.pssc) file path. The configuration\n    contained in the configuration file will be applied to the PowerShell\n    session.\n\n    Example: \"pwsh -ConfigurationFile \"C:\\ProgramData\\PowerShell\\MyConfig.pssc\"\n\n-CustomPipeName\n\n    Specifies the name to use for an additional IPC server (named pipe) used\n    for debugging and other cross-process communication. This offers a\n    predictable mechanism for connecting to other PowerShell instances.\n    Typically used with the CustomPipeName parameter on \"Enter-PSHostProcess\".\n\n    This parameter was introduced in PowerShell 6.2.\n\n    For example:\n\n        # PowerShell instance 1\n        pwsh -CustomPipeName mydebugpipe\n        # PowerShell instance 2\n        Enter-PSHostProcess -CustomPipeName mydebugpipe\n\n-EncodedCommand | -e | -ec\n\n    Accepts a Base64-encoded string version of a command. Use this parameter to\n    submit commands to PowerShell that require complex, nested quoting. The\n    Base64 representation must be a UTF-16 encoded string.\n\n    For example:\n\n        $command = 'dir \"c:\\program files\" '\n        $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n        $encodedCommand = [Convert]::ToBase64String($bytes)\n        pwsh -encodedcommand $encodedCommand\n\n-ExecutionPolicy | -ex | -ep\n\n    Sets the default execution policy for the current session and saves it in\n    the $env:PSExecutionPolicyPreference environment variable. This parameter\n    does not change the persistently configured execution policies.\n\n    This parameter only applies to Windows computers. The\n    $env:PSExecutionPolicyPreference environment variable does not exist on\n    non-Windows platforms.\n\n-InputFormat | -inp | -if\n\n    Describes the format of data sent to PowerShell. Valid values are \"Text\"\n    (text strings) or \"XML\" (serialized CLIXML format).\n\n-Interactive | -i\n\n    Present an interactive prompt to the user. Inverse for NonInteractive\n    parameter.\n\n-Login | -l\n\n    On Linux and macOS, starts PowerShell as a login shell, using /bin/sh to\n    execute login profiles such as /etc/profile and ~/.profile. On Windows,\n    this switch does nothing.\n\n    [!IMPORTANT] This parameter must come first to start PowerShell as a login\n    shell. The parameter is ignored if passed in any other position.\n\n    To set up pwsh as the login shell on UNIX-like operating systems:\n\n    - Verify that the full absolute path to pwsh is listed under /etc/shells\n\n      - This path is usually something like /usr/bin/pwsh on Linux or\n        /usr/local/bin/pwsh on macOS\n      - With some installation methods, this entry will be added\n        automatically at installation time\n      - If pwsh is not present in /etc/shells, use an editor to append the\n        path to pwsh on the last line. This requires elevated privileges to\n        edit.\n\n    - Use the chsh utility to set your current user's shell to pwsh:\n\n        chsh -s /usr/bin/pwsh\n\n    [!WARNING] Setting pwsh as the login shell is currently not supported on\n    Windows Subsystem for Linux (WSL), and attempting to set pwsh as the\n    login shell there may lead to being unable to start WSL interactively.\n\n-MTA\n\n    Start PowerShell using a multi-threaded apartment. This switch is only\n    available on Windows.\n\n-NoExit | -noe\n\n    Does not exit after running startup commands.\n\n    Example: \"pwsh -NoExit -Command Get-Date\"\n\n-NoLogo | -nol\n\n    Hides the banner text at startup of interactive sessions.\n\n-NonInteractive | -noni\n\n    This switch is used to create sessions that shouldn't require user input.\n    This is useful for scripts that run in scheduled tasks or CI/CD pipelines.\n    Any attempts to use interactive features, like 'Read-Host' or confirmation\n    prompts, result in statement terminating errors rather than hanging.\n\n-NoProfile | -nop\n\n    Does not load the PowerShell profiles.\n\n-NoProfileLoadTime\n\n    Hides the PowerShell profile load time text shown at startup when the load\n    time exceeds 500 milliseconds.\n\n-OutputFormat | -o | -of\n\n    Determines how output from PowerShell is formatted. Valid values are \"Text\"\n    (text strings) or \"XML\" (serialized CLIXML format).\n\n    Example: \"pwsh -o XML -c Get-Date\"\n\n    When called within a PowerShell session, you get deserialized objects as\n    output rather plain strings. When called from other shells, the output is\n    string data formatted as CLIXML text.\n\n-SettingsFile | -settings\n\n    Overrides the system-wide \"powershell.config.json\" settings file for the\n    session. By default, system-wide settings are read from the\n    \"powershell.config.json\" in the \"$PSHOME\" directory.\n\n    Note that these settings are not used by the endpoint specified by the\n    \"-ConfigurationName\" argument.\n\n    Example: \"pwsh -SettingsFile c:\\myproject\\powershell.config.json\"\n\n-SSHServerMode | -sshs\n\n    Used in sshd_config for running PowerShell as an SSH subsystem. It is not\n    intended or supported for any other use.\n\n-STA\n\n    Start PowerShell using a single-threaded apartment. This is the default.\n    This switch is only available on Windows.\n\n-Version | -v\n\n    Displays the version of PowerShell. Additional parameters are ignored.\n\n-WindowStyle | -w\n\n    Sets the window style for the session. Valid values are Normal, Minimized,\n    Maximized and Hidden.\n\n-WorkingDirectory | -wd\n\n    Sets the initial working directory by executing at startup. Any valid\n    PowerShell file path is supported.\n\n    To start PowerShell in your home directory, use: pwsh -WorkingDirectory ~\n\n-Help, -?, /?\n\n    Displays help for pwsh. If you are typing a pwsh command in PowerShell,\n    prepend the command parameters with a hyphen (-), not a forward slash (/).\n\n</code></pre>"},{"location":"descriptors/powershell_powershell/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=github-tags depName=PowerShell/PowerShell\nARG POWERSHELL_VERSION=7.5.1\n\nRUN curl -L https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-musl-x64.tar.gz -o /tmp/powershell.tar.gz \\\n    &amp;&amp; mkdir -p /opt/microsoft/powershell/7 \\\n    &amp;&amp; tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 \\\n    &amp;&amp; chmod +x /opt/microsoft/powershell/7/pwsh \\\n    &amp;&amp; ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n\n# Linter install\n# renovate: datasource=nuget depName=PSScriptAnalyzer registryUrl=https://www.powershellgallery.com/api/v2/\nARG PSSA_VERSION='1.24.0'\n\nRUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'\n</code></pre>"},{"location":"descriptors/powershell_powershell_formatter/","title":"powershell_formatter configuration in MegaLinter","text":""},{"location":"descriptors/powershell_powershell_formatter/#powershell_formatter","title":"powershell_formatter","text":""},{"location":"descriptors/powershell_powershell_formatter/#powershell_formatter-documentation","title":"powershell_formatter documentation","text":"<ul> <li>Version in MegaLinter: 7.5.1</li> <li>Visit Official Web Site</li> <li>See How to configure powershell_formatter rules</li> <li>See How to disable powershell_formatter rules in files</li> <li>See Index of problems detected by powershell_formatter</li> </ul>"},{"location":"descriptors/powershell_powershell_formatter/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable powershell_formatter by adding <code>POWERSHELL_POWERSHELL_FORMATTER</code> in ENABLE_LINTERS variable</li> <li>Disable powershell_formatter by adding <code>POWERSHELL_POWERSHELL_FORMATTER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>POWERSHELL_POWERSHELL_FORMATTER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value POWERSHELL_POWERSHELL_FORMATTER_OUTPUT_ENCODING <code>-Encoding</code> to be used when writing content to the file <code>utf8</code> POWERSHELL_POWERSHELL_FORMATTER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> POWERSHELL_POWERSHELL_FORMATTER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> POWERSHELL_POWERSHELL_FORMATTER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file POWERSHELL_POWERSHELL_FORMATTER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file POWERSHELL_POWERSHELL_FORMATTER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> POWERSHELL_POWERSHELL_FORMATTER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".ps1\", \".psm1\", \".psd1\", \".ps1xml\", \".pssc\", \".psrc\", \".cdxml\"]</code> POWERSHELL_POWERSHELL_FORMATTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file POWERSHELL_POWERSHELL_FORMATTER_PRE_COMMANDS List of bash commands to run before the linter None POWERSHELL_POWERSHELL_FORMATTER_POST_COMMANDS List of bash commands to run after the linter None POWERSHELL_POWERSHELL_FORMATTER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling POWERSHELL_POWERSHELL_FORMATTER and its pre/post commands None POWERSHELL_POWERSHELL_FORMATTER_CONFIG_FILE powershell_formatter configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.powershell-formatter.psd1</code> POWERSHELL_POWERSHELL_FORMATTER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules POWERSHELL_POWERSHELL_FORMATTER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> POWERSHELL_POWERSHELL_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> POWERSHELL_POWERSHELL_FORMATTER_CLI_EXECUTABLE Override CLI executable <code>['powershell']</code>"},{"location":"descriptors/powershell_powershell_formatter/#ide-integration","title":"IDE Integration","text":"<p>Use powershell_formatter in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode PowerShell extension"},{"location":"descriptors/powershell_powershell_formatter/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18"},{"location":"descriptors/powershell_powershell_formatter/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/powershell_powershell_formatter/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.ps1</code>, <code>.psm1</code>, <code>.psd1</code>, <code>.ps1xml</code>, <code>.pssc</code>, <code>.psrc</code>, <code>.cdxml</code></li> </ul>"},{"location":"descriptors/powershell_powershell_formatter/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>powershell_formatter is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/powershell_powershell_formatter/#example-calls","title":"Example calls","text":"<pre><code>pwsh -NoProfile -NoLogo -Command \"Invoke-Formatter -ScriptDefinition 'write-host Hello World'\"\n</code></pre> <pre><code>pwsh -NoProfile -NoLogo -Command \"Invoke-Formatter -Settings .powershell-psscriptanalyzer.psd1 -ScriptDefinition 'write-host Hello World'\"\n</code></pre>"},{"location":"descriptors/powershell_powershell_formatter/#help-content","title":"Help content","text":"<pre><code>\nUsage: pwsh[.exe] [-Login] [[-File] &lt;filePath&gt; [args]]\n                  [-Command { - | &lt;script-block&gt; [-args &lt;arg-array&gt;]\n                                | &lt;string&gt; [&lt;CommandParameters&gt;] } ]\n                  [-CommandWithArgs &lt;string&gt; [&lt;CommandParameters&gt;]\n                  [-ConfigurationName &lt;string&gt;] [-ConfigurationFile &lt;filePath&gt;]\n                  [-CustomPipeName &lt;string&gt;] [-EncodedCommand &lt;Base64EncodedCommand&gt;]\n                  [-ExecutionPolicy &lt;ExecutionPolicy&gt;] [-InputFormat {Text | XML}]\n                  [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile]\n                  [-NoProfileLoadTime] [-OutputFormat {Text | XML}]\n                  [-SettingsFile &lt;filePath&gt;] [-SSHServerMode] [-STA]\n                  [-Version] [-WindowStyle &lt;style&gt;]\n                  [-WorkingDirectory &lt;directoryPath&gt;]\n\n       pwsh[.exe] -h | -Help | -? | /?\n\nPowerShell Online Help https://aka.ms/powershell-docs\n\nAll parameters are case-insensitive.\n\n-File | -f\n\n    If the value of File is \"-\", the command text is read from standard input.\n    Running \"pwsh -File -\" without redirected standard input starts a regular\n    session. This is the same as not specifying the File parameter at all.\n\n    This is the default parameter if no parameters are present but values are\n    present in the command line. The specified script runs in the local scope\n    (\"dot-sourced\"), so that the functions and variables that the script\n    creates are available in the current session. Enter the script file path\n    and any parameters. File must be the last parameter in the command, because\n    all characters typed after the File parameter name are interpreted as the\n    script file path followed by the script parameters.\n\n    Typically, the switch parameters of a script are either included or\n    omitted. For example, the following command uses the All parameter of the\n    Get-Script.ps1 script file: \"-File .\\Get-Script.ps1 -All\"\n\n    In rare cases, you might need to provide a BOOLEAN value for a switch\n    parameter. To provide a BOOLEAN value for a switch parameter in the value\n    of the FILE parameter, Use the parameter normally followed immediately by a\n    colon and the boolean value, such as the following:\n    \"-File .\\Get-Script.ps1 -All:$False\".\n\n    Parameters passed to the script are passed as literal strings, after\n    interpretation by the current shell. For example, if you are in cmd.exe and\n    want to pass an environment variable value, you would use the cmd.exe\n    syntax: \"pwsh -File .  est.ps1 -TestParam %windir%\"\n\n    In contrast, running \"pwsh -File .  est.ps1 -TestParam $env:windir\" in\n    cmd.exe results in the script receiving the literal string \"$env:windir\"\n    because it has no special meaning to the current cmd.exe shell. The\n    \"$env:windir\" style of environment variable reference can be used inside a\n    Command parameter, since there it is interpreted as PowerShell code.\n\n    Similarly, if you want to execute the same command from a Batch script,\n    you would use \"%~dp0\" instead of \".\\\" or \"$PSScriptRoot\" to represent the current\n    execution directory: \"pwsh -File %~dp0test.ps1 -TestParam %windir%\". If you\n    instead used \".  est.ps1\", PowerShell would throw an error because it cannot\n    find the literal path \".  est.ps1\".\n\n    When the script file invoked terminates with an exit command, the process\n    exit code is set to the numeric argument used with the exit command. With\n    normal termination, the exit code is always 0.\n\n    Similar to -Command, when a script-terminating error occurs, the exit code\n    is set to 1. However, unlike with -Command, when the execution is\n    interrupted with Ctrl-C the exit code is 0.\n\n-Command | -c\n\n    Executes the specified commands (and any parameters) as though they were\n    typed at the PowerShell command prompt, and then exits, unless the NoExit\n    parameter is specified.\n\n    The value of Command can be \"-\", a script block, or a string. If the value\n    of Command is \"-\", the command text is read from standard input.\n\n    The Command parameter only accepts a script block for execution when it can\n    recognize the value passed to Command as a ScriptBlock type. This is only\n    possible when running pwsh from another PowerShell host. The ScriptBlock\n    type may be contained in an existing variable, returned from an expression,\n    or parsed by the PowerShell host as a literal script block enclosed in\n    curly braces \"{}\", before being passed to pwsh.\n\n        pwsh -Command {Get-WinEvent -LogName security}\n\n    In cmd.exe, there is no such thing as a script block (or ScriptBlock type),\n    so the value passed to Command will always be a string. You can write a\n    script block inside the string, but instead of being executed it will\n    behave exactly as though you typed it at a typical PowerShell prompt,\n    printing the contents of the script block back out to you.\n\n    A string passed to Command is still executed as PowerShell script, so the\n    script block curly braces are often not required in the first place when\n    running from cmd.exe. To execute an inline script block defined inside a\n    string, the call operator \"&amp;\" can be used:\n\n        pwsh -Command \"&amp; {Get-WinEvent -LogName security}\"\n\n    If the value of Command is a string, Command must be the last parameter for\n    pwsh, because all arguments following it are interpreted as part of the\n    command to execute.\n\n    When called from within an existing PowerShell session, the results are\n    returned to the parent shell as deserialized XML objects, not live objects.\n    For other shells, the results are returned as strings.\n\n    If the value of Command is \"-\", the command text is read from standard\n    input. You must redirect standard input when using the Command parameter\n    with standard input. For example:\n\n        @'\n        \"in\"\n\n        \"hi\" |\n        % { \"$_ there\" }\n\n        \"out\"\n        '@ | powershell -NoProfile -Command -\n\n    This example produces the following output:\n\n        in\n        hi there\n        out\n\n    The process exit code is determined by status of the last (executed)\n    command within the script block. The exit code is 0 when $? is $true or 1\n    when $? is $false. If the last command is an external program or a\n    PowerShell script that explicitly sets an exit code other than 0 or 1, that\n    exit code is converted to 1 for process exit code. To preserve the specific\n    exit code, add exit $LASTEXITCODE to your command string or script block.\n\n    Similarly, the value 1 is returned when a script-terminating\n    (runspace-terminating) error, such as a throw or -ErrorAction Stop, occurs\n    or when execution is interrupted with Ctrl-C.\n\n-CommandWithArgs | -cwa\n\n    [Experimental]\n    Executes a PowerShell command with arguments.  Unlike `-Command`, this\n    parameter populates the `$args built-in variable which can be used by the\n    command.\n\n    The first string is the command and subsequent strings delimited by whitespace\n    are the arguments.\n\n    For example:\n\n        pwsh -CommandWithArgs '$args | % { \"arg: $_\" }' arg1 arg2\n\n    This example produces the following output:\n\n        arg: arg1\n        arg: arg2\n\n-ConfigurationName | -config\n\n    Specifies a configuration endpoint in which PowerShell is run. This can be\n    any endpoint registered on the local machine including the default\n    PowerShell remoting endpoints or a custom endpoint having specific user\n    role capabilities.\n\n    Example: \"pwsh -ConfigurationName AdminRoles\"\n\n-ConfigurationFile\n\n    Specifies a session configuration (.pssc) file path. The configuration\n    contained in the configuration file will be applied to the PowerShell\n    session.\n\n    Example: \"pwsh -ConfigurationFile \"C:\\ProgramData\\PowerShell\\MyConfig.pssc\"\n\n-CustomPipeName\n\n    Specifies the name to use for an additional IPC server (named pipe) used\n    for debugging and other cross-process communication. This offers a\n    predictable mechanism for connecting to other PowerShell instances.\n    Typically used with the CustomPipeName parameter on \"Enter-PSHostProcess\".\n\n    This parameter was introduced in PowerShell 6.2.\n\n    For example:\n\n        # PowerShell instance 1\n        pwsh -CustomPipeName mydebugpipe\n        # PowerShell instance 2\n        Enter-PSHostProcess -CustomPipeName mydebugpipe\n\n-EncodedCommand | -e | -ec\n\n    Accepts a Base64-encoded string version of a command. Use this parameter to\n    submit commands to PowerShell that require complex, nested quoting. The\n    Base64 representation must be a UTF-16 encoded string.\n\n    For example:\n\n        $command = 'dir \"c:\\program files\" '\n        $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n        $encodedCommand = [Convert]::ToBase64String($bytes)\n        pwsh -encodedcommand $encodedCommand\n\n-ExecutionPolicy | -ex | -ep\n\n    Sets the default execution policy for the current session and saves it in\n    the $env:PSExecutionPolicyPreference environment variable. This parameter\n    does not change the persistently configured execution policies.\n\n    This parameter only applies to Windows computers. The\n    $env:PSExecutionPolicyPreference environment variable does not exist on\n    non-Windows platforms.\n\n-InputFormat | -inp | -if\n\n    Describes the format of data sent to PowerShell. Valid values are \"Text\"\n    (text strings) or \"XML\" (serialized CLIXML format).\n\n-Interactive | -i\n\n    Present an interactive prompt to the user. Inverse for NonInteractive\n    parameter.\n\n-Login | -l\n\n    On Linux and macOS, starts PowerShell as a login shell, using /bin/sh to\n    execute login profiles such as /etc/profile and ~/.profile. On Windows,\n    this switch does nothing.\n\n    [!IMPORTANT] This parameter must come first to start PowerShell as a login\n    shell. The parameter is ignored if passed in any other position.\n\n    To set up pwsh as the login shell on UNIX-like operating systems:\n\n    - Verify that the full absolute path to pwsh is listed under /etc/shells\n\n      - This path is usually something like /usr/bin/pwsh on Linux or\n        /usr/local/bin/pwsh on macOS\n      - With some installation methods, this entry will be added\n        automatically at installation time\n      - If pwsh is not present in /etc/shells, use an editor to append the\n        path to pwsh on the last line. This requires elevated privileges to\n        edit.\n\n    - Use the chsh utility to set your current user's shell to pwsh:\n\n        chsh -s /usr/bin/pwsh\n\n    [!WARNING] Setting pwsh as the login shell is currently not supported on\n    Windows Subsystem for Linux (WSL), and attempting to set pwsh as the\n    login shell there may lead to being unable to start WSL interactively.\n\n-MTA\n\n    Start PowerShell using a multi-threaded apartment. This switch is only\n    available on Windows.\n\n-NoExit | -noe\n\n    Does not exit after running startup commands.\n\n    Example: \"pwsh -NoExit -Command Get-Date\"\n\n-NoLogo | -nol\n\n    Hides the banner text at startup of interactive sessions.\n\n-NonInteractive | -noni\n\n    This switch is used to create sessions that shouldn't require user input.\n    This is useful for scripts that run in scheduled tasks or CI/CD pipelines.\n    Any attempts to use interactive features, like 'Read-Host' or confirmation\n    prompts, result in statement terminating errors rather than hanging.\n\n-NoProfile | -nop\n\n    Does not load the PowerShell profiles.\n\n-NoProfileLoadTime\n\n    Hides the PowerShell profile load time text shown at startup when the load\n    time exceeds 500 milliseconds.\n\n-OutputFormat | -o | -of\n\n    Determines how output from PowerShell is formatted. Valid values are \"Text\"\n    (text strings) or \"XML\" (serialized CLIXML format).\n\n    Example: \"pwsh -o XML -c Get-Date\"\n\n    When called within a PowerShell session, you get deserialized objects as\n    output rather plain strings. When called from other shells, the output is\n    string data formatted as CLIXML text.\n\n-SettingsFile | -settings\n\n    Overrides the system-wide \"powershell.config.json\" settings file for the\n    session. By default, system-wide settings are read from the\n    \"powershell.config.json\" in the \"$PSHOME\" directory.\n\n    Note that these settings are not used by the endpoint specified by the\n    \"-ConfigurationName\" argument.\n\n    Example: \"pwsh -SettingsFile c:\\myproject\\powershell.config.json\"\n\n-SSHServerMode | -sshs\n\n    Used in sshd_config for running PowerShell as an SSH subsystem. It is not\n    intended or supported for any other use.\n\n-STA\n\n    Start PowerShell using a single-threaded apartment. This is the default.\n    This switch is only available on Windows.\n\n-Version | -v\n\n    Displays the version of PowerShell. Additional parameters are ignored.\n\n-WindowStyle | -w\n\n    Sets the window style for the session. Valid values are Normal, Minimized,\n    Maximized and Hidden.\n\n-WorkingDirectory | -wd\n\n    Sets the initial working directory by executing at startup. Any valid\n    PowerShell file path is supported.\n\n    To start PowerShell in your home directory, use: pwsh -WorkingDirectory ~\n\n-Help, -?, /?\n\n    Displays help for pwsh. If you are typing a pwsh command in PowerShell,\n    prepend the command parameters with a hyphen (-), not a forward slash (/).\n\n</code></pre>"},{"location":"descriptors/powershell_powershell_formatter/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=github-tags depName=PowerShell/PowerShell\nARG POWERSHELL_VERSION=7.5.1\n\nRUN curl -L https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-musl-x64.tar.gz -o /tmp/powershell.tar.gz \\\n    &amp;&amp; mkdir -p /opt/microsoft/powershell/7 \\\n    &amp;&amp; tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 \\\n    &amp;&amp; chmod +x /opt/microsoft/powershell/7/pwsh \\\n    &amp;&amp; ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n\n# Linter install\n# renovate: datasource=nuget depName=PSScriptAnalyzer registryUrl=https://www.powershellgallery.com/api/v2/\nARG PSSA_VERSION='1.24.0'\n\nRUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'\n</code></pre>"},{"location":"descriptors/protobuf/","title":"PROTOBUF linters in MegaLinter","text":""},{"location":"descriptors/protobuf/#protobuf","title":"PROTOBUF","text":""},{"location":"descriptors/protobuf/#linters","title":"Linters","text":"Linter Additional protolintPROTOBUF_PROTOLINT"},{"location":"descriptors/protobuf/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.proto</code></li> </ul> </li> </ul>"},{"location":"descriptors/protobuf/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value PROTOBUF_PRE_COMMANDS List of bash commands to run before the linters None PROTOBUF_POST_COMMANDS List of bash commands to run after the linters None PROTOBUF_FILTER_REGEX_INCLUDE Custom regex including filter PROTOBUF_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/protobuf_protolint/","title":"protolint configuration in MegaLinter","text":""},{"location":"descriptors/protobuf_protolint/#protolint","title":"protolint","text":""},{"location":"descriptors/protobuf_protolint/#protolint-documentation","title":"protolint documentation","text":"<ul> <li>Version in MegaLinter: 0.54.1</li> <li>Visit Official Web Site</li> <li>See How to configure protolint rules<ul> <li>If custom <code>.protolintrc.yml</code> config file isn't found, .protolintrc.yml will be used</li> </ul> </li> <li>See Index of problems detected by protolint</li> </ul>"},{"location":"descriptors/protobuf_protolint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable protolint by adding <code>PROTOBUF_PROTOLINT</code> in ENABLE_LINTERS variable</li> <li>Disable protolint by adding <code>PROTOBUF_PROTOLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>PROTOBUF_PROTOLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value PROTOBUF_PROTOLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PROTOBUF_PROTOLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PROTOBUF_PROTOLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> PROTOBUF_PROTOLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".proto\"]</code> PROTOBUF_PROTOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PROTOBUF_PROTOLINT_PRE_COMMANDS List of bash commands to run before the linter None PROTOBUF_PROTOLINT_POST_COMMANDS List of bash commands to run after the linter None PROTOBUF_PROTOLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PROTOBUF_PROTOLINT and its pre/post commands None PROTOBUF_PROTOLINT_CONFIG_FILE protolint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.protolintrc.yml</code> PROTOBUF_PROTOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PROTOBUF_PROTOLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PROTOBUF_PROTOLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PROTOBUF_PROTOLINT_CLI_EXECUTABLE Override CLI executable <code>['protolint']</code>"},{"location":"descriptors/protobuf_protolint/#ide-integration","title":"IDE Integration","text":"<p>Use protolint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA Protocol Buffer Linter Visual Studio Code VSCode Protolint"},{"location":"descriptors/protobuf_protolint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/protobuf_protolint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/protobuf_protolint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.proto</code></li> </ul>"},{"location":"descriptors/protobuf_protolint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>protolint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/protobuf_protolint/#example-calls","title":"Example calls","text":"<pre><code>protolint lint myfile.proto\n</code></pre> <pre><code>protolint lint --config_path .protolintrc.yml myfile.proto\n</code></pre> <pre><code>protolint lint -fix --config_path .protolintrc.yml myfile.proto\n</code></pre>"},{"location":"descriptors/protobuf_protolint/#help-content","title":"Help content","text":"<pre><code>Usage of lint:\n  -add-reporter value\n      Adds a reporter to the list of reporters to use. The format should be 'name of reporter':'Path-To_output_file'\n  -auto_disable value\n      mode that the command line automatically disable some of the problems. Available auto_disable are \"next\" and \"this\".\n  -config_dir_path string\n      path/to/the_directory_including_protolint.yaml\n  -config_path string\n      path/to/protolint.yaml. Note that if both are set, config_dir_path is ignored.\n  -fix\n      mode that the command line automatically fix some of the problems\n  -no-error-on-unmatched-pattern\n      exits with 0 when no file is matched\n  -output_file string\n      path/to/output.txt\n  -plugin value\n      plugins to provide custom lint rule set. Note that it's necessary to specify it as path format'\n  -reporter value\n      formatter to output results in the specific format. Available reporters are \"plain\"(default), \"junit\", \"json\", \"sarif\", and \"unix\".\n  -v  verbose output that includes parsing process details\n</code></pre>"},{"location":"descriptors/protobuf_protolint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=yoheimuta/protolint\nARG PROTOBUF_PROTOLINT_VERSION=0.54.1\nFROM yoheimuta/protolint:${PROTOBUF_PROTOLINT_VERSION} AS protolint\nCOPY --link --from=protolint /usr/local/bin/protolint /usr/bin/\n</code></pre>"},{"location":"descriptors/puppet/","title":"PUPPET linters in MegaLinter","text":""},{"location":"descriptors/puppet/#puppet","title":"PUPPET","text":""},{"location":"descriptors/puppet/#linters","title":"Linters","text":"Linter Additional puppet-lintPUPPET_PUPPET_LINT"},{"location":"descriptors/puppet/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.pp</code></li> </ul> </li> </ul>"},{"location":"descriptors/puppet/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value PUPPET_PRE_COMMANDS List of bash commands to run before the linters None PUPPET_POST_COMMANDS List of bash commands to run after the linters None PUPPET_FILTER_REGEX_INCLUDE Custom regex including filter PUPPET_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/puppet_puppet_lint/","title":"puppet-lint configuration in MegaLinter","text":""},{"location":"descriptors/puppet_puppet_lint/#puppet-lint","title":"puppet-lint","text":""},{"location":"descriptors/puppet_puppet_lint/#puppet-lint-documentation","title":"puppet-lint documentation","text":"<ul> <li>Version in MegaLinter: 4.3.0</li> <li>Visit Official Web Site</li> <li>See How to configure puppet-lint rules</li> <li>See How to disable puppet-lint rules in files</li> <li>See Index of problems detected by puppet-lint</li> </ul>"},{"location":"descriptors/puppet_puppet_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable puppet-lint by adding <code>PUPPET_PUPPET_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable puppet-lint by adding <code>PUPPET_PUPPET_LINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>PUPPET_PUPPET_LINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value PUPPET_PUPPET_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PUPPET_PUPPET_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PUPPET_PUPPET_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> PUPPET_PUPPET_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".pp\"]</code> PUPPET_PUPPET_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PUPPET_PUPPET_LINT_PRE_COMMANDS List of bash commands to run before the linter None PUPPET_PUPPET_LINT_POST_COMMANDS List of bash commands to run after the linter None PUPPET_PUPPET_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PUPPET_PUPPET_LINT and its pre/post commands None PUPPET_PUPPET_LINT_CONFIG_FILE puppet-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.puppet-lint.rc</code> PUPPET_PUPPET_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PUPPET_PUPPET_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PUPPET_PUPPET_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PUPPET_PUPPET_LINT_CLI_EXECUTABLE Override CLI executable <code>['puppet-lint']</code>"},{"location":"descriptors/puppet_puppet_lint/#ide-integration","title":"IDE Integration","text":"<p>Use puppet-lint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Puppet VSCode Extension Visit Web Site"},{"location":"descriptors/puppet_puppet_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/puppet_puppet_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/puppet_puppet_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.pp</code></li> </ul>"},{"location":"descriptors/puppet_puppet_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>puppet-lint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/puppet_puppet_lint/#example-calls","title":"Example calls","text":"<pre><code>puppet-lint --fail-on-warnings --no-autoloader_layout-check myfile.pp\n</code></pre> <pre><code>puppet-lint --fail-on-warnings --no-autoloader_layout-check --fix myfile.pp\n</code></pre>"},{"location":"descriptors/puppet_puppet_lint/#help-content","title":"Help content","text":"<pre><code>    puppet-lint\n\n    Basic Command Line Usage:\n      puppet-lint [OPTIONS] PATH\n\n            PATH                         The path to the Puppet manifest.\n\n    Option:\n        --version                    Display the current version.\n        --no-config                  Do not load default puppet-lint option files.\n    -c, --config FILE                Load puppet-lint options from file.\n        --with-context               Show where in the manifest the problem is.\n        --with-filename              Display the filename before the warning.\n        --fail-on-warnings           Return a non-zero exit status for warnings\n        --error-level LEVEL          The level of error to return (warning, error or all).\n        --show-ignored               Show problems that have been ignored by control comments\n        --relative                   Compare module layout relative to the module root\n    -l, --load FILE                  Load a file containing custom puppet-lint checks.\n        --load-from-puppet MODULEPATH\n                                     Load plugins from the given Puppet module path.\n    -f, --fix                        Attempt to automatically fix errors\n        --log-format FORMAT          Change the log format.\n                                     Overrides --with-filename.\n                                     The following placeholders can be used:\n                                     %{filename} - Filename without path.\n                                     %{path}     - Path as provided to puppet-lint.\n                                     %{fullpath} - Expanded path to the file.\n                                     %{line}     - Line number.\n                                     %{column}   - Column number.\n                                     %{kind}     - The kind of message (warning, error).\n                                     %{KIND}     - Uppercase version of %{kind}.\n                                     %{check}    - The name of the check.\n                                     %{message}  - The message.\n        --json                       Log output as JSON\n        --sarif                      Log output as SARIF\n        --codeclimate-report-file FILE\n                                     Save a code climate compatible report to this file\n        --list-checks                List available check names.\n\n    Checks:\n        --only-checks CHECKS         A comma separated list of checks that should be run\n        --ignore-paths PATHS         A comma separated list of patterns to ignore\n        --top-scope-variables VARS   A comma separated list of allowed top scope variables\n        --no-arrow_on_right_operand_line-check\n                                     Skip the arrow_on_right_operand_line check.\n        --no-autoloader_layout-check Skip the autoloader_layout check.\n        --no-class_inherits_from_params_class-check\n                                     Skip the class_inherits_from_params_class check.\n        --class_inherits_from_params_class-check\n                                     Enable the class_inherits_from_params_class check.\n        --no-code_on_top_scope-check Skip the code_on_top_scope check.\n        --code_on_top_scope-check    Enable the code_on_top_scope check.\n        --no-inherits_across_namespaces-check\n                                     Skip the inherits_across_namespaces check.\n        --no-names_containing_dash-check\n                                     Skip the names_containing_dash check.\n        --no-names_containing_uppercase-check\n                                     Skip the names_containing_uppercase check.\n        --no-nested_classes_or_defines-check\n                                     Skip the nested_classes_or_defines check.\n        --no-parameter_order-check   Skip the parameter_order check.\n        --no-right_to_left_relationship-check\n                                     Skip the right_to_left_relationship check.\n        --no-variable_scope-check    Skip the variable_scope check.\n        --no-slash_comments-check    Skip the slash_comments check.\n        --no-star_comments-check     Skip the star_comments check.\n        --no-case_without_default-check\n                                     Skip the case_without_default check.\n        --no-selector_inside_resource-check\n                                     Skip the selector_inside_resource check.\n        --no-documentation-check     Skip the documentation check.\n        --no-unquoted_node_name-check\n                                     Skip the unquoted_node_name check.\n        --no-duplicate_params-check  Skip the duplicate_params check.\n        --no-ensure_first_param-check\n                                     Skip the ensure_first_param check.\n        --no-ensure_not_symlink_target-check\n                                     Skip the ensure_not_symlink_target check.\n        --no-file_mode-check         Skip the file_mode check.\n        --no-unquoted_file_mode-check\n                                     Skip the unquoted_file_mode check.\n        --no-unquoted_resource_title-check\n                                     Skip the unquoted_resource_title check.\n        --no-double_quoted_strings-check\n                                     Skip the double_quoted_strings check.\n        --no-only_variable_string-check\n                                     Skip the only_variable_string check.\n        --no-puppet_url_without_modules-check\n                                     Skip the puppet_url_without_modules check.\n        --no-quoted_booleans-check   Skip the quoted_booleans check.\n        --quoted_booleans-check      Enable the quoted_booleans check.\n        --no-single_quote_string_with_variables-check\n                                     Skip the single_quote_string_with_variables check.\n        --no-variables_not_enclosed-check\n                                     Skip the variables_not_enclosed check.\n        --no-variable_contains_dash-check\n                                     Skip the variable_contains_dash check.\n        --no-variable_is_lowercase-check\n                                     Skip the variable_is_lowercase check.\n        --no-140chars-check          Skip the 140chars check.\n        --no-2sp_soft_tabs-check     Skip the 2sp_soft_tabs check.\n        --no-80chars-check           Skip the 80chars check.\n        --80chars-check              Enable the 80chars check.\n        --no-arrow_alignment-check   Skip the arrow_alignment check.\n        --no-hard_tabs-check         Skip the hard_tabs check.\n        --no-space_before_arrow-check\n                                     Skip the space_before_arrow check.\n        --no-trailing_whitespace-check\n                                     Skip the trailing_whitespace check.\n        --no-legacy_facts-check      Skip the legacy_facts check.\n        --no-top_scope_facts-check   Skip the top_scope_facts check.\n</code></pre>"},{"location":"descriptors/puppet_puppet_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=rubygems depName=puppet-lint\nARG GEM_PUPPET_LINT_VERSION=4.3.0\n</code></pre> <ul> <li>GEM packages (Ruby) :<ul> <li>puppet-lint:4.3.0</li> </ul> </li> </ul>"},{"location":"descriptors/python/","title":"PYTHON linters in MegaLinter","text":""},{"location":"descriptors/python/#python","title":"PYTHON","text":""},{"location":"descriptors/python/#linters","title":"Linters","text":"Linter Additional pylintPYTHON_PYLINT blackPYTHON_BLACK flake8PYTHON_FLAKE8 isortPYTHON_ISORT banditPYTHON_BANDIT mypyPYTHON_MYPY pyrightPYTHON_PYRIGHT ruffPYTHON_RUFF ruff-formatPYTHON_RUFF_FORMAT"},{"location":"descriptors/python/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.py</code></li> </ul> </li> </ul>"},{"location":"descriptors/python/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value PYTHON_PRE_COMMANDS List of bash commands to run before the linters None PYTHON_POST_COMMANDS List of bash commands to run after the linters None PYTHON_FILTER_REGEX_INCLUDE Custom regex including filter PYTHON_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/python_bandit/","title":"bandit configuration in MegaLinter","text":"<p>bandit checks for security risks</p> <p>If you find it too harsh, you may define <code>PYTHON_BANDIT_DISABLE_ERRORS: true</code> in your <code>.mega-linter.yml</code> config file</p>"},{"location":"descriptors/python_bandit/#bandit-documentation","title":"bandit documentation","text":"<ul> <li>Version in MegaLinter: 1.8.3</li> <li>Visit Official Web Site</li> <li>See How to configure bandit rules<ul> <li>If custom <code>.bandit.yml</code> config file isn't found, .bandit.yml will be used</li> </ul> </li> <li>See How to disable bandit rules in files</li> <li>See Index of problems detected by bandit</li> </ul>"},{"location":"descriptors/python_bandit/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable bandit by adding <code>PYTHON_BANDIT</code> in ENABLE_LINTERS variable</li> <li>Disable bandit by adding <code>PYTHON_BANDIT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PYTHON_BANDIT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_BANDIT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_BANDIT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_BANDIT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_BANDIT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_BANDIT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_BANDIT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_BANDIT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_BANDIT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_BANDIT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_BANDIT and its pre/post commands None PYTHON_BANDIT_CONFIG_FILE bandit configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.bandit.yml</code> PYTHON_BANDIT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_BANDIT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PYTHON_BANDIT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_BANDIT_CLI_EXECUTABLE Override CLI executable <code>['bandit']</code>"},{"location":"descriptors/python_bandit/#ide-integration","title":"IDE Integration","text":"<p>Use bandit in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom bandit-lint Visit Web Site Sublime Text SublimeLinter-bandit Visit Web Site Visual Studio Code Native Support Visit Web Site"},{"location":"descriptors/python_bandit/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 python Optimized for PYTHON based projects 65 security Optimized for security 24"},{"location":"descriptors/python_bandit/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_bandit/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_bandit/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>bandit is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_bandit/#example-calls","title":"Example calls","text":"<pre><code>bandit myfile.py\n</code></pre> <pre><code>bandit --configfile .bandit.yml myfile.py\n</code></pre>"},{"location":"descriptors/python_bandit/#help-content","title":"Help content","text":"<pre><code>usage: bandit [-h] [-r] [-a {file,vuln}] [-n CONTEXT_LINES] [-c CONFIG_FILE]\n              [-p PROFILE] [-t TESTS] [-s SKIPS]\n              [-l | --severity-level {all,low,medium,high}]\n              [-i | --confidence-level {all,low,medium,high}]\n              [-f {csv,custom,html,json,sarif,sarif,screen,txt,xml,yaml}]\n              [--msg-template MSG_TEMPLATE] [-o [OUTPUT_FILE]] [-v] [-d] [-q]\n              [--ignore-nosec] [-x EXCLUDED_PATHS] [-b BASELINE]\n              [--ini INI_PATH] [--exit-zero] [--version]\n              [targets ...]\n\nBandit - a Python source code security analyzer\n\npositional arguments:\n  targets               source file(s) or directory(s) to be tested\n\noptions:\n  -h, --help            show this help message and exit\n  -r, --recursive       find and process files in subdirectories\n  -a {file,vuln}, --aggregate {file,vuln}\n                        aggregate output by vulnerability (default) or by\n                        filename\n  -n CONTEXT_LINES, --number CONTEXT_LINES\n                        maximum number of code lines to output for each issue\n  -c CONFIG_FILE, --configfile CONFIG_FILE\n                        optional config file to use for selecting plugins and\n                        overriding defaults\n  -p PROFILE, --profile PROFILE\n                        profile to use (defaults to executing all tests)\n  -t TESTS, --tests TESTS\n                        comma-separated list of test IDs to run\n  -s SKIPS, --skip SKIPS\n                        comma-separated list of test IDs to skip\n  -l, --level           report only issues of a given severity level or higher\n                        (-l for LOW, -ll for MEDIUM, -lll for HIGH)\n  --severity-level {all,low,medium,high}\n                        report only issues of a given severity level or\n                        higher. \"all\" and \"low\" are likely to produce the same\n                        results, but it is possible for rules to be undefined\n                        which will not be listed in \"low\".\n  -i, --confidence      report only issues of a given confidence level or\n                        higher (-i for LOW, -ii for MEDIUM, -iii for HIGH)\n  --confidence-level {all,low,medium,high}\n                        report only issues of a given confidence level or\n                        higher. \"all\" and \"low\" are likely to produce the same\n                        results, but it is possible for rules to be undefined\n                        which will not be listed in \"low\".\n  -f {csv,custom,html,json,sarif,sarif,screen,txt,xml,yaml}, --format {csv,custom,html,json,sarif,sarif,screen,txt,xml,yaml}\n                        specify output format\n  --msg-template MSG_TEMPLATE\n                        specify output message template (only usable with\n                        --format custom), see CUSTOM FORMAT section for list\n                        of available values\n  -o [OUTPUT_FILE], --output [OUTPUT_FILE]\n                        write report to filename\n  -v, --verbose         output extra information like excluded and included\n                        files\n  -d, --debug           turn on debug mode\n  -q, --quiet, --silent\n                        only show output in the case of an error\n  --ignore-nosec        do not skip lines with # nosec comments\n  -x EXCLUDED_PATHS, --exclude EXCLUDED_PATHS\n                        comma-separated list of paths (glob patterns\n                        supported) to exclude from scan (note that these are\n                        in addition to the excluded paths provided in the\n                        config file) (default:\n                        .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg)\n  -b BASELINE, --baseline BASELINE\n                        path of a baseline report to compare against (only\n                        JSON-formatted files are accepted)\n  --ini INI_PATH        path to a .bandit file that supplies command line\n                        arguments\n  --exit-zero           exit with 0, even with results found\n  --version             show program's version number and exit\n\nCUSTOM FORMATTING\n-----------------\n\nAvailable tags:\n\n    {abspath}, {relpath}, {line}, {col}, {test_id},\n    {severity}, {msg}, {confidence}, {range}\n\nExample usage:\n\n    Default template:\n    bandit -r examples/ --format custom --msg-template \\\n    \"{abspath}:{line}: {test_id}[bandit]: {severity}: {msg}\"\n\n    Provides same output as:\n    bandit -r examples/ --format custom\n\n    Tags can also be formatted in python string.format() style:\n    bandit -r examples/ --format custom --msg-template \\\n    \"{relpath:20.20s}: {line:03}: {test_id:^8}: DEFECT: {msg:&gt;20}\"\n\n    See python documentation for more information about formatting style:\n    https://docs.python.org/3/library/string.html\n\nThe following tests were discovered and loaded:\n-----------------------------------------------\n  B101  assert_used\n  B102  exec_used\n  B103  set_bad_file_permissions\n  B104  hardcoded_bind_all_interfaces\n  B105  hardcoded_password_string\n  B106  hardcoded_password_funcarg\n  B107  hardcoded_password_default\n  B108  hardcoded_tmp_directory\n  B110  try_except_pass\n  B112  try_except_continue\n  B113  request_without_timeout\n  B201  flask_debug_true\n  B202  tarfile_unsafe_members\n  B301  pickle\n  B302  marshal\n  B303  md5\n  B304  ciphers\n  B305  cipher_modes\n  B306  mktemp_q\n  B307  eval\n  B308  mark_safe\n  B310  urllib_urlopen\n  B311  random\n  B312  telnetlib\n  B313  xml_bad_cElementTree\n  B314  xml_bad_ElementTree\n  B315  xml_bad_expatreader\n  B316  xml_bad_expatbuilder\n  B317  xml_bad_sax\n  B318  xml_bad_minidom\n  B319  xml_bad_pulldom\n  B321  ftplib\n  B323  unverified_context\n  B324  hashlib_insecure_functions\n  B401  import_telnetlib\n  B402  import_ftplib\n  B403  import_pickle\n  B404  import_subprocess\n  B405  import_xml_etree\n  B406  import_xml_sax\n  B407  import_xml_expat\n  B408  import_xml_minidom\n  B409  import_xml_pulldom\n  B411  import_xmlrpclib\n  B412  import_httpoxy\n  B413  import_pycrypto\n  B415  import_pyghmi\n  B501  request_with_no_cert_validation\n  B502  ssl_with_bad_version\n  B503  ssl_with_bad_defaults\n  B504  ssl_with_no_version\n  B505  weak_cryptographic_key\n  B506  yaml_load\n  B507  ssh_no_host_key_verification\n  B508  snmp_insecure_version\n  B509  snmp_weak_cryptography\n  B601  paramiko_calls\n  B602  subprocess_popen_with_shell_equals_true\n  B603  subprocess_without_shell_equals_true\n  B604  any_other_function_with_shell_equals_true\n  B605  start_process_with_a_shell\n  B606  start_process_with_no_shell\n  B607  start_process_with_partial_path\n  B608  hardcoded_sql_expressions\n  B609  linux_commands_wildcard_injection\n  B610  django_extra_used\n  B611  django_rawsql_used\n  B612  logging_config_insecure_listen\n  B613  trojansource\n  B614  pytorch_load\n  B701  jinja2_autoescape_false\n  B702  use_of_mako_templates\n  B703  django_mark_safe\n  B704  markupsafe_markup_xss\n</code></pre>"},{"location":"descriptors/python_bandit/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=bandit\nARG PIP_BANDIT_VERSION=1.8.3\n# renovate: datasource=pypi depName=bandit_sarif_formatter\nARG PIP_BANDIT_SARIF_FORMATTER_VERSION=1.1.1\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>bandit==1.8.3</li> <li>bandit_sarif_formatter==1.1.1</li> <li>bandit[toml]==1.8.3</li> </ul> </li> </ul>"},{"location":"descriptors/python_black/","title":"black configuration in MegaLinter","text":""},{"location":"descriptors/python_black/#black-documentation","title":"black documentation","text":"<ul> <li>Version in MegaLinter: 25.1.0</li> <li>Visit Official Web Site</li> <li>See How to configure black rules<ul> <li>If custom <code>pyproject.toml</code> config file isn't found, pyproject.toml will be used</li> </ul> </li> </ul>"},{"location":"descriptors/python_black/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable black by adding <code>PYTHON_BLACK</code> in ENABLE_LINTERS variable</li> <li>Disable black by adding <code>PYTHON_BLACK</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>PYTHON_BLACK</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value PYTHON_DEFAULT_STYLE For black to be active, PYTHON_DEFAULT_STYLE must be <code>black</code> <code>black</code> PYTHON_BLACK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_BLACK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_BLACK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_BLACK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_BLACK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_BLACK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_BLACK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_BLACK_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_BLACK_POST_COMMANDS List of bash commands to run after the linter None PYTHON_BLACK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_BLACK and its pre/post commands None PYTHON_BLACK_CONFIG_FILE black configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>pyproject.toml</code> PYTHON_BLACK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_BLACK_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> PYTHON_BLACK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_BLACK_CLI_EXECUTABLE Override CLI executable <code>['black']</code>"},{"location":"descriptors/python_black/#ide-integration","title":"IDE Integration","text":"<p>Use black in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom python-black Visit Web Site Emacs blacken Visit Web Site Emacs reformatter.el Visit Web Site Emacs elpy Visit Web Site IDEA black Visit Web Site Sublime Text sublack Visit Web Site Visual Studio Code VSCode Python Extension"},{"location":"descriptors/python_black/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 formatters Contains only formatters 18 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_black/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_black/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_black/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>black is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_black/#example-calls","title":"Example calls","text":"<pre><code>black --diff --check myfile.py\n</code></pre> <pre><code>black --config pyproject.toml --diff --check myfile.py\n</code></pre> <pre><code>black --config pyproject.toml myfile.py\n</code></pre>"},{"location":"descriptors/python_black/#help-content","title":"Help content","text":"<pre><code>Usage: black [OPTIONS] SRC ...\n\n  The uncompromising code formatter.\n\nOptions:\n  -c, --code TEXT                 Format the code passed in as a string.\n  -l, --line-length INTEGER       How many characters per line to allow.\n                                  [default: 88]\n  -t, --target-version [py33|py34|py35|py36|py37|py38|py39|py310|py311|py312|py313]\n                                  Python versions that should be supported by\n                                  Black's output. You should include all\n                                  versions that your code supports. By\n                                  default, Black will infer target versions\n                                  from the project metadata in pyproject.toml.\n                                  If this does not yield conclusive results,\n                                  Black will use per-file auto-detection.\n  --pyi                           Format all input files like typing stubs\n                                  regardless of file extension. This is useful\n                                  when piping source on standard input.\n  --ipynb                         Format all input files like Jupyter\n                                  Notebooks regardless of file extension. This\n                                  is useful when piping source on standard\n                                  input.\n  --python-cell-magics TEXT       When processing Jupyter Notebooks, add the\n                                  given magic to the list of known python-\n                                  magics (capture, prun, pypy, python,\n                                  python3, time, timeit). Useful for\n                                  formatting cells with custom python magics.\n  -x, --skip-source-first-line    Skip the first line of the source code.\n  -S, --skip-string-normalization\n                                  Don't normalize string quotes or prefixes.\n  -C, --skip-magic-trailing-comma\n                                  Don't use trailing commas as a reason to\n                                  split lines.\n  --preview                       Enable potentially disruptive style changes\n                                  that may be added to Black's main\n                                  functionality in the next major release.\n  --unstable                      Enable potentially disruptive style changes\n                                  that have known bugs or are not currently\n                                  expected to make it into the stable style\n                                  Black's next major release. Implies\n                                  --preview.\n  --enable-unstable-feature [string_processing|hug_parens_with_braces_and_square_brackets|wrap_long_dict_values_in_parens|multiline_string_handling|always_one_newline_after_import]\n                                  Enable specific features included in the\n                                  `--unstable` style. Requires `--preview`. No\n                                  compatibility guarantees are provided on the\n                                  behavior or existence of any unstable\n                                  features.\n  --check                         Don't write the files back, just return the\n                                  status. Return code 0 means nothing would\n                                  change. Return code 1 means some files would\n                                  be reformatted. Return code 123 means there\n                                  was an internal error.\n  --diff                          Don't write the files back, just output a\n                                  diff to indicate what changes Black would've\n                                  made. They are printed to stdout so\n                                  capturing them is simple.\n  --color / --no-color            Show (or do not show) colored diff. Only\n                                  applies when --diff is given.\n  --line-ranges START-END         When specified, Black will try its best to\n                                  only format these lines. This option can be\n                                  specified multiple times, and a union of the\n                                  lines will be formatted. Each range must be\n                                  specified as two integers connected by a\n                                  `-`: `&lt;START&gt;-&lt;END&gt;`. The `&lt;START&gt;` and\n                                  `&lt;END&gt;` integer indices are 1-based and\n                                  inclusive on both ends.\n  --fast / --safe                 By default, Black performs an AST safety\n                                  check after formatting your code. The --fast\n                                  flag turns off this check and the --safe\n                                  flag explicitly enables it. [default:\n                                  --safe]\n  --required-version TEXT         Require a specific version of Black to be\n                                  running. This is useful for ensuring that\n                                  all contributors to your project are using\n                                  the same version, because different versions\n                                  of Black may format code a little\n                                  differently. This option can be set in a\n                                  configuration file for consistent results\n                                  across environments.\n  --exclude TEXT                  A regular expression that matches files and\n                                  directories that should be excluded on\n                                  recursive searches. An empty value means no\n                                  paths are excluded. Use forward slashes for\n                                  directories on all platforms (Windows, too).\n                                  By default, Black also ignores all paths\n                                  listed in .gitignore. Changing this value\n                                  will override all default exclusions.\n                                  [default: /(\\.direnv|\\.eggs|\\.git|\\.hg|\\.ipy\n                                  nb_checkpoints|\\.mypy_cache|\\.nox|\\.pytest_c\n                                  ache|\\.ruff_cache|\\.tox|\\.svn|\\.venv|\\.vscod\n                                  e|__pypackages__|_build|buck-\n                                  out|build|dist|venv)/]\n  --extend-exclude TEXT           Like --exclude, but adds additional files\n                                  and directories on top of the default values\n                                  instead of overriding them.\n  --force-exclude TEXT            Like --exclude, but files and directories\n                                  matching this regex will be excluded even\n                                  when they are passed explicitly as\n                                  arguments. This is useful when invoking\n                                  Black programmatically on changed files,\n                                  such as in a pre-commit hook or editor\n                                  plugin.\n  --stdin-filename TEXT           The name of the file when passing it through\n                                  stdin. Useful to make sure Black will\n                                  respect the --force-exclude option on some\n                                  editors that rely on using stdin.\n  --include TEXT                  A regular expression that matches files and\n                                  directories that should be included on\n                                  recursive searches. An empty value means all\n                                  files are included regardless of the name.\n                                  Use forward slashes for directories on all\n                                  platforms (Windows, too). Overrides all\n                                  exclusions, including from .gitignore and\n                                  command line options.  [default:\n                                  (\\.pyi?|\\.ipynb)$]\n  -W, --workers INTEGER RANGE     When Black formats multiple files, it may\n                                  use a process pool to speed up formatting.\n                                  This option controls the number of parallel\n                                  workers. This can also be specified via the\n                                  BLACK_NUM_WORKERS environment variable.\n                                  Defaults to the number of CPUs in the\n                                  system.  [x&gt;=1]\n  -q, --quiet                     Stop emitting all non-critical output. Error\n                                  messages will still be emitted (which can\n                                  silenced by 2&gt;/dev/null).\n  -v, --verbose                   Emit messages about files that were not\n                                  changed or were ignored due to exclusion\n                                  patterns. If Black is using a configuration\n                                  file, a message detailing which one it is\n                                  using will be emitted.\n  --version                       Show the version and exit.\n  --config FILE                   Read configuration options from a\n                                  configuration file.\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"descriptors/python_black/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=black\nARG PIP_BLACK_VERSION=25.1.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>black==25.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/python_flake8/","title":"flake8 configuration in MegaLinter","text":""},{"location":"descriptors/python_flake8/#flake8","title":"flake8","text":""},{"location":"descriptors/python_flake8/#flake8-documentation","title":"flake8 documentation","text":"<ul> <li>Version in MegaLinter: 7.2.0</li> <li>Visit Official Web Site</li> <li>See How to configure flake8 rules<ul> <li>If custom <code>.flake8</code> config file isn't found, .flake8 will be used</li> </ul> </li> <li>See How to disable flake8 rules in files</li> <li>See Index of problems detected by flake8</li> </ul>"},{"location":"descriptors/python_flake8/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable flake8 by adding <code>PYTHON_FLAKE8</code> in ENABLE_LINTERS variable</li> <li>Disable flake8 by adding <code>PYTHON_FLAKE8</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PYTHON_FLAKE8_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_FLAKE8_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_FLAKE8_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_FLAKE8_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_FLAKE8_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_FLAKE8_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_FLAKE8_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_FLAKE8_POST_COMMANDS List of bash commands to run after the linter None PYTHON_FLAKE8_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_FLAKE8 and its pre/post commands None PYTHON_FLAKE8_CONFIG_FILE flake8 configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.flake8</code> PYTHON_FLAKE8_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_FLAKE8_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PYTHON_FLAKE8_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_FLAKE8_CLI_EXECUTABLE Override CLI executable <code>['flake8']</code>"},{"location":"descriptors/python_flake8/#ide-integration","title":"IDE Integration","text":"<p>Use flake8 in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-flake8 Visit Web Site IDEA flake8-support Visual Studio Code Native Support Visit Web Site"},{"location":"descriptors/python_flake8/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_flake8/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_flake8/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_flake8/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>flake8 is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_flake8/#example-calls","title":"Example calls","text":"<pre><code>flake8 myfile.py\n</code></pre> <pre><code>flake8 --config .flake8 myfile.py\n</code></pre>"},{"location":"descriptors/python_flake8/#help-content","title":"Help content","text":"<pre><code>usage: flake8 [options] file file ...\n\npositional arguments:\n  filename\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --verbose         Print more information about what is happening in\n                        flake8. This option is repeatable and will increase\n                        verbosity each time it is repeated.\n  --output-file OUTPUT_FILE\n                        Redirect report to a file.\n  --append-config APPEND_CONFIG\n                        Provide extra config files to parse in addition to the\n                        files found by Flake8 by default. These files are the\n                        last ones read and so they take the highest precedence\n                        when multiple files provide the same option.\n  --config CONFIG       Path to the config file that will be the authoritative\n                        config source. This will cause Flake8 to ignore all\n                        other configuration files.\n  --isolated            Ignore all configuration files.\n  --enable-extensions ENABLE_EXTENSIONS\n                        Enable plugins and extensions that are otherwise\n                        disabled by default\n  --require-plugins REQUIRE_PLUGINS\n                        Require specific plugins to be installed before\n                        running\n  --version             show program's version number and exit\n  -q, --quiet           Report only file names, or nothing. This option is\n                        repeatable.\n  --color {auto,always,never}\n                        Whether to use color in output. Defaults to `auto`.\n  --count               Print total number of errors to standard output after\n                        all other output.\n  --exclude patterns    Comma-separated list of files or directories to\n                        exclude. (Default: ['.svn', 'CVS', '.bzr', '.hg',\n                        '.git', '__pycache__', '.tox', '.nox', '.eggs',\n                        '*.egg'])\n  --extend-exclude patterns\n                        Comma-separated list of files or directories to add to\n                        the list of excluded ones.\n  --filename patterns   Only check for filenames matching the patterns in this\n                        comma-separated list. (Default: ['*.py'])\n  --stdin-display-name STDIN_DISPLAY_NAME\n                        The name used when reporting errors from code passed\n                        via stdin. This is useful for editors piping the file\n                        contents to flake8. (Default: stdin)\n  --format format       Format errors according to the chosen formatter\n                        (default, pylint, quiet-filename, quiet-nothing) or a\n                        format string containing %-style mapping keys (code,\n                        col, path, row, text). For example,\n                        ``--format=pylint`` or ``--format='%(path)s\n                        %(code)s'``. (Default: default)\n  --hang-closing        Hang closing bracket instead of matching indentation\n                        of opening bracket's line.\n  --ignore errors       Comma-separated list of error codes to ignore (or\n                        skip). For example, ``--ignore=E4,E51,W234``.\n                        (Default: E121,E123,E126,E226,E24,E704,W503,W504)\n  --extend-ignore errors\n                        Comma-separated list of error codes to add to the list\n                        of ignored ones. For example, ``--extend-\n                        ignore=E4,E51,W234``.\n  --per-file-ignores PER_FILE_IGNORES\n                        A pairing of filenames and violation codes that\n                        defines which violations to ignore in a particular\n                        file. The filenames can be specified in a manner\n                        similar to the ``--exclude`` option and the violations\n                        work similarly to the ``--ignore`` and ``--select``\n                        options.\n  --max-line-length n   Maximum allowed line length for the entirety of this\n                        run. (Default: 79)\n  --max-doc-length n    Maximum allowed doc line length for the entirety of\n                        this run. (Default: None)\n  --indent-size n       Number of spaces used for indentation (Default: 4)\n  --select errors       Limit the reported error codes to codes prefix-matched\n                        by this list. You usually do not need to specify this\n                        option as the default includes all installed plugin\n                        codes. For example, ``--select=E4,E51,W234``.\n  --extend-select errors\n                        Add additional error codes to the default\n                        ``--select``. You usually do not need to specify this\n                        option as the default includes all installed plugin\n                        codes. For example, ``--extend-select=E4,E51,W234``.\n  --disable-noqa        Disable the effect of \"# noqa\". This will report\n                        errors on lines with \"# noqa\" at the end.\n  --show-source         Show the source generate each error or warning.\n  --no-show-source      Negate --show-source\n  --statistics          Count errors.\n  --exit-zero           Exit with status code \"0\" even if there are errors.\n  -j JOBS, --jobs JOBS  Number of subprocesses to use to run checks in\n                        parallel. This is ignored on Windows. The default,\n                        \"auto\", will auto-detect the number of processors\n                        available to use. (Default: auto)\n  --tee                 Write to stdout and output-file.\n  --benchmark           Print benchmark information about this run of Flake8\n  --bug-report          Print information necessary when preparing a bug\n                        report\n\nmccabe:\n  --max-complexity MAX_COMPLEXITY\n                        McCabe complexity threshold\n\npyflakes:\n  --builtins BUILTINS   define more built-ins, comma separated\n  --doctests            also check syntax of the doctests\n\nInstalled plugins: mccabe: 0.7.0, pycodestyle: 2.13.0, pyflakes: 3.3.2\n</code></pre>"},{"location":"descriptors/python_flake8/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=flake8\nARG PIP_FLAKE8_VERSION=7.2.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>flake8==7.2.0</li> </ul> </li> </ul>"},{"location":"descriptors/python_isort/","title":"isort configuration in MegaLinter","text":""},{"location":"descriptors/python_isort/#isort-documentation","title":"isort documentation","text":"<ul> <li>Version in MegaLinter: 6.0.1</li> <li>Visit Official Web Site</li> <li>See How to configure isort rules<ul> <li>If custom <code>.isort.cfg</code> config file isn't found, .isort.cfg will be used</li> </ul> </li> <li>See How to disable isort rules in files</li> </ul>"},{"location":"descriptors/python_isort/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable isort by adding <code>PYTHON_ISORT</code> in ENABLE_LINTERS variable</li> <li>Disable isort by adding <code>PYTHON_ISORT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>PYTHON_ISORT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value PYTHON_ISORT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_ISORT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_ISORT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_ISORT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_ISORT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_ISORT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_ISORT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_ISORT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_ISORT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_ISORT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_ISORT and its pre/post commands None PYTHON_ISORT_CONFIG_FILE isort configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.isort.cfg</code> PYTHON_ISORT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_ISORT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> PYTHON_ISORT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_ISORT_CLI_EXECUTABLE Override CLI executable <code>['isort']</code>"},{"location":"descriptors/python_isort/#ide-integration","title":"IDE Integration","text":"<p>Use isort in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom atom-python-isort Visit Web Site Atom atom-isort Visit Web Site Emacs py-isort.el Visit Web Site vim ale Visit Web Site vim vim-isort Visit Web Site Visual Studio Code VSCode Python Extension Visit Web Site"},{"location":"descriptors/python_isort/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 formatters Contains only formatters 18 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_isort/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_isort/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_isort/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>isort is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_isort/#example-calls","title":"Example calls","text":"<pre><code>isort --diff --check --profile black myfile.py\n</code></pre> <pre><code>isort --diff --check --profile black --settings-file .isort.cfg myfile.py\n</code></pre> <pre><code>isort --profile black --settings-file .isort.cfg myfile.py\n</code></pre>"},{"location":"descriptors/python_isort/#help-content","title":"Help content","text":"<pre><code>usage: isort [-h] [-V] [--vn] [-v] [--only-modified] [--dedup-headings] [-q]\n             [-d] [--overwrite-in-place] [--show-config] [--show-files] [--df]\n             [-c] [--ws] [--sp SETTINGS_PATH] [--cr CONFIG_ROOT]\n             [--resolve-all-configs] [--profile PROFILE] [--old-finders]\n             [-j [JOBS]] [--ac] [--interactive] [--format-error FORMAT_ERROR]\n             [--format-success FORMAT_SUCCESS] [--srx] [--filter-files]\n             [-s SKIP] [--extend-skip EXTEND_SKIP] [--sg SKIP_GLOB]\n             [--extend-skip-glob EXTEND_SKIP_GLOB] [--gitignore]\n             [--ext SUPPORTED_EXTENSIONS]\n             [--blocked-extension BLOCKED_EXTENSIONS] [--dont-follow-links]\n             [--filename FILENAME] [--allow-root] [-a ADD_IMPORTS] [--append]\n             [--af] [--rm REMOVE_IMPORTS] [--float-to-top]\n             [--dont-float-to-top] [--ca] [--cs] [-e] [--ff]\n             [--fgw [FORCE_GRID_WRAP]] [-i INDENT]\n             [--lbi LINES_BEFORE_IMPORTS] [--lai LINES_AFTER_IMPORTS]\n             [--lbt LINES_BETWEEN_TYPES] [--le LINE_ENDING] [--ls] [--lss]\n             [-m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}]\n             [-n] [--nis] [--ot] [--dt] [--rr] [--reverse-sort]\n             [--sort-order SORT_ORDER] [--sl] [--nsl SINGLE_LINE_EXCLUSIONS]\n             [--tc] [--up] [-l LINE_LENGTH] [--wl WRAP_LENGTH]\n             [--case-sensitive] [--remove-redundant-aliases] [--honor-noqa]\n             [--treat-comment-as-code TREAT_COMMENTS_AS_CODE]\n             [--treat-all-comment-as-code] [--formatter FORMATTER] [--color]\n             [--ext-format EXT_FORMAT] [--star-first]\n             [--split-on-trailing-comma] [--sd DEFAULT_SECTION]\n             [--only-sections] [--ds] [--fas] [--fss] [--hcss] [--srss]\n             [--fass] [-t FORCE_TO_TOP] [--combine-straight-imports]\n             [--nlb NO_LINES_BEFORE] [--src SRC_PATHS]\n             [-b KNOWN_STANDARD_LIBRARY]\n             [--extra-builtin EXTRA_STANDARD_LIBRARY]\n             [-f KNOWN_FUTURE_LIBRARY] [-o KNOWN_THIRD_PARTY]\n             [-p KNOWN_FIRST_PARTY] [--known-local-folder KNOWN_LOCAL_FOLDER]\n             [--virtual-env VIRTUAL_ENV] [--conda-env CONDA_ENV]\n             [--py {all,2,27,3,310,311,312,313,36,37,38,39,auto}]\n             [files ...]\n\nSort Python import definitions alphabetically within logical sections. Run\nwith no arguments to see a quick start guide, otherwise, one or more\nfiles/directories/stdin must be provided. Use `-` as the first argument to\nrepresent stdin. Use --interactive to use the pre 5.0.0 interactive behavior.\nIf you've used isort 4 but are new to isort 5, see the upgrading guide:\nhttps://pycqa.github.io/isort/docs/upgrade_guides/5.0.0.html\n\ngeneral options:\n  -h, --help            show this help message and exit\n  -V, --version         Displays the currently installed version of isort.\n  --vn, --version-number\n                        Returns just the current version number without the\n                        logo\n  -v, --verbose         Shows verbose output, such as when files are skipped\n                        or when a check is successful.\n  --only-modified, --om\n                        Suppresses verbose output for non-modified files.\n  --dedup-headings      Tells isort to only show an identical custom import\n                        heading comment once, even if there are multiple\n                        sections with the comment set.\n  -q, --quiet           Shows extra quiet output, only errors are outputted.\n  -d, --stdout          Force resulting output to stdout, instead of in-place.\n  --overwrite-in-place  Tells isort to overwrite in place using the same file\n                        handle. Comes at a performance and memory usage\n                        penalty over its standard approach but ensures all\n                        file flags and modes stay unchanged.\n  --show-config         See isort's determined config, as well as sources of\n                        config options.\n  --show-files          See the files isort will be run against with the\n                        current config options.\n  --df, --diff          Prints a diff of all the changes isort would make to a\n                        file, instead of changing it in place\n  -c, --check-only, --check\n                        Checks the file for unsorted / unformatted imports and\n                        prints them to the command line without modifying the\n                        file. Returns 0 when nothing would change and returns\n                        1 when the file would be reformatted.\n  --ws, --ignore-whitespace\n                        Tells isort to ignore whitespace differences when\n                        --check-only is being used.\n  --sp SETTINGS_PATH, --settings-path SETTINGS_PATH, --settings-file SETTINGS_PATH, --settings SETTINGS_PATH\n                        Explicitly set the settings path or file instead of\n                        auto determining based on file location.\n  --cr CONFIG_ROOT, --config-root CONFIG_ROOT\n                        Explicitly set the config root for resolving all\n                        configs. When used with the --resolve-all-configs\n                        flag, isort will look at all sub-folders in this\n                        config root to resolve config files and sort files\n                        based on the closest available config(if any)\n  --resolve-all-configs\n                        Tells isort to resolve the configs for all sub-\n                        directories and sort files in terms of its closest\n                        config files.\n  --profile PROFILE     Base profile type to use for configuration. Profiles\n                        include: black, django, pycharm, google, open_stack,\n                        plone, attrs, hug, wemake, appnexus. As well as any\n                        shared profiles.\n  --old-finders, --magic-placement\n                        Use the old deprecated finder logic that relies on\n                        environment introspection magic.\n  -j [JOBS], --jobs [JOBS]\n                        Number of files to process in parallel. Negative value\n                        means use number of CPUs.\n  --ac, --atomic        Ensures the output doesn't save if the resulting file\n                        contains syntax errors.\n  --interactive         Tells isort to apply changes interactively.\n  --format-error FORMAT_ERROR\n                        Override the format used to print errors.\n  --format-success FORMAT_SUCCESS\n                        Override the format used to print success.\n  --srx, --sort-reexports\n                        Automatically sort all re-exports (module level\n                        __all__ collections)\n\ntarget options:\n  files                 One or more Python source files that need their\n                        imports sorted.\n  --filter-files        Tells isort to filter files even when they are\n                        explicitly passed in as part of the CLI command.\n  -s SKIP, --skip SKIP  Files that isort should skip over. If you want to skip\n                        multiple files you should specify twice: --skip file1\n                        --skip file2. Values can be file names, directory\n                        names or file paths. To skip all files in a nested\n                        path use --skip-glob.\n  --extend-skip EXTEND_SKIP\n                        Extends --skip to add additional files that isort\n                        should skip over. If you want to skip multiple files\n                        you should specify twice: --skip file1 --skip file2.\n                        Values can be file names, directory names or file\n                        paths. To skip all files in a nested path use --skip-\n                        glob.\n  --sg SKIP_GLOB, --skip-glob SKIP_GLOB\n                        Files that isort should skip over.\n  --extend-skip-glob EXTEND_SKIP_GLOB\n                        Additional files that isort should skip over\n                        (extending --skip-glob).\n  --gitignore, --skip-gitignore\n                        Treat project as a git repository and ignore files\n                        listed in .gitignore. NOTE: This requires git to be\n                        installed and accessible from the same shell as isort.\n  --ext SUPPORTED_EXTENSIONS, --extension SUPPORTED_EXTENSIONS, --supported-extension SUPPORTED_EXTENSIONS\n                        Specifies what extensions isort can be run against.\n  --blocked-extension BLOCKED_EXTENSIONS\n                        Specifies what extensions isort can never be run\n                        against.\n  --dont-follow-links   Tells isort not to follow symlinks that are\n                        encountered when running recursively.\n  --filename FILENAME   Provide the filename associated with a stream.\n  --allow-root          Tells isort not to treat / specially, allowing it to\n                        be run against the root dir.\n\ngeneral output options:\n  -a ADD_IMPORTS, --add-import ADD_IMPORTS\n                        Adds the specified import line to all files,\n                        automatically determining correct placement.\n  --append, --append-only\n                        Only adds the imports specified in --add-import if the\n                        file contains existing imports.\n  --af, --force-adds    Forces import adds even if the original file is empty.\n  --rm REMOVE_IMPORTS, --remove-import REMOVE_IMPORTS\n                        Removes the specified import from all files.\n  --float-to-top        Causes all non-indented imports to float to the top of\n                        the file having its imports sorted (immediately below\n                        the top of file comment). This can be an excellent\n                        shortcut for collecting imports every once in a while\n                        when you place them in the middle of a file to avoid\n                        context switching. *NOTE*: It currently doesn't work\n                        with cimports and introduces some extra over-head and\n                        a performance penalty.\n  --dont-float-to-top   Forces --float-to-top setting off. See --float-to-top\n                        for more information.\n  --ca, --combine-as    Combines as imports on the same line.\n  --cs, --combine-star  Ensures that if a star import is present, nothing else\n                        is imported from that namespace.\n  -e, --balanced        Balances wrapping to produce the most consistent line\n                        length possible\n  --ff, --from-first    Switches the typical ordering preference, showing from\n                        imports first then straight ones.\n  --fgw [FORCE_GRID_WRAP], --force-grid-wrap [FORCE_GRID_WRAP]\n                        Force number of from imports (defaults to 2 when\n                        passed as CLI flag without value) to be grid wrapped\n                        regardless of line length. If 0 is passed in (the\n                        global default) only line length is considered.\n  -i INDENT, --indent INDENT\n                        String to place for indents defaults to \" \" (4\n                        spaces).\n  --lbi LINES_BEFORE_IMPORTS, --lines-before-imports LINES_BEFORE_IMPORTS\n  --lai LINES_AFTER_IMPORTS, --lines-after-imports LINES_AFTER_IMPORTS\n  --lbt LINES_BETWEEN_TYPES, --lines-between-types LINES_BETWEEN_TYPES\n  --le LINE_ENDING, --line-ending LINE_ENDING\n                        Forces line endings to the specified value. If not\n                        set, values will be guessed per-file.\n  --ls, --length-sort   Sort imports by their string length.\n  --lss, --length-sort-straight\n                        Sort straight imports by their string length. Similar\n                        to `length_sort` but applies only to straight imports\n                        and doesn't affect from imports.\n  -m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}, --multi-line {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}\n                        Multi line output (0-grid, 1-vertical, 2-hanging,\n                        3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped,\n                        6-deprecated-alias-for-5, 7-noqa, 8-vertical-hanging-\n                        indent-bracket, 9-vertical-prefix-from-module-import,\n                        10-hanging-indent-with-parentheses).\n  -n, --ensure-newline-before-comments\n                        Inserts a blank line before a comment following an\n                        import.\n  --nis, --no-inline-sort\n                        Leaves `from` imports with multiple imports 'as-is'\n                        (e.g. `from foo import a, c ,b`).\n  --ot, --order-by-type\n                        Order imports by type, which is determined by case, in\n                        addition to alphabetically. **NOTE**: type here refers\n                        to the implied type from the import name\n                        capitalization. isort does not do type introspection\n                        for the imports. These \"types\" are simply:\n                        CONSTANT_VARIABLE, CamelCaseClass,\n                        variable_or_function. If your project follows PEP8 or\n                        a related coding standard and has many imports this is\n                        a good default, otherwise you likely will want to turn\n                        it off. From the CLI the `--dont-order-by-type` option\n                        will turn this off.\n  --dt, --dont-order-by-type\n                        Don't order imports by type, which is determined by\n                        case, in addition to alphabetically. **NOTE**: type\n                        here refers to the implied type from the import name\n                        capitalization. isort does not do type introspection\n                        for the imports. These \"types\" are simply:\n                        CONSTANT_VARIABLE, CamelCaseClass,\n                        variable_or_function. If your project follows PEP8 or\n                        a related coding standard and has many imports this is\n                        a good default. You can turn this on from the CLI\n                        using `--order-by-type`.\n  --rr, --reverse-relative\n                        Reverse order of relative imports.\n  --reverse-sort        Reverses the ordering of imports.\n  --sort-order SORT_ORDER\n                        Specify sorting function. Can be built in\n                        (natural[default] = force numbers to be sequential,\n                        native = Python's built-in sorted function) or an\n                        installable plugin.\n  --sl, --force-single-line-imports\n                        Forces all from imports to appear on their own line\n  --nsl SINGLE_LINE_EXCLUSIONS, --single-line-exclusions SINGLE_LINE_EXCLUSIONS\n                        One or more modules to exclude from the single line\n                        rule.\n  --tc, --trailing-comma\n                        Includes a trailing comma on multi line imports that\n                        include parentheses.\n  --up, --use-parentheses\n                        Use parentheses for line continuation on length limit\n                        instead of slashes. **NOTE**: This is separate from\n                        wrap modes, and only affects how individual lines that\n                        are too long get continued, not sections of multiple\n                        imports.\n  -l LINE_LENGTH, -w LINE_LENGTH, --line-length LINE_LENGTH, --line-width LINE_LENGTH\n                        The max length of an import line (used for wrapping\n                        long imports).\n  --wl WRAP_LENGTH, --wrap-length WRAP_LENGTH\n                        Specifies how long lines that are wrapped should be,\n                        if not set line_length is used. NOTE: wrap_length must\n                        be LOWER than or equal to line_length.\n  --case-sensitive      Tells isort to include casing when sorting module\n                        names\n  --remove-redundant-aliases\n                        Tells isort to remove redundant aliases from imports,\n                        such as `import os as os`. This defaults to `False`\n                        simply because some projects use these seemingly\n                        useless aliases to signify intent and change\n                        behaviour.\n  --honor-noqa          Tells isort to honor noqa comments to enforce skipping\n                        those comments.\n  --treat-comment-as-code TREAT_COMMENTS_AS_CODE\n                        Tells isort to treat the specified single line\n                        comment(s) as if they are code.\n  --treat-all-comment-as-code\n                        Tells isort to treat all single line comments as if\n                        they are code.\n  --formatter FORMATTER\n                        Specifies the name of a formatting plugin to use when\n                        producing output.\n  --color               Tells isort to use color in terminal output.\n  --ext-format EXT_FORMAT\n                        Tells isort to format the given files according to an\n                        extensions formatting rules.\n  --star-first          Forces star imports above others to avoid overriding\n                        directly imported variables.\n  --split-on-trailing-comma\n                        Split imports list followed by a trailing comma into\n                        VERTICAL_HANGING_INDENT mode\n\nsection output options:\n  --sd DEFAULT_SECTION, --section-default DEFAULT_SECTION\n                        Sets the default section for import options:\n                        ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY',\n                        'LOCALFOLDER')\n  --only-sections, --os\n                        Causes imports to be sorted based on their sections\n                        like STDLIB, THIRDPARTY, etc. Within sections, the\n                        imports are ordered by their import style and the\n                        imports with the same style maintain their relative\n                        positions.\n  --ds, --no-sections   Put all imports into the same section bucket\n  --fas, --force-alphabetical-sort\n                        Force all imports to be sorted as a single section\n  --fss, --force-sort-within-sections\n                        Don't sort straight-style imports (like import sys)\n                        before from-style imports (like from itertools import\n                        groupby). Instead, sort the imports by module,\n                        independent of import style.\n  --hcss, --honor-case-in-force-sorted-sections\n                        Honor `--case-sensitive` when `--force-sort-within-\n                        sections` is being used. Without this option set,\n                        `--order-by-type` decides module name ordering too.\n  --srss, --sort-relative-in-force-sorted-sections\n                        When using `--force-sort-within-sections`, sort\n                        relative imports the same way as they are sorted when\n                        not using that setting.\n  --fass, --force-alphabetical-sort-within-sections\n                        Force all imports to be sorted alphabetically within a\n                        section\n  -t FORCE_TO_TOP, --top FORCE_TO_TOP\n                        Force specific imports to the top of their appropriate\n                        section.\n  --combine-straight-imports, --csi\n                        Combines all the bare straight imports of the same\n                        section in a single line. Won't work with sections\n                        which have 'as' imports\n  --nlb NO_LINES_BEFORE, --no-lines-before NO_LINES_BEFORE\n                        Sections which should not be split with previous by\n                        empty lines\n  --src SRC_PATHS, --src-path SRC_PATHS\n                        Add an explicitly defined source path (modules within\n                        src paths have their imports automatically categorized\n                        as first_party). Glob expansion (`*` and `**`) is\n                        supported for this option.\n  -b KNOWN_STANDARD_LIBRARY, --builtin KNOWN_STANDARD_LIBRARY\n                        Force isort to recognize a module as part of Python's\n                        standard library.\n  --extra-builtin EXTRA_STANDARD_LIBRARY\n                        Extra modules to be included in the list of ones in\n                        Python's standard library.\n  -f KNOWN_FUTURE_LIBRARY, --future KNOWN_FUTURE_LIBRARY\n                        Force isort to recognize a module as part of Python's\n                        internal future compatibility libraries. WARNING: this\n                        overrides the behavior of __future__ handling and\n                        therefore can result in code that can't execute. If\n                        you're looking to add dependencies such as six, a\n                        better option is to create another section below\n                        --future using custom sections. See:\n                        https://github.com/PyCQA/isort#custom-sections-and-\n                        ordering and the discussion here:\n                        https://github.com/PyCQA/isort/issues/1463.\n  -o KNOWN_THIRD_PARTY, --thirdparty KNOWN_THIRD_PARTY\n                        Force isort to recognize a module as being part of a\n                        third party library.\n  -p KNOWN_FIRST_PARTY, --project KNOWN_FIRST_PARTY\n                        Force isort to recognize a module as being part of the\n                        current python project.\n  --known-local-folder KNOWN_LOCAL_FOLDER\n                        Force isort to recognize a module as being a local\n                        folder. Generally, this is reserved for relative\n                        imports (from . import module).\n  --virtual-env VIRTUAL_ENV\n                        Virtual environment to use for determining whether a\n                        package is third-party\n  --conda-env CONDA_ENV\n                        Conda environment to use for determining whether a\n                        package is third-party\n  --py {all,2,27,3,310,311,312,313,36,37,38,39,auto}, --python-version {all,2,27,3,310,311,312,313,36,37,38,39,auto}\n                        Tells isort to set the known standard library based on\n                        the specified Python version. Default is to assume any\n                        Python 3 version could be the target, and use a union\n                        of all stdlib modules across versions. If auto is\n                        specified, the version of the interpreter used to run\n                        isort (currently: 312) will be used.\n</code></pre>"},{"location":"descriptors/python_isort/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=black\nARG PIP_BLACK_VERSION=25.1.0\n# renovate: datasource=pypi depName=isort\nARG PIP_ISORT_VERSION=6.0.1\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>black==25.1.0</li> <li>isort==6.0.1</li> </ul> </li> </ul>"},{"location":"descriptors/python_mypy/","title":"mypy configuration in MegaLinter","text":"<p>Optional static typing checks for python</p> <p>If you don't use python static typing, you should disable this linter by adding <code>PYTHON_MYPY</code> in <code>DISABLE_LINTERS</code> variable in your <code>.mega-linter.yml</code> config file</p>"},{"location":"descriptors/python_mypy/#mypy-documentation","title":"mypy documentation","text":"<ul> <li>Version in MegaLinter: 1.15.0</li> <li>Visit Official Web Site</li> <li>See How to configure mypy rules<ul> <li>If custom <code>.mypy.ini</code> config file isn't found, .mypy.ini will be used</li> </ul> </li> <li>See How to disable mypy rules in files</li> </ul>"},{"location":"descriptors/python_mypy/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable mypy by adding <code>PYTHON_MYPY</code> in ENABLE_LINTERS variable</li> <li>Disable mypy by adding <code>PYTHON_MYPY</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PYTHON_MYPY_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_MYPY_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_MYPY_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_MYPY_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_MYPY_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_MYPY_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_MYPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_MYPY_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_MYPY_POST_COMMANDS List of bash commands to run after the linter None PYTHON_MYPY_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_MYPY and its pre/post commands None PYTHON_MYPY_CONFIG_FILE mypy configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.mypy.ini</code> PYTHON_MYPY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_MYPY_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PYTHON_MYPY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_MYPY_CLI_EXECUTABLE Override CLI executable <code>['mypy']</code>"},{"location":"descriptors/python_mypy/#ide-integration","title":"IDE Integration","text":"<p>Use mypy in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-mypy Visit Web Site Emacs Flycheck mypy Visit Web Site IDEA mypy-official Visit Web Site Sublime Text SublimeLinter-contrib-mypy Visit Web Site vim Ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code Mypy"},{"location":"descriptors/python_mypy/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_mypy/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_mypy/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_mypy/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>mypy is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_mypy/#example-calls","title":"Example calls","text":"<pre><code>mypy myfile.py\n</code></pre> <pre><code>mypy --config-file .mypy.yml myfile.py\n</code></pre>"},{"location":"descriptors/python_mypy/#help-content","title":"Help content","text":"<pre><code>usage: mypy [-h] [-v] [-V] [more options; see below]\n            [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...]\n\nMypy is a program that will type check your Python code.\n\nPass in any files or folders you want to type check. Mypy will\nrecursively traverse any provided folders to find .py files:\n\n    $ mypy my_program.py my_src_folder\n\nFor more information on getting started, see:\n\n- https://mypy.readthedocs.io/en/stable/getting_started.html\n\nFor more details on both running mypy and using the flags below, see:\n\n- https://mypy.readthedocs.io/en/stable/running_mypy.html\n- https://mypy.readthedocs.io/en/stable/command_line.html\n\nYou can also use a config file to configure mypy instead of using\ncommand line flags. For more details, see:\n\n- https://mypy.readthedocs.io/en/stable/config_file.html\n\noptions:\n  --enable-incomplete-feature {InlineTypedDict,PreciseTupleTypes}\n                            Enable support of incomplete/experimental features\n                            for early preview\n\nOptional arguments:\n  -h, --help                Show this help message and exit\n  -v, --verbose             More verbose messages\n  -V, --version             Show program's version number and exit\n  -O FORMAT, --output FORMAT\n                            Set a custom output format\n\nConfig file:\n  Use a config file instead of command line arguments. This is useful if you\n  are using many flags or want to set different options per each module.\n\n  --config-file CONFIG_FILE\n                            Configuration file, must have a [mypy] section\n                            (defaults to mypy.ini, .mypy.ini, pyproject.toml,\n                            setup.cfg)\n  --warn-unused-configs     Warn about unused '[mypy-&lt;pattern&gt;]' or\n                            '[[tool.mypy.overrides]]' config sections\n                            (inverse: --no-warn-unused-configs)\n\nImport discovery:\n  Configure how imports are discovered and followed.\n\n  --no-namespace-packages   Disable support for namespace packages (PEP 420,\n                            __init__.py-less) (inverse: --namespace-packages)\n  --ignore-missing-imports  Silently ignore imports of missing modules\n  --follow-untyped-imports  Typecheck modules without stubs or py.typed marker\n  --follow-imports {normal,silent,skip,error}\n                            How to treat imports (default normal)\n  --python-executable EXECUTABLE\n                            Python executable used for finding PEP 561\n                            compliant installed packages and stubs\n  --no-site-packages        Do not search for installed PEP 561 compliant\n                            packages\n  --no-silence-site-packages\n                            Do not silence errors in PEP 561 compliant\n                            installed packages\n  --junit-format {global,per_file}\n                            If --junit-xml is set, specifies format. global:\n                            single test with all errors; per_file: one test\n                            entry per file with failures\n\nPlatform configuration:\n  Type check code assuming it will be run under certain runtime conditions.\n  By default, mypy assumes your code will be run using the same operating\n  system and Python version you are using to run mypy itself.\n\n  --python-version x.y      Type check code assuming it will be running on\n                            Python x.y\n  --platform PLATFORM       Type check special-cased code for the given OS\n                            platform (defaults to sys.platform)\n  --always-true NAME        Additional variable to be considered True (may be\n                            repeated)\n  --always-false NAME       Additional variable to be considered False (may be\n                            repeated)\n\nDisallow dynamic typing:\n  Disallow the use of the dynamic 'Any' type under certain conditions.\n\n  --disallow-any-expr       Disallow all expressions that have type Any\n  --disallow-any-decorated  Disallow functions that have Any in their\n                            signature after decorator transformation\n  --disallow-any-explicit   Disallow explicit Any in type positions\n  --disallow-any-generics   Disallow usage of generic types that do not\n                            specify explicit type parameters (inverse:\n                            --allow-any-generics)\n  --disallow-any-unimported\n                            Disallow Any types resulting from unfollowed\n                            imports (inverse: --allow-any-unimported)\n  --disallow-subclassing-any\n                            Disallow subclassing values of type 'Any' when\n                            defining classes (inverse: --allow-subclassing-\n                            any)\n\nUntyped definitions and calls:\n  Configure how untyped definitions and calls are handled. Note: by default,\n  mypy ignores any untyped function definitions and assumes any calls to\n  such functions have a return type of 'Any'.\n\n  --disallow-untyped-calls  Disallow calling functions without type\n                            annotations from functions with type annotations\n                            (inverse: --allow-untyped-calls)\n  --untyped-calls-exclude MODULE\n                            Disable --disallow-untyped-calls for\n                            functions/methods coming from specific package,\n                            module, or class\n  --disallow-untyped-defs   Disallow defining functions without type\n                            annotations or with incomplete type annotations\n                            (inverse: --allow-untyped-defs)\n  --disallow-incomplete-defs\n                            Disallow defining functions with incomplete type\n                            annotations (while still allowing entirely\n                            unannotated definitions) (inverse: --allow-\n                            incomplete-defs)\n  --check-untyped-defs      Type check the interior of functions without type\n                            annotations (inverse: --no-check-untyped-defs)\n  --disallow-untyped-decorators\n                            Disallow decorating typed functions with untyped\n                            decorators (inverse: --allow-untyped-decorators)\n\nNone and Optional handling:\n  Adjust how values of type 'None' are handled. For more context on how mypy\n  handles values of type 'None', see:\n  https://mypy.readthedocs.io/en/stable/kinds_of_types.html#no-strict-\n  optional\n\n  --implicit-optional       Assume arguments with default values of None are\n                            Optional (inverse: --no-implicit-optional)\n  --no-strict-optional      Disable strict Optional checks (inverse: --strict-\n                            optional)\n\nConfiguring warnings:\n  Detect code that is sound but redundant or problematic.\n\n  --warn-redundant-casts    Warn about casting an expression to its inferred\n                            type (inverse: --no-warn-redundant-casts)\n  --warn-unused-ignores     Warn about unneeded '# type: ignore' comments\n                            (inverse: --no-warn-unused-ignores)\n  --no-warn-no-return       Do not warn about functions that end without\n                            returning (inverse: --warn-no-return)\n  --warn-return-any         Warn about returning values of type Any from non-\n                            Any typed functions (inverse: --no-warn-return-\n                            any)\n  --warn-unreachable        Warn about statements or expressions inferred to\n                            be unreachable (inverse: --no-warn-unreachable)\n  --report-deprecated-as-note\n                            Report importing or using deprecated features as\n                            notes instead of errors (inverse: --no-report-\n                            deprecated-as-note)\n\nMiscellaneous strictness flags:\n  --allow-untyped-globals   Suppress toplevel errors caused by missing\n                            annotations (inverse: --disallow-untyped-globals)\n  --allow-redefinition      Allow unconditional variable redefinition with a\n                            new type (inverse: --disallow-redefinition)\n  --no-implicit-reexport    Treat imports as private unless aliased (inverse:\n                            --implicit-reexport)\n  --strict-equality         Prohibit equality, identity, and container checks\n                            for non-overlapping types (inverse: --no-strict-\n                            equality)\n  --strict-bytes            Disable treating bytearray and memoryview as\n                            subtypes of bytes (inverse: --no-strict-bytes)\n  --extra-checks            Enable additional checks that are technically\n                            correct but may be impractical in real code. For\n                            example, this prohibits partial overlap in\n                            TypedDict updates, and makes arguments prepended\n                            via Concatenate positional-only (inverse: --no-\n                            extra-checks)\n  --strict                  Strict mode; enables the following flags: --warn-\n                            unused-configs, --disallow-any-generics,\n                            --disallow-subclassing-any, --disallow-untyped-\n                            calls, --disallow-untyped-defs, --disallow-\n                            incomplete-defs, --check-untyped-defs, --disallow-\n                            untyped-decorators, --warn-redundant-casts,\n                            --warn-unused-ignores, --warn-return-any, --no-\n                            implicit-reexport, --strict-equality, --extra-\n                            checks\n  --disable-error-code NAME\n                            Disable a specific error code\n  --enable-error-code NAME  Enable a specific error code\n\nConfiguring error messages:\n  Adjust the amount of detail shown in error messages.\n\n  --show-error-context      Precede errors with \"note:\" messages explaining\n                            context (inverse: --hide-error-context)\n  --show-column-numbers     Show column numbers in error messages (inverse:\n                            --hide-column-numbers)\n  --show-error-end          Show end line/end column numbers in error\n                            messages. This implies --show-column-numbers\n                            (inverse: --hide-error-end)\n  --hide-error-codes        Hide error codes in error messages (inverse:\n                            --show-error-codes)\n  --show-error-code-links   Show links to error code documentation (inverse:\n                            --hide-error-code-links)\n  --pretty                  Use visually nicer output in error messages: Use\n                            soft word wrap, show source code snippets, and\n                            show error location markers (inverse: --no-pretty)\n  --no-color-output         Do not colorize error messages (inverse: --color-\n                            output)\n  --no-error-summary        Do not show error stats summary (inverse: --error-\n                            summary)\n  --show-absolute-path      Show absolute paths to files (inverse: --hide-\n                            absolute-path)\n\nIncremental mode:\n  Adjust how mypy incrementally type checks and caches modules. Mypy caches\n  type information about modules into a cache to let you speed up future\n  invocations of mypy. Also see mypy's daemon mode:\n  mypy.readthedocs.io/en/stable/mypy_daemon.html#mypy-daemon\n\n  --no-incremental          Disable module cache (inverse: --incremental)\n  --cache-dir DIR           Store module cache info in the given folder in\n                            incremental mode (defaults to '.mypy_cache')\n  --sqlite-cache            Use a sqlite database to store the cache (inverse:\n                            --no-sqlite-cache)\n  --cache-fine-grained      Include fine-grained dependency information in the\n                            cache for the mypy daemon\n  --skip-version-check      Allow using cache written by older mypy version\n  --skip-cache-mtime-checks\n                            Skip cache internal consistency checks based on\n                            mtime\n\nAdvanced options:\n  Debug and customize mypy internals.\n\n  --pdb                     Invoke pdb on fatal error\n  --show-traceback, --tb    Show traceback on fatal error\n  --raise-exceptions        Raise exception on fatal error\n  --custom-typing-module MODULE\n                            Use a custom typing module\n  --old-type-inference      Disable new experimental type inference algorithm\n  --custom-typeshed-dir DIR\n                            Use the custom typeshed in DIR\n  --warn-incomplete-stub    Warn if missing type annotation in typeshed, only\n                            relevant with --disallow-untyped-defs or\n                            --disallow-incomplete-defs enabled (inverse: --no-\n                            warn-incomplete-stub)\n  --shadow-file SOURCE_FILE SHADOW_FILE\n                            When encountering SOURCE_FILE, read and type check\n                            the contents of SHADOW_FILE instead.\n\nReport generation:\n  Generate a report in the specified format.\n\n  --any-exprs-report DIR\n  --cobertura-xml-report DIR\n  --html-report DIR\n  --linecount-report DIR\n  --linecoverage-report DIR\n  --lineprecision-report DIR\n  --txt-report DIR\n  --xml-report DIR\n  --xslt-html-report DIR\n  --xslt-txt-report DIR\n\nMiscellaneous:\n  --junit-xml JUNIT_XML     Write junit.xml to the given file\n  --find-occurrences CLASS.MEMBER\n                            Print out all usages of a class member\n                            (experimental)\n  --scripts-are-modules     Script x becomes module x instead of __main__\n  --install-types           Install detected missing library stub packages\n                            using pip (inverse: --no-install-types)\n  --non-interactive         Install stubs without asking for confirmation and\n                            hide errors, with --install-types (inverse:\n                            --interactive)\n\nRunning code:\n  Specify the code you want to type check. For more details, see\n  mypy.readthedocs.io/en/stable/running_mypy.html#running-mypy\n\n  --explicit-package-bases  Use current directory and MYPYPATH to determine\n                            module names of files passed (inverse: --no-\n                            explicit-package-bases)\n  --exclude PATTERN         Regular expression to match file names, directory\n                            names or paths which mypy should ignore while\n                            recursively discovering files to check, e.g.\n                            --exclude '/setup\\.py$'. May be specified more\n                            than once, eg. --exclude a --exclude b\n  -m MODULE, --module MODULE\n                            Type-check module; can repeat for more modules\n  -p PACKAGE, --package PACKAGE\n                            Type-check package recursively; can be repeated\n  -c PROGRAM_TEXT, --command PROGRAM_TEXT\n                            Type-check program passed in as string\n  files                     Type-check given files or directories\n\nEnvironment variables:\n  Define MYPYPATH for additional module search path entries.\n  Define MYPY_CACHE_DIR to override configuration cache_dir path.\n</code></pre>"},{"location":"descriptors/python_mypy/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=mypy\nARG PIP_MYPY_VERSION=1.15.0\nENV MYPY_CACHE_DIR=/tmp\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>mypy==1.15.0</li> </ul> </li> </ul>"},{"location":"descriptors/python_pylint/","title":"pylint configuration in MegaLinter","text":""},{"location":"descriptors/python_pylint/#pylint","title":"pylint","text":""},{"location":"descriptors/python_pylint/#pylint-documentation","title":"pylint documentation","text":"<ul> <li>Version in MegaLinter: 3.3.6</li> <li>Visit Official Web Site</li> <li>See How to configure pylint rules<ul> <li>If custom <code>.pylintrc</code> config file isn't found, .pylintrc will be used</li> </ul> </li> <li>See How to disable pylint rules in files</li> <li>See Index of problems detected by pylint</li> </ul>"},{"location":"descriptors/python_pylint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable pylint by adding <code>PYTHON_PYLINT</code> in ENABLE_LINTERS variable</li> <li>Disable pylint by adding <code>PYTHON_PYLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PYTHON_PYLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_PYLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_PYLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_PYLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_PYLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_PYLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_PYLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_PYLINT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_PYLINT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_PYLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_PYLINT and its pre/post commands None PYTHON_PYLINT_CONFIG_FILE pylint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.pylintrc</code> PYTHON_PYLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_PYLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PYTHON_PYLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_PYLINT_CLI_EXECUTABLE Override CLI executable <code>['pylint']</code>"},{"location":"descriptors/python_pylint/#ide-integration","title":"IDE Integration","text":"<p>Use pylint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Eclipse PyLint Visit Web Site IDEA PyCharm (Native Support) Visit Web Site visual_studio Native Support Visit Web Site Visual Studio Code Native Support Visit Web Site"},{"location":"descriptors/python_pylint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_pylint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_pylint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_pylint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>pylint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_pylint/#example-calls","title":"Example calls","text":"<pre><code>pylint myfile.py\n</code></pre> <pre><code>pylint --rcfile .python-lint myfile.py\n</code></pre>"},{"location":"descriptors/python_pylint/#help-content","title":"Help content","text":"<pre><code>usage: pylint [options]\n\noptions:\n  -h, --help            show this help message and exit\n\nCommands:\n  Options which are actually commands. Options in this group are mutually exclusive.\n\n  --rcfile RCFILE       Specify a configuration file to load.\n  --output OUTPUT       Specify an output file.\n  --help-msg HELP_MSG [HELP_MSG ...]\n                        Display a help message for the given message id and\n                        exit. The value may be a comma separated list of\n                        message ids.\n  --list-msgs           Display a list of all pylint's messages divided by\n                        whether they are emittable with the given interpreter.\n  --list-msgs-enabled   Display a list of what messages are enabled, disabled\n                        and non-emittable with the given configuration.\n  --list-groups         List pylint's message groups.\n  --list-conf-levels    Generate pylint's confidence levels.\n  --list-extensions     List available extensions.\n  --full-documentation  Generate pylint's full documentation.\n  --generate-rcfile     Generate a sample configuration file according to the\n                        current configuration. You can put other options\n                        before this one to get them in the generated\n                        configuration.\n  --generate-toml-config\n                        Generate a sample configuration file according to the\n                        current configuration. You can put other options\n                        before this one to get them in the generated\n                        configuration. The config is in the .toml format.\n  --long-help           Show more verbose help.\n\nMain:\n  --init-hook INIT_HOOK\n                        Python code to execute, usually for sys.path\n                        manipulation such as pygtk.require().\n  --errors-only, -E     In error mode, messages with a category besides ERROR\n                        or FATAL are suppressed, and no reports are done by\n                        default. Error mode is compatible with disabling\n                        specific errors.\n  --verbose , -v        In verbose mode, extra non-checker-related info will\n                        be displayed.\n  --enable-all-extensions\n                        Load and enable all available extensions. Use --list-\n                        extensions to see a list all available extensions.\n  --ignore &lt;file&gt;[,&lt;file&gt;...]\n                        Files or directories to be skipped. They should be\n                        base names, not paths. (default: ('CVS',))\n  --ignore-patterns &lt;pattern&gt;[,&lt;pattern&gt;...]\n                        Files or directories matching the regular expression\n                        patterns are skipped. The regex matches against base\n                        names, not paths. The default value ignores Emacs file\n                        locks (default: (re.compile('^\\\\.#'),))\n  --ignore-paths &lt;pattern&gt;[,&lt;pattern&gt;...]\n                        Add files or directories matching the regular\n                        expressions patterns to the ignore-list. The regex\n                        matches against paths and can be in Posix or Windows\n                        format. Because '\\\\' represents the directory\n                        delimiter on Windows systems, it can't be used as an\n                        escape character. (default: [])\n  --persistent &lt;y or n&gt;\n                        Pickle collected data for later comparisons. (default:\n                        True)\n  --load-plugins &lt;modules&gt;\n                        List of plugins (as comma separated values of python\n                        module names) to load, usually to register additional\n                        checkers. (default: ())\n  --fail-under &lt;score&gt;  Specify a score threshold under which the program will\n                        exit with error. (default: 10)\n  --fail-on &lt;msg ids&gt;   Return non-zero exit code if any of these\n                        messages/categories are detected, even if score is\n                        above --fail-under value. Syntax same as enable.\n                        Messages specified are enabled, while categories only\n                        check already-enabled messages. (default: )\n  --jobs &lt;n-processes&gt;, -j &lt;n-processes&gt;\n                        Use multiple processes to speed up Pylint. Specifying\n                        0 will auto-detect the number of processors available\n                        to use, and will cap the count on Windows to avoid\n                        hangs. (default: 1)\n  --limit-inference-results &lt;number-of-results&gt;\n                        Control the amount of potential inferred values when\n                        inferring a single object. This can help the\n                        performance when dealing with large functions or\n                        complex, nested conditions. (default: 100)\n  --extension-pkg-allow-list &lt;pkg[,pkg]&gt;\n                        A comma-separated list of package or module names from\n                        where C extensions may be loaded. Extensions are\n                        loading into the active Python interpreter and may run\n                        arbitrary code. (default: [])\n  --extension-pkg-whitelist &lt;pkg[,pkg]&gt;\n                        A comma-separated list of package or module names from\n                        where C extensions may be loaded. Extensions are\n                        loading into the active Python interpreter and may run\n                        arbitrary code. (This is an alternative name to\n                        extension-pkg-allow-list for backward compatibility.)\n                        (default: [])\n  --suggestion-mode &lt;y or n&gt;\n                        When enabled, pylint would attempt to guess common\n                        misconfiguration and emit user-friendly hints instead\n                        of false-positive error messages. (default: True)\n  --exit-zero           Always return a 0 (non-error) status code, even if\n                        lint errors are found. This is primarily useful in\n                        continuous integration scripts. (default: False)\n  --from-stdin          Interpret the stdin as a python script, whose filename\n                        needs to be passed as the module_or_package argument.\n                        (default: False)\n  --source-roots &lt;path&gt;[,&lt;path&gt;...]\n                        Add paths to the list of the source roots. Supports\n                        globbing patterns. The source root is an absolute path\n                        or a path relative to the current working directory\n                        used to determine a package namespace for modules\n                        located under the source root. (default: ())\n  --recursive &lt;yn&gt;      Discover python modules and packages in the file\n                        system subtree. (default: False)\n  --py-version &lt;py_version&gt;\n                        Minimum Python version to use for version dependent\n                        checks. Will default to the version used to run\n                        pylint. (default: (3, 12))\n  --ignored-modules &lt;module names&gt;\n                        List of module names for which member attributes\n                        should not be checked and will not be imported (useful\n                        for modules/projects where namespaces are manipulated\n                        during runtime and thus existing member attributes\n                        cannot be deduced by static analysis). It supports\n                        qualified module names, as well as Unix pattern\n                        matching. (default: ())\n  --analyse-fallback-blocks &lt;y or n&gt;\n                        Analyse import fallback blocks. This can be used to\n                        support both Python 2 and 3 compatible code, which\n                        means that the block might have code that exists only\n                        in one or another interpreter, leading to false\n                        positives when analysed. (default: False)\n  --clear-cache-post-run &lt;y or n&gt;\n                        Clear in-memory caches upon conclusion of linting.\n                        Useful if running pylint in a server-like mode.\n                        (default: False)\n  --prefer-stubs &lt;y or n&gt;\n                        Resolve imports to .pyi stubs if available. May reduce\n                        no-member messages and increase not-an-iterable\n                        messages. (default: False)\n\nReports:\n  Options related to output formatting and reporting\n\n  --output-format &lt;format&gt;, -f &lt;format&gt;\n                        Set the output format. Available formats are: 'text',\n                        'parseable', 'colorized', 'json2' (improved json\n                        format), 'json' (old json format), msvs (visual\n                        studio) and 'github' (GitHub actions). You can also\n                        give a reporter class, e.g.\n                        mypackage.mymodule.MyReporterClass.\n  --reports &lt;y or n&gt;, -r &lt;y or n&gt;\n                        Tells whether to display a full report or only the\n                        messages. (default: False)\n  --evaluation &lt;python_expression&gt;\n                        Python expression which should return a score less\n                        than or equal to 10. You have access to the variables\n                        'fatal', 'error', 'warning', 'refactor', 'convention',\n                        and 'info' which contain the number of messages in\n                        each category, as well as 'statement' which is the\n                        total number of statements analyzed. This score is\n                        used by the global evaluation report (RP0004).\n                        (default: max(0, 0 if fatal else 10.0 - ((float(5 *\n                        error + warning + refactor + convention) / statement)\n                        * 10)))\n  --score &lt;y or n&gt;, -s &lt;y or n&gt;\n                        Activate the evaluation score. (default: True)\n  --msg-template &lt;template&gt;\n                        Template used to display messages. This is a python\n                        new-style format string used to format the message\n                        information. See doc for all details. (default: )\n\nMessages control:\n  Options controlling analysis messages\n\n  --confidence &lt;levels&gt;\n                        Only show warnings with the listed confidence levels.\n                        Leave empty to show all. Valid levels: HIGH,\n                        CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\n                        (default: ['HIGH', 'CONTROL_FLOW', 'INFERENCE',\n                        'INFERENCE_FAILURE', 'UNDEFINED'])\n  --enable &lt;msg ids&gt;, -e &lt;msg ids&gt;\n                        Enable the message, report, category or checker with\n                        the given id(s). You can either give multiple\n                        identifier separated by comma (,) or put this option\n                        multiple time (only on the command line, not in the\n                        configuration file where it should appear only once).\n                        See also the \"--disable\" option for examples.\n  --disable &lt;msg ids&gt;, -d &lt;msg ids&gt;\n                        Disable the message, report, category or checker with\n                        the given id(s). You can either give multiple\n                        identifiers separated by comma (,) or put this option\n                        multiple times (only on the command line, not in the\n                        configuration file where it should appear only once).\n                        You can also use \"--disable=all\" to disable everything\n                        first and then re-enable specific checks. For example,\n                        if you want to run only the similarities checker, you\n                        can use \"--disable=all --enable=similarities\". If you\n                        want to run only the classes checker, but have no\n                        Warning level messages displayed, use \"--disable=all\n                        --enable=classes --disable=W\".\n\nImports:\n  BaseChecker for import statements.\n\n  --deprecated-modules &lt;modules&gt;\n                        Deprecated modules which should not be used, separated\n                        by a comma. (default: ())\n  --preferred-modules &lt;module:preferred-module&gt;\n                        Couples of modules and preferred modules, separated by\n                        a comma. (default: ())\n  --import-graph &lt;file.gv&gt;\n                        Output a graph (.gv or any supported image format) of\n                        all (i.e. internal and external) dependencies to the\n                        given file (report RP0402 must not be disabled).\n                        (default: )\n  --ext-import-graph &lt;file.gv&gt;\n                        Output a graph (.gv or any supported image format) of\n                        external dependencies to the given file (report RP0402\n                        must not be disabled). (default: )\n  --int-import-graph &lt;file.gv&gt;\n                        Output a graph (.gv or any supported image format) of\n                        internal dependencies to the given file (report RP0402\n                        must not be disabled). (default: )\n  --known-standard-library &lt;modules&gt;\n                        Force import order to recognize a module as part of\n                        the standard compatibility libraries. (default: ())\n  --known-third-party &lt;modules&gt;\n                        Force import order to recognize a module as part of a\n                        third party library. (default: ('enchant',))\n  --allow-any-import-level &lt;modules&gt;\n                        List of modules that can be imported at any level, not\n                        just the top level one. (default: ())\n  --allow-wildcard-with-all &lt;y or n&gt;\n                        Allow wildcard imports from modules that define\n                        __all__. (default: False)\n  --allow-reexport-from-package &lt;y or n&gt;\n                        Allow explicit reexports by alias from a package\n                        __init__. (default: False)\n\nDesign:\n  Checker of potential misdesigns.\n\n  --max-args &lt;int&gt;      Maximum number of arguments for function / method.\n                        (default: 5)\n  --max-positional-arguments &lt;int&gt;\n                        Maximum number of positional arguments for function /\n                        method. (default: 5)\n  --max-locals &lt;int&gt;    Maximum number of locals for function / method body.\n                        (default: 15)\n  --max-returns &lt;int&gt;   Maximum number of return / yield for function / method\n                        body. (default: 6)\n  --max-branches &lt;int&gt;  Maximum number of branch for function / method body.\n                        (default: 12)\n  --max-statements &lt;int&gt;\n                        Maximum number of statements in function / method\n                        body. (default: 50)\n  --max-parents &lt;num&gt;   Maximum number of parents for a class (see R0901).\n                        (default: 7)\n  --ignored-parents &lt;comma separated list of class names&gt;\n                        List of qualified class names to ignore when counting\n                        class parents (see R0901) (default: ())\n  --max-attributes &lt;num&gt;\n                        Maximum number of attributes for a class (see R0902).\n                        (default: 7)\n  --min-public-methods &lt;num&gt;\n                        Minimum number of public methods for a class (see\n                        R0903). (default: 2)\n  --max-public-methods &lt;num&gt;\n                        Maximum number of public methods for a class (see\n                        R0904). (default: 20)\n  --max-bool-expr &lt;num&gt;\n                        Maximum number of boolean expressions in an if\n                        statement (see R0916). (default: 5)\n  --exclude-too-few-public-methods &lt;pattern&gt;[,&lt;pattern&gt;...]\n                        List of regular expressions of class ancestor names to\n                        ignore when counting public methods (see R0903)\n                        (default: [])\n\nFormat:\n  Formatting checker.\n\n  --max-line-length &lt;int&gt;\n                        Maximum number of characters on a single line.\n                        (default: 100)\n  --ignore-long-lines &lt;regexp&gt;\n                        Regexp for a line that is allowed to be longer than\n                        the limit. (default: ^\\s*(# )?&lt;?https?://\\S+&gt;?$)\n  --single-line-if-stmt &lt;y or n&gt;\n                        Allow the body of an if to be on the same line as the\n                        test if there is no else. (default: False)\n  --single-line-class-stmt &lt;y or n&gt;\n                        Allow the body of a class to be on the same line as\n                        the declaration if body contains single statement.\n                        (default: False)\n  --max-module-lines &lt;int&gt;\n                        Maximum number of lines in a module. (default: 1000)\n  --indent-string &lt;string&gt;\n                        String used as indentation unit. This is usually \" \"\n                        (4 spaces) or \"  \" (1 tab). (default: )\n  --indent-after-paren &lt;int&gt;\n                        Number of spaces of indent required inside a hanging\n                        or continued line. (default: 4)\n  --expected-line-ending-format &lt;empty or LF or CRLF&gt;\n                        Expected format of line ending, e.g. empty (any line\n                        ending), LF or CRLF. (default: )\n\nTypecheck:\n  Try to find bugs in the code using type inference.\n\n  --ignore-on-opaque-inference &lt;y or n&gt;\n                        This flag controls whether pylint should warn about\n                        no-member and similar checks whenever an opaque object\n                        is returned when inferring. The inference can return\n                        multiple potential results while evaluating a Python\n                        object, but some branches might not be evaluated,\n                        which results in partial inference. In that case, it\n                        might be useful to still emit no-member and other\n                        checks for the rest of the inferred objects. (default:\n                        True)\n  --mixin-class-rgx &lt;regexp&gt;\n                        Regex pattern to define which classes are considered\n                        mixins. (default: .*[Mm]ixin)\n  --ignore-mixin-members &lt;y or n&gt;\n                        Tells whether missing members accessed in mixin class\n                        should be ignored. A class is considered mixin if its\n                        name matches the mixin-class-rgx option. (default:\n                        True)\n  --ignored-checks-for-mixins &lt;list of messages names&gt;\n                        List of symbolic message names to ignore for Mixin\n                        members. (default: ['no-member', 'not-async-context-\n                        manager', 'not-context-manager', 'attribute-defined-\n                        outside-init'])\n  --ignore-none &lt;y or n&gt;\n                        Tells whether to warn about missing members when the\n                        owner of the attribute is inferred to be None.\n                        (default: True)\n  --ignored-classes &lt;members names&gt;\n                        List of class names for which member attributes should\n                        not be checked (useful for classes with dynamically\n                        set attributes). This supports the use of qualified\n                        names. (default: ('optparse.Values', 'thread._local',\n                        '_thread._local', 'argparse.Namespace'))\n  --generated-members &lt;members names&gt;\n                        List of members which are set dynamically and missed\n                        by pylint inference system, and so shouldn't trigger\n                        E1101 when accessed. Python regular expressions are\n                        accepted. (default: ())\n  --contextmanager-decorators &lt;decorator names&gt;\n                        List of decorators that produce context managers, such\n                        as contextlib.contextmanager. Add to this list to\n                        register other decorators that produce valid context\n                        managers. (default: ['contextlib.contextmanager'])\n  --missing-member-hint-distance &lt;member hint edit distance&gt;\n                        The minimum edit distance a name should have in order\n                        to be considered a similar match for a missing member\n                        name. (default: 1)\n  --missing-member-max-choices &lt;member hint max choices&gt;\n                        The total number of similar names that should be taken\n                        in consideration when showing a hint for a missing\n                        member. (default: 1)\n  --missing-member-hint &lt;missing member hint&gt;\n                        Show a hint with possible names when a member name was\n                        not found. The aspect of finding the hint is based on\n                        edit distance. (default: True)\n  --signature-mutators &lt;decorator names&gt;\n                        List of decorators that change the signature of a\n                        decorated function. (default: [])\n\nMiscellaneous:\n  BaseChecker for encoding issues.\n\n  --notes &lt;comma separated values&gt;\n                        List of note tags to take in consideration, separated\n                        by a comma. (default: ('FIXME', 'XXX', 'TODO'))\n  --notes-rgx &lt;regexp&gt;  Regular expression of note tags to take in\n                        consideration. (default: )\n\nString:\n  Check string literals.\n\n  --check-str-concat-over-line-jumps &lt;y or n&gt;\n                        This flag controls whether the implicit-str-concat\n                        should generate a warning on implicit string\n                        concatenation in sequences defined over several lines.\n                        (default: False)\n  --check-quote-consistency &lt;y or n&gt;\n                        This flag controls whether inconsistent-quotes\n                        generates a warning when the character used as a quote\n                        delimiter is used inconsistently within a module.\n                        (default: False)\n\nSimilarities:\n  Checks for similarities and duplicated code.\n\n  --min-similarity-lines &lt;int&gt;\n                        Minimum lines number of a similarity. (default: 4)\n  --ignore-comments &lt;y or n&gt;\n                        Comments are removed from the similarity computation\n                        (default: True)\n  --ignore-docstrings &lt;y or n&gt;\n                        Docstrings are removed from the similarity computation\n                        (default: True)\n  --ignore-imports &lt;y or n&gt;\n                        Imports are removed from the similarity computation\n                        (default: True)\n  --ignore-signatures &lt;y or n&gt;\n                        Signatures are removed from the similarity computation\n                        (default: True)\n\nVariables:\n  BaseChecker for variables.\n\n  --init-import &lt;y or n&gt;\n                        Tells whether we should check for unused import in\n                        __init__ files. (default: False)\n  --dummy-variables-rgx &lt;regexp&gt;\n                        A regular expression matching the name of dummy\n                        variables (i.e. expected to not be used). (default: _+\n                        $|(_[a-zA-Z0-9_]*[a-zA-Z0-\n                        9]+?$)|dummy|^ignored_|^unused_)\n  --additional-builtins &lt;comma separated list&gt;\n                        List of additional names supposed to be defined in\n                        builtins. Remember that you should avoid defining new\n                        builtins when possible. (default: ())\n  --callbacks &lt;callbacks&gt;\n                        List of strings which can identify a callback function\n                        by name. A callback name must start or end with one of\n                        those strings. (default: ('cb_', '_cb'))\n  --redefining-builtins-modules &lt;comma separated list&gt;\n                        List of qualified module names which can have objects\n                        that can redefine builtins. (default: ('six.moves',\n                        'past.builtins', 'future.builtins', 'builtins', 'io'))\n  --ignored-argument-names &lt;regexp&gt;\n                        Argument names that match this expression will be\n                        ignored. (default:\n                        re.compile('_.*|^ignored_|^unused_'))\n  --allow-global-unused-variables &lt;y or n&gt;\n                        Tells whether unused global variables should be\n                        treated as a violation. (default: True)\n  --allowed-redefined-builtins &lt;comma separated list&gt;\n                        List of names allowed to shadow builtins (default: ())\n\nRefactoring:\n  Looks for code which can be refactored.\n\n  --max-nested-blocks &lt;int&gt;\n                        Maximum number of nested blocks for function / method\n                        body (default: 5)\n  --never-returning-functions &lt;members names&gt;\n                        Complete name of functions that never returns. When\n                        checking for inconsistent-return-statements if a never\n                        returning function is called then it will be\n                        considered as an explicit return statement and no\n                        message will be printed. (default: ('sys.exit',\n                        'argparse.parse_error'))\n  --suggest-join-with-non-empty-separator &lt;y or n&gt;\n                        Let 'consider-using-join' be raised when the separator\n                        to join on would be non-empty (resulting in expected\n                        fixes of the type: ``\"- \" + \" - \".join(items)``)\n                        (default: True)\n\nSpelling:\n  Check spelling in comments and docstrings.\n\n  --spelling-dict &lt;dict name&gt;\n                        Spelling dictionary name. No available dictionaries :\n                        You need to install both the python package and the\n                        system dependency for enchant to work. (default: )\n  --spelling-ignore-words &lt;comma separated words&gt;\n                        List of comma separated words that should not be\n                        checked. (default: )\n  --spelling-private-dict-file &lt;path to file&gt;\n                        A path to a file that contains the private dictionary;\n                        one word per line. (default: )\n  --spelling-store-unknown-words &lt;y or n&gt;\n                        Tells whether to store unknown words to the private\n                        dictionary (see the --spelling-private-dict-file\n                        option) instead of raising a message. (default: n)\n  --max-spelling-suggestions N\n                        Limits count of emitted suggestions for spelling\n                        mistakes. (default: 4)\n  --spelling-ignore-comment-directives &lt;comma separated words&gt;\n                        List of comma separated words that should be\n                        considered directives if they appear at the beginning\n                        of a comment and should not be checked. (default: fmt:\n                        on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:)\n\nClasses:\n  Checker for class nodes.\n\n  --defining-attr-methods &lt;method names&gt;\n                        List of method names used to declare (i.e. assign)\n                        instance attributes. (default: ('__init__', '__new__',\n                        'setUp', 'asyncSetUp', '__post_init__'))\n  --valid-classmethod-first-arg &lt;argument names&gt;\n                        List of valid names for the first argument in a class\n                        method. (default: ('cls',))\n  --valid-metaclass-classmethod-first-arg &lt;argument names&gt;\n                        List of valid names for the first argument in a\n                        metaclass class method. (default: ('mcs',))\n  --exclude-protected &lt;protected access exclusions&gt;\n                        List of member names, which should be excluded from\n                        the protected access warning. (default: ('_asdict',\n                        '_fields', '_replace', '_source', '_make',\n                        'os._exit'))\n  --check-protected-access-in-special-methods &lt;y or n&gt;\n                        Warn about protected attribute access inside special\n                        methods (default: False)\n\nExceptions:\n  Exception related checks.\n\n  --overgeneral-exceptions &lt;comma-separated class names&gt;\n                        Exceptions that will emit a warning when caught.\n                        (default: ('builtins.BaseException',\n                        'builtins.Exception'))\n\nLogging:\n  Checks use of the logging module.\n\n  --logging-modules &lt;comma separated list&gt;\n                        Logging modules to check that the string format\n                        arguments are in logging function parameter format.\n                        (default: ('logging',))\n  --logging-format-style &lt;old (%) or new ({)&gt;\n                        The type of string formatting that logging methods do.\n                        `old` means using % formatting, `new` is for `{}`\n                        formatting. (default: old)\n\nMethod_args:\n  BaseChecker for method_args.\n\n  --timeout-methods &lt;comma separated list&gt;\n                        List of qualified names (i.e., library.method) which\n                        require a timeout parameter e.g.\n                        'requests.api.get,requests.api.post' (default:\n                        ('requests.api.delete', 'requests.api.get',\n                        'requests.api.head', 'requests.api.options',\n                        'requests.api.patch', 'requests.api.post',\n                        'requests.api.put', 'requests.api.request'))\n\nBasic:\n  --good-names &lt;names&gt;  Good variable names which should always be accepted,\n                        separated by a comma. (default: ('i', 'j', 'k', 'ex',\n                        'Run', '_'))\n  --good-names-rgxs &lt;names&gt;\n                        Good variable names regexes, separated by a comma. If\n                        names match any regex, they will always be accepted\n                        (default: )\n  --bad-names &lt;names&gt;   Bad variable names which should always be refused,\n                        separated by a comma. (default: ('foo', 'bar', 'baz',\n                        'toto', 'tutu', 'tata'))\n  --bad-names-rgxs &lt;names&gt;\n                        Bad variable names regexes, separated by a comma. If\n                        names match any regex, they will always be refused\n                        (default: )\n  --name-group &lt;name1:name2&gt;\n                        Colon-delimited sets of names that determine each\n                        other's naming style when the name regexes allow\n                        several styles. (default: ())\n  --include-naming-hint &lt;y or n&gt;\n                        Include a hint for the correct naming format with\n                        invalid-name. (default: False)\n  --property-classes &lt;decorator names&gt;\n                        List of decorators that produce properties, such as\n                        abc.abstractproperty. Add to this list to register\n                        other decorators that produce valid properties. These\n                        decorators are taken in consideration only for\n                        invalid-name. (default: ('abc.abstractproperty',))\n  --argument-naming-style &lt;style&gt;\n                        Naming style matching correct argument names.\n                        (default: snake_case)\n  --argument-rgx &lt;regexp&gt;\n                        Regular expression matching correct argument names.\n                        Overrides argument-naming-style. If left empty,\n                        argument names will be checked with the set naming\n                        style. (default: None)\n  --attr-naming-style &lt;style&gt;\n                        Naming style matching correct attribute names.\n                        (default: snake_case)\n  --attr-rgx &lt;regexp&gt;   Regular expression matching correct attribute names.\n                        Overrides attr-naming-style. If left empty, attribute\n                        names will be checked with the set naming style.\n                        (default: None)\n  --class-naming-style &lt;style&gt;\n                        Naming style matching correct class names. (default:\n                        PascalCase)\n  --class-rgx &lt;regexp&gt;  Regular expression matching correct class names.\n                        Overrides class-naming-style. If left empty, class\n                        names will be checked with the set naming style.\n                        (default: None)\n  --class-attribute-naming-style &lt;style&gt;\n                        Naming style matching correct class attribute names.\n                        (default: any)\n  --class-attribute-rgx &lt;regexp&gt;\n                        Regular expression matching correct class attribute\n                        names. Overrides class-attribute-naming-style. If left\n                        empty, class attribute names will be checked with the\n                        set naming style. (default: None)\n  --class-const-naming-style &lt;style&gt;\n                        Naming style matching correct class constant names.\n                        (default: UPPER_CASE)\n  --class-const-rgx &lt;regexp&gt;\n                        Regular expression matching correct class constant\n                        names. Overrides class-const-naming-style. If left\n                        empty, class constant names will be checked with the\n                        set naming style. (default: None)\n  --const-naming-style &lt;style&gt;\n                        Naming style matching correct constant names.\n                        (default: UPPER_CASE)\n  --const-rgx &lt;regexp&gt;  Regular expression matching correct constant names.\n                        Overrides const-naming-style. If left empty, constant\n                        names will be checked with the set naming style.\n                        (default: None)\n  --function-naming-style &lt;style&gt;\n                        Naming style matching correct function names.\n                        (default: snake_case)\n  --function-rgx &lt;regexp&gt;\n                        Regular expression matching correct function names.\n                        Overrides function-naming-style. If left empty,\n                        function names will be checked with the set naming\n                        style. (default: None)\n  --inlinevar-naming-style &lt;style&gt;\n                        Naming style matching correct inline iteration names.\n                        (default: any)\n  --inlinevar-rgx &lt;regexp&gt;\n                        Regular expression matching correct inline iteration\n                        names. Overrides inlinevar-naming-style. If left\n                        empty, inline iteration names will be checked with the\n                        set naming style. (default: None)\n  --method-naming-style &lt;style&gt;\n                        Naming style matching correct method names. (default:\n                        snake_case)\n  --method-rgx &lt;regexp&gt;\n                        Regular expression matching correct method names.\n                        Overrides method-naming-style. If left empty, method\n                        names will be checked with the set naming style.\n                        (default: None)\n  --module-naming-style &lt;style&gt;\n                        Naming style matching correct module names. (default:\n                        snake_case)\n  --module-rgx &lt;regexp&gt;\n                        Regular expression matching correct module names.\n                        Overrides module-naming-style. If left empty, module\n                        names will be checked with the set naming style.\n                        (default: None)\n  --typealias-rgx &lt;regexp&gt;\n                        Regular expression matching correct type alias names.\n                        If left empty, type alias names will be checked with\n                        the set naming style. (default: None)\n  --typevar-rgx &lt;regexp&gt;\n                        Regular expression matching correct type variable\n                        names. If left empty, type variable names will be\n                        checked with the set naming style. (default: None)\n  --variable-naming-style &lt;style&gt;\n                        Naming style matching correct variable names.\n                        (default: snake_case)\n  --variable-rgx &lt;regexp&gt;\n                        Regular expression matching correct variable names.\n                        Overrides variable-naming-style. If left empty,\n                        variable names will be checked with the set naming\n                        style. (default: None)\n  --no-docstring-rgx &lt;regexp&gt;\n                        Regular expression which should only match function or\n                        class names that do not require a docstring. (default:\n                        re.compile('^_'))\n  --docstring-min-length &lt;int&gt;\n                        Minimum line length for functions/classes that require\n                        docstrings, shorter ones are exempt. (default: -1)\n</code></pre>"},{"location":"descriptors/python_pylint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=pylint\nARG PIP_PYLINT_VERSION=3.3.6\n# renovate: datasource=pypi depName=typing-extensions\nARG PIP_TYPING_EXTENSIONS_VERSION=4.13.2\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>pylint==3.3.6</li> <li>typing-extensions==4.13.2</li> </ul> </li> </ul>"},{"location":"descriptors/python_pyright/","title":"pyright configuration in MegaLinter","text":"<p>Optional static typing checks for python, by Microsoft</p> <p>If you don't use python static typing, you should disable this linter by adding <code>PYTHON_PYRIGHT</code> in <code>DISABLE_LINTERS</code> variable in your <code>.mega-linter.yml</code> config file</p>"},{"location":"descriptors/python_pyright/#pyright-documentation","title":"pyright documentation","text":"<ul> <li>Version in MegaLinter: 1.1.400</li> <li>Visit Official Web Site</li> <li>See How to configure pyright rules</li> <li>See How to disable pyright rules in files</li> <li>See Index of problems detected by pyright</li> </ul>"},{"location":"descriptors/python_pyright/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable pyright by adding <code>PYTHON_PYRIGHT</code> in ENABLE_LINTERS variable</li> <li>Disable pyright by adding <code>PYTHON_PYRIGHT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PYTHON_PYRIGHT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_PYRIGHT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_PYRIGHT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_PYRIGHT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_PYRIGHT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_PYRIGHT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_PYRIGHT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_PYRIGHT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_PYRIGHT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_PYRIGHT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_PYRIGHT and its pre/post commands None PYTHON_PYRIGHT_CONFIG_FILE pyright configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>pyrightconfig.json</code> PYTHON_PYRIGHT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_PYRIGHT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PYTHON_PYRIGHT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_PYRIGHT_CLI_EXECUTABLE Override CLI executable <code>['pyright']</code>"},{"location":"descriptors/python_pyright/#ide-integration","title":"IDE Integration","text":"<p>Use pyright in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs LSP-pyright Visit Web Site Sublime Text LSP-pyright Visit Web Site vim Ale Visit Web Site vim coc-pyright Visit Web Site Visual Studio Code PyRight"},{"location":"descriptors/python_pyright/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_pyright/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_pyright/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_pyright/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>pyright is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_pyright/#example-calls","title":"Example calls","text":"<pre><code>pyright myfile.py myfile2.py\n</code></pre> <pre><code>pyright myfile.py\n</code></pre>"},{"location":"descriptors/python_pyright/#help-content","title":"Help content","text":"<pre><code>Usage: pyright [options] files...\n  Options:\n  --createstub &lt;IMPORT&gt;              Create type stub file(s) for import\n  --dependencies                     Emit import dependency information\n  -h,--help                          Show this help message\n  --ignoreexternal                   Ignore external imports for --verifytypes\n  --level &lt;LEVEL&gt;                    Minimum diagnostic level (error or warning)\n  --outputjson                       Output results in JSON format\n  -p,--project &lt;FILE OR DIRECTORY&gt;   Use the configuration file at this location\n  --pythonplatform &lt;PLATFORM&gt;        Analyze for a specific platform (Darwin, Linux, Windows)\n  --pythonpath &lt;FILE&gt;                Path to the Python interpreter\n  --pythonversion &lt;VERSION&gt;          Analyze for a specific version (3.3, 3.4, etc.)\n  --skipunannotated                  Skip analysis of functions with no type annotations\n  --stats                            Print detailed performance stats\n  -t,--typeshedpath &lt;DIRECTORY&gt;      Use typeshed type stubs at this location\n  --threads &lt;optional COUNT&gt;         Use separate threads to parallelize type checking\n  -v,--venvpath &lt;DIRECTORY&gt;          Directory that contains virtual environments\n  --verbose                          Emit verbose diagnostics\n  --verifytypes &lt;PACKAGE&gt;            Verify type completeness of a py.typed package\n  --version                          Print Pyright version and exit\n  --warnings                         Use exit code of 1 if warnings are reported\n  -w,--watch                         Continue to run and watch for changes\n  -                                  Read files from stdin\n\n</code></pre>"},{"location":"descriptors/python_pyright/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=pyright\nARG NPM_PYRIGHT_VERSION=1.1.400\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>pyright@1.1.400</li> </ul> </li> </ul>"},{"location":"descriptors/python_ruff/","title":"ruff configuration in MegaLinter","text":""},{"location":"descriptors/python_ruff/#ruff","title":"ruff","text":"<p>An extremely fast Python linter, written in Rust.</p>"},{"location":"descriptors/python_ruff/#ruff-documentation","title":"ruff documentation","text":"<ul> <li>Version in MegaLinter: 0.11.8</li> <li>Visit Official Web Site</li> <li>See How to configure ruff rules<ul> <li>If custom <code>.ruff.toml</code> config file isn't found, .ruff.toml will be used</li> </ul> </li> <li>See How to disable ruff rules in files</li> <li>See Index of problems detected by ruff</li> </ul>"},{"location":"descriptors/python_ruff/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ruff by adding <code>PYTHON_RUFF</code> in ENABLE_LINTERS variable</li> <li>Disable ruff by adding <code>PYTHON_RUFF</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>PYTHON_RUFF</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value PYTHON_RUFF_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_RUFF_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_RUFF_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_RUFF_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_RUFF_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_RUFF_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_RUFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_RUFF_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_RUFF_POST_COMMANDS List of bash commands to run after the linter None PYTHON_RUFF_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_RUFF and its pre/post commands None PYTHON_RUFF_CONFIG_FILE ruff configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.ruff.toml</code> PYTHON_RUFF_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_RUFF_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> PYTHON_RUFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_RUFF_CLI_EXECUTABLE Override CLI executable <code>['ruff']</code>"},{"location":"descriptors/python_ruff/#ide-integration","title":"IDE Integration","text":"<p>Use ruff in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA Ruff Visual Studio Code Ruff"},{"location":"descriptors/python_ruff/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_ruff/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_ruff/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_ruff/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>ruff is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_ruff/#example-calls","title":"Example calls","text":"<pre><code>ruff check myfile.py\n</code></pre> <pre><code>ruff check --config .ruff.toml myfile.py\n</code></pre>"},{"location":"descriptors/python_ruff/#help-content","title":"Help content","text":"<pre><code>Ruff: An extremely fast Python linter and code formatter.\n\nUsage: ruff [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  check    Run Ruff on the given files or directories\n  rule     Explain a rule (or all rules)\n  config   List or describe the available configuration options\n  linter   List all supported upstream linters\n  clean    Clear any caches in the current directory and any subdirectories\n  format   Run the Ruff formatter on the given files or directories\n  server   Run the language server\n  analyze  Run analysis over Python source code\n  version  Display Ruff's version\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nLog levels:\n  -v, --verbose  Enable verbose logging\n  -q, --quiet    Print diagnostics, but nothing else\n  -s, --silent   Disable all logging (but still exit with status code \"1\" upon detecting\n                 diagnostics)\n\nGlobal options:\n      --config &lt;CONFIG_OPTION&gt;  Either a path to a TOML configuration file (`pyproject.toml` or\n                                `ruff.toml`), or a TOML `&lt;KEY&gt; = &lt;VALUE&gt;` pair (such as you might\n                                find in a `ruff.toml` configuration file) overriding a specific\n                                configuration option. Overrides of individual settings using this\n                                option always take precedence over all configuration files,\n                                including configuration files that were also specified using\n                                `--config`\n      --isolated                Ignore all configuration files\n\nFor help with a specific command, see: `ruff help &lt;command&gt;`.\n</code></pre>"},{"location":"descriptors/python_ruff/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=ruff\nARG PIP_RUFF_VERSION=0.11.8\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>ruff==0.11.8</li> </ul> </li> </ul>"},{"location":"descriptors/python_ruff_format/","title":"ruff-format configuration in MegaLinter","text":""},{"location":"descriptors/python_ruff_format/#ruff-format","title":"ruff-format","text":"<p>An extremely fast Python linter, written in Rust. Configured for formatting only.</p>"},{"location":"descriptors/python_ruff_format/#ruff-format-documentation","title":"ruff-format documentation","text":"<ul> <li>Version in MegaLinter: 0.11.8</li> <li>Visit Official Web Site</li> <li>See How to configure ruff-format rules<ul> <li>If custom <code>.ruff.toml</code> config file isn't found, .ruff.toml will be used</li> </ul> </li> <li>See How to disable ruff-format rules in files</li> <li>See Index of problems detected by ruff-format</li> </ul>"},{"location":"descriptors/python_ruff_format/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ruff-format by adding <code>PYTHON_RUFF_FORMAT</code> in ENABLE_LINTERS variable</li> <li>Disable ruff-format by adding <code>PYTHON_RUFF_FORMAT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value PYTHON_DEFAULT_STYLE For ruff-format to be active, PYTHON_DEFAULT_STYLE must be <code>ruff</code> <code>black</code> PYTHON_RUFF_FORMAT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> PYTHON_RUFF_FORMAT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> PYTHON_RUFF_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file PYTHON_RUFF_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file PYTHON_RUFF_FORMAT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> PYTHON_RUFF_FORMAT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".py\"]</code> PYTHON_RUFF_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file PYTHON_RUFF_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_RUFF_FORMAT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_RUFF_FORMAT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling PYTHON_RUFF_FORMAT and its pre/post commands None PYTHON_RUFF_FORMAT_CONFIG_FILE ruff-format configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.ruff.toml</code> PYTHON_RUFF_FORMAT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_RUFF_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> PYTHON_RUFF_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> PYTHON_RUFF_FORMAT_CLI_EXECUTABLE Override CLI executable <code>['ruff']</code>"},{"location":"descriptors/python_ruff_format/#ide-integration","title":"IDE Integration","text":"<p>Use ruff-format in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA Ruff Visual Studio Code Ruff"},{"location":"descriptors/python_ruff_format/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 formatters Contains only formatters 18 python Optimized for PYTHON based projects 65"},{"location":"descriptors/python_ruff_format/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/python_ruff_format/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.py</code></li> </ul>"},{"location":"descriptors/python_ruff_format/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>ruff-format is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/python_ruff_format/#example-calls","title":"Example calls","text":"<pre><code>ruff format --check myfile.py myfile2.py\n</code></pre> <pre><code>ruff format --config .ruff.toml myfile.py myfile2.py\n</code></pre>"},{"location":"descriptors/python_ruff_format/#help-content","title":"Help content","text":"<pre><code>Ruff: An extremely fast Python linter and code formatter.\n\nUsage: ruff [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  check    Run Ruff on the given files or directories\n  rule     Explain a rule (or all rules)\n  config   List or describe the available configuration options\n  linter   List all supported upstream linters\n  clean    Clear any caches in the current directory and any subdirectories\n  format   Run the Ruff formatter on the given files or directories\n  server   Run the language server\n  analyze  Run analysis over Python source code\n  version  Display Ruff's version\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nLog levels:\n  -v, --verbose  Enable verbose logging\n  -q, --quiet    Print diagnostics, but nothing else\n  -s, --silent   Disable all logging (but still exit with status code \"1\" upon detecting\n                 diagnostics)\n\nGlobal options:\n      --config &lt;CONFIG_OPTION&gt;  Either a path to a TOML configuration file (`pyproject.toml` or\n                                `ruff.toml`), or a TOML `&lt;KEY&gt; = &lt;VALUE&gt;` pair (such as you might\n                                find in a `ruff.toml` configuration file) overriding a specific\n                                configuration option. Overrides of individual settings using this\n                                option always take precedence over all configuration files,\n                                including configuration files that were also specified using\n                                `--config`\n      --isolated                Ignore all configuration files\n\nFor help with a specific command, see: `ruff help &lt;command&gt;`.\n</code></pre>"},{"location":"descriptors/python_ruff_format/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=ruff\nARG PIP_RUFF_VERSION=0.11.8\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>ruff==0.11.8</li> </ul> </li> </ul>"},{"location":"descriptors/r/","title":"R linters in MegaLinter","text":""},{"location":"descriptors/r/#r","title":"R","text":""},{"location":"descriptors/r/#linters","title":"Linters","text":"Linter Additional lintrR_LINTR"},{"location":"descriptors/r/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.r</code></li> <li><code>.R</code></li> <li><code>.Rmd</code></li> <li><code>.RMD</code></li> </ul> </li> </ul>"},{"location":"descriptors/r/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value R_PRE_COMMANDS List of bash commands to run before the linters None R_POST_COMMANDS List of bash commands to run after the linters None R_FILTER_REGEX_INCLUDE Custom regex including filter R_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/r_lintr/","title":"lintr configuration in MegaLinter","text":""},{"location":"descriptors/r_lintr/#lintr","title":"lintr","text":""},{"location":"descriptors/r_lintr/#lintr-documentation","title":"lintr documentation","text":"<ul> <li>Visit Official Web Site</li> <li>See How to configure lintr rules</li> <li>See Index of problems detected by lintr</li> </ul>"},{"location":"descriptors/r_lintr/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable lintr by adding <code>R_LINTR</code> in ENABLE_LINTERS variable</li> <li>Disable lintr by adding <code>R_LINTR</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value R_LINTR_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> R_LINTR_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> R_LINTR_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file R_LINTR_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file R_LINTR_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> R_LINTR_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".r\", \".R\", \".Rmd\", \".RMD\"]</code> R_LINTR_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file R_LINTR_PRE_COMMANDS List of bash commands to run before the linter None R_LINTR_POST_COMMANDS List of bash commands to run after the linter None R_LINTR_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling R_LINTR and its pre/post commands None R_LINTR_CONFIG_FILE lintr configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.lintr</code> R_LINTR_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules R_LINTR_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> R_LINTR_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> R_LINTR_CLI_EXECUTABLE Override CLI executable <code>['lintr']</code>"},{"location":"descriptors/r_lintr/#ide-integration","title":"IDE Integration","text":"<p>Use lintr in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs flycheck Visit Web Site rstudio Native Support Visit Web Site Sublime Text SublimeLinter-contrib-lintr Visit Web Site vim ale Visit Web Site Visual Studio Code VSCode R LSP"},{"location":"descriptors/r_lintr/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/r_lintr/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/r_lintr/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.r</code>, <code>.R</code>, <code>.Rmd</code>, <code>.RMD</code></li> </ul>"},{"location":"descriptors/r_lintr/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>lintr is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/r_lintr/#example-calls","title":"Example calls","text":"<pre><code>R --slave -e \"errors &lt;- lintr::lint('myfile.r'); print(errors); quit(save = 'no', status = if (length(errors) &gt; 0) 1 else 0) \"\n</code></pre>"},{"location":"descriptors/r_lintr/#help-content","title":"Help content","text":"<pre><code>No documentation for \u2018lintr\u2019 in specified packages and libraries:\nyou could try \u2018??lintr\u2019\n</code></pre>"},{"location":"descriptors/r_lintr/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN mkdir -p /home/r-library \\\n    &amp;&amp; cp -r /usr/lib/R/library/ /home/r-library/ \\\n    &amp;&amp; Rscript -e \"install.packages(c('lintr','purrr'), repos = 'https://cloud.r-project.org/')\" \\\n    &amp;&amp; R -e \"install.packages(list.dirs('/home/r-library',recursive = FALSE), repos = NULL, type = 'source')\"\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>gcc</li> <li>g++</li> <li>libcurl</li> <li>libffi-dev</li> <li>libgcc</li> <li>libxml2-dev</li> <li>libxml2-utils</li> <li>linux-headers</li> <li>R</li> <li>R-dev</li> <li>R-doc</li> </ul> </li> </ul>"},{"location":"descriptors/raku/","title":"RAKU linters in MegaLinter","text":""},{"location":"descriptors/raku/#raku","title":"RAKU","text":""},{"location":"descriptors/raku/#linters","title":"Linters","text":"Linter Additional rakuRAKU_RAKU"},{"location":"descriptors/raku/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.raku</code></li> <li><code>.rakumod</code></li> <li><code>.rakutest</code></li> <li><code>.pm6</code></li> <li><code>.pl6</code></li> <li><code>.p6</code></li> </ul> </li> </ul>"},{"location":"descriptors/raku/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value RAKU_PRE_COMMANDS List of bash commands to run before the linters None RAKU_POST_COMMANDS List of bash commands to run after the linters None RAKU_FILTER_REGEX_INCLUDE Custom regex including filter RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/raku_raku/","title":"raku configuration in MegaLinter","text":""},{"location":"descriptors/raku_raku/#raku","title":"raku","text":""},{"location":"descriptors/raku_raku/#raku-documentation","title":"raku documentation","text":"<ul> <li>Version in MegaLinter: 2024.12</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/raku_raku/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable raku by adding <code>RAKU_RAKU</code> in ENABLE_LINTERS variable</li> <li>Disable raku by adding <code>RAKU_RAKU</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value RAKU_RAKU_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> RAKU_RAKU_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> RAKU_RAKU_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file RAKU_RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file RAKU_RAKU_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> RAKU_RAKU_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".raku\", \".rakumod\", \".rakutest\", \".pm6\", \".pl6\", \".p6\"]</code> RAKU_RAKU_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file RAKU_RAKU_PRE_COMMANDS List of bash commands to run before the linter None RAKU_RAKU_POST_COMMANDS List of bash commands to run after the linter None RAKU_RAKU_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling RAKU_RAKU and its pre/post commands None RAKU_RAKU_CONFIG_FILE raku configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>META6.json</code> RAKU_RAKU_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RAKU_RAKU_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> RAKU_RAKU_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> RAKU_RAKU_CLI_EXECUTABLE Override CLI executable <code>['raku']</code>"},{"location":"descriptors/raku_raku/#ide-integration","title":"IDE Integration","text":"<p>Use raku in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom language-perl6 Visit Web Site comma Native Support Visit Web Site Visual Studio Code Perl6 Language Support"},{"location":"descriptors/raku_raku/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/raku_raku/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/raku_raku/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.raku</code>, <code>.rakumod</code>, <code>.rakutest</code>, <code>.pm6</code>, <code>.pl6</code>, <code>.p6</code></li> </ul>"},{"location":"descriptors/raku_raku/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>raku is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/raku_raku/#example-calls","title":"Example calls","text":"<pre><code>raku -I ./lib -c myfile.raku\n</code></pre>"},{"location":"descriptors/raku_raku/#help-content","title":"Help content","text":"<pre><code>/opt/rakudo-pkg/bin/../share/perl6/runtime/perl6.moarvm [switches] [--] [programfile] [arguments]\n\nWith no arguments, enters a REPL (see --repl-mode option).\nWith a \"[programfile]\" or the \"-e\" option, compiles the given program\nand, by default, also executes the compiled code.\n\n  -                    read program source from STDIN or start REPL if a TTY\n  -c                   check syntax only (runs BEGIN and CHECK blocks)\n  --rakudoc            extract documentation and print it as text\n  --rakudoc=module     use RakuDoc::To::[module] to render inline documentation\n  -e program           one line of program, strict is enabled by default\n  -h, --help           display this help text\n  -n                   run program once for each line of input\n  -p                   same as -n, but also print $_ at the end of lines\n  -I path              adds the path to the module search path\n  -M module            loads the module prior to running the program\n  --target=stage       specify compilation stage to emit\n  --optimize=level     use the given level of optimization (0..3)\n  --rakudo-home=path   Override the path of the Rakudo runtime files\n  -o, --output=name    specify name of output file\n  -v, --version        display version information\n  -V                   print configuration summary\n  --stagestats         display time spent in the compilation stages\n  --ll-exception       display a low level backtrace on errors\n  --doc                extract documentation and print it as text\n  --doc=module         use Pod::To::[module] to render inline documentation\n  --repl-mode=tty|process|disabled\n                       when running without \"-e\", a REPL is started.\n                       In this scenario, the repl-mode is automatically set\n                       to 'tty'. A user may choose to specify 'tty' explicitly\n                       in order to ensure that the REPL is only run under a TTY.\n                       In cases where a REPL session may be running outside\n                       of a TTY, such as in a spawned sub-process, the\n                       user should specify a repl-mode of 'process'.\n                       If the user desires to have no REPL machinery loaded\n                       at all, the repl-mode can be set to 'disabled'.\n                       With this setting STDIN is read entirely (until EOF)\n                       and evaluated as if it were a program, without any\n                       extra output.\n                       Both 'process' and 'disabled' options bypass\n                       TTY detection.\n\n  --profile[=name]     write profile information to a file\n                       Extension controls format:\n                           .json outputs in JSON\n                           .sql  outputs in SQL\n                           any other extension outputs in HTML\n  --profile-compile[=name]\n                       write compile-time profile information to a file\n                       Extension controls format:\n                         .json outputs in JSON\n                         .sql  outputs in SQL\n                         any other extension outputs in HTML\n  --profile-kind[=name]\n                       choose the type of profile to generate\n                         instrumented - performance measurements (default)\n                         heap - record heap snapshots after every garbage\n                         collector run\n  --profile-filename=name\n                       provide a different filename for profile.\n                       Extension controls format:\n                         .json outputs in JSON\n                         .sql  outputs in SQL\n                         any other extension outputs in HTML\n                       This option will go away in a future Rakudo release\n  --profile-stage=stage\n                       write profile information for the given compilation\n                       stage to a file. Use --profile-compile to set name\n                       and format\n  --full-cleanup       try to free all memory and exit cleanly\n  --debug-port=port    listen for incoming debugger connections\n  --debug-suspend      pause execution at the entry point\n  --tracing            output a line to stderr on every interpreter instr\n                       (only if enabled in MoarVM)\n\nNote that only boolean single-letter options may be bundled.\n\nThe following environment variables are respected:\n\n  RAKULIB       Modify the module search path\n  PERL6LIB      Modify the module search path (DEPRECATED)\n  NQP_HOME      Override the path of the NQP runtime files\n  RAKUDO_HOME   Override the path of the Rakudo runtime files\n\n\n\n</code></pre>"},{"location":"descriptors/raku_raku/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=nxadm/rakudo-pkg\nARG RAKU_RAKU_VERSION=2024.12\nARG RAKU_RAKU_ALPINE_VERSION=3.20\n\nRUN curl -L \"https://github.com/nxadm/rakudo-pkg/releases/download/v${RAKU_RAKU_VERSION}/rakudo-pkg-Alpine${RAKU_RAKU_ALPINE_VERSION}_${RAKU_RAKU_VERSION}-01_x86_64.apk\" &gt; \"rakudo-pkg-Alpine${RAKU_RAKU_ALPINE_VERSION}_${RAKU_RAKU_VERSION}-01_x86_64.apk\" \\\n    &amp;&amp; apk add --no-cache --allow-untrusted \"rakudo-pkg-Alpine${RAKU_RAKU_ALPINE_VERSION}_${RAKU_RAKU_VERSION}-01_x86_64.apk\" \\\n    &amp;&amp; rm \"rakudo-pkg-Alpine${RAKU_RAKU_ALPINE_VERSION}_${RAKU_RAKU_VERSION}-01_x86_64.apk\"\n\nENV PATH=\"~/.raku/bin:/opt/rakudo-pkg/bin:/opt/rakudo-pkg/share/perl6/site/bin:$PATH\"\n</code></pre>"},{"location":"descriptors/repository/","title":"REPOSITORY linters in MegaLinter","text":""},{"location":"descriptors/repository/#repository","title":"REPOSITORY","text":""},{"location":"descriptors/repository/#linters","title":"Linters","text":"Linter Additional checkovREPOSITORY_CHECKOV devskimREPOSITORY_DEVSKIM dustilockREPOSITORY_DUSTILOCK git_diffREPOSITORY_GIT_DIFF gitleaksREPOSITORY_GITLEAKS grypeREPOSITORY_GRYPE kicsREPOSITORY_KICS ls-lintREPOSITORY_LS_LINT secretlintREPOSITORY_SECRETLINT semgrepREPOSITORY_SEMGREP syftREPOSITORY_SYFT trivyREPOSITORY_TRIVY trivy-sbomREPOSITORY_TRIVY_SBOM trufflehogREPOSITORY_TRUFFLEHOG"},{"location":"descriptors/repository/#linted-files","title":"Linted files","text":""},{"location":"descriptors/repository/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value REPOSITORY_PRE_COMMANDS List of bash commands to run before the linters None REPOSITORY_POST_COMMANDS List of bash commands to run after the linters None REPOSITORY_FILTER_REGEX_INCLUDE Custom regex including filter REPOSITORY_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/repository_checkov/","title":"checkov configuration in MegaLinter","text":""},{"location":"descriptors/repository_checkov/#checkov-documentation","title":"checkov documentation","text":"<ul> <li>Version in MegaLinter: 3.2.413</li> <li>Visit Official Web Site</li> <li>See How to configure checkov rules<ul> <li>If custom <code>.checkov.yml</code> config file isn't found, .checkov.yml will be used</li> </ul> </li> <li>See How to disable checkov rules in files</li> <li>See Index of problems detected by checkov</li> </ul>"},{"location":"descriptors/repository_checkov/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable checkov by adding <code>REPOSITORY_CHECKOV</code> in ENABLE_LINTERS variable</li> <li>Disable checkov by adding <code>REPOSITORY_CHECKOV</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_CHECKOV_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_CHECKOV_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_CHECKOV_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_CHECKOV_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_CHECKOV_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_CHECKOV_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_CHECKOV and its pre/post commands None REPOSITORY_CHECKOV_CONFIG_FILE checkov configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.checkov.yml</code> REPOSITORY_CHECKOV_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_CHECKOV_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_CHECKOV_CLI_EXECUTABLE Override CLI executable <code>['checkov']</code>"},{"location":"descriptors/repository_checkov/#ide-integration","title":"IDE Integration","text":"<p>Use checkov in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Checkov"},{"location":"descriptors/repository_checkov/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_checkov/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_checkov/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_checkov/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>checkov is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using checkov configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make checkov analyze only updated files</li> </ul>"},{"location":"descriptors/repository_checkov/#example-calls","title":"Example calls","text":"<pre><code>checkov --directory .\n</code></pre> <pre><code>checkov --directory . --output --sarif\n</code></pre>"},{"location":"descriptors/repository_checkov/#help-content","title":"Help content","text":"<pre><code>usage: checkov [-h] [-v] [--support] [-d DIRECTORY] [--add-check]\n               [-f FILE [FILE ...]] [--skip-path SKIP_PATH]\n               [--external-checks-dir EXTERNAL_CHECKS_DIR]\n               [--external-checks-git EXTERNAL_CHECKS_GIT] [-l]\n               [-o {cli,csv,cyclonedx,cyclonedx_json,json,junitxml,github_failed_only,gitlab_sast,sarif,spdx}]\n               [--output-file-path OUTPUT_FILE_PATH] [--output-bc-ids]\n               [--include-all-checkov-policies] [--quiet] [--compact]\n               [--framework FRAMEWORK [FRAMEWORK ...]]\n               [--skip-framework SKIP_FRAMEWORK [SKIP_FRAMEWORK ...]]\n               [-c CHECK] [--skip-check SKIP_CHECK]\n               [--run-all-external-checks] [-s] [--soft-fail-on SOFT_FAIL_ON]\n               [--hard-fail-on HARD_FAIL_ON] [--bc-api-key BC_API_KEY]\n               [--prisma-api-url PRISMA_API_URL] [--skip-results-upload]\n               [--docker-image DOCKER_IMAGE]\n               [--dockerfile-path DOCKERFILE_PATH] [--repo-id REPO_ID]\n               [-b BRANCH] [--skip-download] [--use-enforcement-rules]\n               [--download-external-modules DOWNLOAD_EXTERNAL_MODULES]\n               [--var-file VAR_FILE]\n               [--external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH]\n               [--evaluate-variables EVALUATE_VARIABLES] [-ca CA_CERTIFICATE]\n               [--no-cert-verify]\n               [--repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT]\n               [--config-file CONFIG_FILE] [--create-config CREATE_CONFIG]\n               [--show-config] [--create-baseline] [--baseline BASELINE]\n               [--output-baseline-as-skipped]\n               [--skip-cve-package SKIP_CVE_PACKAGE]\n               [--policy-metadata-filter POLICY_METADATA_FILTER]\n               [--policy-metadata-filter-exception POLICY_METADATA_FILTER_EXCEPTION]\n               [--secrets-scan-file-type SECRETS_SCAN_FILE_TYPE]\n               [--enable-secret-scan-all-files]\n               [--block-list-secret-scan BLOCK_LIST_SECRET_SCAN]\n               [--summary-position {bottom,top}]\n               [--skip-resources-without-violations] [--deep-analysis]\n               [--no-fail-on-crash] [--mask MASK] [--scan-secrets-history]\n               [--secrets-history-timeout SECRETS_HISTORY_TIMEOUT]\n               [--openai-api-key OPENAI_API_KEY]\n               [--custom-tool-name CUSTOM_TOOL_NAME]\n\nInfrastructure as code static analysis\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --version         version\n  --support             Enable debug logs and upload the logs to the server.\n                        Requires a Bridgecrew or Prisma Cloud API key.\n  -d DIRECTORY, --directory DIRECTORY\n                        IaC root directory (can not be used together with\n                        --file).\n  --add-check           Generate a new check via CLI prompt\n  -f FILE [FILE ...], --file FILE [FILE ...]\n                        File to scan (can not be used together with\n                        --directory). With this option, Checkov will attempt\n                        to filter the runners based on the file type. For\n                        example, if you specify a \".tf\" file, only the\n                        terraform and secrets frameworks will be included. You\n                        can further limit this (e.g., skip secrets) by using\n                        the --skip-framework argument.\n  --skip-path SKIP_PATH\n                        Path (file or directory) to skip, using regular\n                        expression logic, relative to current working\n                        directory. Word boundaries are not implicit; i.e.,\n                        specifying \"dir1\" will skip any directory or\n                        subdirectory named \"dir1\". Ignored with -f. Can be\n                        specified multiple times.\n  --external-checks-dir EXTERNAL_CHECKS_DIR\n                        Directory for custom checks to be loaded. Can be\n                        repeated. Note that this will run Python code from the\n                        specified directory, so only use this option with\n                        trusted directories.\n  --external-checks-git EXTERNAL_CHECKS_GIT\n                        GitHub url of external checks to be added. You can\n                        specify a subdirectory after a double-slash //.It is\n                        ossible to use ?ref=tags/tagName or\n                        ?ref=heads/branchName or ?ref=commit_id and cannot be\n                        used together with --external-checks-dir. Note that\n                        this will run Python code from the specified\n                        directory, so only use this option with trusted\n                        repositories.\n  -l, --list            List checks\n  -o {cli,csv,cyclonedx,cyclonedx_json,json,junitxml,github_failed_only,gitlab_sast,sarif,spdx}, --output {cli,csv,cyclonedx,cyclonedx_json,json,junitxml,github_failed_only,gitlab_sast,sarif,spdx}\n                        Report output format. Add multiple outputs by using\n                        the flag multiple times (-o sarif -o cli)\n  --output-file-path OUTPUT_FILE_PATH\n                        Name of the output folder to save the chosen output\n                        formats. Advanced usage: By using -o cli -o junitxml\n                        --output-file-path console,results.xml the CLI output\n                        will be printed to the console and the JunitXML output\n                        to the file results.xml.\n  --output-bc-ids       Print Bridgecrew platform IDs (BC...) instead of\n                        Checkov IDs (CKV...), if the check exists in the\n                        platform\n  --include-all-checkov-policies\n                        When running with an API key, Checkov will omit any\n                        policies that do not exist in Prisma Cloud platform,\n                        except for local custom policies loaded with the\n                        --external-check flags. Use this key to include\n                        policies that only exist in Checkov in the scan. Note\n                        that this will make the local CLI results different\n                        from the results you see in the platform. Has no\n                        effect if you are not using an API key. Use the\n                        --check option to explicitly include checks by ID even\n                        if they are not in the platform, without using this\n                        flag.\n  --quiet               in case of CLI output, display only failed checks.\n                        Also disables progress bars\n  --compact             in case of CLI output, do not display code blocks\n  --framework FRAMEWORK [FRAMEWORK ...]\n                        Filter scan to run only on specific infrastructure as\n                        code frameworks. Defaults to all frameworks. If you\n                        explicitly include 'all' as a value, then all other\n                        values are ignored. Enter as a comma-separated list or\n                        repeat the flag multiple times. For example,\n                        --framework terraform,sca_package or --framework\n                        terraform --framework sca_package. Possible values:\n                        all, ansible, argo_workflows, arm, azure_pipelines,\n                        bicep, bitbucket_pipelines, cdk, circleci_pipelines,\n                        cloudformation, dockerfile, github_configuration,\n                        github_actions, gitlab_configuration, gitlab_ci,\n                        bitbucket_configuration, helm, json, yaml, kubernetes,\n                        kustomize, openapi, sca_package, sca_image, secrets,\n                        serverless, terraform, terraform_json, terraform_plan,\n                        sast, sast_python, sast_java, sast_javascript,\n                        sast_typescript, sast_golang, 3d_policy [env var:\n                        CKV_FRAMEWORK]\n  --skip-framework SKIP_FRAMEWORK [SKIP_FRAMEWORK ...]\n                        Filter scan to skip specific infrastructure as code\n                        frameworks. This will be included automatically for\n                        some frameworks if system dependencies are missing.\n                        Enter as a comma-separated list or repeat the flag\n                        multiple times. For example, --skip-framework\n                        terraform,sca_package or --skip-framework terraform\n                        --skip-framework sca_package. Cannot include values\n                        that are also included in --framework. Possible\n                        values: ansible, argo_workflows, arm, azure_pipelines,\n                        bicep, bitbucket_pipelines, cdk, circleci_pipelines,\n                        cloudformation, dockerfile, github_configuration,\n                        github_actions, gitlab_configuration, gitlab_ci,\n                        bitbucket_configuration, helm, json, yaml, kubernetes,\n                        kustomize, openapi, sca_package, sca_image, secrets,\n                        serverless, terraform, terraform_json, terraform_plan,\n                        sast, sast_python, sast_java, sast_javascript,\n                        sast_typescript, sast_golang, 3d_policy\n  -c CHECK, --check CHECK\n                        Checks to run; any other checks will be skipped. Enter\n                        one or more items separated by commas. Each item may\n                        be either a Checkov check ID (CKV_AWS_123), a BC check\n                        ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM,\n                        HIGH, CRITICAL). If you use a severity, then all\n                        checks equal to or above the lowest severity in the\n                        list will be included. This option can be combined\n                        with --skip-check. If it is, then the logic is to\n                        first take all checks that match this list, and then\n                        remove all checks that match the skip list. For\n                        example, if you use --check CKV_123 and --skip-check\n                        LOW, then CKV_123 will not run if it is a LOW\n                        severity. Similarly, if you use --check CKV_789\n                        --skip-check MEDIUM, then CKV_789 will run if it is a\n                        HIGH severity. If you use a check ID here along with\n                        an API key, and the check is not part of the BC / PC\n                        platform, then the check will still be run (see\n                        --include-all-checkov-policies for more info). [env\n                        var: CKV_CHECK]\n  --skip-check SKIP_CHECK\n                        Checks to skip; any other checks will not be run.\n                        Enter one or more items separated by commas. Each item\n                        may be either a Checkov check ID (CKV_AWS_123), a BC\n                        check ID (BC_AWS_GENERAL_123), or a severity (LOW,\n                        MEDIUM, HIGH, CRITICAL). If you use a severity, then\n                        all checks equal to or below the highest severity in\n                        the list will be skipped. This option can be combined\n                        with --check. If it is, priority is given to checks\n                        explicitly listed by ID or wildcard over checks listed\n                        by severity. For example, if you use --skip-check\n                        CKV_123 and --check HIGH, then CKV_123 will be skipped\n                        even if it is a HIGH severity. In the case of a tie\n                        (e.g., --check MEDIUM and --skip-check HIGH for a\n                        medium severity check), then the check will be\n                        skipped. [env var: CKV_SKIP_CHECK]\n  --run-all-external-checks\n                        Run all external checks (loaded via --external-checks\n                        options) even if the checks are not present in the\n                        --check list. This allows you to always ensure that\n                        new checks present in the external source are used. If\n                        an external check is included in --skip-check, it will\n                        still be skipped.\n  -s, --soft-fail       Runs checks but always returns a 0 exit code. Using\n                        either --soft-fail-on and / or --hard-fail-on\n                        overrides this option, except for the case when a\n                        result does not match either of the soft fail or hard\n                        fail criteria, in which case this flag determines the\n                        result.\n  --soft-fail-on SOFT_FAIL_ON\n                        Exits with a 0 exit code if only the specified items\n                        fail. Enter one or more items separated by commas.\n                        Each item may be either a Checkov check ID\n                        (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or\n                        a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a\n                        severity, then any severity equal to or less than the\n                        highest severity in the list will result in a soft\n                        fail. This option may be used with --hard-fail-on,\n                        using the same priority logic described in --check and\n                        --skip-check options above, with --hard-fail-on taking\n                        precedence in a tie. If a given result does not meet\n                        the --soft-fail-on nor the --hard-fail-on criteria,\n                        then the default is to hard fail\n  --hard-fail-on HARD_FAIL_ON\n                        Exits with a non-zero exit code for specified checks.\n                        Enter one or more items separated by commas. Each item\n                        may be either a Checkov check ID (CKV_AWS_123), a BC\n                        check ID (BC_AWS_GENERAL_123), or a severity (LOW,\n                        MEDIUM, HIGH, CRITICAL). If you use a severity, then\n                        any severity equal to or greater than the lowest\n                        severity in the list will result in a hard fail. This\n                        option can be used with --soft-fail-on, using the same\n                        priority logic described in --check and --skip-check\n                        options above, with --hard-fail-on taking precedence\n                        in a tie.\n  --bc-api-key BC_API_KEY\n                        Bridgecrew API key or Prisma Cloud Access Key (see\n                        --prisma-api-url) [env var: BC_API_KEY]\n  --prisma-api-url PRISMA_API_URL\n                        The Prisma Cloud API URL (see:\n                        https://prisma.pan.dev/api/cloud/api-urls). Requires\n                        --bc-api-key to be a Prisma Cloud Access Key in the\n                        following format: &lt;access_key_id&gt;::&lt;secret_key&gt; [env\n                        var: PRISMA_API_URL]\n  --skip-results-upload\n                        Do not upload scan results to the platform to view in\n                        the console. Results are only available locally. If\n                        you use the --support flag, logs will still get\n                        uploaded.\n  --docker-image DOCKER_IMAGE, --image DOCKER_IMAGE\n                        Scan docker images by name or ID. Only works with\n                        --bc-api-key flag\n  --dockerfile-path DOCKERFILE_PATH\n                        Path to the Dockerfile of the scanned docker image\n  --repo-id REPO_ID     Identity string of the repository, with form\n                        &lt;repo_owner&gt;/&lt;repo_name&gt;. Required when using the\n                        platform integration (API key).\n  -b BRANCH, --branch BRANCH\n                        Selected branch of the persisted repository. Only has\n                        effect when using the --bc-api-key flag\n  --skip-download       Do not download any data from Prisma Cloud. This will\n                        omit doc links, severities, etc., as well as custom\n                        policies and suppressions if using an API token. Note:\n                        it will prevent BC platform IDs from being available\n                        in Checkov.\n  --use-enforcement-rules\n                        Use the Enforcement rules configured in the platform\n                        for hard / soft fail logic. With this option, the\n                        enforcement rule matching this repo, or the default\n                        rule if there is no match, will determine this\n                        behavior: any check with a severity below the selected\n                        rule's soft-fail threshold will be skipped; any check\n                        with a severity equal to or greater than the rule's\n                        hard-fail threshold will be part of the hard-fail\n                        list, and any check in between will be part of the\n                        soft-fail list. For example, if the given enforcement\n                        rule has a hard-fail value of HIGH and a soft-fail\n                        value of MEDIUM,this is the equivalent of using the\n                        flags `--skip-check LOW --hard-fail-on HIGH`. You can\n                        use --check, --skip-check, --soft-fail, --soft-fail-\n                        on, or --hard-fail-on to override portions of an\n                        enforcement rule. Note, however, that the logic of\n                        applying the --check list and then the --skip-check\n                        list (as described above under --check) still applies\n                        here. Requires a BC or PC platform API key.\n  --download-external-modules DOWNLOAD_EXTERNAL_MODULES\n                        download external terraform modules from public git\n                        repositories and terraform registry [env var:\n                        DOWNLOAD_EXTERNAL_MODULES]\n  --var-file VAR_FILE   Variable files to load in addition to the default\n                        files (see https://www.terraform.io/docs/language/valu\n                        es/variables.html#variable-definitions-tfvars-\n                        files).Currently only supported for source Terraform\n                        (.tf file), and Helm chart scans.Requires using\n                        --directory, not --file. [env var: CKV_VAR_FILE]\n  --external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH\n                        set the path for the download external terraform\n                        modules [env var: EXTERNAL_MODULES_DIR]\n  --evaluate-variables EVALUATE_VARIABLES\n                        evaluate the values of variables and locals [env var:\n                        CKV_EVAL_VARS]\n  -ca CA_CERTIFICATE, --ca-certificate CA_CERTIFICATE\n                        Custom CA certificate (bundle) file [env var:\n                        BC_CA_BUNDLE]\n  --no-cert-verify      Skip SSL certificate verification. Use this to bypass\n                        errors related to SSL certificates. Warning: this\n                        should only be used for testing purposes. Skipping\n                        certificate verification is dangerous as invalid and\n                        falsified certificates cannot be detected.\n  --repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT\n                        Directory containing the hcl code used to generate a\n                        given plan file. Use with -f.\n  --config-file CONFIG_FILE\n                        path to the Checkov configuration YAML file\n  --create-config CREATE_CONFIG\n                        takes the current command line args and writes them\n                        out to a config file at the given path\n  --show-config         prints all args and config settings and where they\n                        came from (eg. commandline, config file, environment\n                        variable or default)\n  --create-baseline     Alongside outputting the findings, save all results to\n                        .checkov.baseline file so future runs will not re-flag\n                        the same noise. Works only with `--directory` flag\n  --baseline BASELINE   Use a .checkov.baseline file to compare current\n                        results with a known baseline. Report will include\n                        only failed checks that are new with respect to the\n                        provided baseline\n  --output-baseline-as-skipped\n                        output checks that are skipped due to baseline file\n                        presence\n  --skip-cve-package SKIP_CVE_PACKAGE\n                        filter scan to run on all packages but a specific\n                        package identifier (denylist), You can specify this\n                        argument multiple times to skip multiple packages\n  --policy-metadata-filter POLICY_METADATA_FILTER\n                        comma separated key:value string to filter policies\n                        based on Prisma Cloud policy metadata. When used with\n                        --policy-metadata-filter-exception, the exceptions\n                        override any policies selected asa result of the\n                        --policy-metadata-filter flag.See https://prisma.pan.d\n                        ev/api/cloud/cspm/policy#operation/get-policy-filters-\n                        and-options for information on allowed filters.\n                        Example:\n                        policy.label=label1,policy.label=label2,cloud.type=aws\n                        [env var: CKV_POLICY_METADATA_FILTER]\n  --policy-metadata-filter-exception POLICY_METADATA_FILTER_EXCEPTION\n                        comma separated key:value string to exclude filtered\n                        policies based on Prisma Cloud policy metadata. When\n                        used with --policy-metadata-filter, the exceptions\n                        override any policies selected asa result of the\n                        --policy-metadata-filter flag.See https://prisma.pan.d\n                        ev/api/cloud/cspm/policy#operation/get-policy-filters-\n                        and-options for information on allowed filters.\n                        Example:\n                        policy.label=label1,policy.label=label2,cloud.type=aws\n                        [env var: CKV_POLICY_METADATA_FILTER_EXCEPTION]\n  --secrets-scan-file-type SECRETS_SCAN_FILE_TYPE\n                        not in use [env var: CKV_SECRETS_SCAN_FILE_TYPE]\n  --enable-secret-scan-all-files\n                        enable secret scan for all files [env var:\n                        CKV_SECRETS_SCAN_ENABLE_ALL]\n  --block-list-secret-scan BLOCK_LIST_SECRET_SCAN\n                        List of files to filter out from the secret scanner\n                        [env var: CKV_SECRETS_SCAN_BLOCK_LIST]\n  --summary-position {bottom,top}\n                        Chose whether the summary will be appended on top\n                        (before the checks results) or on bottom (after check\n                        results), default is on top.\n  --skip-resources-without-violations\n                        exclude extra resources (resources without violations)\n                        from report output [env var:\n                        CKV_SKIP_RESOURCES_WITHOUT_VIOLATIONS]\n  --deep-analysis       Combine the TF Plan and TF graphs to make connections\n                        not available in either\n  --no-fail-on-crash    Return exit code 0 instead of 2 [env var:\n                        CKV_NO_FAIL_ON_CRASH]\n  --mask MASK           List of &lt;resource_type&gt;:&lt;variable&gt; OR &lt;variable&gt; only.\n                        Each entry in the list will be used formasking the\n                        desired attribute for resource (or for all resources,\n                        if no resource given).Notice: one entry can contain\n                        several variables, separated with a comma. For\n                        example:&lt;resource_type&gt;:&lt;variable1&gt;,&lt;variable2&gt; OR\n                        &lt;variable1&gt;,&lt;variable2&gt;\n  --scan-secrets-history\n                        will scan the history of commits for secrets\n  --secrets-history-timeout SECRETS_HISTORY_TIMEOUT\n                        maximum time to stop the scan\n  --openai-api-key OPENAI_API_KEY\n                        Add an OpenAI API key to enhance finding guidelines by\n                        sending violated policies and resource code to OpenAI\n                        to request remediation guidance. This will use your\n                        OpenAI credits. Set your number of findings that will\n                        receive enhanced guidelines using\n                        CKV_OPENAI_MAX_FINDINGS [env var: CKV_OPENAI_API_KEY]\n  --custom-tool-name CUSTOM_TOOL_NAME\n                        Add a tool name if you want your output to be tagged\n                        with a specific tool name,this is useful when\n                        integrating with other tools such as uploading SARIF\n                        files to github code scanning\n\nArgs that start with '--' can also be set in a config file (/.checkov.yaml or\n/.checkov.yml or /root/.checkov.yaml or /root/.checkov.yml or specified via\n--config-file). The config file uses YAML syntax and must represent a YAML\n'mapping' (for details, see http://learn.getgrav.org/advanced/yaml). In\ngeneral, command-line values override environment variables which override\nconfig file values which override defaults.\n</code></pre>"},{"location":"descriptors/repository_checkov/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=checkov\nARG PIP_CHECKOV_VERSION=3.2.413\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>checkov==3.2.413</li> </ul> </li> </ul>"},{"location":"descriptors/repository_devskim/","title":"devskim configuration in MegaLinter","text":""},{"location":"descriptors/repository_devskim/#devskim","title":"devskim","text":"<p>If you need to ignore folders,files or file extensions, use glob expressions <code>Glob</code> property of local <code>.devskim.json</code> file</p> <p>Example:</p> <pre><code>{\n  \"Globs\": [\n    \"**/.git/**\",\n    \"**/megalinter-reports/**\"\n  ]\n}\n</code></pre>"},{"location":"descriptors/repository_devskim/#devskim-documentation","title":"devskim documentation","text":"<ul> <li>Version in MegaLinter: 1.0.56</li> <li>Visit Official Web Site</li> <li>See How to configure devskim rules<ul> <li>If custom <code>.devskim.json</code> config file isn't found, .devskim.json will be used</li> </ul> </li> <li>See How to ignore files and directories with devskim</li> </ul>"},{"location":"descriptors/repository_devskim/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable devskim by adding <code>REPOSITORY_DEVSKIM</code> in ENABLE_LINTERS variable</li> <li>Disable devskim by adding <code>REPOSITORY_DEVSKIM</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_DEVSKIM_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_DEVSKIM_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_DEVSKIM_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_DEVSKIM_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_DEVSKIM_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_DEVSKIM_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_DEVSKIM and its pre/post commands None REPOSITORY_DEVSKIM_CONFIG_FILE devskim configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.devskim.json</code> REPOSITORY_DEVSKIM_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_DEVSKIM_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_DEVSKIM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_DEVSKIM_CLI_EXECUTABLE Override CLI executable <code>['devskim']</code>"},{"location":"descriptors/repository_devskim/#ide-integration","title":"IDE Integration","text":"<p>Use devskim in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode DevSkim"},{"location":"descriptors/repository_devskim/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 security Optimized for security 24"},{"location":"descriptors/repository_devskim/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_devskim/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_devskim/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>devskim is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using devskim configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make devskim analyze only updated files</li> </ul>"},{"location":"descriptors/repository_devskim/#example-calls","title":"Example calls","text":"<pre><code>devskim analyze --source-code .\n</code></pre> <pre><code>devskim analyze --file-format sarif --source-code .\n</code></pre> <pre><code>devskim analyze --file-format sarif --options-json config --source-code .\n</code></pre>"},{"location":"descriptors/repository_devskim/#help-content","title":"Help content","text":"<pre><code>devskim 1.0.56+3237407c1c\n\u00a9 Microsoft Corporation. All rights reserved.\n\n  analyze     Analyze source code using DevSkim\n\n  fix         Apply fixes from a Sarif\n\n  verify      Verify rule validity\n\n  suppress    Suppress issues identified in a DevSkim Sarif\n\n  help        Display more information on a specific command.\n\n  version     Display version information.\n\n</code></pre>"},{"location":"descriptors/repository_devskim/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=nuget depName=Microsoft.CST.DevSkim.CLI\nARG REPOSITORY_DEVSKIM_VERSION=1.0.56\nRUN apk add --no-cache dotnet9-sdk\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\nRUN dotnet tool install --allow-roll-forward --global Microsoft.CST.DevSkim.CLI --version ${REPOSITORY_DEVSKIM_VERSION}\n</code></pre>"},{"location":"descriptors/repository_dustilock/","title":"dustilock configuration in MegaLinter","text":""},{"location":"descriptors/repository_dustilock/#dustilock-documentation","title":"dustilock documentation","text":"<ul> <li>Version in MegaLinter: 1.2.0</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/repository_dustilock/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable dustilock by adding <code>REPOSITORY_DUSTILOCK</code> in ENABLE_LINTERS variable</li> <li>Disable dustilock by adding <code>REPOSITORY_DUSTILOCK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_DUSTILOCK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_DUSTILOCK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_DUSTILOCK_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_DUSTILOCK_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_DUSTILOCK_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_DUSTILOCK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_DUSTILOCK and its pre/post commands None REPOSITORY_DUSTILOCK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_DUSTILOCK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_DUSTILOCK_CLI_EXECUTABLE Override CLI executable <code>['dustilock']</code>"},{"location":"descriptors/repository_dustilock/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 security Optimized for security 24"},{"location":"descriptors/repository_dustilock/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_dustilock/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_dustilock/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>dustilock is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using dustilock configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make dustilock analyze only updated files</li> </ul>"},{"location":"descriptors/repository_dustilock/#example-calls","title":"Example calls","text":"<pre><code>dustilock\n</code></pre>"},{"location":"descriptors/repository_dustilock/#help-content","title":"Help content","text":"<pre><code>usage: DustiLock [-h|--help] [-r|--recursive] [-a|--audit] [-p|--path\n                 \"&lt;value&gt;\"]\n\n                 a tool to find which of your dependencies is susceptible to\n                 Dependency Confusion attack\n\nArguments:\n\n  -h  --help       Print help information\n  -r  --recursive  scan all files recursively\n  -a  --audit      audit only mode\n  -p  --path       the path to scan. default is cwd\n\n\n</code></pre>"},{"location":"descriptors/repository_dustilock/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=checkmarx/dustilock\nARG REPOSITORY_DUSTILOCK_VERSION=1.2.0\nFROM golang:alpine AS dustilock\nARG REPOSITORY_DUSTILOCK_VERSION\nRUN apk add --no-cache git &amp;&amp; GOBIN=/usr/bin go install github.com/checkmarx/dustilock@v${REPOSITORY_DUSTILOCK_VERSION}\nCOPY --link --from=dustilock /usr/bin/dustilock /usr/bin/dustilock\n</code></pre>"},{"location":"descriptors/repository_git_diff/","title":"git_diff configuration in MegaLinter","text":""},{"location":"descriptors/repository_git_diff/#git_diff","title":"git_diff","text":"<p>Git diff checks for git conflicts markers in files</p>"},{"location":"descriptors/repository_git_diff/#git_diff-documentation","title":"git_diff documentation","text":"<ul> <li>Version in MegaLinter: 2.47.2</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/repository_git_diff/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable git_diff by adding <code>REPOSITORY_GIT_DIFF</code> in ENABLE_LINTERS variable</li> <li>Disable git_diff by adding <code>REPOSITORY_GIT_DIFF</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_GIT_DIFF_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_GIT_DIFF_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_GIT_DIFF_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GIT_DIFF_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GIT_DIFF_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_GIT_DIFF and its pre/post commands None REPOSITORY_GIT_DIFF_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_GIT_DIFF_CLI_EXECUTABLE Override CLI executable <code>['git']</code>"},{"location":"descriptors/repository_git_diff/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_git_diff/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_git_diff/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_git_diff/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>git_diff is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using git_diff configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make git_diff analyze only updated files</li> </ul>"},{"location":"descriptors/repository_git_diff/#example-calls","title":"Example calls","text":"<pre><code>git diff --check\n</code></pre>"},{"location":"descriptors/repository_git_diff/#help-content","title":"Help content","text":"<pre><code>usage: git [-v | --version] [-h | --help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]\n           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=&lt;path&gt;]\n           [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;] [--config-env=&lt;name&gt;=&lt;envvar&gt;]\n           &lt;command&gt; [&lt;args&gt;]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone     Clone a repository into a new directory\n   init      Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add       Add file contents to the index\n   mv        Move or rename a file, a directory, or a symlink\n   restore   Restore working tree files\n   rm        Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect    Use binary search to find the commit that introduced a bug\n   diff      Show changes between commits, commit and working tree, etc\n   grep      Print lines matching a pattern\n   log       Show commit logs\n   show      Show various types of objects\n   status    Show the working tree status\n\ngrow, mark and tweak your common history\n   branch    List, create, or delete branches\n   commit    Record changes to the repository\n   merge     Join two or more development histories together\n   rebase    Reapply commits on top of another base tip\n   reset     Reset current HEAD to the specified state\n   switch    Switch branches\n   tag       Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch     Download objects and refs from another repository\n   pull      Fetch from and integrate with another repository or a local branch\n   push      Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help &lt;command&gt;' or 'git help &lt;concept&gt;'\nto read about a specific subcommand or concept.\nSee 'git help git' for an overview of the system.\n</code></pre>"},{"location":"descriptors/repository_git_diff/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<p>None</p>"},{"location":"descriptors/repository_gitleaks/","title":"gitleaks configuration in MegaLinter","text":""},{"location":"descriptors/repository_gitleaks/#gitleaks","title":"gitleaks","text":""},{"location":"descriptors/repository_gitleaks/#scan-only-pull-request-commits","title":"Scan only Pull Request commits","text":"<p><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make gitleaks analyze only updated files. To analyze only commits on Pull Request, set <code>VALIDATE_ALL_CODEBASE: false</code> together with <code>REPOSITORY_GITLEAKS_PR_COMMITS_SCAN: true</code> (you have to specify it explicitly), but only works for selected platforms: GitHub Actions, Azure Pipelines, GitLab Pipelines* (Merge Requests and External Pull Requests)</p> <ul> <li>* Only GitLab self-managed and GitLab SaaS (Premium and Ultimate) are supported (limitation due to GitLab itself) and Merge result pipelines feature has to be enabled.</li> <li>If MegaLinter with the gitleaks runs on PR on the not listed platform above, then the analysis is performed on the whole repository - default gitleaks behavior (checked-out commits, depends on fetch-depth configuration).<ul> <li>You can still scan only PR commits in your CI/CD platform by setting MegaLinter envs: <code>PULL_REQUEST=true</code>*, <code>REPOSITORY_GITLEAKS_PR_COMMITS_SCAN: true</code>, <code>REPOSITORY_GITLEAKS_PR_SOURCE_SHA</code> with last commit sha from your PR and <code>REPOSITORY_GITLEAKS_PR_TARGET_SHA</code> commit sha from your target branch (for example, <code>main</code> if you do PR to main branch). Example on how to get source commit sha <code>git rev-list -n 1 refs/remotes/origin/&lt;source_branch&gt;</code> and target commit sha <code>git rev-parse refs/remotes/origin/&lt;target_branch&gt;</code><ul> <li>* <code>PULL_REQUEST</code> environment variable must be set to <code>true</code> only on Pull Requests, so you must calculate the value in your pipeline and pass the outcome.</li> </ul> </li> </ul> </li> <li>PR commits scan feature, if applicable, will override your <code>--log-opts</code> argument if you used it in the <code>REPOSITORY_GITLEAKS_ARGUMENTS</code>.</li> </ul>"},{"location":"descriptors/repository_gitleaks/#azure-pipelines-environment-variables-on-pull-requests","title":"Azure Pipelines environment variables on Pull Requests","text":"<p>In the case of Azure Pipelines when running in a Docker container, we have to explicitly pass some environment variables:</p> <pre><code>  docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\\n      -e SYSTEM_PULLREQUEST_SOURCECOMMITID=$(System.PullRequest.SourceCommitId) \\\n      -e SYSTEM_PULLREQUEST_TARGETBRANCH=$(System.PullRequest.TargetBranch) \\\n      -e BUILD_REASON=$(Build.Reason) \\\n      oxsecurity/megalinter:v8\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#repository-checkout-on-pull-requests","title":"Repository checkout on Pull Requests","text":"<p>To scan only PR commits, the shallow fetch for a repository checkout has to be 0. Below is an example configuration for supported platforms:</p>"},{"location":"descriptors/repository_gitleaks/#github-actions","title":"GitHub Actions","text":"<pre><code>- uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#azure-pipelines","title":"Azure Pipelines","text":"<pre><code>- checkout: self\n  fetchDepth: 0\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#gitlab-pipelines","title":"GitLab Pipelines","text":"<pre><code>variables:\n  GIT_DEPTH: 0\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#git","title":"Git","text":"<pre><code>git fetch --depth=0\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#gitleaks-documentation","title":"gitleaks documentation","text":"<ul> <li>Version in MegaLinter: 8.25.1</li> <li>Visit Official Web Site</li> <li>See How to configure gitleaks rules<ul> <li>If custom <code>.gitleaks.toml</code> config file isn't found, .gitleaks.toml will be used</li> </ul> </li> <li>See How to disable gitleaks rules in files</li> <li>See How to ignore files and directories with gitleaks</li> </ul>"},{"location":"descriptors/repository_gitleaks/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable gitleaks by adding <code>REPOSITORY_GITLEAKS</code> in ENABLE_LINTERS variable</li> <li>Disable gitleaks by adding <code>REPOSITORY_GITLEAKS</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_GITLEAKS_PR_COMMITS_SCAN Scan only commits in the current Pull Request/Merge Request <code>false</code> REPOSITORY_GITLEAKS_PR_SOURCE_SHA Source commit SHA of the Pull Request/Merge Request `` REPOSITORY_GITLEAKS_PR_TARGET_SHA Target commit SHA of the Pull Request/Merge Request `` REPOSITORY_GITLEAKS_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_GITLEAKS_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_GITLEAKS_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_GITLEAKS_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GITLEAKS_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GITLEAKS_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_GITLEAKS and its pre/post commands None REPOSITORY_GITLEAKS_CONFIG_FILE gitleaks configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.gitleaks.toml</code> REPOSITORY_GITLEAKS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_GITLEAKS_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_GITLEAKS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_GITLEAKS_CLI_EXECUTABLE Override CLI executable <code>['gitleaks']</code>"},{"location":"descriptors/repository_gitleaks/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_gitleaks/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_gitleaks/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_gitleaks/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>gitleaks is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using gitleaks configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make gitleaks analyze only updated files</li> </ul>"},{"location":"descriptors/repository_gitleaks/#example-calls","title":"Example calls","text":"<pre><code>gitleaks detect --redact --no-git --verbose --source .\n</code></pre> <pre><code>gitleaks detect -c .gitleaks.toml --redact --no-git --verbose --source .\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#help-content","title":"Help content","text":"<pre><code>Gitleaks scans code, past or present, for secrets\n\nUsage:\n  gitleaks [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  dir         scan directories or files for secrets\n  git         scan git repositories for secrets\n  help        Help about any command\n  stdin       detect secrets from stdin\n  version     display gitleaks version\n\nFlags:\n  -b, --baseline-path string          path to baseline with issues that can be ignored\n  -c, --config string                 config file path\n                                      order of precedence:\n                                      1. --config/-c\n                                      2. env var GITLEAKS_CONFIG\n                                      3. env var GITLEAKS_CONFIG_TOML with the file content\n                                      4. (target path)/.gitleaks.toml\n                                      If none of the four options are used, then gitleaks will use the default config\n      --enable-rule strings           only enable specific rules by id\n      --exit-code int                 exit code when leaks have been encountered (default 1)\n  -i, --gitleaks-ignore-path string   path to .gitleaksignore file or folder containing one (default \".\")\n  -h, --help                          help for gitleaks\n      --ignore-gitleaks-allow         ignore gitleaks:allow comments\n  -l, --log-level string              log level (trace, debug, info, warn, error, fatal) (default \"info\")\n      --max-decode-depth int          allow recursive decoding up to this depth (default \"0\", no decoding is done)\n      --max-target-megabytes int      files larger than this will be skipped\n      --no-banner                     suppress banner\n      --no-color                      turn off color for verbose output\n      --redact uint[=100]             redact secrets from logs and stdout. To redact only parts of the secret just apply a percent value from 0..100. For example --redact=20 (default 100%)\n  -f, --report-format string          output format (json, csv, junit, sarif, template)\n  -r, --report-path string            report file\n      --report-template string        template file used to generate the report (implies --report-format=template)\n  -v, --verbose                       show verbose output from scan\n      --version                       version for gitleaks\n\nUse \"gitleaks [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/repository_gitleaks/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=zricethezav/gitleaks\nARG REPOSITORY_GITLEAKS_VERSION=v8.25.1\nFROM zricethezav/gitleaks:${REPOSITORY_GITLEAKS_VERSION} AS gitleaks\nCOPY --link --from=gitleaks /usr/bin/gitleaks /usr/bin/\n</code></pre>"},{"location":"descriptors/repository_grype/","title":"grype configuration in MegaLinter","text":""},{"location":"descriptors/repository_grype/#grype-documentation","title":"grype documentation","text":"<ul> <li>Version in MegaLinter: 0.91.2</li> <li>Visit Official Web Site</li> <li>See How to configure grype rules<ul> <li>If custom <code>.grype.yaml</code> config file isn't found, .grype.yaml will be used</li> </ul> </li> <li>See Index of problems detected by grype</li> </ul>"},{"location":"descriptors/repository_grype/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable grype by adding <code>REPOSITORY_GRYPE</code> in ENABLE_LINTERS variable</li> <li>Disable grype by adding <code>REPOSITORY_GRYPE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_GRYPE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_GRYPE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_GRYPE_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_GRYPE_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GRYPE_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GRYPE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_GRYPE and its pre/post commands None REPOSITORY_GRYPE_CONFIG_FILE grype configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.grype.yaml</code> REPOSITORY_GRYPE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_GRYPE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_GRYPE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_GRYPE_CLI_EXECUTABLE Override CLI executable <code>['grype']</code>"},{"location":"descriptors/repository_grype/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_grype/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_grype/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_grype/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>grype is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using grype configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make grype analyze only updated files</li> </ul>"},{"location":"descriptors/repository_grype/#example-calls","title":"Example calls","text":"<pre><code>grype dir:.\n</code></pre>"},{"location":"descriptors/repository_grype/#help-content","title":"Help content","text":"<pre><code>A vulnerability scanner for container images, filesystems, and SBOMs.\n\nSupports the following image sources:\n    grype yourrepo/yourimage:tag             defaults to using images from a Docker daemon\n    grype path/to/yourproject                a Docker tar, OCI tar, OCI directory, SIF container, or generic filesystem directory\n\nYou can also explicitly specify the scheme to use:\n    grype podman:yourrepo/yourimage:tag          explicitly use the Podman daemon\n    grype docker:yourrepo/yourimage:tag          explicitly use the Docker daemon\n    grype docker-archive:path/to/yourimage.tar   use a tarball from disk for archives created from \"docker save\"\n    grype oci-archive:path/to/yourimage.tar      use a tarball from disk for OCI archives (from Podman or otherwise)\n    grype oci-dir:path/to/yourimage              read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)\n    grype singularity:path/to/yourimage.sif      read directly from a Singularity Image Format (SIF) container on disk\n    grype dir:path/to/yourproject                read directly from a path on disk (any directory)\n    grype file:path/to/yourfile                  read directly from a file on disk\n    grype sbom:path/to/syft.json                 read Syft JSON from path on disk\n    grype registry:yourrepo/yourimage:tag        pull image directly from a registry (no container runtime required)\n    grype purl:path/to/purl/file                 read a newline separated file of package URLs from a path on disk\n    grype PURL                                   read a single package PURL directly (e.g. pkg:apk/openssl@3.2.1?distro=alpine-3.20.3)\n\nYou can also pipe in Syft JSON directly:\n  syft yourimage:tag -o json | grype\n\nUsage:\n  grype [IMAGE] [flags]\n  grype [command]\n\nAvailable Commands:\n  completion  Generate a shell completion for Grype (listing local docker images)\n  config      show the grype configuration\n  db          vulnerability database operations\n  explain     Ask grype to explain a set of findings\n  help        Help about any command\n  version     show version information\n\nFlags:\n      --add-cpes-if-none       generate CPEs for packages with no CPE data\n      --by-cve                 orient results by CVE instead of the original vulnerability ID when possible\n  -c, --config stringArray     grype configuration file(s) to use\n      --distro string          distro to match against in the format: &lt;distro&gt;:&lt;version&gt;\n      --exclude stringArray    exclude paths from being scanned using a glob expression\n  -f, --fail-on string         set the return code to 1 if a vulnerability is found with a severity &gt;= the given severity, options=[negligible low medium high critical]\n      --file string            file to write the default report output to (default is STDOUT)\n  -h, --help                   help for grype\n      --ignore-states string   ignore matches for vulnerabilities with specified comma separated fix states, options=[fixed not-fixed unknown wont-fix]\n      --name string            set the name of the target being analyzed\n      --only-fixed             ignore matches for vulnerabilities that are not fixed\n      --only-notfixed          ignore matches for vulnerabilities that are fixed\n  -o, --output stringArray     report output formatter, formats=[json table cyclonedx cyclonedx-json sarif template], deprecated formats=[embedded-cyclonedx-vex-json embedded-cyclonedx-vex-xml]\n      --platform string        an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux')\n      --profile stringArray    configuration profiles to use\n  -q, --quiet                  suppress all logging output\n  -s, --scope string           selection of layers to analyze, options=[squashed all-layers] (default \"squashed\")\n      --show-suppressed        show suppressed/ignored vulnerabilities in the output (only supported with table output format)\n  -t, --template string        specify the path to a Go template file (requires 'template' output to be selected)\n  -v, --verbose count          increase verbosity (-v = info, -vv = debug)\n      --version                version for grype\n      --vex stringArray        a list of VEX documents to consider when producing scanning results\n\nUse \"grype [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/repository_grype/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=anchore/grype\nARG REPOSITORY_GRYPE_VERSION=0.91.2\nRUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/refs/tags/v${REPOSITORY_GRYPE_VERSION}/install.sh | sh -s -- -b /usr/local/bin\n</code></pre>"},{"location":"descriptors/repository_kics/","title":"kics configuration in MegaLinter","text":""},{"location":"descriptors/repository_kics/#kics-documentation","title":"kics documentation","text":"<ul> <li>Version in MegaLinter: 2.1.7</li> <li>Visit Official Web Site</li> <li>See How to configure kics rules</li> <li>See How to disable kics rules in files</li> <li>See Index of problems detected by kics</li> </ul>"},{"location":"descriptors/repository_kics/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable kics by adding <code>REPOSITORY_KICS</code> in ENABLE_LINTERS variable</li> <li>Disable kics by adding <code>REPOSITORY_KICS</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_KICS_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_KICS_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_KICS_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_KICS_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_KICS_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_KICS_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_KICS and its pre/post commands None REPOSITORY_KICS_CONFIG_FILE kics configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>kics.config</code> REPOSITORY_KICS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_KICS_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_KICS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_KICS_CLI_EXECUTABLE Override CLI executable <code>['kics']</code>"},{"location":"descriptors/repository_kics/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 security Optimized for security 24 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_kics/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_kics/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_kics/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>kics is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using kics configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make kics analyze only updated files</li> </ul>"},{"location":"descriptors/repository_kics/#example-calls","title":"Example calls","text":"<pre><code>kics scan --path .\n</code></pre>"},{"location":"descriptors/repository_kics/#help-content","title":"Help content","text":"<pre><code>Keeping Infrastructure as Code Secure\n\nUsage:\n  kics [command]\n\nAvailable Commands:\n  analyze        Determines the detected platforms of a certain project\n  generate-id    Generates uuid for query\n  help           Help about any command\n  list-platforms List supported platforms\n  remediate      Auto remediates the project\n  scan           Executes a scan analysis\n  version        Displays the current version\n\nFlags:\n      --ci                  display only log messages to CLI output (mutually exclusive with silent)\n  -h, --help                help for kics\n  -f, --log-format string   determines log format (pretty,json) (default \"pretty\")\n      --log-level string    determines log level (TRACE,DEBUG,INFO,WARN,ERROR,FATAL) (default \"INFO\")\n      --log-path string     path to generate log file (info.log)\n      --no-color            disable CLI color output\n      --profiling string    enables performance profiler that prints resource consumption metrics in the logs during the execution (CPU, MEM)\n  -s, --silent              silence stdout messages (mutually exclusive with verbose and ci)\n  -v, --verbose             write logs to stdout too (mutually exclusive with silent)\n\nUse \"kics [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/repository_kics/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=checkmarx/kics\nARG REPOSITORY_KICS_VERSION=v2.1.7-alpine\nFROM checkmarx/kics:${REPOSITORY_KICS_VERSION} AS kics\nCOPY --link --from=kics /app/bin/kics /usr/bin/kics\nENV KICS_QUERIES_PATH=/usr/bin/assets/queries KICS_LIBRARIES_PATH=/usr/bin/assets/libraries\nCOPY --from=kics /app/bin/assets /usr/bin/assets\n</code></pre>"},{"location":"descriptors/repository_ls_lint/","title":"ls-lint configuration in MegaLinter","text":""},{"location":"descriptors/repository_ls_lint/#ls-lint-documentation","title":"ls-lint documentation","text":"<ul> <li>Version in MegaLinter: 2.3.0</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by ls-lint</li> </ul>"},{"location":"descriptors/repository_ls_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ls-lint by adding <code>REPOSITORY_LS_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable ls-lint by adding <code>REPOSITORY_LS_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_LS_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_LS_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_LS_LINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_LS_LINT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_LS_LINT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_LS_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_LS_LINT and its pre/post commands None REPOSITORY_LS_LINT_CONFIG_FILE ls-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.ls-lint.yml</code> REPOSITORY_LS_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_LS_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_LS_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_LS_LINT_CLI_EXECUTABLE Override CLI executable <code>['ls-lint']</code>"},{"location":"descriptors/repository_ls_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_ls_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_ls_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.ls-lint.yml</code></li> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_ls_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>ls-lint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using ls-lint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make ls-lint analyze only updated files</li> </ul>"},{"location":"descriptors/repository_ls_lint/#example-calls","title":"Example calls","text":"<pre><code>ls-lint\n</code></pre> <pre><code>ls-lint --workdir src\n</code></pre>"},{"location":"descriptors/repository_ls_lint/#help-content","title":"Help content","text":"<pre><code>ls-lint [options] [file|dir]*\nOptions:\n  -config value\n      ls-lint config file path(s)\n  -debug\n      write debug informations to stdout\n  -error-output-format string\n      use a specific error output format (text, json) (default \"text\")\n  -version\n      prints version information for ls-lint\n  -warn\n      write lint errors to stdout instead of stderr (exit 0)\n  -workdir string\n      change working directory before executing the given subcommand (default \".\")\n</code></pre>"},{"location":"descriptors/repository_ls_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=@ls-lint/ls-lint\nARG NPM_LS_LINT_LS_LINT_VERSION=2.3.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>@ls-lint/ls-lint@2.3.0</li> </ul> </li> </ul>"},{"location":"descriptors/repository_secretlint/","title":"secretlint configuration in MegaLinter","text":""},{"location":"descriptors/repository_secretlint/#secretlint-documentation","title":"secretlint documentation","text":"<ul> <li>Version in MegaLinter: 9.3.2</li> <li>Visit Official Web Site</li> <li>See How to configure secretlint rules<ul> <li>If custom <code>.secretlintrc.json</code> config file isn't found, .secretlintrc.json will be used</li> </ul> </li> <li>See How to ignore files and directories with secretlint<ul> <li>You can define a <code>.secretlintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by secretlint</li> </ul>"},{"location":"descriptors/repository_secretlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable secretlint by adding <code>REPOSITORY_SECRETLINT</code> in ENABLE_LINTERS variable</li> <li>Disable secretlint by adding <code>REPOSITORY_SECRETLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_SECRETLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_SECRETLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_SECRETLINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_SECRETLINT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SECRETLINT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SECRETLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_SECRETLINT and its pre/post commands None REPOSITORY_SECRETLINT_CONFIG_FILE secretlint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.secretlintrc.json</code> REPOSITORY_SECRETLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_SECRETLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_SECRETLINT_CLI_EXECUTABLE Override CLI executable <code>['secretlint']</code>"},{"location":"descriptors/repository_secretlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_secretlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_secretlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_secretlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>secretlint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using secretlint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make secretlint analyze only updated files</li> </ul>"},{"location":"descriptors/repository_secretlint/#example-calls","title":"Example calls","text":"<pre><code>secretlint \"*/**\"\n</code></pre> <pre><code>secretlint --secretlintrc .secretlintrc.json \"**/*\"\n</code></pre>"},{"location":"descriptors/repository_secretlint/#help-content","title":"Help content","text":"<pre><code>\nUsage\n  $ secretlint [file|glob*]\n\nNote\n  supported glob syntax is based on microglob\n  https://github.com/micromatch/micromatch#matching-features\n\nOptions\n  --init             setup config file. Create .secretlintrc.json file from your package.json\n  --format           [String] formatter name. Default: \"stylish\". Available Formatter: checkstyle, compact, jslint-xml, junit, pretty-error, stylish, tap, unix, json, mask-result, table\n  --output           [path:String] output file path that is written of reported result.\n  --no-color         disable ANSI-color of output.\n  --no-terminalLink  disable terminalLink of output.\n  --maskSecrets      enable masking of secret values. replace actual secrets with \"***\".\n  --secretlintrc     [path:String] path to .secretlintrc config file. Default: .secretlintrc.*\n  --secretlintignore [path:String] path to .secretlintignore file. Default: .secretlintignore\n  --stdinFileName    [String] filename to process STDIN content. Some rules depend on filename to check content.\n\nOptions for Developer\n  --profile          Enable performance profile.\n  --secretlintrcJSON [String] a JSON string of .secretlintrc. use JSON string instead of rc file.\n\nExperimental Options\n  --locale            [String] locale tag for translating message. Default: en\n\nExamples\n  $ secretlint ./README.md\n  # glob pattern should be wrapped with double quote\n  $ secretlint \"**/*\"\n  $ secretlint \"source/**/*.ini\"\n  # found secrets and mask the secrets\n  $ secretlint .zsh_history --format=mask-result --output=.zsh_history\n  # lint STDIN content instead of file\n  $ echo \"SECRET CONTENT\" | secretlint --stdinFileName=secret.txt\n\nExit Status\n  Secretlint exits with the following values:\n\n  - 0:\n    - Linting succeeded, no errors found.\n    - Found lint error but --output is specified.\n  - 1:\n    - Linting failed, errors found.\n  - 2:\n    - Unexpected error occurred, fatal error.\n\n</code></pre>"},{"location":"descriptors/repository_secretlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=secretlint\nARG NPM_SECRETLINT_VERSION=9.3.2\n# renovate: datasource=npm depName=@secretlint/secretlint-rule-preset-recommend\nARG NPM_SECRETLINT_SECRETLINT_RULE_PRESET_RECOMMEND_VERSION=9.3.2\n# renovate: datasource=npm depName=@secretlint/secretlint-formatter-sarif\nARG NPM_SECRETLINT_SECRETLINT_FORMATTER_SARIF_VERSION=9.3.2\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>secretlint@9.3.2</li> <li>@secretlint/secretlint-rule-preset-recommend@9.3.2</li> <li>@secretlint/secretlint-formatter-sarif@9.3.2</li> </ul> </li> </ul>"},{"location":"descriptors/repository_semgrep/","title":"semgrep configuration in MegaLinter","text":"<p>To use SemGrep in MegaLinter you must define a list of rulesets to use.</p> <p>Example: <code>REPOSITORY_SEMGREP_RULESETS: [\"p/docker-compose\",\"p/owasp-top-ten\"]</code></p> <p>Exception for standalone and security flavors docker images, that use a list of security rulesets by default.</p>"},{"location":"descriptors/repository_semgrep/#semgrep-documentation","title":"semgrep documentation","text":"<ul> <li>Version in MegaLinter: 3.12</li> <li>Visit Official Web Site</li> <li>See How to configure semgrep rules</li> <li>See How to disable semgrep rules in files</li> <li>See How to ignore files and directories with semgrep<ul> <li>You can define a <code>.semgrepignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by semgrep</li> </ul>"},{"location":"descriptors/repository_semgrep/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable semgrep by adding <code>REPOSITORY_SEMGREP</code> in ENABLE_LINTERS variable</li> <li>Disable semgrep by adding <code>REPOSITORY_SEMGREP</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_SEMGREP_RULESETS List of semgrep rulesets identifiers that you want to enforce <code>auto</code> REPOSITORY_SEMGREP_RULESETS_TYPE MegaLinter semgrep ruleset list preset id . Available values: security `` REPOSITORY_SEMGREP_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_SEMGREP_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_SEMGREP_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_SEMGREP_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SEMGREP_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SEMGREP_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_SEMGREP and its pre/post commands None REPOSITORY_SEMGREP_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_SEMGREP_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_SEMGREP_CLI_EXECUTABLE Override CLI executable <code>['semgrep']</code>"},{"location":"descriptors/repository_semgrep/#ide-integration","title":"IDE Integration","text":"<p>Use semgrep in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode SemGrep"},{"location":"descriptors/repository_semgrep/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_semgrep/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_semgrep/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_semgrep/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>semgrep is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using semgrep configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make semgrep analyze only updated files</li> </ul>"},{"location":"descriptors/repository_semgrep/#example-calls","title":"Example calls","text":"<pre><code>semgrep /tmp/lint\n</code></pre> <pre><code>semgrep \n</code></pre>"},{"location":"descriptors/repository_semgrep/#help-content","title":"Help content","text":"<pre><code>NAME\n       semgrep scan - run semgrep rules on files\n\nSYNOPSIS\n       semgrep scan [OPTION]\u2026 [TARGETS]\u2026\n\nDESCRIPTION\n       Searches TARGET paths for matches to rules or patterns. Defaults to\n       searching entire current working directory.\n\n       To get started quickly, run\n\n       semgrep --config auto .\n\n       This will automatically fetch rules for your project from the Semgrep\n       Registry. NOTE: Using `--config auto` will log in to the Semgrep\n       Registry with your project URL.\n\n       For more information about Semgrep, go to https://semgrep.dev.\n\n       NOTE: By default, Semgrep will report pseudonymous usage metrics to\n       its server if you pull your configuration from the Semgrep registry.\n       To learn more about how and why these metrics are collected, please\n       see https://semgrep.dev/docs/metrics. To modify this behavior, see the\n       --metrics option below.\n\nARGUMENTS\n       TARGETS\n           Files or folders to be scanned by semgrep.\n\nOPTIONS\n       -a, --autofix\n           Apply autofix patches. WARNING: data loss can occur with this\n           flag. Make sure your files are stored in a version control system.\n           Note that this mode is experimental and not guaranteed to function\n           properly.\n\n       --allow-local-builds\n           Experimental: allow building projects contained in the repository.\n           This allows Semgrep to identify dependencies and dependency\n           relationships when lockfiles are not present or are insufficient.\n           However, building code may inherently require the execution of\n           code contained in the scanned project or in its dependencies,\n           which is a security risk.\n\n       --allow-untrusted-validators\n           Allows running rules with validators from origins other than\n           semgrep.dev. Avoid running rules from origins you don't trust.\n\n       --baseline-commit=VAL (absent SEMGREP_BASELINE_COMMIT env)\n           Only show results that are not found in this commit hash. Aborts\n           run if not currently in a git directory, there are unstaged\n           changes, or given baseline hash doesn't exist.\n\n       -d, --dump-command-for-core\n           &lt;internal, do not use&gt;\n\n       --dataflow-traces\n           Explain how non-local values reach the location of a finding (only\n           affects text and SARIF output).\n\n       --debug\n           All of --verbose, but with additional debugging information.\n\n       --develop\n           Living on the edge.\n\n       --diff-depth=VAL (absent=2)\n           The depth of the Pro (interfile) differential scan, the number of\n           steps (both in the caller and callee sides) from the targets in\n           the call graph tracked by the deep preprocessor. Only applied in\n           differential scan mode. Default to 2.\n\n       --disable-nosem\n           negates --enable-nosem\n\n       --disable-version-check\n           negates --enable-version-check\n\n       --dryrun\n           If --dryrun, does not write autofixes to a file. This will print\n           the changes to the console. This lets you see the changes before\n           you commit to them. Only works with the --autofix flag. Otherwise\n           does nothing.\n\n       --dump-ast\n           If --dump-ast, shows AST of the input file or passed expression\n           and then exit (can use --json).\n\n       --dump-engine-path\n           &lt;internal, do not use&gt;\n\n       -e VAL, --pattern=VAL\n           Code search pattern. See\n           https://semgrep.dev/docs/writing-rules/pattern-syntax for\n           information on pattern features.\n\n       --emacs\n           Output results in Emacs single-line format.\n\n       --emacs-output=VAL\n           Write a copy of the emacs output to a file or post to URL.\n\n       --enable-nosem\n           Enables 'nosem'. Findings will not be reported on lines containing\n           a 'nosem' comment at the end. Enabled by default.\n\n       --enable-version-check (absent SEMGREP_ENABLE_VERSION_CHECK env)\n           Checks Semgrep servers to see if the latest version is run;\n           disabling this may reduce exit time after returning results.\n\n       --error\n           Exit 1 if there are findings. Useful for CI and scripts.\n\n       --exclude=PATTERN\n           Skip any file or directory whose path that matches PATTERN.\n           '--exclude=*.py' will ignore the following: 'foo.py',\n           'src/foo.py', 'foo.py/bar.sh'. '--exclude=tests' will ignore\n           'tests/foo.py' as well as 'a/b/tests/c/foo.py'. Multiple\n           '--exclude' options may be specified. PATTERN is a glob-style\n           pattern that uses the same syntax as gitignore and semgrepignore,\n           which is documented at\n           https://git-scm.com/docs/gitignore#_pattern_format\n\n       --exclude-minified-files\n           Skip minified files. These are files that are &gt; 7% whitespace, or\n           who have a large number of bytes per line. By default minified\n           files are scanned\n\n       --exclude-rule=VAL\n           Skip any rule with the given id. Can add multiple times.\n\n       --experimental\n           Enable experimental features.\n\n       -f VAL, -c VAL, --config=VAL (absent SEMGREP_RULES env)\n           YAML configuration file, directory of YAML files ending in\n           .yml|.yaml, URL of a configuration file, or Semgrep registry entry\n           name. Use --config auto to automatically obtain rules tailored to\n           this project; your project URL will be used to log in to the\n           Semgrep registry. To run multiple rule files simultaneously, use\n           --config before every YAML, URL, or Semgrep registry entry name.\n           For example `semgrep --config p/python --config\n           myrules/myrule.yaml` See\n           https://semgrep.dev/docs/writing-rules/rule-syntax for information\n           on configuration file format.\n\n       --files-with-matches\n           Output only the names of files containing matches. REQUIRES\n           --experimental\n\n       --force-color (absent SEMGREP_FORCE_COLOR env)\n           Always include ANSI color in the output, even if not writing to a\n           TTY; defaults to using the TTY status\n\n       --gitlab-sast\n           Output results in GitLab SAST format.\n\n       --gitlab-sast-output=VAL\n           Write a copy of the GitLab SAST output to a file or post to URL.\n\n       --gitlab-secrets\n           Output results in GitLab Secrets format.\n\n       --gitlab-secrets-output=VAL\n           Write a copy of the GitLab Secrets output to a file or post to\n           URL.\n\n       --historical-secrets\n           Scans git history using Secrets rules.\n\n       --include=PATTERN\n           Specify files or directories that should be scanned by semgrep,\n           excluding other files. This filter is applied after these other\n           filters: '--exclude' options, any filtering done by git (or other\n           SCM), and filtering by '.semgrepignore' files. Multiple\n           '--include' options can be specified. A file path is selected if\n           it matches at least one of the include patterns. PATTERN is a\n           glob-style pattern such as 'foo.*' that must match the path. For\n           example, specifying the language with '-l javascript' might\n           preselect files 'src/foo.jsx' and 'lib/bar.js'. Specifying one of\n           '--include=src', '--include=*.jsx', or '--include=src/foo.*' will\n           restrict the selection to the single file 'src/foo.jsx'. A choice\n           of multiple '--include' patterns can be specified. For example,\n           '--include=foo.* --include=bar.*' will select both 'src/foo.jsx'\n           and 'lib/bar.js'. Glob-style patterns follow the syntax supported\n           by gitignore and semgrepignore, which is documented at\n           https://git-scm.com/docs/gitignore#_pattern_format\n\n       --incremental-output\n           Output results incrementally. REQUIRES --experimental\n\n       --interfile-timeout=VAL (absent=0)\n           Maximum time to spend on interfile analysis. If set to 0 will not\n           have time limit. Defaults to 0 s for all CLI scans. For CI scans,\n           it defaults to 3 hours.\n\n       -j VAL, --jobs=VAL (absent=4)\n           Number of subprocesses to use to run checks in parallel. Defaults\n           to the number of cores detected on the system (1 if using --pro).\n\n       --json\n           Output results in Semgrep's JSON format.\n\n       --json-output=VAL\n           Write a copy of the json output to a file or post to URL.\n\n       --junit-xml\n           Output results in JUnit XML format.\n\n       --junit-xml-output=VAL\n           Write a copy of the JUnit XML output to a file or post to URL.\n\n       -l VAL, --lang=VAL\n           Parse pattern and all files in specified language. Must be used\n           with -e/--pattern.\n\n       --legacy\n           Prefer old (legacy) behavior.\n\n       --matching-explanations\n           Add debugging information in the JSON output to trace how\n           different parts of a rule are matched (a.k.a., \"Inspect Rule\" in\n           the Semgrep playground)\n\n       --max-chars-per-line=VAL (absent=160)\n           Maximum number of characters to show per line.\n\n       --max-lines-per-finding=VAL (absent=10)\n           Maximum number of lines of code that will be shown for each match\n           before trimming (set to 0 for unlimited).\n\n       --max-log-list-entries=VAL (absent=100)\n           Maximum number of entries that will be shown in the log (e.g.,\n           list of rule ids, list of skipped files). A zero or negative value\n           disables this filter. Defaults to 100\n\n       --max-memory=VAL (absent=0)\n           Maximum system memory in MiB to use during the interfile\n           pre-processing phase, or when running a rule on a single file. If\n           set to 0, will not have memory limit. Defaults to 0. For CI scans\n           that use the Pro Engine, defaults to 5000 MiB.\n\n       --max-target-bytes=VAL (absent=1000000)\n           Maximum size for a file to be scanned by Semgrep, e.g '1.5MB'. Any\n           input program larger than this will be ignored. A zero or negative\n           value disables this filter. Defaults to 1000000 bytes\n\n       --metrics=VAL (absent=auto or SEMGREP_SEND_METRICS env)\n           Configures how usage metrics are sent to the Semgrep server. If\n           'auto', metrics are sent whenever the --config value pulls from\n           the Semgrep server. If 'on', metrics are always sent. If 'off',\n           metrics are disabled altogether and not sent. If absent, the\n           SEMGREP_SEND_METRICS environment variable value will be used. If\n           no environment variable, defaults to 'auto'.\n\n       --no-autofix\n           negates -a/--autofix\n\n       --no-dryrun\n           negates --dryrun\n\n       --no-error\n           negates --error\n\n       --no-exclude-minified-files\n           negates --exclude-minified-files\n\n       --no-force-color\n           negates --force-color\n\n       --no-git-ignore\n           negates --use-git-ignore\n\n       --no-rewrite-rule-ids\n           negates --rewrite-rule-ids\n\n       --no-secrets-validation\n           Disables secret validation.\n\n       --no-semgrepignore-v2\n           negates --semgrepignore-v2\n\n       --no-strict\n           negates --strict\n\n       --no-test-ignore-todo\n           negates --test-ignore-todo\n\n       --no-time\n           negates --time\n\n       --no-trace\n           negates --trace\n\n       --novcs\n           Assume the project is not managed by a version control system\n           (VCS), even if the project appears to be under version control\n           based on the presence of files such as '.git' or similar. REQUIRES\n           --experimental or --semgrepignore-v2.\n\n       -o VAL, --output=VAL\n           Save search results to a file or post to URL. Default is to print\n           to stdout.\n\n       --optimizations=VAL (absent=all)\n           Turn on/off optimizations. Default = 'all'. Use 'none' to turn all\n           optimizations off.\n\n       --oss-only\n           Run using only the OSS engine, even if the Semgrep Pro toggle is\n           on. This may still run Pro rules, but only using the OSS features.\n\n       --pro\n           Inter-file analysis and Pro languages (currently Apex, C#, and\n           Elixir. Requires Semgrep Pro Engine. See\n           https://semgrep.dev/products/pro-engine/ for more.\n\n       --pro-intrafile\n           Intra-file inter-procedural taint analysis. Implies\n           --pro-languages. Requires Semgrep Pro Engine. See\n           https://semgrep.dev/products/pro-engine/ for more.\n\n       --pro-languages\n           Enable Pro languages (currently Apex, C#, and Elixir). Requires\n           Semgrep Pro Engine. See https://semgrep.dev/products/pro-engine/\n           for more.\n\n       --pro-path-sensitive\n           Path sensitivity. Implies --pro-intrafile. Requires Semgrep Pro\n           Engine. See https://semgrep.dev/products/pro-engine/ for more.\n\n       --profile\n           &lt;undocumented&gt;\n\n       --project-root=VAL\n           Semgrep normally determines the type of project (git or novcs) and\n           the project root automatically. The project root is then used to\n           locate and use '.gitignore' and '.semgrepignore' files which\n           determine target files that should be ignored by semgrep. This\n           option forces the project root to be a specific folder and assumes\n           a local project without version control (novcs). This option is\n           useful to ensure the '.semgrepignore' file that may exist at the\n           project root is consulted when the scanning root is not the\n           current folder '.'. A valid project root must be a folder (path\n           referencing a directory) whose physical path is a prefix of the\n           physical path of the scanning roots passed on the command line.\n           For example, the command 'semgrep scan --project-root . src' is\n           valid if '.' is '/home/me' and 'src' is a directory or a symbolic\n           link to a '/home/me/sources' directory or a symbolic link to a\n           'sources' directory but not if it is a symbolic link to a\n           directory '/var/sources' (assuming '/var' is not a symbolic link).\n           REQUIRES --experimental or --semgrepignore-v2.\n\n       -q, --quiet\n           Only output findings.\n\n       --remote=VAL\n           Remote will quickly check out and scan a remote git repository of\n           the format \"http[s]://&lt;WEBSITE&gt;/.../&lt;REPO&gt;.git\". Must be run with\n           --pro. Incompatible with --project-root. Note this requires an\n           empty CWD as this command will clone the repository into the CWD.\n           REQUIRES --experimental\n\n       --replacement=VAL\n           An autofix expression that will be applied to any matches found\n           with --pattern. Only valid with a command-line specified pattern.\n\n       --rewrite-rule-ids\n           Rewrite rule ids when they appear in nested sub-directories (Rule\n           'foo' in test/rules.yaml will be renamed 'test.foo').\n\n       --sarif\n           Output results in SARIF format.\n\n       --sarif-output=VAL\n           Write a copy of the SARIF output to a file or post to URL.\n\n       --scan-unknown-extensions\n           If true, target files specified directly on the command line will\n           bypass normal language detection. They will be analyzed according\n           to the value of --lang if applicable, or otherwise with the\n           analyzers/languages specified in the Semgrep rule(s) regardless of\n           file extension or file type. This setting doesn't apply to target\n           files discovered by scanning folders. Defaults to false.\n\n       --secrets\n           Run Semgrep Secrets product, including support for secret\n           validation. Requires access to Secrets, contact\n           support@semgrep.com for more information.\n\n       --semgrepignore-v2\n           '--semgrepignore-v2' forces the use of the newer Semgrepignore v2\n           implementation for discovering and filtering target files.\n           Conversely, '--no-semgrepignore-v2' is the deprecated option that\n           forces the use of the legacy Semgrepignore v1.\n           '--semgrepignore-v2' is the default for Semgrep Community Edition,\n           and for now '--no-semgrepignore-v2' is still the default when\n           using the '--pro*' options.\n\n       --severity=VAL\n           Report findings only from rules matching the supplied severity\n           level. By default all applicable rules are run. Can add multiple\n           times. Each should be one of INFO, WARNING, or ERROR.\n\n       --show-supported-languages\n           Print a list of languages that are currently supported by Semgrep.\n\n       --skip-unknown-extensions\n           negates --scan-unknown-extensions\n\n       --strict\n           Return a nonzero exit code when WARN level errors are encountered.\n           Fails early if invalid configuration files are present. Defaults\n           to --no-strict.\n\n       --test\n           Run test suite.\n\n       --test-ignore-todo\n           If --test-ignore-todo, ignores rules marked as '#todoruleid:' in\n           test files.\n\n       --text\n           Output results in text format.\n\n       --text-output=VAL\n           Write a copy of the text output to a file or post to URL.\n\n       --time\n           Include a timing summary with the results. If output format is\n           json, provides times for each pair (rule, target). This feature is\n           meant for internal use and may be changed or removed without\n           warning. At the current moment, --trace is better supported.\n\n       --timeout=VAL (absent=5.)\n           Maximum time to spend running a rule on a single file in seconds.\n           If set to 0 will not have time limit. Defaults to 5.0 s.\n\n       --timeout-threshold=VAL (absent=3)\n           Maximum number of rules that can time out on a file before the\n           file is skipped. If set to 0 will not have limit. Defaults to 3.\n\n       --trace\n           Record traces from Semgrep scans to help debugging. This feature\n           is meant for internal use and may be changed or removed without\n           warning.\n\n       --trace-endpoint=VAL (absent SEMGREP_OTEL_ENDPOINT env)\n           Endpoint to send OpenTelemetry traces to, if `--trace` is present.\n           The value may be `semgrep-prod` (default), `semgrep-dev`,\n           `semgrep-local`, or any valid URL. This feature is meant for\n           internal use and may be changed or removed without warning.\n\n       --use-git-ignore\n           '--use-git-ignore' is Semgrep's default behavior. Under the\n           default behavior, Git-tracked files are not excluded by Gitignore\n           rules and only untracked files are excluded by Gitignore rules.\n           '--no-git-ignore' causes semgrep to not call 'git' and not consult\n           '.gitignore' files to determine which files semgrep should scan.\n           As a result of '--no-git-ignore', gitignored files and Git\n           submodules will be scanned unless excluded by other means\n           ('.semgrepignore', '--exclude', etc.). This flag has no effect if\n           the scanning root is not in a Git repository.\n\n       -v, --verbose\n           Show more details about what rules are running, which files failed\n           to parse, etc.\n\n       --validate\n           Validate configuration file(s). This will check YAML files for\n           errors and run 'p/semgrep-rule-lints' on the YAML files. No search\n           is performed.\n\n       --version\n           Show the version and exit.\n\n       --vim\n           Output results in vim single-line format.\n\n       --vim-output=VAL\n           Write a copy of the vim output to a file or post to URL.\n\n       --x-ignore-semgrepignore-files\n           [INTERNAL] Ignore all '.semgrepignore' files found in the project\n           tree for the purpose of selecting target files to be scanned by\n           semgrep. Other filters may still apply. THIS OPTION IS NOT PART OF\n           THE SEMGREP API AND MAY CHANGE OR DISAPPEAR WITHOUT NOTICE.\n\n       --x-ls\n           [INTERNAL] List the selected target files before any rule-specific\n           or language-specific filtering. Then exit. The default output\n           format is one path per line. THIS OPTION IS NOT PART OF THE\n           SEMGREP API AND MAY CHANGE OR DISAPPEAR WITHOUT NOTICE.\n\n       --x-ls-long\n           [INTERNAL] Show selected targets and skipped targets with reasons\n           why they were skipped, using an unspecified output format. Implies\n           --x-ls. THIS OPTION IS NOT PART OF THE SEMGREP API AND MAY CHANGE\n           OR DISAPPEAR WITHOUT NOTICE.\n\n       --x-tr\n           &lt;internal, do not use&gt;\n\nCOMMON OPTIONS\n       --help[=FMT] (default=auto)\n           Show this help in format FMT. The value FMT must be one of auto,\n           pager, groff or plain. With auto, the format is pager or plain\n           whenever the TERM env var is dumb or undefined.\n\nEXIT STATUS\n       semgrep scan exits with:\n\n       0   on success.\n\n       123 on indiscriminate errors reported on standard error.\n\n       124 on command line parsing errors.\n\n       125 on unexpected internal errors (bugs).\n\nENVIRONMENT\n       These environment variables affect the execution of semgrep scan:\n\n       SEMGREP_BASELINE_COMMIT\n           See option --baseline-commit.\n\n       SEMGREP_ENABLE_VERSION_CHECK\n           See option --enable-version-check.\n\n       SEMGREP_FORCE_COLOR\n           See option --force-color.\n\n       SEMGREP_OTEL_ENDPOINT\n           See option --trace-endpoint.\n\n       SEMGREP_RULES\n           See option --config.\n\n       SEMGREP_SEND_METRICS\n           See option --metrics.\n\nAUTHORS\n       Semgrep Inc. &lt;support@semgrep.com&gt;\n\nBUGS\n       If you encounter an issue, please report it at\n       https://github.com/semgrep/semgrep/issues\n\n</code></pre>"},{"location":"descriptors/repository_semgrep/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=semgrep\nARG PIP_SEMGREP_VERSION=1.116.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>semgrep==1.116.0</li> </ul> </li> </ul>"},{"location":"descriptors/repository_syft/","title":"syft configuration in MegaLinter","text":"<p>Builds a SBOM (Software Build Of Materials) from your repository</p>"},{"location":"descriptors/repository_syft/#syft-documentation","title":"syft documentation","text":"<ul> <li>Version in MegaLinter: 1.23.1</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/repository_syft/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable syft by adding <code>REPOSITORY_SYFT</code> in ENABLE_LINTERS variable</li> <li>Disable syft by adding <code>REPOSITORY_SYFT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_SYFT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_SYFT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_SYFT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_SYFT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SYFT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SYFT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_SYFT and its pre/post commands None REPOSITORY_SYFT_CONFIG_FILE syft configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.syft.yaml</code> REPOSITORY_SYFT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_SYFT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_SYFT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_SYFT_CLI_EXECUTABLE Override CLI executable <code>['syft']</code>"},{"location":"descriptors/repository_syft/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_syft/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_syft/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_syft/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>syft is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using syft configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make syft analyze only updated files</li> </ul>"},{"location":"descriptors/repository_syft/#example-calls","title":"Example calls","text":"<pre><code>syft /tmp/lint\n</code></pre>"},{"location":"descriptors/repository_syft/#help-content","title":"Help content","text":"<pre><code>Generate a packaged-based Software Bill Of Materials (SBOM) from container images and filesystems\n\nUsage:\n  syft [SOURCE] [flags]\n  syft [command]\n\nExamples:\n  syft scan alpine:latest                                a summary of discovered packages\n  syft scan alpine:latest -o json                        show all possible cataloging details\n  syft scan alpine:latest -o cyclonedx                   show a CycloneDX formatted SBOM\n  syft scan alpine:latest -o cyclonedx-json              show a CycloneDX JSON formatted SBOM\n  syft scan alpine:latest -o spdx                        show a SPDX 2.3 Tag-Value formatted SBOM\n  syft scan alpine:latest -o spdx@2.2                    show a SPDX 2.2 Tag-Value formatted SBOM\n  syft scan alpine:latest -o spdx-json                   show a SPDX 2.3 JSON formatted SBOM\n  syft scan alpine:latest -o spdx-json@2.2               show a SPDX 2.2 JSON formatted SBOM\n  syft scan alpine:latest -vv                            show verbose debug information\n  syft scan alpine:latest -o template -t my_format.tmpl  show a SBOM formatted according to given template file\n\n  Supports the following image sources:\n    syft scan yourrepo/yourimage:tag     defaults to using images from a Docker daemon. If Docker is not present, the image is pulled directly from the registry.\n    syft scan path/to/a/file/or/dir      a Docker tar, OCI tar, OCI directory, SIF container, or generic filesystem directory\n\n  You can also explicitly specify the scheme to use:\n    syft scan docker:yourrepo/yourimage:tag            explicitly use the Docker daemon\n    syft scan podman:yourrepo/yourimage:tag            explicitly use the Podman daemon\n    syft scan registry:yourrepo/yourimage:tag          pull image directly from a registry (no container runtime required)\n    syft scan docker-archive:path/to/yourimage.tar     use a tarball from disk for archives created from \"docker save\"\n    syft scan oci-archive:path/to/yourimage.tar        use a tarball from disk for OCI archives (from Skopeo or otherwise)\n    syft scan oci-dir:path/to/yourimage                read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)\n    syft scan singularity:path/to/yourimage.sif        read directly from a Singularity Image Format (SIF) container on disk\n    syft scan dir:path/to/yourproject                  read directly from a path on disk (any directory)\n    syft scan file:path/to/yourproject/file            read directly from a path on disk (any single file)\n\n\nAvailable Commands:\n  attest      Generate an SBOM as an attestation for the given [SOURCE] container image\n  cataloger   Show available catalogers and configuration\n  completion  Generate the autocompletion script for the specified shell\n  config      show the syft configuration\n  convert     Convert between SBOM formats\n  help        Help about any command\n  login       Log in to a registry\n  scan        Generate an SBOM\n  version     show version information\n\nFlags:\n      --base-path string                          base directory for scanning, no links will be followed above this directory, and all paths will be reported relative to this directory\n  -c, --config stringArray                        syft configuration file(s) to use\n      --enrich stringArray                        enable package data enrichment from local and online sources (options: all, golang, java, javascript)\n      --exclude stringArray                       exclude paths from being scanned using a glob expression\n      --file string                               file to write the default report output to (default is STDOUT) (DEPRECATED: use: --output FORMAT=PATH)\n      --from stringArray                          specify the source behavior to use (e.g. docker, registry, oci-dir, ...)\n  -h, --help                                      help for syft\n  -o, --output stringArray                        report output format (&lt;format&gt;=&lt;file&gt; to output to a file), formats=[cyclonedx-json cyclonedx-xml github-json spdx-json spdx-tag-value syft-json syft-table syft-text template] (default [syft-table])\n      --override-default-catalogers stringArray   set the base set of catalogers to use (defaults to 'image' or 'directory' depending on the scan source)\n      --parallelism int                           number of cataloger workers to run in parallel\n      --platform string                           an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux')\n      --profile stringArray                       configuration profiles to use\n  -q, --quiet                                     suppress all logging output\n  -s, --scope string                              selection of layers to catalog, options=[squashed all-layers] (default \"squashed\")\n      --select-catalogers stringArray             add, remove, and filter the catalogers to be used\n      --source-name string                        set the name of the target being analyzed\n      --source-version string                     set the version of the target being analyzed\n  -t, --template string                           specify the path to a Go template file\n  -v, --verbose count                             increase verbosity (-v = info, -vv = debug)\n      --version                                   version for syft\n\nUse \"syft [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/repository_syft/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=anchore/syft\nARG REPOSITORY_SYFT_VERSION=1.23.1\nRUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/refs/tags/v${REPOSITORY_SYFT_VERSION}/install.sh | sh -s -- -b /usr/local/bin\n</code></pre>"},{"location":"descriptors/repository_trivy/","title":"trivy configuration in MegaLinter","text":"<p>You can ignore a list of errors by defining a .trivyignore file</p>"},{"location":"descriptors/repository_trivy/#trivy-documentation","title":"trivy documentation","text":"<ul> <li>Version in MegaLinter: 0.62.0</li> <li>Visit Official Web Site</li> <li>See How to configure trivy rules</li> <li>See How to ignore files and directories with trivy</li> </ul>"},{"location":"descriptors/repository_trivy/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable trivy by adding <code>REPOSITORY_TRIVY</code> in ENABLE_LINTERS variable</li> <li>Disable trivy by adding <code>REPOSITORY_TRIVY</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_TRIVY_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_TRIVY_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_TRIVY_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_TRIVY_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_TRIVY_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_TRIVY_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_TRIVY and its pre/post commands None REPOSITORY_TRIVY_CONFIG_FILE trivy configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>trivy.yaml</code> REPOSITORY_TRIVY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_TRIVY_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_TRIVY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_TRIVY_CLI_EXECUTABLE Override CLI executable <code>['trivy']</code>"},{"location":"descriptors/repository_trivy/#ide-integration","title":"IDE Integration","text":"<p>Use trivy in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode Trivy"},{"location":"descriptors/repository_trivy/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_trivy/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_trivy/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_trivy/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>trivy is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using trivy configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make trivy analyze only updated files</li> </ul>"},{"location":"descriptors/repository_trivy/#example-calls","title":"Example calls","text":"<pre><code>trivy fs --scanners vuln,misconfig .\n</code></pre>"},{"location":"descriptors/repository_trivy/#help-content","title":"Help content","text":"<pre><code>Scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues and hard-coded secrets\n\nUsage:\n  trivy [global flags] command [flags] target\n  trivy [command]\n\nExamples:\n  # Scan a container image\n  $ trivy image python:3.4-alpine\n\n  # Scan a container image from a tar archive\n  $ trivy image --input ruby-3.1.tar\n\n  # Scan local filesystem\n  $ trivy fs .\n\n  # Run in server mode\n  $ trivy server\n\nScanning Commands\n  config      Scan config files for misconfigurations\n  filesystem  Scan local filesystem\n  image       Scan a container image\n  kubernetes  [EXPERIMENTAL] Scan kubernetes cluster\n  repository  Scan a repository\n  rootfs      Scan rootfs\n  sbom        Scan SBOM for vulnerabilities and licenses\n  vm          [EXPERIMENTAL] Scan a virtual machine image\n\nManagement Commands\n  module      Manage modules\n  plugin      Manage plugins\n  vex         [EXPERIMENTAL] VEX utilities\n\nUtility Commands\n  clean       Remove cached files\n  completion  Generate the autocompletion script for the specified shell\n  convert     Convert Trivy JSON report into a different format\n  help        Help about any command\n  registry    Manage registry authentication\n  server      Server mode\n  version     Print the version\n\nFlags:\n      --cache-dir string          cache directory (default \"/root/.cache/trivy\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n  -f, --format string             version format (json)\n      --generate-default-config   write the default config to trivy-default.yaml\n  -h, --help                      help for trivy\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n\nUse \"trivy [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/repository_trivy/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=aquasecurity/trivy\nARG REPOSITORY_TRIVY_VERSION=0.62.0\nRUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \"v${REPOSITORY_TRIVY_VERSION}\" \\\n    &amp;&amp; (trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress)\n\n</code></pre>"},{"location":"descriptors/repository_trivy_sbom/","title":"trivy-sbom configuration in MegaLinter","text":"<p>Generates SBOM (Software Bill Of Material) using Trivy</p>"},{"location":"descriptors/repository_trivy_sbom/#trivy-sbom-documentation","title":"trivy-sbom documentation","text":"<ul> <li>Version in MegaLinter: 0.62.0</li> <li>Visit Official Web Site</li> <li>See How to configure trivy-sbom rules</li> <li>See How to ignore files and directories with trivy-sbom</li> </ul>"},{"location":"descriptors/repository_trivy_sbom/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable trivy-sbom by adding <code>REPOSITORY_TRIVY_SBOM</code> in ENABLE_LINTERS variable</li> <li>Disable trivy-sbom by adding <code>REPOSITORY_TRIVY_SBOM</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_TRIVY_SBOM_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_TRIVY_SBOM_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_TRIVY_SBOM_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_TRIVY_SBOM_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_TRIVY_SBOM_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_TRIVY_SBOM_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_TRIVY_SBOM and its pre/post commands None REPOSITORY_TRIVY_SBOM_CONFIG_FILE trivy-sbom configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>trivy-sbom.yaml</code> REPOSITORY_TRIVY_SBOM_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_TRIVY_SBOM_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_TRIVY_SBOM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_TRIVY_SBOM_CLI_EXECUTABLE Override CLI executable <code>['trivy']</code>"},{"location":"descriptors/repository_trivy_sbom/#ide-integration","title":"IDE Integration","text":"<p>Use trivy-sbom in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code VSCode Trivy"},{"location":"descriptors/repository_trivy_sbom/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_trivy_sbom/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_trivy_sbom/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_trivy_sbom/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>trivy-sbom is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using trivy-sbom configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make trivy-sbom analyze only updated files</li> </ul>"},{"location":"descriptors/repository_trivy_sbom/#example-calls","title":"Example calls","text":"<pre><code>trivy fs --format cyclonedx .\n</code></pre> <pre><code>trivy fs --config trivy-sbom.yaml --format cyclonedx .\n</code></pre>"},{"location":"descriptors/repository_trivy_sbom/#help-content","title":"Help content","text":"<pre><code>Scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues and hard-coded secrets\n\nUsage:\n  trivy [global flags] command [flags] target\n  trivy [command]\n\nExamples:\n  # Scan a container image\n  $ trivy image python:3.4-alpine\n\n  # Scan a container image from a tar archive\n  $ trivy image --input ruby-3.1.tar\n\n  # Scan local filesystem\n  $ trivy fs .\n\n  # Run in server mode\n  $ trivy server\n\nScanning Commands\n  config      Scan config files for misconfigurations\n  filesystem  Scan local filesystem\n  image       Scan a container image\n  kubernetes  [EXPERIMENTAL] Scan kubernetes cluster\n  repository  Scan a repository\n  rootfs      Scan rootfs\n  sbom        Scan SBOM for vulnerabilities and licenses\n  vm          [EXPERIMENTAL] Scan a virtual machine image\n\nManagement Commands\n  module      Manage modules\n  plugin      Manage plugins\n  vex         [EXPERIMENTAL] VEX utilities\n\nUtility Commands\n  clean       Remove cached files\n  completion  Generate the autocompletion script for the specified shell\n  convert     Convert Trivy JSON report into a different format\n  help        Help about any command\n  registry    Manage registry authentication\n  server      Server mode\n  version     Print the version\n\nFlags:\n      --cache-dir string          cache directory (default \"/root/.cache/trivy\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n  -f, --format string             version format (json)\n      --generate-default-config   write the default config to trivy-default.yaml\n  -h, --help                      help for trivy\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n\nUse \"trivy [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/repository_trivy_sbom/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=github-tags depName=aquasecurity/trivy\nARG REPOSITORY_TRIVY_SBOM_VERSION=0.62.0\nRUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \"v${REPOSITORY_TRIVY_SBOM_VERSION}\" \\\n    &amp;&amp; (trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress || trivy image --download-db-only --no-progress)\n\n</code></pre>"},{"location":"descriptors/repository_trufflehog/","title":"trufflehog configuration in MegaLinter","text":""},{"location":"descriptors/repository_trufflehog/#trufflehog-documentation","title":"trufflehog documentation","text":"<ul> <li>Version in MegaLinter: 3.88.27</li> <li>Visit Official Web Site</li> <li>See How to configure trufflehog rules</li> </ul>"},{"location":"descriptors/repository_trufflehog/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable trufflehog by adding <code>REPOSITORY_TRUFFLEHOG</code> in ENABLE_LINTERS variable</li> <li>Disable trufflehog by adding <code>REPOSITORY_TRUFFLEHOG</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value REPOSITORY_TRUFFLEHOG_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> REPOSITORY_TRUFFLEHOG_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> REPOSITORY_TRUFFLEHOG_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> REPOSITORY_TRUFFLEHOG_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_TRUFFLEHOG_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_TRUFFLEHOG_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling REPOSITORY_TRUFFLEHOG and its pre/post commands None REPOSITORY_TRUFFLEHOG_CONFIG_FILE trufflehog configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.trufflehog.yml</code> REPOSITORY_TRUFFLEHOG_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_TRUFFLEHOG_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> REPOSITORY_TRUFFLEHOG_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> REPOSITORY_TRUFFLEHOG_CLI_EXECUTABLE Override CLI executable <code>['trufflehog']</code>"},{"location":"descriptors/repository_trufflehog/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 security Optimized for security 24 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/repository_trufflehog/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/repository_trufflehog/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/repository_trufflehog/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>trufflehog is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using trufflehog configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make trufflehog analyze only updated files</li> </ul>"},{"location":"descriptors/repository_trufflehog/#example-calls","title":"Example calls","text":"<pre><code>trufflehog filesystem .\n</code></pre>"},{"location":"descriptors/repository_trufflehog/#help-content","title":"Help content","text":"<pre><code>usage: TruffleHog [&lt;flags&gt;] &lt;command&gt; [&lt;args&gt; ...]\n\nTruffleHog is a tool for finding credentials.\n\n\nFlags:\n  -h, --[no-]help                Show context-sensitive help (also try\n                                 --help-long and --help-man).\n      --log-level=0              Logging verbosity on a scale of 0 (info) to 5\n                                 (trace). Can be disabled with \"-1\".\n      --[no-]profile             Enables profiling and sets a pprof and fgprof\n                                 server on :18066.\n  -j, --[no-]json                Output in JSON format.\n      --[no-]json-legacy         Use the pre-v3.0 JSON format. Only works with\n                                 git, gitlab, and github sources.\n      --[no-]github-actions      Output in GitHub Actions format.\n      --concurrency=4            Number of concurrent workers.\n      --[no-]no-verification     Don't verify the results.\n      --results=RESULTS          Specifies which type(s) of results to\n                                 output: verified, unknown, unverified,\n                                 filtered_unverified. Defaults to\n                                 verified,unverified,unknown.\n      --[no-]no-color            Disable colorized output\n      --[no-]allow-verification-overlap\n                                 Allow verification of similar credentials\n                                 across detectors\n      --[no-]filter-unverified   Only output first unverified result per\n                                 chunk per detector if there are more than one\n                                 results.\n      --filter-entropy=FILTER-ENTROPY\n                                 Filter unverified results with Shannon entropy.\n                                 Start with 3.0.\n      --config=CONFIG            Path to configuration file.\n      --[no-]print-avg-detector-time\n                                 Print the average time spent on each detector.\n      --[no-]no-update           Don't check for updates.\n      --[no-]fail                Exit with code 183 if results are found.\n      --verifier=VERIFIER ...    Set custom verification endpoints.\n      --[no-]custom-verifiers-only\n                                 Only use custom verification endpoints.\n      --detector-timeout=DETECTOR-TIMEOUT\n                                 Maximum time to spend scanning chunks per\n                                 detector (e.g., 30s).\n      --archive-max-size=ARCHIVE-MAX-SIZE\n                                 Maximum size of archive to scan. (Byte units\n                                 eg. 512B, 2KB, 4MB)\n      --archive-max-depth=ARCHIVE-MAX-DEPTH\n                                 Maximum depth of archive to scan.\n      --archive-timeout=ARCHIVE-TIMEOUT\n                                 Maximum time to spend extracting an archive.\n      --include-detectors=\"all\"  Comma separated list of detector types to\n                                 include. Protobuf name or IDs may be used,\n                                 as well as ranges.\n      --exclude-detectors=EXCLUDE-DETECTORS\n                                 Comma separated list of detector types to\n                                 exclude. Protobuf name or IDs may be used,\n                                 as well as ranges. IDs defined here take\n                                 precedence over the include list.\n      --[no-]no-verification-cache\n                                 Disable verification caching\n      --[no-]force-skip-binaries\n                                 Force skipping binaries.\n      --[no-]force-skip-archives\n                                 Force skipping archives.\n      --[no-]skip-additional-refs\n                                 Skip additional references.\n      --user-agent-suffix=USER-AGENT-SUFFIX\n                                 Suffix to add to User-Agent.\n      --[no-]version             Show application version.\n\nCommands:\nhelp [&lt;command&gt;...]\n    Show help.\n\ngit [&lt;flags&gt;] &lt;uri&gt;\n    Find credentials in git repositories.\n\ngithub [&lt;flags&gt;]\n    Find credentials in GitHub repositories.\n\ngithub-experimental --repo=REPO [&lt;flags&gt;]\n    Run an experimental GitHub scan. Must specify at least one experimental\n    sub-module to run: object-discovery.\n\ngitlab --token=TOKEN [&lt;flags&gt;]\n    Find credentials in GitLab repositories.\n\nfilesystem [&lt;flags&gt;] [&lt;path&gt;...]\n    Find credentials in a filesystem.\n\ns3 [&lt;flags&gt;]\n    Find credentials in S3 buckets.\n\ngcs [&lt;flags&gt;]\n    Find credentials in GCS buckets.\n\nsyslog [&lt;flags&gt;]\n    Scan syslog\n\ncircleci --token=TOKEN\n    Scan CircleCI\n\ndocker --image=IMAGE [&lt;flags&gt;]\n    Scan Docker Image\n\ntravisci --token=TOKEN\n    Scan TravisCI\n\npostman [&lt;flags&gt;]\n    Scan Postman\n\nelasticsearch [&lt;flags&gt;]\n    Scan Elasticsearch\n\njenkins --url=URL [&lt;flags&gt;]\n    Scan Jenkins\n\nhuggingface [&lt;flags&gt;]\n    Find credentials in HuggingFace datasets, models and spaces.\n\nanalyze\n    Analyze API keys for fine-grained permissions information.\n\n\n</code></pre>"},{"location":"descriptors/repository_trufflehog/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=trufflesecurity/trufflehog\nARG REPOSITORY_TRUFFLEHOG_VERSION=3.88.27\nFROM trufflesecurity/trufflehog:${REPOSITORY_TRUFFLEHOG_VERSION} AS trufflehog\nCOPY --link --from=trufflehog /usr/bin/trufflehog /usr/bin/\n</code></pre>"},{"location":"descriptors/rst/","title":"RST linters in MegaLinter","text":""},{"location":"descriptors/rst/#rst","title":"RST","text":""},{"location":"descriptors/rst/#linters","title":"Linters","text":"Linter Additional rst-lintRST_RST_LINT rstcheckRST_RSTCHECK rstfmtRST_RSTFMT"},{"location":"descriptors/rst/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.rst</code></li> </ul> </li> </ul>"},{"location":"descriptors/rst/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value RST_PRE_COMMANDS List of bash commands to run before the linters None RST_POST_COMMANDS List of bash commands to run after the linters None RST_FILTER_REGEX_INCLUDE Custom regex including filter RST_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/rst_rst_lint/","title":"rst-lint configuration in MegaLinter","text":""},{"location":"descriptors/rst_rst_lint/#rst-lint","title":"rst-lint","text":""},{"location":"descriptors/rst_rst_lint/#rst-lint-documentation","title":"rst-lint documentation","text":"<ul> <li>Version in MegaLinter: 1.4.0</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/rst_rst_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable rst-lint by adding <code>RST_RST_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable rst-lint by adding <code>RST_RST_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value RST_RST_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> RST_RST_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> RST_RST_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file RST_RST_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file RST_RST_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> RST_RST_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".rst\"]</code> RST_RST_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file RST_RST_LINT_PRE_COMMANDS List of bash commands to run before the linter None RST_RST_LINT_POST_COMMANDS List of bash commands to run after the linter None RST_RST_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling RST_RST_LINT and its pre/post commands None RST_RST_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> RST_RST_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> RST_RST_LINT_CLI_EXECUTABLE Override CLI executable <code>['rst-lint']</code>"},{"location":"descriptors/rst_rst_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/rst_rst_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/rst_rst_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.rst</code></li> </ul>"},{"location":"descriptors/rst_rst_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>rst-lint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/rst_rst_lint/#example-calls","title":"Example calls","text":"<pre><code>rst-lint myfile.rst\n</code></pre>"},{"location":"descriptors/rst_rst_lint/#help-content","title":"Help content","text":"<pre><code>usage: rst-lint [-h] [--version] [--format {text,json}] [--encoding ENCODING]\n                [--level {debug,info,warning,error,severe}]\n                [--rst-prolog RST_PROLOG]\n                path [path ...]\n\nLint reStructuredText files. Returns 0 if all files pass linting, 1 for an\ninternal error, and 2 if linting failed.\n\npositional arguments:\n  path                  File/folder to lint\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --format {text,json}  Format of the output (default: \"text\")\n  --encoding ENCODING   Encoding of the input file (e.g. \"utf-8\")\n  --level {debug,info,warning,error,severe}\n                        Minimum error level to report (default: \"warning\")\n  --rst-prolog RST_PROLOG\n                        reStructuredText content to prepend to all files\n                        (useful for substitutions)\n</code></pre>"},{"location":"descriptors/rst_rst_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=Pygments\nARG PIP_PYGMENTS_VERSION=2.19.1\n# renovate: datasource=pypi depName=restructuredtext_lint\nARG PIP_RESTRUCTUREDTEXT_LINT_VERSION=1.4.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>Pygments==2.19.1</li> <li>restructuredtext_lint==1.4.0</li> </ul> </li> </ul>"},{"location":"descriptors/rst_rstcheck/","title":"rstcheck configuration in MegaLinter","text":""},{"location":"descriptors/rst_rstcheck/#rstcheck","title":"rstcheck","text":""},{"location":"descriptors/rst_rstcheck/#rstcheck-documentation","title":"rstcheck documentation","text":"<ul> <li>Version in MegaLinter: 6.2.4</li> <li>Visit Official Web Site</li> <li>See How to configure rstcheck rules</li> <li>See How to disable rstcheck rules in files</li> </ul>"},{"location":"descriptors/rst_rstcheck/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable rstcheck by adding <code>RST_RSTCHECK</code> in ENABLE_LINTERS variable</li> <li>Disable rstcheck by adding <code>RST_RSTCHECK</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value RST_RSTCHECK_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> RST_RSTCHECK_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> RST_RSTCHECK_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file RST_RSTCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file RST_RSTCHECK_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> RST_RSTCHECK_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".rst\"]</code> RST_RSTCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file RST_RSTCHECK_PRE_COMMANDS List of bash commands to run before the linter None RST_RSTCHECK_POST_COMMANDS List of bash commands to run after the linter None RST_RSTCHECK_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling RST_RSTCHECK and its pre/post commands None RST_RSTCHECK_CONFIG_FILE rstcheck configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.rstcheck.cfg</code> RST_RSTCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RST_RSTCHECK_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> RST_RSTCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> RST_RSTCHECK_CLI_EXECUTABLE Override CLI executable <code>['rstcheck']</code>"},{"location":"descriptors/rst_rstcheck/#ide-integration","title":"IDE Integration","text":"<p>Use rstcheck in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code vscode-restructuredtext"},{"location":"descriptors/rst_rstcheck/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 python Optimized for PYTHON based projects 65"},{"location":"descriptors/rst_rstcheck/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/rst_rstcheck/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.rst</code></li> </ul>"},{"location":"descriptors/rst_rstcheck/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>rstcheck is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/rst_rstcheck/#example-calls","title":"Example calls","text":"<pre><code>rstcheck myfile.rst\n</code></pre> <pre><code>rstcheck -c .rstcheck.cfg myfile.rst\n</code></pre>"},{"location":"descriptors/rst_rstcheck/#help-content","title":"Help content","text":"<pre><code>\n Usage: rstcheck [OPTIONS] FILES...                                             \n\n CLI of rstcheck.\n\n Enabled features: ['Sphinx']\n Pass one or more RST FILES to check. Can be files or directories if \n --recursive is passed too. Pass \"-\" if you want to read from stdin.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --config                         PATH   Config file to load. Can be a INI    \u2502\n\u2502                                         file or directory. If a directory is \u2502\n\u2502                                         passed it will be searched for       \u2502\n\u2502                                         .rstcheck.cfg | setup.cfg. If 'NONE' \u2502\n\u2502                                         is passed no config file is loaded   \u2502\n\u2502                                         at all.                              \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --warn-unknown-settings                 Log a WARNING for unknown settings   \u2502\n\u2502                                         in config files. Can be hidden via   \u2502\n\u2502                                         --log-level.                         \u2502\n\u2502 --recursive              -r             Recursively search passed            \u2502\n\u2502                                         directories for RST files to check.  \u2502\n\u2502 --report-level                   LEVEL  The report level of the linting      \u2502\n\u2502                                         issues found. Valid levels are: INFO \u2502\n\u2502                                         | WARNING | ERROR | SEVERE | NONE.   \u2502\n\u2502                                         Defaults to INFO. Can be set in      \u2502\n\u2502                                         config file.                         \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --log-level                      LEVEL  The log level of the application for \u2502\n\u2502                                         information that is not a linting    \u2502\n\u2502                                         issue. Valid levels are: DEBUG |     \u2502\n\u2502                                         INFO | WARNING | ERROR | CRITICAL.   \u2502\n\u2502                                         Defaults to WARNING.                 \u2502\n\u2502                                         [default: WARNING]                   \u2502\n\u2502 --ignore-directives              TEXT   Comma-separated-list of directives   \u2502\n\u2502                                         to add to the ignore list. Can be    \u2502\n\u2502                                         set in config file.                  \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --ignore-roles                   TEXT   Comma-separated-list of roles to add \u2502\n\u2502                                         to the ignore list. Can be set in    \u2502\n\u2502                                         config file.                         \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --ignore-substitutions           TEXT   Comma-separated-list of              \u2502\n\u2502                                         substitutions to add to the ignore   \u2502\n\u2502                                         list. Can be set in config file.     \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --ignore-languages               TEXT   Comma-separated-list of languages    \u2502\n\u2502                                         for code-blocks to add to the ignore \u2502\n\u2502                                         list. The code in ignored            \u2502\n\u2502                                         code-blocks will not be checked for  \u2502\n\u2502                                         errors. Can be set in config file.   \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --ignore-messages                REGEX  A regular expression to match        \u2502\n\u2502                                         linting issue messages against to    \u2502\n\u2502                                         ignore. Can be set in config file.   \u2502\n\u2502                                         [default: None]                      \u2502\n\u2502 --version                               Print versions and exit.             \u2502\n\u2502 --help                                  Show this message and exit.          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n</code></pre>"},{"location":"descriptors/rst_rstcheck/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=rstcheck\nARG PIP_RSTCHECK_VERSION=6.2.4\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>rstcheck[toml,sphinx]==6.2.4</li> </ul> </li> </ul>"},{"location":"descriptors/rst_rstfmt/","title":"rstfmt configuration in MegaLinter","text":""},{"location":"descriptors/rst_rstfmt/#rstfmt","title":"rstfmt","text":""},{"location":"descriptors/rst_rstfmt/#rstfmt-documentation","title":"rstfmt documentation","text":"<ul> <li>Version in MegaLinter: 0.0.14</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/rst_rstfmt/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable rstfmt by adding <code>RST_RSTFMT</code> in ENABLE_LINTERS variable</li> <li>Disable rstfmt by adding <code>RST_RSTFMT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>RST_RSTFMT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value RST_RSTFMT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> RST_RSTFMT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> RST_RSTFMT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file RST_RSTFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file RST_RSTFMT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> RST_RSTFMT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".rst\"]</code> RST_RSTFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file RST_RSTFMT_PRE_COMMANDS List of bash commands to run before the linter None RST_RSTFMT_POST_COMMANDS List of bash commands to run after the linter None RST_RSTFMT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling RST_RSTFMT and its pre/post commands None RST_RSTFMT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> RST_RSTFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> RST_RSTFMT_CLI_EXECUTABLE Override CLI executable <code>['rstfmt']</code>"},{"location":"descriptors/rst_rstfmt/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 formatters Contains only formatters 18 python Optimized for PYTHON based projects 65"},{"location":"descriptors/rst_rstfmt/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/rst_rstfmt/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.rst</code></li> </ul>"},{"location":"descriptors/rst_rstfmt/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>rstfmt is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/rst_rstfmt/#example-calls","title":"Example calls","text":"<pre><code>rstfmt --check myfile.rst\n</code></pre> <pre><code>rstfmt myfile.rst\n</code></pre>"},{"location":"descriptors/rst_rstfmt/#help-content","title":"Help content","text":"<pre><code>usage: rstfmt [-h] [--version] [--check] [--diff] [-w WIDTH] [--ext EXT]\n              [--test] [-v]\n              [path ...]\n\npositional arguments:\n  path                  files/directories to run on\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show rstfmt version and exit\n  --check               don't update files, but exit with nonzero status if\n                        any files are not formatted\n  --diff                don't update files, but show a diff of what would\n                        change\n  -w WIDTH, --width WIDTH\n                        the target line length in characters\n  --ext EXT             the extension of files to look at when passed a\n                        directory (default `rst`)\n  --test                [internal] run tests instead of updating files\n  -v, --verbose         [internal] print extra debugging information\n</code></pre>"},{"location":"descriptors/rst_rstfmt/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=rstfmt\nARG PIP_RSTFMT_VERSION=0.0.14\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>rstfmt==0.0.14</li> </ul> </li> </ul>"},{"location":"descriptors/ruby/","title":"RUBY linters in MegaLinter","text":""},{"location":"descriptors/ruby/#ruby","title":"RUBY","text":""},{"location":"descriptors/ruby/#linters","title":"Linters","text":"Linter Additional rubocopRUBY_RUBOCOP"},{"location":"descriptors/ruby/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.rb</code></li> </ul> </li> </ul>"},{"location":"descriptors/ruby/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value RUBY_PRE_COMMANDS List of bash commands to run before the linters None RUBY_POST_COMMANDS List of bash commands to run after the linters None RUBY_FILTER_REGEX_INCLUDE Custom regex including filter RUBY_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/ruby_rubocop/","title":"rubocop configuration in MegaLinter","text":""},{"location":"descriptors/ruby_rubocop/#rubocop-documentation","title":"rubocop documentation","text":"<ul> <li>Version in MegaLinter: 1.75.4</li> <li>Visit Official Web Site</li> <li>See How to configure rubocop rules<ul> <li>If custom <code>.ruby-lint.yml</code> config file isn't found, .ruby-lint.yml will be used</li> </ul> </li> <li>See How to disable rubocop rules in files</li> <li>See Index of problems detected by rubocop</li> </ul>"},{"location":"descriptors/ruby_rubocop/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable rubocop by adding <code>RUBY_RUBOCOP</code> in ENABLE_LINTERS variable</li> <li>Disable rubocop by adding <code>RUBY_RUBOCOP</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>RUBY_RUBOCOP</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value RUBY_RUBOCOP_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> RUBY_RUBOCOP_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> RUBY_RUBOCOP_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file RUBY_RUBOCOP_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> RUBY_RUBOCOP_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".rb\"]</code> RUBY_RUBOCOP_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file RUBY_RUBOCOP_PRE_COMMANDS List of bash commands to run before the linter None RUBY_RUBOCOP_POST_COMMANDS List of bash commands to run after the linter None RUBY_RUBOCOP_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling RUBY_RUBOCOP and its pre/post commands None RUBY_RUBOCOP_CONFIG_FILE rubocop configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.ruby-lint.yml</code> RUBY_RUBOCOP_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RUBY_RUBOCOP_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> RUBY_RUBOCOP_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> RUBY_RUBOCOP_CLI_EXECUTABLE Override CLI executable <code>['rubocop']</code>"},{"location":"descriptors/ruby_rubocop/#ide-integration","title":"IDE Integration","text":"<p>Use rubocop in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-rubocop Visit Web Site Brackets brackets-rubocop Visit Web Site Emacs rubocop-emacs Visit Web Site Emacs flycheck Visit Web Site IDEA RubyMine Visit Web Site Sublime Text sublime_rubocop Visit Web Site vim vim-rubocop Visit Web Site vim ale Visit Web Site Visual Studio Code VSCode Ruby Extension"},{"location":"descriptors/ruby_rubocop/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 ruby Optimized for RUBY based projects 50"},{"location":"descriptors/ruby_rubocop/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/ruby_rubocop/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.rb</code></li> </ul>"},{"location":"descriptors/ruby_rubocop/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>rubocop is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/ruby_rubocop/#example-calls","title":"Example calls","text":"<pre><code>rubocop --force-exclusion myfile.rb\n</code></pre> <pre><code>rubocop --force-exclusion -c .ruby-lint.yml myfile.rb\n</code></pre> <pre><code>rubocop --force-exclusion --safe-auto-correct -c .ruby-lint.yml myfile.rb\n</code></pre>"},{"location":"descriptors/ruby_rubocop/#help-content","title":"Help content","text":"<pre><code>Usage: rubocop [options] [file1, file2, ...]\n\nBasic Options:\n    -l, --lint                       Run only lint cops.\n    -x, --fix-layout                 Run only layout cops, with autocorrect on.\n        --safe                       Run only safe cops.\n        --except [COP1,COP2,...]     Exclude the given cop(s).\n        --only [COP1,COP2,...]       Run only the given cop(s).\n        --only-guide-cops            Run only cops for rules that link to a\n                                     style guide.\n    -F, --fail-fast                  Inspect files in order of modification\n                                     time and stop after the first file\n                                     containing offenses.\n        --disable-pending-cops       Run without pending cops.\n        --enable-pending-cops        Run with pending cops.\n        --ignore-disable-comments    Report offenses even if they have been manually disabled\n                                     with a `rubocop:disable` or `rubocop:todo` directive.\n        --force-exclusion            Any files excluded by `Exclude` in configuration\n                                     files will be excluded, even if given explicitly\n                                     as arguments.\n        --only-recognized-file-types Inspect files given on the command line only if\n                                     they are listed in `AllCops/Include` parameters\n                                     of user configuration or default configuration.\n        --ignore-parent-exclusion    Prevent from inheriting `AllCops/Exclude` from\n                                     parent folders.\n        --ignore-unrecognized-cops   Ignore unrecognized cops or departments in the config.\n        --force-default-config       Use default configuration even if configuration\n                                     files are present in the directory tree.\n    -s, --stdin FILE                 Pipe source from STDIN, using FILE in offense\n                                     reports. This is useful for editor integration.\n        --editor-mode                Optimize real-time feedback in editors,\n                                     adjusting behaviors for editing experience.\n    -P, --[no-]parallel              Use available CPUs to execute inspection in\n                                     parallel. Default is true.\n                                     You can specify the number of parallel processes using\n                                     the $PARALLEL_PROCESSOR_COUNT environment variable.\n        --raise-cop-error            Raise cop-related errors with cause and location.\n                                     This is used to prevent cops from failing silently.\n                                     Default is false.\n        --fail-level SEVERITY        Minimum severity for exit with error code.\n                                       [A] autocorrect\n                                       [I] info\n                                       [R] refactor\n                                       [C] convention\n                                       [W] warning\n                                       [E] error\n                                       [F] fatal\n\nCaching:\n    -C, --cache FLAG                 Use result caching (FLAG=true) or don't\n                                     (FLAG=false), default determined by\n                                     configuration parameter AllCops: UseCache.\n        --cache-root DIR             Set the cache root directory.\n                                     Takes precedence over the configuration\n                                     parameter AllCops: CacheRootDirectory and\n                                     the $RUBOCOP_CACHE_ROOT environment variable.\n\nLSP Option:\n        --lsp                        Start a language server listening on STDIN.\n\nServer Options:\n        --[no-]server                If a server process has not been started yet, start\n                                     the server process and execute inspection with server.\n                                     Default is false.\n                                     You can specify the server host and port with the\n                                     $RUBOCOP_SERVER_HOST and the $RUBOCOP_SERVER_PORT\n                                     environment variables.\n        --restart-server             Restart server process.\n        --start-server               Start server process.\n        --stop-server                Stop server process.\n        --server-status              Show server status.\n        --no-detach                  Run the server process in the foreground.\n\nOutput Options:\n    -f, --format FORMATTER           Choose an output formatter. This option\n                                     can be specified multiple times to enable\n                                     multiple formatters at the same time.\n                                       [a]utogenconf\n                                       [c]lang\n                                       [e]macs\n                                       [fi]les\n                                       [fu]ubar\n                                       [g]ithub\n                                       [h]tml\n                                       [j]son\n                                       [ju]nit\n                                       [m]arkdown\n                                       [o]ffenses\n                                       [pa]cman\n                                       [p]rogress (default)\n                                       [q]uiet\n                                       [s]imple\n                                       [t]ap\n                                       [w]orst\n                                       custom formatter class name\n    -D, --[no-]display-cop-names     Display cop names in offense messages.\n                                     Default is true.\n    -E, --extra-details              Display extra details in offense messages.\n    -S, --display-style-guide        Display style guide URLs in offense messages.\n    -o, --out FILE                   Write output to a file instead of STDOUT.\n                                     This option applies to the previously\n                                     specified --format, or the default format\n                                     if no format is specified.\n        --stderr                     Write all output to stderr except for the\n                                     autocorrected source. This is especially useful\n                                     when combined with --autocorrect and --stdin.\n        --display-time               Display elapsed time in seconds.\n        --display-only-failed        Only output offense messages. Omit passing\n                                     cops. Only valid for --format junit.\n        --display-only-fail-level-offenses\n                                     Only output offense messages at\n                                     the specified --fail-level or above.\n        --display-only-correctable   Only output correctable offense messages.\n        --display-only-safe-correctable\n                                     Only output safe-correctable offense messages\n                                     when combined with --display-only-correctable.\n\nAutocorrection:\n    -a, --autocorrect                Autocorrect offenses (only when it's safe).\n        --auto-correct               (same, deprecated)\n        --safe-auto-correct          (same, deprecated)\n    -A, --autocorrect-all            Autocorrect offenses (safe and unsafe).\n        --auto-correct-all           (same, deprecated)\n        --disable-uncorrectable      Used with --autocorrect to annotate any\n                                     offenses that do not support autocorrect\n                                     with `rubocop:todo` comments.\n\nConfig Generation:\n        --auto-gen-config            Generate a configuration file acting as a\n                                     TODO list.\n        --regenerate-todo            Regenerate the TODO configuration file using\n                                     the last configuration. If there is no existing\n                                     TODO file, acts like --auto-gen-config.\n        --exclude-limit COUNT        Set the limit for how many files to explicitly exclude.\n                                     If there are more files than the limit, the cop will\n                                     be disabled instead. Default is 15.\n        --no-exclude-limit           Do not set the limit for how many files to exclude.\n        --[no-]offense-counts        Include offense counts in configuration\n                                     file generated by --auto-gen-config.\n                                     Default is true.\n        --[no-]auto-gen-only-exclude Generate only Exclude parameters and not Max\n                                     when running --auto-gen-config, except if the\n                                     number of files with offenses is bigger than\n                                     exclude-limit. Default is false.\n        --[no-]auto-gen-timestamp    Include the date and time when the --auto-gen-config\n                                     was run in the file it generates. Default is true.\n        --[no-]auto-gen-enforced-style\n                                     Add a setting to the TODO configuration file to enforce\n                                     the style used, rather than a per-file exclusion\n                                     if one style is used in all files for cop with\n                                     EnforcedStyle as a configurable option\n                                     when the --auto-gen-config was run\n                                     in the file it generates. Default is true.\n\nAdditional Modes:\n    -L, --list-target-files          List all files RuboCop will inspect.\n        --show-cops [COP1,COP2,...]  Shows the given cops, or all cops by\n                                     default, and their configurations for the\n                                     current directory.\n                                     You can use `*` as a wildcard.\n        --show-docs-url [COP1,COP2,...]\n                                     Display url to documentation for the given\n                                     cops, or base url by default.\n\nGeneral Options:\n        --init                       Generate a .rubocop.yml file in the current directory.\n    -c, --config FILE                Specify configuration file.\n    -d, --debug                      Display debug info.\n        --plugin FILE                Load a RuboCop plugin.\n    -r, --require FILE               Require Ruby file.\n        --[no-]color                 Force color output on or off.\n    -v, --version                    Display version.\n    -V, --verbose-version            Display verbose version.\n\nProfiling Options:\n        --profile                    Profile rubocop.\n        --memory                     Profile rubocop memory usage.\n</code></pre>"},{"location":"descriptors/ruby_rubocop/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=rubygems depName=rubocop\nARG GEM_RUBOCOP_VERSION=1.75.4\n# renovate: datasource=rubygems depName=rubocop-github\nARG GEM_RUBOCOP_GITHUB_VERSION=0.23.0\n# renovate: datasource=rubygems depName=rubocop-performance\nARG GEM_RUBOCOP_PERFORMANCE_VERSION=1.25.0\n# renovate: datasource=rubygems depName=rubocop-rails\nARG GEM_RUBOCOP_RAILS_VERSION=2.31.0\n# renovate: datasource=rubygems depName=rubocop-rake\nARG GEM_RUBOCOP_RAKE_VERSION=0.7.1\n# renovate: datasource=rubygems depName=rubocop-rspec\nARG GEM_RUBOCOP_RSPEC_VERSION=3.6.0\n</code></pre> <ul> <li>GEM packages (Ruby) :<ul> <li>rubocop:1.75.4</li> <li>rubocop-github:0.23.0</li> <li>rubocop-performance:1.25.0</li> <li>rubocop-rails:2.31.0</li> <li>rubocop-rake:0.7.1</li> <li>rubocop-rspec:3.6.0</li> </ul> </li> </ul>"},{"location":"descriptors/rust/","title":"RUST linters in MegaLinter","text":""},{"location":"descriptors/rust/#rust","title":"RUST","text":""},{"location":"descriptors/rust/#linters","title":"Linters","text":"Linter Additional clippyRUST_CLIPPY"},{"location":"descriptors/rust/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.rs</code></li> </ul> </li> </ul>"},{"location":"descriptors/rust/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value RUST_PRE_COMMANDS List of bash commands to run before the linters None RUST_POST_COMMANDS List of bash commands to run after the linters None RUST_FILTER_REGEX_INCLUDE Custom regex including filter RUST_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/rust_clippy/","title":"clippy configuration in MegaLinter","text":""},{"location":"descriptors/rust_clippy/#clippy","title":"clippy","text":""},{"location":"descriptors/rust_clippy/#clippy-documentation","title":"clippy documentation","text":"<ul> <li>Version in MegaLinter: 0.1.86</li> <li>Visit Official Web Site</li> <li>See How to configure clippy rules</li> <li>See How to disable clippy rules in files</li> <li>See Index of problems detected by clippy</li> </ul>"},{"location":"descriptors/rust_clippy/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable clippy by adding <code>RUST_CLIPPY</code> in ENABLE_LINTERS variable</li> <li>Disable clippy by adding <code>RUST_CLIPPY</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value RUST_CLIPPY_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> RUST_CLIPPY_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> RUST_CLIPPY_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> RUST_CLIPPY_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".rs\"]</code> RUST_CLIPPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file RUST_CLIPPY_PRE_COMMANDS List of bash commands to run before the linter None RUST_CLIPPY_POST_COMMANDS List of bash commands to run after the linter None RUST_CLIPPY_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling RUST_CLIPPY and its pre/post commands None RUST_CLIPPY_CONFIG_FILE clippy configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.clippy.toml</code> RUST_CLIPPY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RUST_CLIPPY_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> RUST_CLIPPY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> RUST_CLIPPY_CLI_EXECUTABLE Override CLI executable <code>['cargo-clippy']</code>"},{"location":"descriptors/rust_clippy/#ide-integration","title":"IDE Integration","text":"<p>Use clippy in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom Atom IDE Rest Visit Web Site"},{"location":"descriptors/rust_clippy/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 rust Optimized for RUST based projects 50"},{"location":"descriptors/rust_clippy/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/rust_clippy/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.rs</code></li> </ul>"},{"location":"descriptors/rust_clippy/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>clippy is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using clippy configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make clippy analyze only updated files</li> </ul>"},{"location":"descriptors/rust_clippy/#example-calls","title":"Example calls","text":"<pre><code>cargo-clippy\n</code></pre>"},{"location":"descriptors/rust_clippy/#help-content","title":"Help content","text":"<pre><code>Checks a package to catch common mistakes and improve your Rust code.\n\nUsage:\n    cargo clippy [OPTIONS] [--] [&lt;ARGS&gt;...]\n\nCommon options:\n    --no-deps                Run Clippy only on the given crate, without linting the dependencies\n    --fix                    Automatically apply lint suggestions. This flag implies --no-deps and --all-targets\n    -h, --help               Print this message\n    -V, --version            Print version info and exit\n    --explain [LINT]         Print the documentation for a given lint\n\nSee all options with cargo check --help.\n\nAllowing / Denying lints\n\nTo allow or deny a lint from the command line you can use cargo clippy -- with:\n\n    -W / --warn [LINT]       Set lint warnings\n    -A / --allow [LINT]      Set lint allowed\n    -D / --deny [LINT]       Set lint denied\n    -F / --forbid [LINT]     Set lint forbidden\n\nYou can use tool lints to allow or deny lints from your code, e.g.:\n\n    #[allow(clippy::needless_lifetimes)]\n\nManifest Options:\n    --manifest-path &lt;PATH&gt;  Path to Cargo.toml\n    --frozen                Require Cargo.lock and cache are up to date\n    --locked                Require Cargo.lock is up to date\n    --offline               Run without accessing the network\n\n</code></pre>"},{"location":"descriptors/rust_clippy/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Cargo packages (Rust):<ul> <li>clippy</li> </ul> </li> </ul>"},{"location":"descriptors/salesforce/","title":"SALESFORCE linters in MegaLinter","text":""},{"location":"descriptors/salesforce/#salesforce","title":"SALESFORCE","text":""},{"location":"descriptors/salesforce/#linters","title":"Linters","text":"Linter Additional sfdx-scanner-apexSALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-auraSALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwcSALESFORCE_SFDX_SCANNER_LWC lightning-flow-scannerSALESFORCE_LIGHTNING_FLOW_SCANNER"},{"location":"descriptors/salesforce/#linted-files","title":"Linted files","text":""},{"location":"descriptors/salesforce/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value SALESFORCE_PRE_COMMANDS List of bash commands to run before the linters None SALESFORCE_POST_COMMANDS List of bash commands to run after the linters None SALESFORCE_FILTER_REGEX_INCLUDE Custom regex including filter SALESFORCE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/salesforce/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/salesforce/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=@salesforce/cli\nARG NPM_SALESFORCE_CLI_VERSION=2.84.6\n# renovate: datasource=npm depName=@salesforce/plugin-packaging\nARG NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION=2.13.1\n# renovate: datasource=npm depName=sfdx-hardis\nARG SFDX_HARDIS_VERSION=5.29.1\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN sf plugins install @salesforce/plugin-packaging@${NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION} \\\n    &amp;&amp; echo y|sf plugins install sfdx-hardis@${SFDX_HARDIS_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\nENV SF_AUTOUPDATE_DISABLE=true SF_CLI_DISABLE_AUTOUPDATE=true\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>coreutils</li> <li>openjdk21</li> </ul> </li> <li>NPM packages (node.js):<ul> <li>@salesforce/cli@2.84.6</li> </ul> </li> </ul>"},{"location":"descriptors/salesforce_lightning_flow_scanner/","title":"lightning-flow-scanner configuration in MegaLinter","text":"<p>Lightning Flow Scanner is a sfdx plugin scanning the integrity and best practices of Salesforce Flows</p> <p>If your root folder is not force-app, please set variable SALESFORCE_LIGHTNING_FLOW_SCANNER_DIRECTORY</p>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#lightning-flow-scanner-documentation","title":"lightning-flow-scanner documentation","text":"<ul> <li>Version in MegaLinter: 3.8.0</li> <li>Visit Official Web Site</li> <li>See How to configure lightning-flow-scanner rules<ul> <li>If custom <code>.flow-scanner.json</code> config file isn't found, .flow-scanner.json will be used</li> </ul> </li> <li>See Index of problems detected by lightning-flow-scanner</li> </ul>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable lightning-flow-scanner by adding <code>SALESFORCE_LIGHTNING_FLOW_SCANNER</code> in ENABLE_LINTERS variable</li> <li>Disable lightning-flow-scanner by adding <code>SALESFORCE_LIGHTNING_FLOW_SCANNER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SALESFORCE_LIGHTNING_FLOW_SCANNER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SALESFORCE_LIGHTNING_FLOW_SCANNER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SALESFORCE_LIGHTNING_FLOW_SCANNER_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> SALESFORCE_LIGHTNING_FLOW_SCANNER_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_LIGHTNING_FLOW_SCANNER_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_LIGHTNING_FLOW_SCANNER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SALESFORCE_LIGHTNING_FLOW_SCANNER and its pre/post commands None SALESFORCE_LIGHTNING_FLOW_SCANNER_CONFIG_FILE lightning-flow-scanner configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.flow-scanner.json</code> SALESFORCE_LIGHTNING_FLOW_SCANNER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_LIGHTNING_FLOW_SCANNER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SALESFORCE_LIGHTNING_FLOW_SCANNER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SALESFORCE_LIGHTNING_FLOW_SCANNER_CLI_EXECUTABLE Override CLI executable <code>['sf']</code> SALESFORCE_DIRECTORY Directory containing SALESFORCE files (use <code>any</code> to always activate the linter) <code>force-app</code>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#ide-integration","title":"IDE Integration","text":"<p>Use lightning-flow-scanner in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Lightning Flow Scanner"},{"location":"descriptors/salesforce_lightning_flow_scanner/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 salesforce Optimized for Salesforce based projects 54"},{"location":"descriptors/salesforce_lightning_flow_scanner/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/salesforce_lightning_flow_scanner/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>force-app</code> is found. (directory name can be overridden with <code>SALESFORCE_DIRECTORY</code>)</li> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>lightning-flow-scanner is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using lightning-flow-scanner configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make lightning-flow-scanner analyze only updated files</li> </ul>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#example-calls","title":"Example calls","text":"<pre><code>sf flow:scan\n</code></pre>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#help-content","title":"Help content","text":"<pre><code> \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nFind and fix potential bugs in Salesforce flows.\n\nUSAGE\n  $ sf flow scan [--json] [--flags-dir &lt;value&gt;] [-d &lt;value&gt; | --files\n    &lt;value&gt;...] [-c &lt;value&gt;] [-f error|warning|note|never] [-r] [-u &lt;value&gt;]\n\nFLAGS\n  -c, --config=&lt;value&gt;          Path to configuration file\n  -d, --directory=&lt;value&gt;       Directory to scan for flows\n  -f, --failon=&lt;option&gt;         [default: error] Threshold failure level (error,\n                                warning, note, or never) defining when the\n                                command return code will be 1\n                                &lt;options: error|warning|note|never&gt;\n  -r, --retrieve                Force retrieve Flows from org at the start of\n                                the command\n  -u, --targetusername=&lt;value&gt;  Retrieve the latest metadata from the target\n                                before the scan.\n      --files=&lt;value&gt;...        List of source flows paths to scan\n\nGLOBAL FLAGS\n  --flags-dir=&lt;value&gt;  Import flag values from a directory.\n  --json               Format output as json.\n\n</code></pre>"},{"location":"descriptors/salesforce_lightning_flow_scanner/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=@salesforce/cli\nARG NPM_SALESFORCE_CLI_VERSION=2.84.6\n# renovate: datasource=npm depName=@salesforce/plugin-packaging\nARG NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION=2.13.1\n# renovate: datasource=npm depName=sfdx-hardis\nARG SFDX_HARDIS_VERSION=5.29.1\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN sf plugins install @salesforce/plugin-packaging@${NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION} \\\n    &amp;&amp; echo y|sf plugins install sfdx-hardis@${SFDX_HARDIS_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\nENV SF_AUTOUPDATE_DISABLE=true SF_CLI_DISABLE_AUTOUPDATE=true\n# Linter install\n# renovate: datasource=npm depName=lightning-flow-scanner\nARG LIGHTNING_FLOW_SCANNER_VERSION=3.8.0\nRUN echo y|sf plugins install lightning-flow-scanner@${LIGHTNING_FLOW_SCANNER_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner/","title":"Salesforce sfdx scanner","text":""},{"location":"descriptors/salesforce_sfdx_scanner/#sfdx-scanner","title":"sfdx-scanner","text":"<p>sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint</p> <p>If your root folder is not force-app, please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY</p> <p>You can select categories and single rules by defining custom arguments (example: <code>SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\"</code>)</p> <p>See more details in Help</p> <p>Workaround: Restricted to PMD</p>"},{"location":"descriptors/salesforce_sfdx_scanner/#sfdx-scanner-documentation","title":"sfdx-scanner documentation","text":"<ul> <li>Version in MegaLinter: 2.8.0</li> <li>Visit Official Web Site</li> <li>See How to configure sfdx-scanner rules</li> <li>See How to disable sfdx-scanner rules in files</li> <li>See Index of problems detected by sfdx-scanner</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable sfdx-scanner by adding <code>SALESFORCE_SFDX_SCANNER</code> in ENABLE_LINTERS variable</li> <li>Disable sfdx-scanner by adding <code>SALESFORCE_SFDX_SCANNER</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SALESFORCE_SFDX_SCANNER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src|lib)</code> Include every file SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test|examples)</code> Exclude no file SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> Exclude every file SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SALESFORCE_DIRECTORY Directory containing SALESFORCE files <code>force-app</code>"},{"location":"descriptors/salesforce_sfdx_scanner/#ide-integration","title":"IDE Integration","text":"<p>Use sfdx-scanner in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Eclipse pmd-eclipse-plugin Visit Web Site Emacs pmd-emacs Visit Web Site IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack"},{"location":"descriptors/salesforce_sfdx_scanner/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 87 salesforce Optimized for Salesforce based projects 41"},{"location":"descriptors/salesforce_sfdx_scanner/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/salesforce_sfdx_scanner/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>force-app</code> is found. (directory name can be overridden with <code>SALESFORCE_DIRECTORY</code>)</li> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner/#example-calls","title":"Example calls","text":"<pre><code>sfdx scanner:run\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner/#help-content","title":"Help content","text":"<pre><code>evaluate a selection of rules against a codebase\n\nUSAGE\n  $ sfdx scanner:run -t &lt;array&gt; [-c &lt;array&gt;] [-r &lt;array&gt;] [-e &lt;array&gt;] [-f\n  csv|html|json|junit|sarif|table|xml] [-o &lt;string&gt;] [--tsconfig &lt;string&gt;]\n  [--eslintconfig &lt;string&gt;] [--pmdconfig &lt;string&gt;] [--env &lt;string&gt;] [-v |\n  --json] [--verbose] [--loglevel\n  trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]\n\nOPTIONS\n  -c, --category=category\n      categor(ies) of rules to run\n\n  -e, --engine=engine\n      engine(s) to run\n\n  -f, --format=(csv|html|json|junit|sarif|table|xml)\n      format of results\n\n  -o, --outfile=outfile\n      location of output file\n\n  -r, --ruleset=ruleset\n      [deprecated] ruleset(s) of rules to run\n\n  -t, --target=target\n      (required) location of source code\n\n  -v, --violations-cause-error\n      throws an error when violations are detected\n\n  --env=env\n      JSON-formatted string, overrides ESLint's default environment variables\n\n  --eslintconfig=eslintconfig\n      location of eslintrc config to customize eslint engine\n\n  --json\n      format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA\n  L)\n      [default: warn] logging level for this command invocation\n\n  --pmdconfig=pmdconfig\n      location of PMD rule reference XML file to customize rule selection\n\n  --tsconfig=tsconfig\n      location of tsconfig.json file\n\n  --verbose\n      emit additional command output to stdout\n\nEXAMPLE\n  Invoking without specifying any rules causes all rules to be run.\n    E.g., $ sfdx scanner:run --format xml --target \"somefile.js\"\n      Evaluates all rules against somefile.js.\n\n    Specifying multiple categories is treated as a logical OR.\n      E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category\n  \"Design,Best Practices\"\n        Evaluates all rules in the Design or Best Practices categories.\n\n    Categories can be excluded by specifying the negation operator, the values\n  must be enclosed in single quotes.\n      E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category\n  '!Design,!Best Practices'\n        Evaluates all rules except those in the Design or Best Practices categories.\n\n    Wrap globs in quotes.\n      Unix example:    $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ...\n      Windows example: &gt; sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ...\n        Evaluate rules against all .js files below the current directory, except for\n  IgnoreMe.js.\n\n    Specify tsconfig.json if the current working directory does not contain the\n  tsconfig.json that corresponds to the TypeScript files being scanned.\n      E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig\n  \"/my-project/tsconfig.json\"\n        Scans the project contained in '/my-project' if the current working directory\n  is another directory.\n\n    Use --env to override the default ESLint environment variables to add\n  frameworks.\n      E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}'\n        Evaluates rules against somefile.js, including Jasmine in the environment\n  variables.\n\n    Use --violations-cause-error to throw exit with a non-zero code when\n  violations are found.\n      E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error\n        Evaluates rules against somefile.js. If any rules are violated, the exit code\n  will be the severity of the most severe violation.\n\n    Use --engine to include or exclude engines. Any engine listed will be run,\n  regardless of its current 'disabled' attribute.\n      E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\"\n        Evaluates rules against somefile.js, using eslint-lwc and pmd engines.\n\n    To use PMD with your own rule reference file, use --pmdconfig. Note that rule\n  filters are not applied.\n      E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\"\n\n    To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure\n  that the directory you run the command from has all the NPM dependencies\n  installed.\n      E.g., $ sfdx scanner:run --target \"src\" --eslintconfig\n  \"/home/my/setup/.eslintrc.json\"\n\n\n \u203a   Error: EEXIT: 0\n \u203a   Code: EEXIT\nNAME                                               LANGUAGES    CATEGORIES        RULESETS [DEP]                                    ENGINE\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nVfCsrf                                             visualforce  Security          Basic VF                                          pmd\nVfHtmlStyleTagXss                                  visualforce  Security                                                            pmd\nVfUnescapeEl                                       visualforce  Security          Basic VF                                          pmd\nApexAssertionsShouldIncludeMessage                 apex         Best Practices                                                      pmd\nApexUnitTestClassShouldHaveAsserts                 apex         Best Practices    ApexUnit,Default ruleset...,quickstart            pmd\nApexUnitTestMethodShouldHaveIsTestAnnotation       apex         Best Practices                                                      pmd\nApexUnitTestShouldNotUseSeeAllDataTrue             apex         Best Practices    ApexUnit,Default ruleset...,quickstart            pmd\nAvoidGlobalModifier                                apex         Best Practices    Style,Default ruleset...,quickstart               pmd\nAvoidLogicInTrigger                                apex         Best Practices    Style,Default ruleset...,quickstart               pmd\nDebugsShouldUseLoggingLevel                        apex         Best Practices    quickstart                                        pmd\nUnusedLocalVariable                                apex         Best Practices                                                      pmd\nAvoidDmlStatementsInLoops                          apex         Performance       Default ruleset...,Performance                    pmd\nAvoidSoqlInLoops                                   apex         Performance       Default ruleset...,Performance                    pmd\nAvoidSoslInLoops                                   apex         Performance       Default ruleset...,Performance                    pmd\nOperationWithLimitsInLoop                          apex         Performance       quickstart                                        pmd\nApexBadCrypto                                      apex         Security          Security,Default ruleset...,quickstart            pmd\nApexCRUDViolation                                  apex         Security          Security,Default ruleset...,quickstart            pmd\nApexCSRF                                           apex         Security          Security                                          pmd\nApexDangerousMethods                               apex         Security          Security,Default ruleset...,quickstart            pmd\nApexInsecureEndpoint                               apex         Security          Security,Default ruleset...,quickstart            pmd\nApexOpenRedirect                                   apex         Security          Security,Default ruleset...,quickstart            pmd\nApexSharingViolations                              apex         Security          Security,Default ruleset...,quickstart            pmd\nApexSOQLInjection                                  apex         Security          Security,Default ruleset...,quickstart            pmd\nApexSuggestUsingNamedCred                          apex         Security          Security,Default ruleset...,quickstart            pmd\nApexXSSFromEscapeFalse                             apex         Security          Security,Default ruleset...,quickstart            pmd\nApexXSSFromURLParam                                apex         Security          Security,Default ruleset...,quickstart            pmd\nClassNamingConventions                             apex         Code Style        Style,Default ruleset...,quickstart               pmd\nIfElseStmtsMustUseBraces                           apex         Code Style        Braces,Default ruleset...,quickstart              pmd\nIfStmtsMustUseBraces                               apex         Code Style        Braces,Default ruleset...,quickstart              pmd\nFieldDeclarationsShouldBeAtStart                   apex         Code Style                                                          pmd\nFieldNamingConventions                             apex         Code Style        quickstart                                        pmd\nForLoopsMustUseBraces                              apex         Code Style        Braces,Default ruleset...,quickstart              pmd\nFormalParameterNamingConventions                   apex         Code Style        quickstart                                        pmd\nLocalVariableNamingConventions                     apex         Code Style        quickstart                                        pmd\nMethodNamingConventions                            apex         Code Style        Style,Default ruleset...,quickstart               pmd\nOneDeclarationPerLine                              apex         Code Style        Default ruleset...,quickstart                     pmd\nPropertyNamingConventions                          apex         Code Style        quickstart                                        pmd\nVariableNamingConventions                          apex         Code Style        Style,Default ruleset...                          pmd\nWhileLoopsMustUseBraces                            apex         Code Style        Braces,Default ruleset...,quickstart              pmd\nAvoidDeeplyNestedIfStmts                           apex         Design            Default ruleset...,Complexity,quickstart          pmd\nCyclomaticComplexity                               apex         Design            Default ruleset...,Metrics tempora...,quickstart  pmd\nCognitiveComplexity                                apex         Design                                                              pmd\nExcessiveClassLength                               apex         Design            Default ruleset...,Complexity,quickstart          pmd\nExcessiveParameterList                             apex         Design            Default ruleset...,Complexity,quickstart          pmd\nExcessivePublicCount                               apex         Design            Default ruleset...,Complexity,quickstart          pmd\nNcssConstructorCount                               apex         Design            Default ruleset...,Complexity,quickstart          pmd\nNcssMethodCount                                    apex         Design            Default ruleset...,Complexity,quickstart          pmd\nNcssTypeCount                                      apex         Design            Default ruleset...,Complexity,quickstart          pmd\nStdCyclomaticComplexity                            apex         Design            Default ruleset...,Complexity,quickstart          pmd\nTooManyFields                                      apex         Design            Default ruleset...,Complexity,quickstart          pmd\nApexDoc                                            apex         Documentation     Default ruleset...,quickstart                     pmd\nApexCSRF                                           apex         Error Prone       Default ruleset...,quickstart                     pmd\nAvoidDirectAccessTriggerMap                        apex         Error Prone       Style,Default ruleset...,quickstart               pmd\nAvoidHardcodingId                                  apex         Error Prone       Style,Default ruleset...,quickstart               pmd\nAvoidNonExistentAnnotations                        apex         Error Prone       Default ruleset...,quickstart                     pmd\nEmptyCatchBlock                                    apex         Error Prone       Default ruleset...,Empty Code,quickstart          pmd\nEmptyIfStmt                                        apex         Error Prone       Default ruleset...,Empty Code,quickstart          pmd\nEmptyStatementBlock                                apex         Error Prone       Default ruleset...,Empty Code,quickstart          pmd\nEmptyTryOrFinallyBlock                             apex         Error Prone       Default ruleset...,Empty Code,quickstart          pmd\nEmptyWhileStmt                                     apex         Error Prone       Default ruleset...,Empty Code,quickstart          pmd\nMethodWithSameNameAsEnclosingClass                 apex         Error Prone       Style,Default ruleset...,quickstart               pmd\nOverrideBothEqualsAndHashcode                      apex         Error Prone                                                         pmd\nTestMethodsMustBeInTestClasses                     apex         Error Prone                                                         pmd\nconstructor-super                                  javascript   ECMAScript 6      ECMAScript 6                                      eslint\nfor-direction                                      javascript   Possible Errors   Possible Errors                                   eslint\ngetter-return                                      javascript   Possible Errors   Possible Errors                                   eslint\nno-async-promise-executor                          javascript   Possible Errors   Possible Errors                                   eslint\nno-case-declarations                               javascript   Best Practices    Best Practices                                    eslint\nno-class-assign                                    javascript   ECMAScript 6      ECMAScript 6                                      eslint\nno-compare-neg-zero                                javascript   Possible Errors   Possible Errors                                   eslint\nno-cond-assign                                     javascript   Possible Errors   Possible Errors                                   eslint\nno-const-assign                                    javascript   ECMAScript 6      ECMAScript 6                                      eslint\nno-constant-condition                              javascript   Possible Errors   Possible Errors                                   eslint\nno-control-regex                                   javascript   Possible Errors   Possible Errors                                   eslint\nno-debugger                                        javascript   Possible Errors   Possible Errors                                   eslint\nno-delete-var                                      javascript   Variables         Variables                                         eslint\nno-dupe-args                                       javascript   Possible Errors   Possible Errors                                   eslint\nno-dupe-class-members                              javascript   ECMAScript 6      ECMAScript 6                                      eslint\nno-dupe-keys                                       javascript   Possible Errors   Possible Errors                                   eslint\nno-duplicate-case                                  javascript   Possible Errors   Possible Errors                                   eslint\nno-empty                                           javascript   Possible Errors   Possible Errors                                   eslint\nno-empty-character-class                           javascript   Possible Errors   Possible Errors                                   eslint\nno-empty-pattern                                   javascript   Best Practices    Best Practices                                    eslint\nno-ex-assign                                       javascript   Possible Errors   Possible Errors                                   eslint\nno-extra-boolean-cast                              javascript   Possible Errors   Possible Errors                                   eslint\nno-extra-semi                                      javascript   Possible Errors   Possible Errors                                   eslint\nno-fallthrough                                     javascript   Best Practices    Best Practices                                    eslint\nno-func-assign                                     javascript   Possible Errors   Possible Errors                                   eslint\nno-global-assign                                   javascript   Best Practices    Best Practices                                    eslint\nno-inner-declarations                              javascript   Possible Errors   Possible Errors                                   eslint\nno-invalid-regexp                                  javascript   Possible Errors   Possible Errors                                   eslint\nno-irregular-whitespace                            javascript   Possible Errors   Possible Errors                                   eslint\nno-misleading-character-class                      javascript   Possible Errors   Possible Errors                                   eslint\nno-mixed-spaces-and-tabs                           javascript   Stylistic Issues  Stylistic Issues                                  eslint\nno-new-symbol                                      javascript   ECMAScript 6      ECMAScript 6                                      eslint\nno-obj-calls                                       javascript   Possible Errors   Possible Errors                                   eslint\nno-octal                                           javascript   Best Practices    Best Practices                                    eslint\nno-prototype-builtins                              javascript   Possible Errors   Possible Errors                                   eslint\nno-redeclare                                       javascript   Best Practices    Best Practices                                    eslint\nno-regex-spaces                                    javascript   Possible Errors   Possible Errors                                   eslint\nno-self-assign                                     javascript   Best Practices    Best Practices                                    eslint\nno-shadow-restricted-names                         javascript   Variables         Variables                                         eslint\nno-sparse-arrays                                   javascript   Possible Errors   Possible Errors                                   eslint\nno-this-before-super                               javascript   ECMAScript 6      ECMAScript 6                                      eslint\nno-undef                                           javascript   Variables         Variables                                         eslint\nno-unexpected-multiline                            javascript   Possible Errors   Possible Errors                                   eslint\nno-unreachable                                     javascript   Possible Errors   Possible Errors                                   eslint\nno-unsafe-finally                                  javascript   Possible Errors   Possible Errors                                   eslint\nno-unsafe-negation                                 javascript   Possible Errors   Possible Errors                                   eslint\nno-unused-labels                                   javascript   Best Practices    Best Practices                                    eslint\nno-unused-vars                                     javascript   Variables         Variables                                         eslint\nno-useless-catch                                   javascript   Best Practices    Best Practices                                    eslint\nno-useless-escape                                  javascript   Best Practices    Best Practices                                    eslint\nno-with                                            javascript   Best Practices    Best Practices                                    eslint\nrequire-yield                                      javascript   ECMAScript 6      ECMAScript 6                                      eslint\nuse-isnan                                          javascript   Possible Errors   Possible Errors                                   eslint\nvalid-typeof                                       javascript   Possible Errors   Possible Errors                                   eslint\nconstructor-super                                  typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nfor-direction                                      typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-async-promise-executor                          typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-case-declarations                               typescript   Best Practices    Best Practices                                    eslint-typescript\nno-class-assign                                    typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nno-compare-neg-zero                                typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-cond-assign                                     typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-constant-condition                              typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-control-regex                                   typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-debugger                                        typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-delete-var                                      typescript   Variables         Variables                                         eslint-typescript\nno-duplicate-case                                  typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-empty                                           typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-empty-character-class                           typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-empty-pattern                                   typescript   Best Practices    Best Practices                                    eslint-typescript\nno-ex-assign                                       typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-extra-boolean-cast                              typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-fallthrough                                     typescript   Best Practices    Best Practices                                    eslint-typescript\nno-func-assign                                     typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-global-assign                                   typescript   Best Practices    Best Practices                                    eslint-typescript\nno-inner-declarations                              typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-invalid-regexp                                  typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-irregular-whitespace                            typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-misleading-character-class                      typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-mixed-spaces-and-tabs                           typescript   Stylistic Issues  Stylistic Issues                                  eslint-typescript\nno-obj-calls                                       typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-octal                                           typescript   Best Practices    Best Practices                                    eslint-typescript\nno-prototype-builtins                              typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-regex-spaces                                    typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-self-assign                                     typescript   Best Practices    Best Practices                                    eslint-typescript\nno-shadow-restricted-names                         typescript   Variables         Variables                                         eslint-typescript\nno-sparse-arrays                                   typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-unexpected-multiline                            typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-unsafe-finally                                  typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-unsafe-negation                                 typescript   Possible Errors   Possible Errors                                   eslint-typescript\nno-unused-labels                                   typescript   Best Practices    Best Practices                                    eslint-typescript\nno-useless-catch                                   typescript   Best Practices    Best Practices                                    eslint-typescript\nno-useless-escape                                  typescript   Best Practices    Best Practices                                    eslint-typescript\nno-var                                             typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nno-with                                            typescript   Best Practices    Best Practices                                    eslint-typescript\nprefer-const                                       typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nprefer-rest-params                                 typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nprefer-spread                                      typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nrequire-yield                                      typescript   ECMAScript 6      ECMAScript 6                                      eslint-typescript\nuse-isnan                                          typescript   Possible Errors   Possible Errors                                   eslint-typescript\n@typescript-eslint/adjacent-overload-signatures    typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/await-thenable                  typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/ban-types                       typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/consistent-type-assertions      typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/explicit-function-return-type   typescript   Stylistic Issues  Stylistic Issues                                  eslint-typescript\n@typescript-eslint/member-delimiter-style          typescript   Stylistic Issues  Stylistic Issues                                  eslint-typescript\n@typescript-eslint/no-array-constructor            typescript   Stylistic Issues  Stylistic Issues                                  eslint-typescript\n@typescript-eslint/no-empty-function               typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-empty-interface              typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-explicit-any                 typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-for-in-array                 typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-inferrable-types             typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-misused-new                  typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-misused-promises             typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-namespace                    typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-non-null-assertion           typescript   Stylistic Issues  Stylistic Issues                                  eslint-typescript\n@typescript-eslint/no-this-alias                   typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-unnecessary-type-assertion   typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/no-unused-vars                  typescript   Variables         Variables                                         eslint-typescript\n@typescript-eslint/no-use-before-define            typescript   Variables         Variables                                         eslint-typescript\n@typescript-eslint/no-var-requires                 typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/prefer-includes                 typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/prefer-namespace-keyword        typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/prefer-regexp-exec              typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/prefer-string-starts-ends-with  typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/require-await                   typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/triple-slash-reference          typescript   Best Practices    Best Practices                                    eslint-typescript\n@typescript-eslint/type-annotation-spacing         typescript   Stylistic Issues  Stylistic Issues                                  eslint-typescript\n@typescript-eslint/unbound-method                  typescript   Best Practices    Best Practices                                    eslint-typescript\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\n# Linter install\nRUN sfdx plugins:install @salesforce/sfdx-scanner\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner/#example-success-log","title":"Example success log","text":"<pre><code>Results of sfdx-scanner linter (version 2.4.0)\nSee documentation on https://megalinter.io/descriptors/salesforce_sfdx_scanner/\n-----------------------------------------------\n\n[SUCCESS] /tmp/098844eb-9b85-4505-b6b6-8c6bcd96050f\n    No rule violations found.\n\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner/#example-error-log","title":"Example error log","text":"<pre><code>Results of sfdx-scanner linter (version 2.4.0)\nSee documentation on https://megalinter.io/descriptors/salesforce_sfdx_scanner/\n-----------------------------------------------\n\n[ERROR] /tmp/a62282d7-5f53-42be-9816-03d1c2da8715\n    LOCATION                                                   DESCRIPTION                                            CATEGORY        U R L\n    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    force-app/main/default/classes/SoqlInLoop.cls:1              Apex classes should declare a sharing model if DML   Security        https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexsharingviolations\n                                                                 or SOQL/SOSL is used\n    force-app/main/default/classes/SoqlInLoop.cls:1              Missing ApexDoc comment                              Documentation   https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc\n    force-app/main/default/classes/SoqlInLoop.cls:2              Missing ApexDoc comment                              Documentation   https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc\n    force-app/main/default/classes/SoqlInLoop.cls:4              Avoid Soql queries inside loops                      Performance     https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#avoidsoqlinloops\n    force-app/main/default/classes/SoqlInLoop.cls:4              Avoid operations in loops that may hit governor      Performance     https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#operationwithlimitsinloop\n                                                                 limits\n    force-app/main/default/classes/SoqlInLoop.cls:4              Validate CRUD permission before SOQL/DML operation   Security        https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexcrudviolation\n    force-app/main/default/classes/SoqlInLoop.cls:4              Variable 'accounts' defined but not used             Best Practices  https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#unusedlocalvariable\n    force-app/main/default/triggers/trgUser.trigger:1            Avoid logic in triggers                              Best Practices  https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#avoidlogicintrigger\n    force-app/main/default/triggers/trgUser.trigger:4            The static field name 'BaseURI' doesn't match        Code Style      https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#fieldnamingconventions\n                                                                 '[a-z][a-zA-Z0-9]*'\n    force-app/main/default/triggers/trgUser.trigger:4            Variables should start with a lowercase character,   Code Style      https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions\n                                                                 'BaseURI' starts with uppercase character.\n    force-app/main/default/triggers/trgUser.trigger:7            The local variable name 'URI' doesn't match          Code Style      https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#localvariablenamingconventions\n                                                                 '[a-z][a-zA-Z0-9]*'\n    force-app/main/default/triggers/trgUser.trigger:7            Variables should start with a lowercase character,   Code Style      https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions\n                                                                 'URI' starts with uppercase character.\n    force-app/main/default/aura/auraIf/auraIfController.js:49    'event' is defined but never used.                   Variables       https://eslint.org/docs/rules/no-unused-vars\n    force-app/main/default/aura/auraIf/auraIfController.js:49    'helper' is defined but never used.                  Variables       https://eslint.org/docs/rules/no-unused-vars\n    ERROR running scanner:run:  Detected rule violations of severity 1 or lower. Please see the logs above.\n\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/","title":"sfdx-scanner-apex configuration in MegaLinter","text":""},{"location":"descriptors/salesforce_sfdx_scanner_apex/#sfdx-scanner-apex","title":"sfdx-scanner-apex","text":"<p>sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint</p> <p>If your root folder is not force-app, please set variable <code>SALESFORCE_SFDX_SCANNER_DIRECTORY</code></p> <p>You can select categories and single rules by defining custom arguments (example: <code>SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\"</code>)</p> <p>See more details in Help</p> <p>Workaround: Restricted to PMD</p>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#sfdx-scanner-apex-documentation","title":"sfdx-scanner-apex documentation","text":"<ul> <li>Version in MegaLinter: 4.11.0</li> <li>Visit Official Web Site</li> <li>See How to configure sfdx-scanner-apex rules<ul> <li>If custom <code>apex-pmd-ruleset.xml</code> config file isn't found, apex-pmd-ruleset.xml will be used</li> </ul> </li> <li>See How to disable sfdx-scanner-apex rules in files</li> <li>See Index of problems detected by sfdx-scanner-apex</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable sfdx-scanner-apex by adding <code>SALESFORCE_SFDX_SCANNER_APEX</code> in ENABLE_LINTERS variable</li> <li>Disable sfdx-scanner-apex by adding <code>SALESFORCE_SFDX_SCANNER_APEX</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SALESFORCE_SFDX_SCANNER_APEX_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_APEX_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_APEX_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> SALESFORCE_SFDX_SCANNER_APEX_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_APEX_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_APEX_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SALESFORCE_SFDX_SCANNER_APEX and its pre/post commands None SALESFORCE_SFDX_SCANNER_APEX_CONFIG_FILE sfdx-scanner-apex configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>apex-pmd-ruleset.xml</code> SALESFORCE_SFDX_SCANNER_APEX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SALESFORCE_SFDX_SCANNER_APEX_CLI_EXECUTABLE Override CLI executable <code>['sf']</code> SALESFORCE_DIRECTORY Directory containing SALESFORCE files (use <code>any</code> to always activate the linter) <code>force-app</code>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#ide-integration","title":"IDE Integration","text":"<p>Use sfdx-scanner-apex in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Eclipse pmd-eclipse-plugin Visit Web Site Emacs pmd-emacs Visit Web Site IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 salesforce Optimized for Salesforce based projects 54"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/salesforce_sfdx_scanner_apex/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>force-app</code> is found. (directory name can be overridden with <code>SALESFORCE_DIRECTORY</code>)</li> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>sfdx-scanner-apex is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-apex configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make sfdx-scanner-apex analyze only updated files</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#example-calls","title":"Example calls","text":"<pre><code>sf scanner:run\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#help-content","title":"Help content","text":"<pre><code> \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nScan a codebase with all the rules in the registry, or use parameters to filter the rules based on rulename, category, or ruleset.\n\nUSAGE\n  $ sf scanner run [--verbose] [-c &lt;value&gt;...] [-f\n    csv|html|json|junit|sarif|table|xml] [-o &lt;value&gt;] [-s &lt;value&gt; | --json]\n    [--normalize-severity] [-p &lt;value&gt;...] [-r &lt;value&gt;...] [-e eslint|eslint-lwc\n    |eslint-typescript|pmd|pmd-appexchange|retire-js|sfge|cpd...] [-t\n    &lt;value&gt;...] [--tsconfig &lt;value&gt;] [--eslintconfig &lt;value&gt;] [--pmdconfig\n    &lt;value&gt;] [--env &lt;value&gt;] [--verbose-violations]\n\nFLAGS\n  -c, --category=&lt;value&gt;...         One or more categories of rules to run.\n  -e, --engine=&lt;option&gt;...          Specify which engines to run.\n                                    &lt;options: eslint|eslint-lwc|eslint-typescrip\n                                    t|pmd|pmd-appexchange|retire-js|sfge|cpd&gt;\n  -f, --format=&lt;option&gt;             The output format for results written\n                                    directly to the console.\n                                    &lt;options:\n                                    csv|html|json|junit|sarif|table|xml&gt;\n  -o, --outfile=&lt;value&gt;             File to write output to.\n  -p, --projectdir=&lt;value&gt;...       The relative or absolute root project\n                                    directories used to set the context for\n                                    Graph Engine's analysis.\n  -r, --ruleset=&lt;value&gt;...          [Deprecated] Rulesets to run.\n  -s, --severity-threshold=&lt;value&gt;  An error will be thrown when a violation is\n                                    found with a severity equal to or greater\n                                    than the specified level.\n  -t, --target=&lt;value&gt;...           Source code location.\n      --env=&lt;value&gt;                 [Deprecated] Override ESLint's default\n                                    environment variables, in JSON-formatted\n                                    string.\n      --eslintconfig=&lt;value&gt;        Specify the location of eslintrc config to\n                                    customize eslint engine. The --tsconfig flag\n                                    can\u2019t be used with --eslintconfig flag.\n      --normalize-severity          Include normalized severity levels 1 (high),\n                                    2 (moderate), and 3 (low) with the results.\n      --pmdconfig=&lt;value&gt;           Location of PMD rule reference XML file to\n                                    customize rule selection.\n      --tsconfig=&lt;value&gt;            Location of tsconfig.json file used by the\n                                    eslint-typescript engine. The --tsconfig\n                                    flag can\u2019t be used with --eslintconfig flag.\n      --verbose                     Emit additional command output to stdout.\n      --verbose-violations          Includes Retire-js violation-message details\n                                    about each vulnerability in the results,\n                                    including summary, common vulnerabilities\n                                    and exposures (CVE), and URLs.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nCOMMANDS\n  scanner run dfa  Scan codebase with all DFA rules by default.\n\n \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nWarning: We plan to stop supporting v4.x of Code Analyzer in the coming months. We highly recommend that you start using v5.x, which is currently in Beta. For information on v5.x, see https://developer.salesforce.com/docs/platform/salesforce-code-analyzer/guide/code-analyzer.html.\n name                                                   languages   categories            rulesets [dep] engine            is dfa is pilot\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n VfCsrf                                                 visualforce Security                             pmd               N      N\n VfHtmlStyleTagXss                                      visualforce Security                             pmd               N      N\n VfUnescapeEl                                           visualforce Security                             pmd               N      N\n ApexAssertionsShouldIncludeMessage                     apex        Best Practices                       pmd               N      N\n ApexUnitTestClassShouldHaveAsserts                     apex        Best Practices        quickstart     pmd               N      N\n ApexUnitTestClassShouldHaveRunAs                       apex        Best Practices        quickstart     pmd               N      N\n ApexUnitTestMethodShouldHaveIsTestAnnotation           apex        Best Practices                       pmd               N      N\n ApexUnitTestShouldNotUseSeeAllDataTrue                 apex        Best Practices        quickstart     pmd               N      N\n AvoidGlobalModifier                                    apex        Best Practices        quickstart     pmd               N      N\n AvoidLogicInTrigger                                    apex        Best Practices        quickstart     pmd               N      N\n DebugsShouldUseLoggingLevel                            apex        Best Practices        quickstart     pmd               N      N\n UnusedLocalVariable                                    apex        Best Practices                       pmd               N      N\n QueueableWithoutFinalizer                              apex        Best Practices                       pmd               N      N\n AvoidDebugStatements                                   apex        Performance                          pmd               N      N\n AvoidNonRestrictiveQueries                             apex        Performance                          pmd               N      N\n EagerlyLoadedDescribeSObjectResult                     apex        Performance                          pmd               N      N\n OperationWithHighCostInLoop                            apex        Performance           quickstart     pmd               N      N\n OperationWithLimitsInLoop                              apex        Performance           quickstart     pmd               N      N\n ApexBadCrypto                                          apex        Security              quickstart     pmd               N      N\n ApexCRUDViolation                                      apex        Security              quickstart     pmd               N      N\n ApexDangerousMethods                                   apex        Security              quickstart     pmd               N      N\n ApexInsecureEndpoint                                   apex        Security              quickstart     pmd               N      N\n ApexOpenRedirect                                       apex        Security              quickstart     pmd               N      N\n ApexSharingViolations                                  apex        Security              quickstart     pmd               N      N\n ApexSOQLInjection                                      apex        Security              quickstart     pmd               N      N\n ApexSuggestUsingNamedCred                              apex        Security              quickstart     pmd               N      N\n ApexXSSFromEscapeFalse                                 apex        Security              quickstart     pmd               N      N\n ApexXSSFromURLParam                                    apex        Security              quickstart     pmd               N      N\n ClassNamingConventions                                 apex        Code Style            quickstart     pmd               N      N\n IfElseStmtsMustUseBraces                               apex        Code Style            quickstart     pmd               N      N\n IfStmtsMustUseBraces                                   apex        Code Style            quickstart     pmd               N      N\n FieldDeclarationsShouldBeAtStart                       apex        Code Style                           pmd               N      N\n FieldNamingConventions                                 apex        Code Style            quickstart     pmd               N      N\n ForLoopsMustUseBraces                                  apex        Code Style            quickstart     pmd               N      N\n FormalParameterNamingConventions                       apex        Code Style            quickstart     pmd               N      N\n LocalVariableNamingConventions                         apex        Code Style            quickstart     pmd               N      N\n MethodNamingConventions                                apex        Code Style            quickstart     pmd               N      N\n OneDeclarationPerLine                                  apex        Code Style            quickstart     pmd               N      N\n PropertyNamingConventions                              apex        Code Style            quickstart     pmd               N      N\n WhileLoopsMustUseBraces                                apex        Code Style            quickstart     pmd               N      N\n AvoidDeeplyNestedIfStmts                               apex        Design                quickstart     pmd               N      N\n UnusedMethod                                           apex        Design                               pmd               N      N\n CyclomaticComplexity                                   apex        Design                quickstart     pmd               N      N\n CognitiveComplexity                                    apex        Design                               pmd               N      N\n ExcessiveClassLength                                   apex        Design                quickstart     pmd               N      N\n ExcessiveParameterList                                 apex        Design                quickstart     pmd               N      N\n ExcessivePublicCount                                   apex        Design                quickstart     pmd               N      N\n NcssConstructorCount                                   apex        Design                quickstart     pmd               N      N\n NcssMethodCount                                        apex        Design                quickstart     pmd               N      N\n NcssTypeCount                                          apex        Design                quickstart     pmd               N      N\n StdCyclomaticComplexity                                apex        Design                quickstart     pmd               N      N\n TooManyFields                                          apex        Design                quickstart     pmd               N      N\n ApexDoc                                                apex        Documentation         quickstart     pmd               N      N\n ApexCSRF                                               apex        Error Prone           quickstart     pmd               N      N\n AvoidDirectAccessTriggerMap                            apex        Error Prone           quickstart     pmd               N      N\n AvoidHardcodingId                                      apex        Error Prone           quickstart     pmd               N      N\n AvoidNonExistentAnnotations                            apex        Error Prone           quickstart     pmd               N      N\n AvoidStatefulDatabaseResult                            apex        Error Prone                          pmd               N      N\n EmptyCatchBlock                                        apex        Error Prone           quickstart     pmd               N      N\n EmptyIfStmt                                            apex        Error Prone           quickstart     pmd               N      N\n EmptyStatementBlock                                    apex        Error Prone           quickstart     pmd               N      N\n EmptyTryOrFinallyBlock                                 apex        Error Prone           quickstart     pmd               N      N\n EmptyWhileStmt                                         apex        Error Prone           quickstart     pmd               N      N\n InaccessibleAuraEnabledGetter                          apex        Error Prone                          pmd               N      N\n MethodWithSameNameAsEnclosingClass                     apex        Error Prone           quickstart     pmd               N      N\n OverrideBothEqualsAndHashcode                          apex        Error Prone                          pmd               N      N\n TestMethodsMustBeInTestClasses                         apex        Error Prone                          pmd               N      N\n constructor-super                                      javascript  problem               problem        eslint            N      N\n for-direction                                          javascript  problem               problem        eslint            N      N\n getter-return                                          javascript  problem               problem        eslint            N      N\n no-async-promise-executor                              javascript  problem               problem        eslint            N      N\n no-case-declarations                                   javascript  suggestion            suggestion     eslint            N      N\n no-class-assign                                        javascript  problem               problem        eslint            N      N\n no-compare-neg-zero                                    javascript  problem               problem        eslint            N      N\n no-cond-assign                                         javascript  problem               problem        eslint            N      N\n no-const-assign                                        javascript  problem               problem        eslint            N      N\n no-constant-condition                                  javascript  problem               problem        eslint            N      N\n no-control-regex                                       javascript  problem               problem        eslint            N      N\n no-debugger                                            javascript  problem               problem        eslint            N      N\n no-delete-var                                          javascript  suggestion            suggestion     eslint            N      N\n no-dupe-args                                           javascript  problem               problem        eslint            N      N\n no-dupe-class-members                                  javascript  problem               problem        eslint            N      N\n no-dupe-else-if                                        javascript  problem               problem        eslint            N      N\n no-dupe-keys                                           javascript  problem               problem        eslint            N      N\n no-duplicate-case                                      javascript  problem               problem        eslint            N      N\n no-empty                                               javascript  suggestion            suggestion     eslint            N      N\n no-empty-character-class                               javascript  problem               problem        eslint            N      N\n no-empty-pattern                                       javascript  problem               problem        eslint            N      N\n no-ex-assign                                           javascript  problem               problem        eslint            N      N\n no-extra-boolean-cast                                  javascript  suggestion            suggestion     eslint            N      N\n no-fallthrough                                         javascript  problem               problem        eslint            N      N\n no-func-assign                                         javascript  problem               problem        eslint            N      N\n no-global-assign                                       javascript  suggestion            suggestion     eslint            N      N\n no-import-assign                                       javascript  problem               problem        eslint            N      N\n no-inner-declarations                                  javascript  problem               problem        eslint            N      N\n no-invalid-regexp                                      javascript  problem               problem        eslint            N      N\n no-irregular-whitespace                                javascript  problem               problem        eslint            N      N\n no-loss-of-precision                                   javascript  problem               problem        eslint            N      N\n no-misleading-character-class                          javascript  problem               problem        eslint            N      N\n no-new-symbol                                          javascript  problem               problem        eslint            N      N\n no-nonoctal-decimal-escape                             javascript  suggestion            suggestion     eslint            N      N\n no-obj-calls                                           javascript  problem               problem        eslint            N      N\n no-octal                                               javascript  suggestion            suggestion     eslint            N      N\n no-prototype-builtins                                  javascript  problem               problem        eslint            N      N\n no-redeclare                                           javascript  suggestion            suggestion     eslint            N      N\n no-regex-spaces                                        javascript  suggestion            suggestion     eslint            N      N\n no-self-assign                                         javascript  problem               problem        eslint            N      N\n no-setter-return                                       javascript  problem               problem        eslint            N      N\n no-shadow-restricted-names                             javascript  suggestion            suggestion     eslint            N      N\n no-sparse-arrays                                       javascript  problem               problem        eslint            N      N\n no-this-before-super                                   javascript  problem               problem        eslint            N      N\n no-undef                                               javascript  problem               problem        eslint            N      N\n no-unexpected-multiline                                javascript  problem               problem        eslint            N      N\n no-unreachable                                         javascript  problem               problem        eslint            N      N\n no-unsafe-finally                                      javascript  problem               problem        eslint            N      N\n no-unsafe-negation                                     javascript  problem               problem        eslint            N      N\n no-unsafe-optional-chaining                            javascript  problem               problem        eslint            N      N\n no-unused-labels                                       javascript  suggestion            suggestion     eslint            N      N\n no-unused-vars                                         javascript  problem               problem        eslint            N      N\n no-useless-backreference                               javascript  problem               problem        eslint            N      N\n no-useless-catch                                       javascript  suggestion            suggestion     eslint            N      N\n no-useless-escape                                      javascript  suggestion            suggestion     eslint            N      N\n no-with                                                javascript  suggestion            suggestion     eslint            N      N\n require-yield                                          javascript  suggestion            suggestion     eslint            N      N\n use-isnan                                              javascript  problem               problem        eslint            N      N\n valid-typeof                                           javascript  problem               problem        eslint            N      N\n for-direction                                          typescript  problem               problem        eslint-typescript N      N\n no-async-promise-executor                              typescript  problem               problem        eslint-typescript N      N\n no-case-declarations                                   typescript  suggestion            suggestion     eslint-typescript N      N\n no-class-assign                                        typescript  problem               problem        eslint-typescript N      N\n no-compare-neg-zero                                    typescript  problem               problem        eslint-typescript N      N\n no-cond-assign                                         typescript  problem               problem        eslint-typescript N      N\n no-constant-condition                                  typescript  problem               problem        eslint-typescript N      N\n no-control-regex                                       typescript  problem               problem        eslint-typescript N      N\n no-debugger                                            typescript  problem               problem        eslint-typescript N      N\n no-delete-var                                          typescript  suggestion            suggestion     eslint-typescript N      N\n no-dupe-else-if                                        typescript  problem               problem        eslint-typescript N      N\n no-duplicate-case                                      typescript  problem               problem        eslint-typescript N      N\n no-empty                                               typescript  suggestion            suggestion     eslint-typescript N      N\n no-empty-character-class                               typescript  problem               problem        eslint-typescript N      N\n no-empty-pattern                                       typescript  problem               problem        eslint-typescript N      N\n no-ex-assign                                           typescript  problem               problem        eslint-typescript N      N\n no-extra-boolean-cast                                  typescript  suggestion            suggestion     eslint-typescript N      N\n no-fallthrough                                         typescript  problem               problem        eslint-typescript N      N\n no-global-assign                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-inner-declarations                                  typescript  problem               problem        eslint-typescript N      N\n no-invalid-regexp                                      typescript  problem               problem        eslint-typescript N      N\n no-irregular-whitespace                                typescript  problem               problem        eslint-typescript N      N\n no-misleading-character-class                          typescript  problem               problem        eslint-typescript N      N\n no-nonoctal-decimal-escape                             typescript  suggestion            suggestion     eslint-typescript N      N\n no-octal                                               typescript  suggestion            suggestion     eslint-typescript N      N\n no-prototype-builtins                                  typescript  problem               problem        eslint-typescript N      N\n no-regex-spaces                                        typescript  suggestion            suggestion     eslint-typescript N      N\n no-self-assign                                         typescript  problem               problem        eslint-typescript N      N\n no-shadow-restricted-names                             typescript  suggestion            suggestion     eslint-typescript N      N\n no-sparse-arrays                                       typescript  problem               problem        eslint-typescript N      N\n no-unexpected-multiline                                typescript  problem               problem        eslint-typescript N      N\n no-unsafe-finally                                      typescript  problem               problem        eslint-typescript N      N\n no-unsafe-optional-chaining                            typescript  problem               problem        eslint-typescript N      N\n no-unused-labels                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-useless-backreference                               typescript  problem               problem        eslint-typescript N      N\n no-useless-catch                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-useless-escape                                      typescript  suggestion            suggestion     eslint-typescript N      N\n no-var                                                 typescript  suggestion            suggestion     eslint-typescript N      N\n no-with                                                typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-const                                           typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-rest-params                                     typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-spread                                          typescript  suggestion            suggestion     eslint-typescript N      N\n require-yield                                          typescript  suggestion            suggestion     eslint-typescript N      N\n use-isnan                                              typescript  problem               problem        eslint-typescript N      N\n valid-typeof                                           typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/await-thenable                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/ban-ts-comment                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/ban-types                           typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-array-constructor                typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-base-to-string                   typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-duplicate-enum-values            typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-duplicate-type-constituents      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-explicit-any                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-extra-non-null-assertion         typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-floating-promises                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-for-in-array                     typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-implied-eval                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-loss-of-precision                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-misused-new                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-misused-promises                 typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-namespace                        typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-non-null-asserted-optional-chain typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-redundant-type-constituents      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-this-alias                       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unnecessary-type-assertion       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unnecessary-type-constraint      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unsafe-argument                  typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-assignment                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-call                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-declaration-merging       typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-enum-comparison           typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unsafe-member-access             typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-return                    typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unused-vars                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-var-requires                     typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/prefer-as-const                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/require-await                       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/restrict-plus-operands              typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/restrict-template-expressions       typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/triple-slash-reference              typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/unbound-method                      typescript  problem               problem        eslint-typescript N      N\n insecure-bundled-dependencies                          javascript  Insecure Dependencies                retire-js         N      N\n AvoidDatabaseOperationInLoop                           apex        Performance                          sfge              Y      N\n AvoidMultipleMassSchemaLookups                         apex        Performance                          sfge              Y      N\n ApexFlsViolationRule                                   apex        Security                             sfge              Y      N\n RemoveUnusedMethod                                     apex        Performance                          sfge              Y      Y\n PerformNullCheckOnSoqlVariables                        apex        Performance                          sfge              Y      N\n UseWithSharingOnDatabaseOperation                      apex        Security                             sfge              Y      N\n ApexNullPointerExceptionRule                           apex        Error Prone                          sfge              Y      N\n UnimplementedTypeRule                                  apex        Performance                          sfge              N      N\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=@salesforce/cli\nARG NPM_SALESFORCE_CLI_VERSION=2.84.6\n# renovate: datasource=npm depName=@salesforce/plugin-packaging\nARG NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION=2.13.1\n# renovate: datasource=npm depName=sfdx-hardis\nARG SFDX_HARDIS_VERSION=5.29.1\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN sf plugins install @salesforce/plugin-packaging@${NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION} \\\n    &amp;&amp; echo y|sf plugins install sfdx-hardis@${SFDX_HARDIS_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\nENV SF_AUTOUPDATE_DISABLE=true SF_CLI_DISABLE_AUTOUPDATE=true\n# Linter install\n# renovate: datasource=npm depName=@salesforce/sfdx-scanner\nARG SALESFORCE_SFDX_SCANNER_VERSION=4.11.0\nRUN sf plugins install @salesforce/sfdx-scanner@${SALESFORCE_SFDX_SCANNER_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/","title":"sfdx-scanner-aura configuration in MegaLinter","text":""},{"location":"descriptors/salesforce_sfdx_scanner_aura/#sfdx-scanner-aura","title":"sfdx-scanner-aura","text":"<p>sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint</p> <p>If your root folder is not force-app, please set variable SALESFORCE_SFDX_SCANNER_AURA_DIRECTORY</p> <p>You can select categories and single rules by defining custom arguments (example: <code>SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\"</code>)</p> <p>See more details in Help</p> <p>Workaround: Restricted to Aura</p>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#sfdx-scanner-aura-documentation","title":"sfdx-scanner-aura documentation","text":"<ul> <li>Version in MegaLinter: 4.11.0</li> <li>Visit Official Web Site</li> <li>See How to configure sfdx-scanner-aura rules</li> <li>See How to disable sfdx-scanner-aura rules in files</li> <li>See Index of problems detected by sfdx-scanner-aura</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable sfdx-scanner-aura by adding <code>SALESFORCE_SFDX_SCANNER_AURA</code> in ENABLE_LINTERS variable</li> <li>Disable sfdx-scanner-aura by adding <code>SALESFORCE_SFDX_SCANNER_AURA</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SALESFORCE_SFDX_SCANNER_AURA_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_AURA_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_AURA_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> SALESFORCE_SFDX_SCANNER_AURA_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_AURA_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_AURA_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SALESFORCE_SFDX_SCANNER_AURA and its pre/post commands None SALESFORCE_SFDX_SCANNER_AURA_CONFIG_FILE sfdx-scanner-aura configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>--eslintconfig</code> SALESFORCE_SFDX_SCANNER_AURA_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SALESFORCE_SFDX_SCANNER_AURA_CLI_EXECUTABLE Override CLI executable <code>['sf']</code> SALESFORCE_DIRECTORY Directory containing SALESFORCE files (use <code>any</code> to always activate the linter) <code>force-app</code>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#ide-integration","title":"IDE Integration","text":"<p>Use sfdx-scanner-aura in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Salesforce Extension Pack"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 salesforce Optimized for Salesforce based projects 54"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/salesforce_sfdx_scanner_aura/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>force-app</code> is found. (directory name can be overridden with <code>SALESFORCE_DIRECTORY</code>)</li> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>sfdx-scanner-aura is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-aura configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make sfdx-scanner-aura analyze only updated files</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#example-calls","title":"Example calls","text":"<pre><code>sf scanner:run\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#help-content","title":"Help content","text":"<pre><code> \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nScan a codebase with all the rules in the registry, or use parameters to filter the rules based on rulename, category, or ruleset.\n\nUSAGE\n  $ sf scanner run [--verbose] [-c &lt;value&gt;...] [-f\n    csv|html|json|junit|sarif|table|xml] [-o &lt;value&gt;] [-s &lt;value&gt; | --json]\n    [--normalize-severity] [-p &lt;value&gt;...] [-r &lt;value&gt;...] [-e eslint|eslint-lwc\n    |eslint-typescript|pmd|pmd-appexchange|retire-js|sfge|cpd...] [-t\n    &lt;value&gt;...] [--tsconfig &lt;value&gt;] [--eslintconfig &lt;value&gt;] [--pmdconfig\n    &lt;value&gt;] [--env &lt;value&gt;] [--verbose-violations]\n\nFLAGS\n  -c, --category=&lt;value&gt;...         One or more categories of rules to run.\n  -e, --engine=&lt;option&gt;...          Specify which engines to run.\n                                    &lt;options: eslint|eslint-lwc|eslint-typescrip\n                                    t|pmd|pmd-appexchange|retire-js|sfge|cpd&gt;\n  -f, --format=&lt;option&gt;             The output format for results written\n                                    directly to the console.\n                                    &lt;options:\n                                    csv|html|json|junit|sarif|table|xml&gt;\n  -o, --outfile=&lt;value&gt;             File to write output to.\n  -p, --projectdir=&lt;value&gt;...       The relative or absolute root project\n                                    directories used to set the context for\n                                    Graph Engine's analysis.\n  -r, --ruleset=&lt;value&gt;...          [Deprecated] Rulesets to run.\n  -s, --severity-threshold=&lt;value&gt;  An error will be thrown when a violation is\n                                    found with a severity equal to or greater\n                                    than the specified level.\n  -t, --target=&lt;value&gt;...           Source code location.\n      --env=&lt;value&gt;                 [Deprecated] Override ESLint's default\n                                    environment variables, in JSON-formatted\n                                    string.\n      --eslintconfig=&lt;value&gt;        Specify the location of eslintrc config to\n                                    customize eslint engine. The --tsconfig flag\n                                    can\u2019t be used with --eslintconfig flag.\n      --normalize-severity          Include normalized severity levels 1 (high),\n                                    2 (moderate), and 3 (low) with the results.\n      --pmdconfig=&lt;value&gt;           Location of PMD rule reference XML file to\n                                    customize rule selection.\n      --tsconfig=&lt;value&gt;            Location of tsconfig.json file used by the\n                                    eslint-typescript engine. The --tsconfig\n                                    flag can\u2019t be used with --eslintconfig flag.\n      --verbose                     Emit additional command output to stdout.\n      --verbose-violations          Includes Retire-js violation-message details\n                                    about each vulnerability in the results,\n                                    including summary, common vulnerabilities\n                                    and exposures (CVE), and URLs.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nCOMMANDS\n  scanner run dfa  Scan codebase with all DFA rules by default.\n\n \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nWarning: We plan to stop supporting v4.x of Code Analyzer in the coming months. We highly recommend that you start using v5.x, which is currently in Beta. For information on v5.x, see https://developer.salesforce.com/docs/platform/salesforce-code-analyzer/guide/code-analyzer.html.\n name                                                   languages   categories            rulesets [dep] engine            is dfa is pilot\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n VfCsrf                                                 visualforce Security                             pmd               N      N\n VfHtmlStyleTagXss                                      visualforce Security                             pmd               N      N\n VfUnescapeEl                                           visualforce Security                             pmd               N      N\n ApexAssertionsShouldIncludeMessage                     apex        Best Practices                       pmd               N      N\n ApexUnitTestClassShouldHaveAsserts                     apex        Best Practices        quickstart     pmd               N      N\n ApexUnitTestClassShouldHaveRunAs                       apex        Best Practices        quickstart     pmd               N      N\n ApexUnitTestMethodShouldHaveIsTestAnnotation           apex        Best Practices                       pmd               N      N\n ApexUnitTestShouldNotUseSeeAllDataTrue                 apex        Best Practices        quickstart     pmd               N      N\n AvoidGlobalModifier                                    apex        Best Practices        quickstart     pmd               N      N\n AvoidLogicInTrigger                                    apex        Best Practices        quickstart     pmd               N      N\n DebugsShouldUseLoggingLevel                            apex        Best Practices        quickstart     pmd               N      N\n UnusedLocalVariable                                    apex        Best Practices                       pmd               N      N\n QueueableWithoutFinalizer                              apex        Best Practices                       pmd               N      N\n AvoidDebugStatements                                   apex        Performance                          pmd               N      N\n AvoidNonRestrictiveQueries                             apex        Performance                          pmd               N      N\n EagerlyLoadedDescribeSObjectResult                     apex        Performance                          pmd               N      N\n OperationWithHighCostInLoop                            apex        Performance           quickstart     pmd               N      N\n OperationWithLimitsInLoop                              apex        Performance           quickstart     pmd               N      N\n ApexBadCrypto                                          apex        Security              quickstart     pmd               N      N\n ApexCRUDViolation                                      apex        Security              quickstart     pmd               N      N\n ApexDangerousMethods                                   apex        Security              quickstart     pmd               N      N\n ApexInsecureEndpoint                                   apex        Security              quickstart     pmd               N      N\n ApexOpenRedirect                                       apex        Security              quickstart     pmd               N      N\n ApexSharingViolations                                  apex        Security              quickstart     pmd               N      N\n ApexSOQLInjection                                      apex        Security              quickstart     pmd               N      N\n ApexSuggestUsingNamedCred                              apex        Security              quickstart     pmd               N      N\n ApexXSSFromEscapeFalse                                 apex        Security              quickstart     pmd               N      N\n ApexXSSFromURLParam                                    apex        Security              quickstart     pmd               N      N\n ClassNamingConventions                                 apex        Code Style            quickstart     pmd               N      N\n IfElseStmtsMustUseBraces                               apex        Code Style            quickstart     pmd               N      N\n IfStmtsMustUseBraces                                   apex        Code Style            quickstart     pmd               N      N\n FieldDeclarationsShouldBeAtStart                       apex        Code Style                           pmd               N      N\n FieldNamingConventions                                 apex        Code Style            quickstart     pmd               N      N\n ForLoopsMustUseBraces                                  apex        Code Style            quickstart     pmd               N      N\n FormalParameterNamingConventions                       apex        Code Style            quickstart     pmd               N      N\n LocalVariableNamingConventions                         apex        Code Style            quickstart     pmd               N      N\n MethodNamingConventions                                apex        Code Style            quickstart     pmd               N      N\n OneDeclarationPerLine                                  apex        Code Style            quickstart     pmd               N      N\n PropertyNamingConventions                              apex        Code Style            quickstart     pmd               N      N\n WhileLoopsMustUseBraces                                apex        Code Style            quickstart     pmd               N      N\n AvoidDeeplyNestedIfStmts                               apex        Design                quickstart     pmd               N      N\n UnusedMethod                                           apex        Design                               pmd               N      N\n CyclomaticComplexity                                   apex        Design                quickstart     pmd               N      N\n CognitiveComplexity                                    apex        Design                               pmd               N      N\n ExcessiveClassLength                                   apex        Design                quickstart     pmd               N      N\n ExcessiveParameterList                                 apex        Design                quickstart     pmd               N      N\n ExcessivePublicCount                                   apex        Design                quickstart     pmd               N      N\n NcssConstructorCount                                   apex        Design                quickstart     pmd               N      N\n NcssMethodCount                                        apex        Design                quickstart     pmd               N      N\n NcssTypeCount                                          apex        Design                quickstart     pmd               N      N\n StdCyclomaticComplexity                                apex        Design                quickstart     pmd               N      N\n TooManyFields                                          apex        Design                quickstart     pmd               N      N\n ApexDoc                                                apex        Documentation         quickstart     pmd               N      N\n ApexCSRF                                               apex        Error Prone           quickstart     pmd               N      N\n AvoidDirectAccessTriggerMap                            apex        Error Prone           quickstart     pmd               N      N\n AvoidHardcodingId                                      apex        Error Prone           quickstart     pmd               N      N\n AvoidNonExistentAnnotations                            apex        Error Prone           quickstart     pmd               N      N\n AvoidStatefulDatabaseResult                            apex        Error Prone                          pmd               N      N\n EmptyCatchBlock                                        apex        Error Prone           quickstart     pmd               N      N\n EmptyIfStmt                                            apex        Error Prone           quickstart     pmd               N      N\n EmptyStatementBlock                                    apex        Error Prone           quickstart     pmd               N      N\n EmptyTryOrFinallyBlock                                 apex        Error Prone           quickstart     pmd               N      N\n EmptyWhileStmt                                         apex        Error Prone           quickstart     pmd               N      N\n InaccessibleAuraEnabledGetter                          apex        Error Prone                          pmd               N      N\n MethodWithSameNameAsEnclosingClass                     apex        Error Prone           quickstart     pmd               N      N\n OverrideBothEqualsAndHashcode                          apex        Error Prone                          pmd               N      N\n TestMethodsMustBeInTestClasses                         apex        Error Prone                          pmd               N      N\n constructor-super                                      javascript  problem               problem        eslint            N      N\n for-direction                                          javascript  problem               problem        eslint            N      N\n getter-return                                          javascript  problem               problem        eslint            N      N\n no-async-promise-executor                              javascript  problem               problem        eslint            N      N\n no-case-declarations                                   javascript  suggestion            suggestion     eslint            N      N\n no-class-assign                                        javascript  problem               problem        eslint            N      N\n no-compare-neg-zero                                    javascript  problem               problem        eslint            N      N\n no-cond-assign                                         javascript  problem               problem        eslint            N      N\n no-const-assign                                        javascript  problem               problem        eslint            N      N\n no-constant-condition                                  javascript  problem               problem        eslint            N      N\n no-control-regex                                       javascript  problem               problem        eslint            N      N\n no-debugger                                            javascript  problem               problem        eslint            N      N\n no-delete-var                                          javascript  suggestion            suggestion     eslint            N      N\n no-dupe-args                                           javascript  problem               problem        eslint            N      N\n no-dupe-class-members                                  javascript  problem               problem        eslint            N      N\n no-dupe-else-if                                        javascript  problem               problem        eslint            N      N\n no-dupe-keys                                           javascript  problem               problem        eslint            N      N\n no-duplicate-case                                      javascript  problem               problem        eslint            N      N\n no-empty                                               javascript  suggestion            suggestion     eslint            N      N\n no-empty-character-class                               javascript  problem               problem        eslint            N      N\n no-empty-pattern                                       javascript  problem               problem        eslint            N      N\n no-ex-assign                                           javascript  problem               problem        eslint            N      N\n no-extra-boolean-cast                                  javascript  suggestion            suggestion     eslint            N      N\n no-fallthrough                                         javascript  problem               problem        eslint            N      N\n no-func-assign                                         javascript  problem               problem        eslint            N      N\n no-global-assign                                       javascript  suggestion            suggestion     eslint            N      N\n no-import-assign                                       javascript  problem               problem        eslint            N      N\n no-inner-declarations                                  javascript  problem               problem        eslint            N      N\n no-invalid-regexp                                      javascript  problem               problem        eslint            N      N\n no-irregular-whitespace                                javascript  problem               problem        eslint            N      N\n no-loss-of-precision                                   javascript  problem               problem        eslint            N      N\n no-misleading-character-class                          javascript  problem               problem        eslint            N      N\n no-new-symbol                                          javascript  problem               problem        eslint            N      N\n no-nonoctal-decimal-escape                             javascript  suggestion            suggestion     eslint            N      N\n no-obj-calls                                           javascript  problem               problem        eslint            N      N\n no-octal                                               javascript  suggestion            suggestion     eslint            N      N\n no-prototype-builtins                                  javascript  problem               problem        eslint            N      N\n no-redeclare                                           javascript  suggestion            suggestion     eslint            N      N\n no-regex-spaces                                        javascript  suggestion            suggestion     eslint            N      N\n no-self-assign                                         javascript  problem               problem        eslint            N      N\n no-setter-return                                       javascript  problem               problem        eslint            N      N\n no-shadow-restricted-names                             javascript  suggestion            suggestion     eslint            N      N\n no-sparse-arrays                                       javascript  problem               problem        eslint            N      N\n no-this-before-super                                   javascript  problem               problem        eslint            N      N\n no-undef                                               javascript  problem               problem        eslint            N      N\n no-unexpected-multiline                                javascript  problem               problem        eslint            N      N\n no-unreachable                                         javascript  problem               problem        eslint            N      N\n no-unsafe-finally                                      javascript  problem               problem        eslint            N      N\n no-unsafe-negation                                     javascript  problem               problem        eslint            N      N\n no-unsafe-optional-chaining                            javascript  problem               problem        eslint            N      N\n no-unused-labels                                       javascript  suggestion            suggestion     eslint            N      N\n no-unused-vars                                         javascript  problem               problem        eslint            N      N\n no-useless-backreference                               javascript  problem               problem        eslint            N      N\n no-useless-catch                                       javascript  suggestion            suggestion     eslint            N      N\n no-useless-escape                                      javascript  suggestion            suggestion     eslint            N      N\n no-with                                                javascript  suggestion            suggestion     eslint            N      N\n require-yield                                          javascript  suggestion            suggestion     eslint            N      N\n use-isnan                                              javascript  problem               problem        eslint            N      N\n valid-typeof                                           javascript  problem               problem        eslint            N      N\n for-direction                                          typescript  problem               problem        eslint-typescript N      N\n no-async-promise-executor                              typescript  problem               problem        eslint-typescript N      N\n no-case-declarations                                   typescript  suggestion            suggestion     eslint-typescript N      N\n no-class-assign                                        typescript  problem               problem        eslint-typescript N      N\n no-compare-neg-zero                                    typescript  problem               problem        eslint-typescript N      N\n no-cond-assign                                         typescript  problem               problem        eslint-typescript N      N\n no-constant-condition                                  typescript  problem               problem        eslint-typescript N      N\n no-control-regex                                       typescript  problem               problem        eslint-typescript N      N\n no-debugger                                            typescript  problem               problem        eslint-typescript N      N\n no-delete-var                                          typescript  suggestion            suggestion     eslint-typescript N      N\n no-dupe-else-if                                        typescript  problem               problem        eslint-typescript N      N\n no-duplicate-case                                      typescript  problem               problem        eslint-typescript N      N\n no-empty                                               typescript  suggestion            suggestion     eslint-typescript N      N\n no-empty-character-class                               typescript  problem               problem        eslint-typescript N      N\n no-empty-pattern                                       typescript  problem               problem        eslint-typescript N      N\n no-ex-assign                                           typescript  problem               problem        eslint-typescript N      N\n no-extra-boolean-cast                                  typescript  suggestion            suggestion     eslint-typescript N      N\n no-fallthrough                                         typescript  problem               problem        eslint-typescript N      N\n no-global-assign                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-inner-declarations                                  typescript  problem               problem        eslint-typescript N      N\n no-invalid-regexp                                      typescript  problem               problem        eslint-typescript N      N\n no-irregular-whitespace                                typescript  problem               problem        eslint-typescript N      N\n no-misleading-character-class                          typescript  problem               problem        eslint-typescript N      N\n no-nonoctal-decimal-escape                             typescript  suggestion            suggestion     eslint-typescript N      N\n no-octal                                               typescript  suggestion            suggestion     eslint-typescript N      N\n no-prototype-builtins                                  typescript  problem               problem        eslint-typescript N      N\n no-regex-spaces                                        typescript  suggestion            suggestion     eslint-typescript N      N\n no-self-assign                                         typescript  problem               problem        eslint-typescript N      N\n no-shadow-restricted-names                             typescript  suggestion            suggestion     eslint-typescript N      N\n no-sparse-arrays                                       typescript  problem               problem        eslint-typescript N      N\n no-unexpected-multiline                                typescript  problem               problem        eslint-typescript N      N\n no-unsafe-finally                                      typescript  problem               problem        eslint-typescript N      N\n no-unsafe-optional-chaining                            typescript  problem               problem        eslint-typescript N      N\n no-unused-labels                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-useless-backreference                               typescript  problem               problem        eslint-typescript N      N\n no-useless-catch                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-useless-escape                                      typescript  suggestion            suggestion     eslint-typescript N      N\n no-var                                                 typescript  suggestion            suggestion     eslint-typescript N      N\n no-with                                                typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-const                                           typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-rest-params                                     typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-spread                                          typescript  suggestion            suggestion     eslint-typescript N      N\n require-yield                                          typescript  suggestion            suggestion     eslint-typescript N      N\n use-isnan                                              typescript  problem               problem        eslint-typescript N      N\n valid-typeof                                           typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/await-thenable                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/ban-ts-comment                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/ban-types                           typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-array-constructor                typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-base-to-string                   typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-duplicate-enum-values            typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-duplicate-type-constituents      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-explicit-any                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-extra-non-null-assertion         typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-floating-promises                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-for-in-array                     typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-implied-eval                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-loss-of-precision                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-misused-new                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-misused-promises                 typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-namespace                        typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-non-null-asserted-optional-chain typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-redundant-type-constituents      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-this-alias                       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unnecessary-type-assertion       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unnecessary-type-constraint      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unsafe-argument                  typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-assignment                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-call                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-declaration-merging       typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-enum-comparison           typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unsafe-member-access             typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-return                    typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unused-vars                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-var-requires                     typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/prefer-as-const                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/require-await                       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/restrict-plus-operands              typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/restrict-template-expressions       typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/triple-slash-reference              typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/unbound-method                      typescript  problem               problem        eslint-typescript N      N\n insecure-bundled-dependencies                          javascript  Insecure Dependencies                retire-js         N      N\n AvoidDatabaseOperationInLoop                           apex        Performance                          sfge              Y      N\n AvoidMultipleMassSchemaLookups                         apex        Performance                          sfge              Y      N\n ApexFlsViolationRule                                   apex        Security                             sfge              Y      N\n RemoveUnusedMethod                                     apex        Performance                          sfge              Y      Y\n PerformNullCheckOnSoqlVariables                        apex        Performance                          sfge              Y      N\n UseWithSharingOnDatabaseOperation                      apex        Security                             sfge              Y      N\n ApexNullPointerExceptionRule                           apex        Error Prone                          sfge              Y      N\n UnimplementedTypeRule                                  apex        Performance                          sfge              N      N\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=@salesforce/cli\nARG NPM_SALESFORCE_CLI_VERSION=2.84.6\n# renovate: datasource=npm depName=@salesforce/plugin-packaging\nARG NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION=2.13.1\n# renovate: datasource=npm depName=sfdx-hardis\nARG SFDX_HARDIS_VERSION=5.29.1\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN sf plugins install @salesforce/plugin-packaging@${NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION} \\\n    &amp;&amp; echo y|sf plugins install sfdx-hardis@${SFDX_HARDIS_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\nENV SF_AUTOUPDATE_DISABLE=true SF_CLI_DISABLE_AUTOUPDATE=true\n# Linter install\n# renovate: datasource=npm depName=@salesforce/sfdx-scanner\nARG SALESFORCE_SFDX_SCANNER_VERSION=4.11.0\nRUN sf plugins install @salesforce/sfdx-scanner@${SALESFORCE_SFDX_SCANNER_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/","title":"sfdx-scanner-lwc configuration in MegaLinter","text":""},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#sfdx-scanner-lwc","title":"sfdx-scanner-lwc","text":"<p>sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint</p> <p>If your root folder is not force-app, please set variable SALESFORCE_SFDX_SCANNER_LWC_DIRECTORY</p> <p>You can select categories and single rules by defining custom arguments (example: <code>SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\"</code>)</p> <p>See more details in Help</p> <p>Workaround: Restricted to LWC</p>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#sfdx-scanner-lwc-documentation","title":"sfdx-scanner-lwc documentation","text":"<ul> <li>Version in MegaLinter: 4.11.0</li> <li>Visit Official Web Site</li> <li>See How to configure sfdx-scanner-lwc rules</li> <li>See How to disable sfdx-scanner-lwc rules in files</li> <li>See Index of problems detected by sfdx-scanner-lwc</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable sfdx-scanner-lwc by adding <code>SALESFORCE_SFDX_SCANNER_LWC</code> in ENABLE_LINTERS variable</li> <li>Disable sfdx-scanner-lwc by adding <code>SALESFORCE_SFDX_SCANNER_LWC</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SALESFORCE_SFDX_SCANNER_LWC_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_LWC_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SALESFORCE_SFDX_SCANNER_LWC_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> SALESFORCE_SFDX_SCANNER_LWC_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_LWC_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_LWC_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SALESFORCE_SFDX_SCANNER_LWC and its pre/post commands None SALESFORCE_SFDX_SCANNER_LWC_CONFIG_FILE sfdx-scanner-lwc configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>--eslintconfig</code> SALESFORCE_SFDX_SCANNER_LWC_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SALESFORCE_SFDX_SCANNER_LWC_CLI_EXECUTABLE Override CLI executable <code>['sf']</code> SALESFORCE_DIRECTORY Directory containing SALESFORCE files (use <code>any</code> to always activate the linter) <code>force-app</code>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#ide-integration","title":"IDE Integration","text":"<p>Use sfdx-scanner-lwc in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Salesforce Extension Pack"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 salesforce Optimized for Salesforce based projects 54"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if sub-directory <code>force-app</code> is found. (directory name can be overridden with <code>SALESFORCE_DIRECTORY</code>)</li> <li>If this linter is active, all files will always be linted</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>sfdx-scanner-lwc is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-lwc configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make sfdx-scanner-lwc analyze only updated files</li> </ul>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#example-calls","title":"Example calls","text":"<pre><code>sf scanner:run\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#help-content","title":"Help content","text":"<pre><code> \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nScan a codebase with all the rules in the registry, or use parameters to filter the rules based on rulename, category, or ruleset.\n\nUSAGE\n  $ sf scanner run [--verbose] [-c &lt;value&gt;...] [-f\n    csv|html|json|junit|sarif|table|xml] [-o &lt;value&gt;] [-s &lt;value&gt; | --json]\n    [--normalize-severity] [-p &lt;value&gt;...] [-r &lt;value&gt;...] [-e eslint|eslint-lwc\n    |eslint-typescript|pmd|pmd-appexchange|retire-js|sfge|cpd...] [-t\n    &lt;value&gt;...] [--tsconfig &lt;value&gt;] [--eslintconfig &lt;value&gt;] [--pmdconfig\n    &lt;value&gt;] [--env &lt;value&gt;] [--verbose-violations]\n\nFLAGS\n  -c, --category=&lt;value&gt;...         One or more categories of rules to run.\n  -e, --engine=&lt;option&gt;...          Specify which engines to run.\n                                    &lt;options: eslint|eslint-lwc|eslint-typescrip\n                                    t|pmd|pmd-appexchange|retire-js|sfge|cpd&gt;\n  -f, --format=&lt;option&gt;             The output format for results written\n                                    directly to the console.\n                                    &lt;options:\n                                    csv|html|json|junit|sarif|table|xml&gt;\n  -o, --outfile=&lt;value&gt;             File to write output to.\n  -p, --projectdir=&lt;value&gt;...       The relative or absolute root project\n                                    directories used to set the context for\n                                    Graph Engine's analysis.\n  -r, --ruleset=&lt;value&gt;...          [Deprecated] Rulesets to run.\n  -s, --severity-threshold=&lt;value&gt;  An error will be thrown when a violation is\n                                    found with a severity equal to or greater\n                                    than the specified level.\n  -t, --target=&lt;value&gt;...           Source code location.\n      --env=&lt;value&gt;                 [Deprecated] Override ESLint's default\n                                    environment variables, in JSON-formatted\n                                    string.\n      --eslintconfig=&lt;value&gt;        Specify the location of eslintrc config to\n                                    customize eslint engine. The --tsconfig flag\n                                    can\u2019t be used with --eslintconfig flag.\n      --normalize-severity          Include normalized severity levels 1 (high),\n                                    2 (moderate), and 3 (low) with the results.\n      --pmdconfig=&lt;value&gt;           Location of PMD rule reference XML file to\n                                    customize rule selection.\n      --tsconfig=&lt;value&gt;            Location of tsconfig.json file used by the\n                                    eslint-typescript engine. The --tsconfig\n                                    flag can\u2019t be used with --eslintconfig flag.\n      --verbose                     Emit additional command output to stdout.\n      --verbose-violations          Includes Retire-js violation-message details\n                                    about each vulnerability in the results,\n                                    including summary, common vulnerabilities\n                                    and exposures (CVE), and URLs.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nCOMMANDS\n  scanner run dfa  Scan codebase with all DFA rules by default.\n\n \u203a   Warning: @salesforce/cli update available from 2.84.6 to 2.86.9.\nWarning: We plan to stop supporting v4.x of Code Analyzer in the coming months. We highly recommend that you start using v5.x, which is currently in Beta. For information on v5.x, see https://developer.salesforce.com/docs/platform/salesforce-code-analyzer/guide/code-analyzer.html.\n name                                                   languages   categories            rulesets [dep] engine            is dfa is pilot\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n VfCsrf                                                 visualforce Security                             pmd               N      N\n VfHtmlStyleTagXss                                      visualforce Security                             pmd               N      N\n VfUnescapeEl                                           visualforce Security                             pmd               N      N\n ApexAssertionsShouldIncludeMessage                     apex        Best Practices                       pmd               N      N\n ApexUnitTestClassShouldHaveAsserts                     apex        Best Practices        quickstart     pmd               N      N\n ApexUnitTestClassShouldHaveRunAs                       apex        Best Practices        quickstart     pmd               N      N\n ApexUnitTestMethodShouldHaveIsTestAnnotation           apex        Best Practices                       pmd               N      N\n ApexUnitTestShouldNotUseSeeAllDataTrue                 apex        Best Practices        quickstart     pmd               N      N\n AvoidGlobalModifier                                    apex        Best Practices        quickstart     pmd               N      N\n AvoidLogicInTrigger                                    apex        Best Practices        quickstart     pmd               N      N\n DebugsShouldUseLoggingLevel                            apex        Best Practices        quickstart     pmd               N      N\n UnusedLocalVariable                                    apex        Best Practices                       pmd               N      N\n QueueableWithoutFinalizer                              apex        Best Practices                       pmd               N      N\n AvoidDebugStatements                                   apex        Performance                          pmd               N      N\n AvoidNonRestrictiveQueries                             apex        Performance                          pmd               N      N\n EagerlyLoadedDescribeSObjectResult                     apex        Performance                          pmd               N      N\n OperationWithHighCostInLoop                            apex        Performance           quickstart     pmd               N      N\n OperationWithLimitsInLoop                              apex        Performance           quickstart     pmd               N      N\n ApexBadCrypto                                          apex        Security              quickstart     pmd               N      N\n ApexCRUDViolation                                      apex        Security              quickstart     pmd               N      N\n ApexDangerousMethods                                   apex        Security              quickstart     pmd               N      N\n ApexInsecureEndpoint                                   apex        Security              quickstart     pmd               N      N\n ApexOpenRedirect                                       apex        Security              quickstart     pmd               N      N\n ApexSharingViolations                                  apex        Security              quickstart     pmd               N      N\n ApexSOQLInjection                                      apex        Security              quickstart     pmd               N      N\n ApexSuggestUsingNamedCred                              apex        Security              quickstart     pmd               N      N\n ApexXSSFromEscapeFalse                                 apex        Security              quickstart     pmd               N      N\n ApexXSSFromURLParam                                    apex        Security              quickstart     pmd               N      N\n ClassNamingConventions                                 apex        Code Style            quickstart     pmd               N      N\n IfElseStmtsMustUseBraces                               apex        Code Style            quickstart     pmd               N      N\n IfStmtsMustUseBraces                                   apex        Code Style            quickstart     pmd               N      N\n FieldDeclarationsShouldBeAtStart                       apex        Code Style                           pmd               N      N\n FieldNamingConventions                                 apex        Code Style            quickstart     pmd               N      N\n ForLoopsMustUseBraces                                  apex        Code Style            quickstart     pmd               N      N\n FormalParameterNamingConventions                       apex        Code Style            quickstart     pmd               N      N\n LocalVariableNamingConventions                         apex        Code Style            quickstart     pmd               N      N\n MethodNamingConventions                                apex        Code Style            quickstart     pmd               N      N\n OneDeclarationPerLine                                  apex        Code Style            quickstart     pmd               N      N\n PropertyNamingConventions                              apex        Code Style            quickstart     pmd               N      N\n WhileLoopsMustUseBraces                                apex        Code Style            quickstart     pmd               N      N\n AvoidDeeplyNestedIfStmts                               apex        Design                quickstart     pmd               N      N\n UnusedMethod                                           apex        Design                               pmd               N      N\n CyclomaticComplexity                                   apex        Design                quickstart     pmd               N      N\n CognitiveComplexity                                    apex        Design                               pmd               N      N\n ExcessiveClassLength                                   apex        Design                quickstart     pmd               N      N\n ExcessiveParameterList                                 apex        Design                quickstart     pmd               N      N\n ExcessivePublicCount                                   apex        Design                quickstart     pmd               N      N\n NcssConstructorCount                                   apex        Design                quickstart     pmd               N      N\n NcssMethodCount                                        apex        Design                quickstart     pmd               N      N\n NcssTypeCount                                          apex        Design                quickstart     pmd               N      N\n StdCyclomaticComplexity                                apex        Design                quickstart     pmd               N      N\n TooManyFields                                          apex        Design                quickstart     pmd               N      N\n ApexDoc                                                apex        Documentation         quickstart     pmd               N      N\n ApexCSRF                                               apex        Error Prone           quickstart     pmd               N      N\n AvoidDirectAccessTriggerMap                            apex        Error Prone           quickstart     pmd               N      N\n AvoidHardcodingId                                      apex        Error Prone           quickstart     pmd               N      N\n AvoidNonExistentAnnotations                            apex        Error Prone           quickstart     pmd               N      N\n AvoidStatefulDatabaseResult                            apex        Error Prone                          pmd               N      N\n EmptyCatchBlock                                        apex        Error Prone           quickstart     pmd               N      N\n EmptyIfStmt                                            apex        Error Prone           quickstart     pmd               N      N\n EmptyStatementBlock                                    apex        Error Prone           quickstart     pmd               N      N\n EmptyTryOrFinallyBlock                                 apex        Error Prone           quickstart     pmd               N      N\n EmptyWhileStmt                                         apex        Error Prone           quickstart     pmd               N      N\n InaccessibleAuraEnabledGetter                          apex        Error Prone                          pmd               N      N\n MethodWithSameNameAsEnclosingClass                     apex        Error Prone           quickstart     pmd               N      N\n OverrideBothEqualsAndHashcode                          apex        Error Prone                          pmd               N      N\n TestMethodsMustBeInTestClasses                         apex        Error Prone                          pmd               N      N\n constructor-super                                      javascript  problem               problem        eslint            N      N\n for-direction                                          javascript  problem               problem        eslint            N      N\n getter-return                                          javascript  problem               problem        eslint            N      N\n no-async-promise-executor                              javascript  problem               problem        eslint            N      N\n no-case-declarations                                   javascript  suggestion            suggestion     eslint            N      N\n no-class-assign                                        javascript  problem               problem        eslint            N      N\n no-compare-neg-zero                                    javascript  problem               problem        eslint            N      N\n no-cond-assign                                         javascript  problem               problem        eslint            N      N\n no-const-assign                                        javascript  problem               problem        eslint            N      N\n no-constant-condition                                  javascript  problem               problem        eslint            N      N\n no-control-regex                                       javascript  problem               problem        eslint            N      N\n no-debugger                                            javascript  problem               problem        eslint            N      N\n no-delete-var                                          javascript  suggestion            suggestion     eslint            N      N\n no-dupe-args                                           javascript  problem               problem        eslint            N      N\n no-dupe-class-members                                  javascript  problem               problem        eslint            N      N\n no-dupe-else-if                                        javascript  problem               problem        eslint            N      N\n no-dupe-keys                                           javascript  problem               problem        eslint            N      N\n no-duplicate-case                                      javascript  problem               problem        eslint            N      N\n no-empty                                               javascript  suggestion            suggestion     eslint            N      N\n no-empty-character-class                               javascript  problem               problem        eslint            N      N\n no-empty-pattern                                       javascript  problem               problem        eslint            N      N\n no-ex-assign                                           javascript  problem               problem        eslint            N      N\n no-extra-boolean-cast                                  javascript  suggestion            suggestion     eslint            N      N\n no-fallthrough                                         javascript  problem               problem        eslint            N      N\n no-func-assign                                         javascript  problem               problem        eslint            N      N\n no-global-assign                                       javascript  suggestion            suggestion     eslint            N      N\n no-import-assign                                       javascript  problem               problem        eslint            N      N\n no-inner-declarations                                  javascript  problem               problem        eslint            N      N\n no-invalid-regexp                                      javascript  problem               problem        eslint            N      N\n no-irregular-whitespace                                javascript  problem               problem        eslint            N      N\n no-loss-of-precision                                   javascript  problem               problem        eslint            N      N\n no-misleading-character-class                          javascript  problem               problem        eslint            N      N\n no-new-symbol                                          javascript  problem               problem        eslint            N      N\n no-nonoctal-decimal-escape                             javascript  suggestion            suggestion     eslint            N      N\n no-obj-calls                                           javascript  problem               problem        eslint            N      N\n no-octal                                               javascript  suggestion            suggestion     eslint            N      N\n no-prototype-builtins                                  javascript  problem               problem        eslint            N      N\n no-redeclare                                           javascript  suggestion            suggestion     eslint            N      N\n no-regex-spaces                                        javascript  suggestion            suggestion     eslint            N      N\n no-self-assign                                         javascript  problem               problem        eslint            N      N\n no-setter-return                                       javascript  problem               problem        eslint            N      N\n no-shadow-restricted-names                             javascript  suggestion            suggestion     eslint            N      N\n no-sparse-arrays                                       javascript  problem               problem        eslint            N      N\n no-this-before-super                                   javascript  problem               problem        eslint            N      N\n no-undef                                               javascript  problem               problem        eslint            N      N\n no-unexpected-multiline                                javascript  problem               problem        eslint            N      N\n no-unreachable                                         javascript  problem               problem        eslint            N      N\n no-unsafe-finally                                      javascript  problem               problem        eslint            N      N\n no-unsafe-negation                                     javascript  problem               problem        eslint            N      N\n no-unsafe-optional-chaining                            javascript  problem               problem        eslint            N      N\n no-unused-labels                                       javascript  suggestion            suggestion     eslint            N      N\n no-unused-vars                                         javascript  problem               problem        eslint            N      N\n no-useless-backreference                               javascript  problem               problem        eslint            N      N\n no-useless-catch                                       javascript  suggestion            suggestion     eslint            N      N\n no-useless-escape                                      javascript  suggestion            suggestion     eslint            N      N\n no-with                                                javascript  suggestion            suggestion     eslint            N      N\n require-yield                                          javascript  suggestion            suggestion     eslint            N      N\n use-isnan                                              javascript  problem               problem        eslint            N      N\n valid-typeof                                           javascript  problem               problem        eslint            N      N\n for-direction                                          typescript  problem               problem        eslint-typescript N      N\n no-async-promise-executor                              typescript  problem               problem        eslint-typescript N      N\n no-case-declarations                                   typescript  suggestion            suggestion     eslint-typescript N      N\n no-class-assign                                        typescript  problem               problem        eslint-typescript N      N\n no-compare-neg-zero                                    typescript  problem               problem        eslint-typescript N      N\n no-cond-assign                                         typescript  problem               problem        eslint-typescript N      N\n no-constant-condition                                  typescript  problem               problem        eslint-typescript N      N\n no-control-regex                                       typescript  problem               problem        eslint-typescript N      N\n no-debugger                                            typescript  problem               problem        eslint-typescript N      N\n no-delete-var                                          typescript  suggestion            suggestion     eslint-typescript N      N\n no-dupe-else-if                                        typescript  problem               problem        eslint-typescript N      N\n no-duplicate-case                                      typescript  problem               problem        eslint-typescript N      N\n no-empty                                               typescript  suggestion            suggestion     eslint-typescript N      N\n no-empty-character-class                               typescript  problem               problem        eslint-typescript N      N\n no-empty-pattern                                       typescript  problem               problem        eslint-typescript N      N\n no-ex-assign                                           typescript  problem               problem        eslint-typescript N      N\n no-extra-boolean-cast                                  typescript  suggestion            suggestion     eslint-typescript N      N\n no-fallthrough                                         typescript  problem               problem        eslint-typescript N      N\n no-global-assign                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-inner-declarations                                  typescript  problem               problem        eslint-typescript N      N\n no-invalid-regexp                                      typescript  problem               problem        eslint-typescript N      N\n no-irregular-whitespace                                typescript  problem               problem        eslint-typescript N      N\n no-misleading-character-class                          typescript  problem               problem        eslint-typescript N      N\n no-nonoctal-decimal-escape                             typescript  suggestion            suggestion     eslint-typescript N      N\n no-octal                                               typescript  suggestion            suggestion     eslint-typescript N      N\n no-prototype-builtins                                  typescript  problem               problem        eslint-typescript N      N\n no-regex-spaces                                        typescript  suggestion            suggestion     eslint-typescript N      N\n no-self-assign                                         typescript  problem               problem        eslint-typescript N      N\n no-shadow-restricted-names                             typescript  suggestion            suggestion     eslint-typescript N      N\n no-sparse-arrays                                       typescript  problem               problem        eslint-typescript N      N\n no-unexpected-multiline                                typescript  problem               problem        eslint-typescript N      N\n no-unsafe-finally                                      typescript  problem               problem        eslint-typescript N      N\n no-unsafe-optional-chaining                            typescript  problem               problem        eslint-typescript N      N\n no-unused-labels                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-useless-backreference                               typescript  problem               problem        eslint-typescript N      N\n no-useless-catch                                       typescript  suggestion            suggestion     eslint-typescript N      N\n no-useless-escape                                      typescript  suggestion            suggestion     eslint-typescript N      N\n no-var                                                 typescript  suggestion            suggestion     eslint-typescript N      N\n no-with                                                typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-const                                           typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-rest-params                                     typescript  suggestion            suggestion     eslint-typescript N      N\n prefer-spread                                          typescript  suggestion            suggestion     eslint-typescript N      N\n require-yield                                          typescript  suggestion            suggestion     eslint-typescript N      N\n use-isnan                                              typescript  problem               problem        eslint-typescript N      N\n valid-typeof                                           typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/await-thenable                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/ban-ts-comment                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/ban-types                           typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-array-constructor                typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-base-to-string                   typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-duplicate-enum-values            typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-duplicate-type-constituents      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-explicit-any                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-extra-non-null-assertion         typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-floating-promises                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-for-in-array                     typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-implied-eval                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-loss-of-precision                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-misused-new                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-misused-promises                 typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-namespace                        typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-non-null-asserted-optional-chain typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-redundant-type-constituents      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-this-alias                       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unnecessary-type-assertion       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unnecessary-type-constraint      typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unsafe-argument                  typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-assignment                typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-call                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-declaration-merging       typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-enum-comparison           typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/no-unsafe-member-access             typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unsafe-return                    typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-unused-vars                      typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/no-var-requires                     typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/prefer-as-const                     typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/require-await                       typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/restrict-plus-operands              typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/restrict-template-expressions       typescript  problem               problem        eslint-typescript N      N\n @typescript-eslint/triple-slash-reference              typescript  suggestion            suggestion     eslint-typescript N      N\n @typescript-eslint/unbound-method                      typescript  problem               problem        eslint-typescript N      N\n insecure-bundled-dependencies                          javascript  Insecure Dependencies                retire-js         N      N\n AvoidDatabaseOperationInLoop                           apex        Performance                          sfge              Y      N\n AvoidMultipleMassSchemaLookups                         apex        Performance                          sfge              Y      N\n ApexFlsViolationRule                                   apex        Security                             sfge              Y      N\n RemoveUnusedMethod                                     apex        Performance                          sfge              Y      Y\n PerformNullCheckOnSoqlVariables                        apex        Performance                          sfge              Y      N\n UseWithSharingOnDatabaseOperation                      apex        Security                             sfge              Y      N\n ApexNullPointerExceptionRule                           apex        Error Prone                          sfge              Y      N\n UnimplementedTypeRule                                  apex        Performance                          sfge              N      N\n</code></pre>"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=@salesforce/cli\nARG NPM_SALESFORCE_CLI_VERSION=2.84.6\n# renovate: datasource=npm depName=@salesforce/plugin-packaging\nARG NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION=2.13.1\n# renovate: datasource=npm depName=sfdx-hardis\nARG SFDX_HARDIS_VERSION=5.29.1\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN sf plugins install @salesforce/plugin-packaging@${NPM_SALESFORCE_PLUGIN_PACKAGING_VERSION} \\\n    &amp;&amp; echo y|sf plugins install sfdx-hardis@${SFDX_HARDIS_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\nENV SF_AUTOUPDATE_DISABLE=true SF_CLI_DISABLE_AUTOUPDATE=true\n# Linter install\n# renovate: datasource=npm depName=@salesforce/sfdx-scanner\nARG SALESFORCE_SFDX_SCANNER_VERSION=4.11.0\nRUN sf plugins install @salesforce/sfdx-scanner@${SALESFORCE_SFDX_SCANNER_VERSION} \\\n    &amp;&amp; (npm cache clean --force || true) \\\n    &amp;&amp; rm -rf /root/.npm/_cacache\n</code></pre>"},{"location":"descriptors/scala/","title":"SCALA linters in MegaLinter","text":""},{"location":"descriptors/scala/#scala","title":"SCALA","text":""},{"location":"descriptors/scala/#linters","title":"Linters","text":"Linter Additional scalafixSCALA_SCALAFIX"},{"location":"descriptors/scala/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.scala</code></li> </ul> </li> </ul>"},{"location":"descriptors/scala/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value SCALA_PRE_COMMANDS List of bash commands to run before the linters None SCALA_POST_COMMANDS List of bash commands to run after the linters None SCALA_FILTER_REGEX_INCLUDE Custom regex including filter SCALA_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/scala/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/scala/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN curl --retry-all-errors --retry 10 -fLo coursier https://git.io/coursier-cli &amp;&amp; \\\n        chmod +x coursier\n\n</code></pre> <ul> <li>APK packages (Linux):<ul> <li>openjdk21</li> </ul> </li> </ul>"},{"location":"descriptors/scala_scalafix/","title":"scalafix configuration in MegaLinter","text":""},{"location":"descriptors/scala_scalafix/#scalafix","title":"scalafix","text":"<p>Scalafix lints and fixes scala files</p> <ul> <li>As there is no prior compilation or semantic db generation, the linting is applied only with built-in syntactic rules</li> <li>scalafix arguments related to semantic options can not be used</li> </ul>"},{"location":"descriptors/scala_scalafix/#scalafix-documentation","title":"scalafix documentation","text":"<ul> <li>Version in MegaLinter: 0.14.2</li> <li>Visit Official Web Site</li> <li>See How to configure scalafix rules<ul> <li>If custom <code>.scalafix.conf</code> config file isn't found, .scalafix.conf will be used</li> </ul> </li> <li>See How to disable scalafix rules in files</li> <li>See Index of problems detected by scalafix</li> </ul>"},{"location":"descriptors/scala_scalafix/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable scalafix by adding <code>SCALA_SCALAFIX</code> in ENABLE_LINTERS variable</li> <li>Disable scalafix by adding <code>SCALA_SCALAFIX</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SCALA_SCALAFIX_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SCALA_SCALAFIX_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SCALA_SCALAFIX_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SCALA_SCALAFIX_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> SCALA_SCALAFIX_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".scala\"]</code> SCALA_SCALAFIX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SCALA_SCALAFIX_PRE_COMMANDS List of bash commands to run before the linter None SCALA_SCALAFIX_POST_COMMANDS List of bash commands to run after the linter None SCALA_SCALAFIX_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SCALA_SCALAFIX and its pre/post commands None SCALA_SCALAFIX_CONFIG_FILE scalafix configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.scalafix.conf</code> SCALA_SCALAFIX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SCALA_SCALAFIX_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SCALA_SCALAFIX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SCALA_SCALAFIX_CLI_EXECUTABLE Override CLI executable <code>['scalafix']</code>"},{"location":"descriptors/scala_scalafix/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/scala_scalafix/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/scala_scalafix/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.scala</code></li> </ul>"},{"location":"descriptors/scala_scalafix/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>scalafix is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/scala_scalafix/#example-calls","title":"Example calls","text":"<pre><code>scalafix --check myfile.scala\n</code></pre> <pre><code>scalafix --check --config .scalafix.conf myfile.scala\n</code></pre> <pre><code>scalafix --config .scalafix.conf myfile.scala\n</code></pre>"},{"location":"descriptors/scala_scalafix/#help-content","title":"Help content","text":"<pre><code>Scalafix 0.14.2\nUsage: scalafix [options] [&lt;path&gt; ...]\n\nScalafix is a refactoring and linting tool. Scalafix supports both syntactic and\nsemantic linter and rewrite rules. Syntactic rules can run on source code\nwithout compilation. Semantic rules can run on source code that has been\ncompiled with the SemanticDB compiler plugin.\n\nCommon options:\n\n  --rules | -r [String ...] (default: [])\n    Scalafix rules to run, for example ExplicitResultTypes. The syntax for rules is\n    documented in\n    https://scalacenter.github.io/scalafix/docs/users/configuration#rules\n\n  --files | -f [&lt;path&gt; ...] (default: [])\n    Files or directories (recursively visited) to fix.\n\n  --config &lt;path&gt; (default: null)\n    File path to a .scalafix.conf configuration file. Defaults to .scalafix.conf in\n    the current working directory, if any.\n\n  --check\n    Check that all files have been fixed with scalafix, exiting with non-zero code\n    on violations. Won't write to files.\n\n  --stdout\n    Print fixed output to stdout instead of writing in-place.\n\n  --diff\n    If set, only apply scalafix to added and edited files in git diff against the\n    master branch.\n\n  --diff-base String (default: null)\n    If set, only apply scalafix to added and edited files in git diff against a\n    provided branch, commit or tag.\n\n  --syntactic\n    Run only syntactic rules, ignore semantic rules even if they are explicitly\n    configured in .scalafix.conf or via --rules\n\n  --triggered\n    Overlay the default rules &amp; rule settings in .scalafix.conf with the `triggered`\n    section\n\n  --verbose\n    Print out additional diagnostics while running scalafix.\n\n  --help | -h\n    Print out this help message and exit\n\n  --version | -v\n    Print out version number and exit\n\nSemantic options:\n\n  --classpath Classpath (default: \"&lt;classpath&gt;\")\n    Full classpath of the files to fix, required for semantic rules. The source\n    files that should be fixed must be compiled with semanticdb-scalac.\n    Dependencies are required by rules like ExplicitResultTypes, but the\n    dependencies do not need to be compiled with semanticdb-scalac.\n\n  --sourceroot &lt;path&gt; (default: null)\n    Absolute path passed to semanticdb with -P:semanticdb:sourceroot:&lt;path&gt;.\n    Relative filenames persisted in the Semantic DB are absolutized by the\n    sourceroot. Defaults to current working directory if not provided.\n\n  --semanticdb-targetroots [&lt;path&gt; ...] (default: [])\n    Absolute paths passed to semanticdb with -P:semanticdb:targetroot:&lt;path&gt;. Used\n    to locate semanticdb files. By default, Scalafix will try to locate\n    semanticdb files in the classpath\n\n  --auto-classpath\n    If set, automatically infer the --classpath flag by scanning for directories\n    with META-INF/semanticdb\n\n  --auto-classpath-roots [&lt;path&gt; ...] (default: [])\n    Additional directories to scan for --auto-classpath\n\n  --scalac-options [String ...] (default: [])\n    The scala compiler options used to compile this --classpath, for example\n    -Ywarn-unused-import\n\n  --scala-version ScalaVersion (default: \"2.13.16\")\n    The major or binary Scala version that the provided files are targeting, or the\n    full version that was used to compile them when a classpath is provided.\n\nTab completions:\n\n  --bash\n    Print out bash tab completions. To install:\n    ```\n    # macOS, requires \"brew install bash-completion\"\n    scalafix --bash &gt; /usr/local/etc/bash_completion.d/scalafix\n    # Linux\n    scalafix --bash &gt; /etc/bash_completion.d/scalafix\n    ```\n\n  --zsh\n    Print out zsh tab completions. To install:\n    ```\n    scalafix --zsh &gt; /usr/local/share/zsh/site-functions/_scalafix\n    unfunction _scalafix\n    autoload -U _scalafix\n    ```\n\nLess common options:\n\n  --exclude [&lt;glob&gt; ...] (default: [])\n    Unix-style glob for files to exclude from fixing. The glob syntax is defined by\n    `nio.FileSystem.getPathMatcher`.\n\n  --tool-classpath URLClassLoader (default: \"&lt;classloader&gt;\")\n    Additional classpath for compiling and classloading custom rules, as a set of\n    filesystem paths, separated by ':' on Unix or ';' on Windows.\n\n  --charset Charset (default: \"UTF-8\")\n    The encoding to use for reading/writing files\n\n  --no-sys-exit\n    If set, throw exception in the end instead of System.exit\n\n  --no-stale-semanticdb\n    Don't error on stale semanticdb files.\n\n  --settings ScalafixConfig (default: {})\n    Custom settings to override .scalafix.conf\n\n  --out-from String (default: null)\n    Write fixed output to custom location instead of in-place. Regex is passed as\n    first argument to file.replaceAll(--out-from, --out-to), requires --out-to.\n\n  --out-to String (default: null)\n    Companion of --out-from, string that is passed as second argument to\n    fileToFix.replaceAll(--out-from, --out-to)\n\n  --auto-suppress-linter-errors\n    Insert /* scalafix:ok */ suppressions instead of reporting linter errors.\n\n  --cwd &lt;path&gt; (default: \"/\")\n    The current working directory\n\n</code></pre>"},{"location":"descriptors/scala_scalafix/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\nENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nENV PATH=\"$JAVA_HOME/bin:${PATH}\"\nRUN curl --retry-all-errors --retry 10 -fLo coursier https://git.io/coursier-cli &amp;&amp; \\\n        chmod +x coursier\n\n# Linter install\nRUN ./coursier install scalafix --quiet --install-dir /usr/bin &amp;&amp; rm -rf /root/.cache\n</code></pre>"},{"location":"descriptors/snakemake/","title":"SNAKEMAKE linters in MegaLinter","text":""},{"location":"descriptors/snakemake/#snakemake","title":"SNAKEMAKE","text":""},{"location":"descriptors/snakemake/#linters","title":"Linters","text":"Linter Additional snakemakeSNAKEMAKE_LINT snakefmtSNAKEMAKE_SNAKEFMT"},{"location":"descriptors/snakemake/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.smk</code></li> </ul> </li> </ul> <ul> <li>File names:<ul> <li><code>Snakefile</code></li> </ul> </li> </ul>"},{"location":"descriptors/snakemake/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value SNAKEMAKE_PRE_COMMANDS List of bash commands to run before the linters None SNAKEMAKE_POST_COMMANDS List of bash commands to run after the linters None SNAKEMAKE_FILTER_REGEX_INCLUDE Custom regex including filter SNAKEMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/snakemake_snakefmt/","title":"snakefmt configuration in MegaLinter","text":""},{"location":"descriptors/snakemake_snakefmt/#snakefmt","title":"snakefmt","text":""},{"location":"descriptors/snakemake_snakefmt/#snakefmt-documentation","title":"snakefmt documentation","text":"<ul> <li>Version in MegaLinter: 0.11.0</li> <li>Visit Official Web Site</li> <li>See How to configure snakefmt rules<ul> <li>If custom <code>.snakefmt.toml</code> config file isn't found, .snakefmt.toml will be used</li> </ul> </li> </ul>"},{"location":"descriptors/snakemake_snakefmt/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable snakefmt by adding <code>SNAKEMAKE_SNAKEFMT</code> in ENABLE_LINTERS variable</li> <li>Disable snakefmt by adding <code>SNAKEMAKE_SNAKEFMT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>SNAKEMAKE_SNAKEFMT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value SNAKEMAKE_SNAKEFMT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SNAKEMAKE_SNAKEFMT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SNAKEMAKE_SNAKEFMT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".smk\"]</code> SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> <code>[\"Snakefile\"]</code> SNAKEMAKE_SNAKEFMT_PRE_COMMANDS List of bash commands to run before the linter None SNAKEMAKE_SNAKEFMT_POST_COMMANDS List of bash commands to run after the linter None SNAKEMAKE_SNAKEFMT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SNAKEMAKE_SNAKEFMT and its pre/post commands None SNAKEMAKE_SNAKEFMT_CONFIG_FILE snakefmt configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.snakefmt.toml</code> SNAKEMAKE_SNAKEFMT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SNAKEMAKE_SNAKEFMT_CLI_EXECUTABLE Override CLI executable <code>['snakefmt']</code>"},{"location":"descriptors/snakemake_snakefmt/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/snakemake_snakefmt/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/snakemake_snakefmt/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.smk</code></li> <li>File names (regex): <code>Snakefile</code></li> </ul>"},{"location":"descriptors/snakemake_snakefmt/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>snakefmt is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/snakemake_snakefmt/#example-calls","title":"Example calls","text":"<pre><code>snakefmt --check --compact-diff Snakefile\n</code></pre> <pre><code>snakefmt --check --compact-diff --config .snakefmt.toml Snakefile\n</code></pre> <pre><code>snakefmt --config .snakefmt.toml Snakefile\n</code></pre>"},{"location":"descriptors/snakemake_snakefmt/#help-content","title":"Help content","text":"<pre><code>Usage: snakefmt [OPTIONS] [SRC]...\n\n  The uncompromising Snakemake code formatter.\n\n  SRC specifies directories and files to format. Directories will be searched\n  for file names that conform to the include/exclude patterns provided.\n\n  Files are modified in-place by default; use diff, check, or  `snakefmt - &lt;\n  Snakefile` to avoid this.\n\nOptions:\n  -l, --line-length INT  Lines longer than INT will be wrapped. [default: 88]\n  --check                Don't write the files back, just return the status.\n                         Return code 0 means nothing would change. Return code\n                         1 means some files would be reformatted. Return code\n                         123 means there was an error.\n  -d, --diff             Don't write the files back, just output a diff for\n                         each file to stdout.\n  --compact-diff         Same as --diff but only shows lines that would change\n                         plus a few lines of context.\n  --include PATTERN      A regular expression that matches files and\n                         directories that should be included on recursive\n                         searches.  An empty value means all files are\n                         included regardless of the name.  Use forward slashes\n                         for directories on all platforms (Windows, too).\n                         Exclusions are calculated first, inclusions later.\n                         [default: (\\.smk$|^Snakefile)]\n  --exclude PATTERN      A regular expression that matches files and\n                         directories that should be excluded on recursive\n                         searches.  An empty value means no paths are\n                         excluded. Use forward slashes for directories on all\n                         platforms (Windows, too). Exclusions are calculated\n                         first, inclusions later.  [default: (\\.snakemake/|\\.e\n                         ggs/|\\.git/|\\.hg/|\\.mypy_cache/|\\.nox/|\\.tox/|\\.venv/\n                         |\\.svn/|_build/|buck-\n                         out/|/build/|/dist/|\\.template/)]\n  -c, --config PATH      Read configuration from PATH. By default, will try to\n                         read from `./pyproject.toml`\n  -h, --help             Show this message and exit.\n  -V, --version          Show the version and exit.\n  -v, --verbose          Turns on debug-level logger.\n</code></pre>"},{"location":"descriptors/snakemake_snakefmt/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=snakefmt\nARG PIP_SNAKEFMT_VERSION=0.11.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>snakefmt==0.11.0</li> </ul> </li> </ul>"},{"location":"descriptors/snakemake_snakemake/","title":"snakemake configuration in MegaLinter","text":"<p>This linter has been disabled in this version</p> <p>Disabled reason: Dependency datrie not maintained, and issue open in snakemake repo since july - https://github.com/snakemake/snakemake/issues/2970</p>"},{"location":"descriptors/snakemake_snakemake/#snakemake-documentation","title":"snakemake documentation","text":"<ul> <li>Version in MegaLinter: 8.27.1</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/snakemake_snakemake/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable snakemake by adding <code>SNAKEMAKE_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable snakemake by adding <code>SNAKEMAKE_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SNAKEMAKE_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SNAKEMAKE_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SNAKEMAKE_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> SNAKEMAKE_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".smk\"]</code> SNAKEMAKE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> <code>[\"Snakefile\"]</code> SNAKEMAKE_LINT_PRE_COMMANDS List of bash commands to run before the linter None SNAKEMAKE_LINT_POST_COMMANDS List of bash commands to run after the linter None SNAKEMAKE_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SNAKEMAKE_LINT and its pre/post commands None SNAKEMAKE_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SNAKEMAKE_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SNAKEMAKE_LINT_CLI_EXECUTABLE Override CLI executable <code>['snakemake']</code>"},{"location":"descriptors/snakemake_snakemake/#ide-integration","title":"IDE Integration","text":"<p>Use snakemake in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA SnakeCharm Visual Studio Code VSCode SnakeMake"},{"location":"descriptors/snakemake_snakemake/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127"},{"location":"descriptors/snakemake_snakemake/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/snakemake_snakemake/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.smk</code></li> <li>File names (regex): <code>Snakefile</code></li> </ul>"},{"location":"descriptors/snakemake_snakemake/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>snakemake is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/snakemake_snakemake/#example-calls","title":"Example calls","text":"<pre><code>snakemake --lint -s Snakefile\n</code></pre>"},{"location":"descriptors/snakemake_snakemake/#help-content","title":"Help content","text":"<pre><code>usage: snakemake [-h] [--dry-run] [--profile PROFILE]\n                 [--workflow-profile WORKFLOW_PROFILE] [--cache [RULE ...]]\n                 [--snakefile FILE] [--cores N] [--jobs N] [--local-cores N]\n                 [--resources NAME=INT [NAME=INT ...]]\n                 [--set-threads RULE=THREADS [RULE=THREADS ...]]\n                 [--max-threads MAX_THREADS]\n                 [--set-resources RULE:RESOURCE=VALUE [RULE:RESOURCE=VALUE ...]]\n                 [--set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...]]\n                 [--set-resource-scopes RESOURCE=[global|local]\n                 [RESOURCE=[global|local] ...]]\n                 [--default-resources [NAME=INT ...]]\n                 [--preemptible-rules [PREEMPTIBLE_RULES ...]]\n                 [--preemptible-retries PREEMPTIBLE_RETRIES]\n                 [--configfile FILE [FILE ...]] [--config [KEY=VALUE ...]]\n                 [--envvars VARNAME [VARNAME ...]] [--directory DIR] [--touch]\n                 [--keep-going]\n                 [--rerun-triggers {code,input,mtime,params,software-env} [{code,input,mtime,params,software-env} ...]]\n                 [--force] [--executor {local,dryrun,touch}] [--forceall]\n                 [--forcerun [TARGET ...]]\n                 [--consider-ancient RULE=INPUTITEMS [RULE=INPUTITEMS ...]]\n                 [--prioritize TARGET [TARGET ...]]\n                 [--batch RULE=BATCH/BATCHES] [--until TARGET [TARGET ...]]\n                 [--omit-from TARGET [TARGET ...]] [--rerun-incomplete]\n                 [--shadow-prefix DIR] [--scheduler [{ilp,greedy}]]\n                 [--wms-monitor [WMS_MONITOR]]\n                 [--wms-monitor-arg [NAME=VALUE ...]]\n                 [--scheduler-ilp-solver {PULP_CBC_CMD}]\n                 [--conda-base-path CONDA_BASE_PATH] [--no-subworkflows]\n                 [--precommand PRECOMMAND] [--groups GROUPS [GROUPS ...]]\n                 [--group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...]]\n                 [--report [FILE]] [--report-stylesheet CSSFILE]\n                 [--reporter PLUGIN] [--draft-notebook TARGET]\n                 [--edit-notebook TARGET] [--notebook-listen IP:PORT]\n                 [--lint [{text,json}]] [--generate-unit-tests [TESTPATH]]\n                 [--containerize] [--export-cwl FILE] [--list-rules]\n                 [--list-target-rules] [--dag] [--rulegraph] [--filegraph]\n                 [--d3dag] [--summary] [--detailed-summary] [--archive FILE]\n                 [--cleanup-metadata FILE [FILE ...]] [--cleanup-shadow]\n                 [--skip-script-cleanup] [--unlock]\n                 [--list-changes {input,params,code}] [--list-input-changes]\n                 [--list-params-changes] [--list-untracked]\n                 [--delete-all-output | --delete-temp-output]\n                 [--keep-incomplete] [--drop-metadata] [--version]\n                 [--printshellcmds] [--debug-dag] [--nocolor]\n                 [--quiet [{all,host,progress,rules} ...]]\n                 [--print-compilation] [--verbose] [--force-use-threads]\n                 [--allow-ambiguity] [--nolock] [--ignore-incomplete]\n                 [--max-inventory-time SECONDS] [--latency-wait SECONDS]\n                 [--wait-for-files [FILE ...]] [--wait-for-files-file FILE]\n                 [--queue-input-wait-time SECONDS] [--notemp] [--all-temp]\n                 [--unneeded-temp-files FILE [FILE ...]]\n                 [--keep-storage-local-copies]\n                 [--target-files-omit-workdir-adjustment]\n                 [--allowed-rules ALLOWED_RULES [ALLOWED_RULES ...]]\n                 [--max-jobs-per-timespan MAX_JOBS_PER_TIMESPAN]\n                 [--max-jobs-per-second MAX_JOBS_PER_SECOND]\n                 [--max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND]\n                 [--seconds-between-status-checks SECONDS_BETWEEN_STATUS_CHECKS]\n                 [--retries RETRIES] [--wrapper-prefix WRAPPER_PREFIX]\n                 [--default-storage-provider DEFAULT_STORAGE_PROVIDER]\n                 [--default-storage-prefix DEFAULT_STORAGE_PREFIX]\n                 [--local-storage-prefix LOCAL_STORAGE_PREFIX]\n                 [--remote-job-local-storage-prefix REMOTE_JOB_LOCAL_STORAGE_PREFIX]\n                 [--shared-fs-usage {input-output,persistence,software-deployment,source-cache,sources,storage-local-copies,none} [{input-output,persistence,software-deployment,source-cache,sources,storage-local-copies,none} ...]]\n                 [--scheduler-greediness SCHEDULER_GREEDINESS]\n                 [--scheduler-subsample SCHEDULER_SUBSAMPLE] [--no-hooks]\n                 [--debug] [--runtime-profile FILE]\n                 [--local-groupid LOCAL_GROUPID] [--attempt ATTEMPT]\n                 [--show-failed-logs] [--log-handler-script FILE]\n                 [--log-service {none,slack,wms}] [--job-deploy-sources]\n                 [--benchmark-extended] [--container-image IMAGE]\n                 [--immediate-submit] [--jobscript SCRIPT] [--jobname NAME]\n                 [--flux]\n                 [--software-deployment-method {apptainer,conda,env-modules} [{apptainer,conda,env-modules} ...]]\n                 [--container-cleanup-images] [--use-conda]\n                 [--conda-not-block-search-path-envvars] [--list-conda-envs]\n                 [--conda-prefix DIR] [--conda-cleanup-envs]\n                 [--conda-cleanup-pkgs [{tarballs,cache}]]\n                 [--conda-create-envs-only] [--conda-frontend {conda,mamba}]\n                 [--use-apptainer] [--apptainer-prefix DIR]\n                 [--apptainer-args ARGS] [--use-envmodules]\n                 [--scheduler-solver-path SCHEDULER_SOLVER_PATH]\n                 [--deploy-sources QUERY CHECKSUM]\n                 [--target-jobs TARGET_JOBS [TARGET_JOBS ...]]\n                 [--mode {default,remote,subprocess}]\n                 [--report-html-path VALUE]\n                 [--report-html-stylesheet-path VALUE]\n                 [targets ...]\n\nSnakemake is a Python based language and execution environment for GNU Make-\nlike workflows.\n\noptions:\n  -h, --help            show this help message and exit\n\nEXECUTION:\n  targets               Targets to build. May be rules or files.\n  --dry-run, --dryrun, -n\n                        Do not execute anything, and display what would be\n                        done. If you have a very large workflow, use --dry-run\n                        --quiet to just print a summary of the DAG of jobs.\n                        (default: False)\n  --profile PROFILE     Name of profile to use for configuring Snakemake.\n                        Snakemake will search for a corresponding folder in\n                        /etc/xdg/snakemake and /root/.config/snakemake.\n                        Alternatively, this can be an absolute or relative\n                        path. The profile folder has to contain a file\n                        'config.yaml'. This file can be used to set default\n                        values for command line options in YAML format. For\n                        example, '--cluster qsub' becomes 'cluster: qsub' in\n                        the YAML file. Profiles can be obtained from\n                        https://github.com/snakemake-profiles. The profile can\n                        also be set via the environment variable\n                        $SNAKEMAKE_PROFILE. To override this variable and use\n                        no profile at all, provide the value 'none' to this\n                        argument. [env var: SNAKEMAKE_PROFILE]\n  --workflow-profile WORKFLOW_PROFILE\n                        Path (relative to current directory) to workflow\n                        specific profile folder to use for configuring\n                        Snakemake with parameters specific for this workflow\n                        (like resources). If this flag is not used, Snakemake\n                        will by default use 'profiles/default' if present\n                        (searched both relative to current directory and\n                        relative to Snakefile, in this order). For skipping\n                        any workflow specific profile provide the special\n                        value 'none'. Settings made in the workflow profile\n                        will override settings made in the general profile\n                        (see --profile). The profile folder has to contain a\n                        file 'config.yaml'. This file can be used to set\n                        default values for command line options in YAML\n                        format. For example, '--executor slurm' becomes\n                        'executor: slurm' in the YAML file. It is advisable to\n                        use the workflow profile to set or overwrite e.g.\n                        workflow specific resources like the amount of threads\n                        of a particular rule or the amount of memory needed.\n                        Note that in such cases, the arguments may be given as\n                        nested YAML mappings in the profile, e.g. 'set-\n                        threads: myrule: 4' instead of 'set-threads:\n                        myrule=4'.\n  --cache [RULE ...]    Store output files of given rules in a central cache\n                        given by the environment variable\n                        $SNAKEMAKE_OUTPUT_CACHE. Likewise, retrieve output\n                        files of the given rules from this cache if they have\n                        been created before (by anybody writing to the same\n                        cache), instead of actually executing the rules.\n                        Output files are identified by hashing all steps,\n                        parameters and software stack (conda envs or\n                        containers) needed to create them.\n  --snakefile FILE, -s FILE\n                        The workflow definition in form of a snakefile.\n                        Usually, you should not need to specify this. By\n                        default, Snakemake will search for 'Snakefile',\n                        'snakefile', 'workflow/Snakefile',\n                        'workflow/snakefile' beneath the current working\n                        directory, in this order. Only if you definitely want\n                        a different layout, you need to use this parameter.\n  --cores N, -c N       Use at most N CPU cores/jobs in parallel. If N is\n                        omitted or 'all', the limit is set to the number of\n                        available CPU cores. In case of cluster/cloud\n                        execution, this argument sets the maximum number of\n                        cores requested from the cluster or cloud scheduler.\n                        (See https://snakemake.readthedocs.io/en/stable/snakef\n                        iles/rules.html#resources-remote-execution for more\n                        info.) This number is available to rules via\n                        workflow.cores.\n  --jobs N, -j N        Use at most N CPU cluster/cloud jobs in parallel. For\n                        local execution this is an alias for --cores (it is\n                        though recommended to use --cores in that case). Note:\n                        Set to 'unlimited' to allow any number of parallel\n                        jobs.\n  --local-cores N       In cluster/cloud mode, use at most N cores of the host\n                        machine in parallel (default: number of CPU cores of\n                        the host). The cores are used to execute local rules.\n                        This option is ignored when not in cluster/cloud mode.\n                        (default: &lt;available CPU count&gt;)\n  --resources NAME=INT [NAME=INT ...], --res NAME=INT [NAME=INT ...]\n                        Define additional resources that shall constrain the\n                        scheduling analogously to --cores (see above). A\n                        resource is defined as a name and an integer value.\n                        E.g. --resources mem_mb=1000. Rules can use resources\n                        by defining the resource keyword, e.g. resources:\n                        mem_mb=600. If now two rules require 600 of the\n                        resource 'mem_mb' they won't be run in parallel by the\n                        scheduler. In cluster/cloud mode, this argument will\n                        also constrain the amount of resources requested from\n                        the server. (See https://snakemake.readthedocs.io/en/s\n                        table/snakefiles/rules.html#resources-remote-execution\n                        for more info.) (default: )\n  --set-threads RULE=THREADS [RULE=THREADS ...]\n                        Overwrite thread usage of rules. This allows to fine-\n                        tune workflow parallelization. In particular, this is\n                        helpful to target certain cluster nodes by e.g.\n                        shifting a rule to use more, or less threads than\n                        defined in the workflow. Thereby, THREADS has to be a\n                        positive integer, and RULE has to be the name of the\n                        rule. (default: )\n  --max-threads MAX_THREADS\n                        Define a global maximum number of threads available to\n                        any rule. Rules requesting more threads (via the\n                        threads keyword) will have their values reduced to the\n                        maximum. This can be useful when you want to restrict\n                        the maximum number of threads without modifying the\n                        workflow definition or overwriting rules individually\n                        with --set-threads.\n  --set-resources RULE:RESOURCE=VALUE [RULE:RESOURCE=VALUE ...]\n                        Overwrite resource usage of rules. This allows to\n                        fine-tune workflow resources. In particular, this is\n                        helpful to target certain cluster nodes by e.g.\n                        defining a certain partition for a rule, or overriding\n                        a temporary directory. Thereby, VALUE has to be a\n                        positive integer or a string, RULE has to be the name\n                        of the rule, and RESOURCE has to be the name of the\n                        resource. (default: )\n  --set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...]\n                        Overwrite number of scatter items of scattergather\n                        processes. This allows to fine-tune workflow\n                        parallelization. Thereby, SCATTERITEMS has to be a\n                        positive integer, and NAME has to be the name of the\n                        scattergather process defined via a scattergather\n                        directive in the workflow. (default: )\n  --set-resource-scopes RESOURCE=[global|local] [RESOURCE=[global|local] ...]\n                        Overwrite resource scopes. A scope determines how a\n                        constraint is reckoned in cluster execution. With\n                        RESOURCE=local, a constraint applied to RESOURCE using\n                        --resources will be considered the limit for each\n                        group submission. With RESOURCE=global, the constraint\n                        will apply across all groups cumulatively. By default,\n                        only `mem_mb` and `disk_mb` are considered local, all\n                        other resources are global. This may be modified in\n                        the snakefile using the `resource_scopes:` directive.\n                        Note that number of threads, specified via --cores, is\n                        always considered local. (See https://snakemake.readth\n                        edocs.io/en/stable/snakefiles/rules.html#resources-\n                        remote-execution for more info) (default: )\n  --default-resources [NAME=INT ...], --default-res [NAME=INT ...]\n                        Define default values of resources for rules that do\n                        not define their own values. In addition to plain\n                        integers, python expressions over inputsize are\n                        allowed (e.g. '2*input.size_mb'). The inputsize is the\n                        sum of the sizes of all input files of a rule. By\n                        default, Snakemake assumes a default for mem_mb,\n                        disk_mb, and tmpdir (see below). This option allows to\n                        add further defaults (e.g. account and partition for\n                        slurm) or to overwrite these default values. The\n                        defaults are 'mem_mb=min(max(2*input.size_mb, 1000),\n                        8000)', 'disk_mb=max(2*input.size_mb, 1000)' (i.e.,\n                        default disk and mem usage is twice the input file\n                        size but at least 1GB), and the system temporary\n                        directory (as given by $TMPDIR, $TEMP, or $TMP) is\n                        used for the tmpdir resource. The tmpdir resource is\n                        automatically used by shell commands, scripts and\n                        wrappers to store temporary data (as it is mirrored\n                        into $TMPDIR, $TEMP, and $TMP for the executed\n                        subprocesses). If this argument is not specified at\n                        all, Snakemake just uses the tmpdir resource as\n                        outlined above.\n  --preemptible-rules [PREEMPTIBLE_RULES ...]\n                        Define which rules shall use a preemptible machine\n                        which can be prematurely killed by e.g. a cloud\n                        provider (also called spot instances). This is\n                        currently only supported by the Google Life Sciences\n                        executor and ignored by all other executors. If no\n                        rule names are provided, all rules are considered to\n                        be preemptible.\n  --preemptible-retries PREEMPTIBLE_RETRIES\n                        Number of retries that shall be made in order to\n                        finish a job from of rule that has been marked as\n                        preemptible via the --preemptible-rules setting.\n  --configfile FILE [FILE ...], --configfiles FILE [FILE ...]\n                        Specify or overwrite the config file of the workflow\n                        (see the docs). Values specified in JSON or YAML\n                        format are available in the global config dictionary\n                        inside the workflow. Multiple files overwrite each\n                        other in the given order. Thereby missing keys in\n                        previous config files are extended by following\n                        configfiles. Note that this order also includes a\n                        config file defined in the workflow definition itself\n                        (which will come first). (default: )\n  --config [KEY=VALUE ...], -C [KEY=VALUE ...]\n                        Set or overwrite values in the workflow config object.\n                        The workflow config object is accessible as variable\n                        config inside the workflow. Default values can be set\n                        by providing a YAML JSON file (see --configfile and\n                        Documentation).\n  --envvars VARNAME [VARNAME ...]\n                        Environment variables to pass to cloud jobs.\n  --directory DIR, -d DIR\n                        Specify working directory (relative paths in the\n                        snakefile will use this as their origin).\n  --touch, -t           Touch output files (mark them up to date without\n                        really changing them) instead of running their\n                        commands. This is used to pretend that the rules were\n                        executed, in order to fool future invocations of\n                        snakemake. Fails if a file does not yet exist. Note\n                        that this will only touch files that would otherwise\n                        be recreated by Snakemake (e.g. because their input\n                        files are newer). For enforcing a touch, combine this\n                        with --force, --forceall, or --forcerun. Note however\n                        that you lose the provenance information when the\n                        files have been created in reality. Hence, this should\n                        be used only as a last resort. (default: False)\n  --keep-going, -k      Go on with independent jobs if a job fails. (default:\n                        False)\n  --rerun-triggers {code,input,mtime,params,software-env} [{code,input,mtime,params,software-env} ...]\n                        Define what triggers the rerunning of a job. By\n                        default, all triggers are used, which guarantees that\n                        results are consistent with the workflow code and\n                        configuration. If you rather prefer the traditional\n                        way of just considering file modification dates, use '\n                        --rerun-trigger mtime'. (default: code input mtime\n                        params software-env)\n  --force, -f           Force the execution of the selected target or the\n                        first rule regardless of already created output.\n                        (default: False)\n  --executor {local,dryrun,touch}, -e {local,dryrun,touch}\n                        Specify a custom executor, available via an executor\n                        plugin: snakemake_executor_&lt;name&gt;\n  --forceall, -F        Force the execution of the selected (or the first)\n                        rule and all rules it is dependent on regardless of\n                        already created output. (default: False)\n  --forcerun [TARGET ...], -R [TARGET ...]\n                        Force the re-execution or creation of the given rules\n                        or files. Use this option if you changed a rule and\n                        want to have all its output in your workflow updated.\n  --consider-ancient RULE=INPUTITEMS [RULE=INPUTITEMS ...]\n                        Consider given input items of given rules as ancient,\n                        i.e. not triggering re-runs if they are newer than the\n                        output files. Putting this into a workflow specific\n                        profile (or specifying as argument) allows to overrule\n                        rerun triggers caused by file modification dates where\n                        the user knows better. RULE is the name of the rule,\n                        INPUTITEMS is a comma separated list of input items of\n                        the rule (given as name or index (0-based)). (default:\n                        )\n  --prioritize TARGET [TARGET ...], -P TARGET [TARGET ...]\n                        Tell the scheduler to assign creation of given targets\n                        (and all their dependencies) highest priority.\n  --batch RULE=BATCH/BATCHES\n                        Only create the given BATCH of the input files of the\n                        given RULE. This can be used to iteratively run parts\n                        of very large workflows. Only the execution plan of\n                        the relevant part of the workflow has to be\n                        calculated, thereby speeding up DAG computation. It is\n                        recommended to provide the most suitable rule for\n                        batching when documenting a workflow. It should be\n                        some aggregating rule that would be executed only\n                        once, and has a large number of input files. For\n                        example, it can be a rule that aggregates over\n                        samples.\n  --until TARGET [TARGET ...], -U TARGET [TARGET ...]\n                        Runs the pipeline until it reaches the specified rules\n                        or files. Only runs jobs that are dependencies of the\n                        specified rule or files, does not run sibling DAGs.\n  --omit-from TARGET [TARGET ...], -O TARGET [TARGET ...]\n                        Prevent the execution or creation of the given rules\n                        or files as well as any rules or files that are\n                        downstream of these targets in the DAG. Also runs jobs\n                        in sibling DAGs that are independent of the rules or\n                        files specified here.\n  --rerun-incomplete, --ri\n                        Re-run all jobs the output of which is recognized as\n                        incomplete. (default: False)\n  --shadow-prefix DIR   Specify a directory in which the 'shadow' directory is\n                        created. If not supplied, the value is set to the\n                        '.snakemake' directory relative to the working\n                        directory.\n  --scheduler [{ilp,greedy}]\n                        Specifies if jobs are selected by a greedy algorithm\n                        or by solving an ilp. The ilp scheduler aims to reduce\n                        runtime and hdd usage by best possible use of\n                        resources. (default: greedy)\n  --wms-monitor [WMS_MONITOR]\n                        IP and port of workflow management system to monitor\n                        the execution of snakemake (e.g.\n                        http://127.0.0.1:5000) Note that if your service\n                        requires an authorization token, you must export\n                        WMS_MONITOR_TOKEN in the environment.\n  --wms-monitor-arg [NAME=VALUE ...]\n                        If the workflow management service accepts extra\n                        arguments, provide. them in key value pairs with\n                        --wms-monitor-arg. For example, to run an existing\n                        workflow using a wms monitor, you can provide the pair\n                        id=12345 and the arguments will be provided to the\n                        endpoint to first interact with the workflow\n  --scheduler-ilp-solver {PULP_CBC_CMD}\n                        Specifies solver to be utilized when selecting ilp-\n                        scheduler. (default: COIN_CMD)\n  --conda-base-path CONDA_BASE_PATH\n                        Path of conda base installation (home of conda, mamba,\n                        activate) (internal use only).\n  --no-subworkflows, --nosw\n                        Do not evaluate or execute subworkflows. (default:\n                        False)\n  --precommand PRECOMMAND\n                        Only used in case of remote execution. Command to be\n                        executed before Snakemake executes each job on the\n                        remote compute node.\n\nGROUPING:\n  --groups GROUPS [GROUPS ...]\n                        Assign rules to groups (this overwrites any group\n                        definitions from the workflow). (default: )\n  --group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...]\n                        Set the number of connected components a group is\n                        allowed to span. By default, this is 1, but this flag\n                        allows to extend this. This can be used to run e.g. 3\n                        jobs of the same rule in the same group, although they\n                        are not connected. It can be helpful for putting\n                        together many small jobs or benefitting of shared\n                        memory setups. (default: )\n\nREPORTS:\n  --report [FILE]       Create an HTML report with results and statistics.\n                        This can be either a .html file or a .zip file. In the\n                        former case, all results are embedded into the .html\n                        (this only works for small data). In the latter case,\n                        results are stored along with a file report.html in\n                        the zip archive. If no filename is given, an embedded\n                        report.html is the default.\n  --report-stylesheet CSSFILE\n                        Custom stylesheet to use for report. In particular,\n                        this can be used for branding the report with e.g. a\n                        custom logo, see docs.\n  --reporter PLUGIN     Specify a custom report plugin. By default,\n                        Snakemake's builtin html reporter will be used. For\n                        custom reporters, check out their command line options\n                        starting with --report-.\n\nNOTEBOOKS:\n  --draft-notebook TARGET\n                        Draft a skeleton notebook for the rule used to\n                        generate the given target file. This notebook can then\n                        be opened in a jupyter server, executed and\n                        implemented until ready. After saving, it will\n                        automatically be reused in non-interactive mode by\n                        Snakemake for subsequent jobs.\n  --edit-notebook TARGET\n                        Interactively edit the notebook associated with the\n                        rule used to generate the given target file. This will\n                        start a local jupyter notebook server. Any changes to\n                        the notebook should be saved, and the server has to be\n                        stopped by closing the notebook and hitting the 'Quit'\n                        button on the jupyter dashboard. Afterwards, the\n                        updated notebook will be automatically stored in the\n                        path defined in the rule. If the notebook is not yet\n                        present, this will create an empty draft.\n  --notebook-listen IP:PORT\n                        The IP address and PORT the notebook server used for\n                        editing the notebook (--edit-notebook) will listen on.\n                        (default: localhost:8888)\n\nUTILITIES:\n  --lint [{text,json}]  Perform linting on the given workflow. This will print\n                        snakemake specific suggestions to improve code quality\n                        (work in progress, more lints to be added in the\n                        future). If no argument is provided, plain text output\n                        is used.\n  --generate-unit-tests [TESTPATH]\n                        Automatically generate unit tests for each workflow\n                        rule. This assumes that all input files of each job\n                        are already present. Rules without a job with present\n                        input files will be skipped (a warning will be\n                        issued). For each rule, one test case will be created\n                        in the specified test folder (.tests/unit by default).\n                        After successful execution, tests can be run with\n                        'pytest TESTPATH'.\n  --containerize        Print a Dockerfile that provides an execution\n                        environment for the workflow, including all conda\n                        environments. (default: False)\n  --export-cwl FILE     Compile workflow to CWL and store it in given FILE.\n  --list-rules, --list, -l\n                        Show available rules in given Snakefile. (default:\n                        False)\n  --list-target-rules, --lt\n                        Show available target rules in given Snakefile.\n                        (default: False)\n  --dag                 Do not execute anything and print the directed acyclic\n                        graph of jobs in the dot language. Recommended use on\n                        Unix systems: snakemake --dag | dot | display. Note\n                        print statements in your Snakefile may interfere with\n                        visualization. (default: False)\n  --rulegraph           Do not execute anything and print the dependency graph\n                        of rules in the dot language. This will be less\n                        crowded than above DAG of jobs, but also show less\n                        information. Note that each rule is displayed once,\n                        hence the displayed graph will be cyclic if a rule\n                        appears in several steps of the workflow. Use this if\n                        above option leads to a DAG that is too large.\n                        Recommended use on Unix systems: snakemake --rulegraph\n                        | dot | display. Note print statements in your\n                        Snakefile may interfere with visualization. (default:\n                        False)\n  --filegraph           Do not execute anything and print the dependency graph\n                        of rules with their input and output files in the dot\n                        language. This is an intermediate solution between\n                        above DAG of jobs and the rule graph. Note that each\n                        rule is displayed once, hence the displayed graph will\n                        be cyclic if a rule appears in several steps of the\n                        workflow. Use this if above option leads to a DAG that\n                        is too large. Recommended use on Unix systems:\n                        snakemake --filegraph | dot | display. Note print\n                        statements in your Snakefile may interfere with\n                        visualization. (default: False)\n  --d3dag               Print the DAG in D3.js compatible JSON format.\n                        (default: False)\n  --summary, -S         Print a summary of all files created by the workflow.\n                        The has the following columns: filename, modification\n                        time, rule version, status, plan. Thereby rule version\n                        contains the version the file was created with (see\n                        the version keyword of rules), and status denotes\n                        whether the file is missing, its input files are newer\n                        or if version or implementation of the rule changed\n                        since file creation. Finally the last column denotes\n                        whether the file will be updated or created during the\n                        next workflow execution. (default: False)\n  --detailed-summary, -D\n                        Print a summary of all files created by the workflow.\n                        The has the following columns: filename, modification\n                        time, rule version, input file(s), shell command,\n                        status, plan. Thereby rule version contains the\n                        version the file was created with (see the version\n                        keyword of rules), and status denotes whether the file\n                        is missing, its input files are newer or if version or\n                        implementation of the rule changed since file\n                        creation. The input file and shell command columns are\n                        self explanatory. Finally the last column denotes\n                        whether the file will be updated or created during the\n                        next workflow execution. (default: False)\n  --archive FILE        Archive the workflow into the given tar archive FILE.\n                        The archive will be created such that the workflow can\n                        be re-executed on a vanilla system. The function needs\n                        conda and git to be installed. It will archive every\n                        file that is under git version control. Note that it\n                        is best practice to have the Snakefile, config files,\n                        and scripts under version control. Hence, they will be\n                        included in the archive. Further, it will add input\n                        files that are not generated by by the workflow itself\n                        and conda environments. Note that symlinks are\n                        dereferenced. Supported formats are .tar, .tar.gz,\n                        .tar.bz2 and .tar.xz.\n  --cleanup-metadata FILE [FILE ...], --cm FILE [FILE ...]\n                        Cleanup the metadata of given files. That means that\n                        snakemake removes any tracked version info, and any\n                        marks that files are incomplete.\n  --cleanup-shadow      Cleanup old shadow directories which have not been\n                        deleted due to failures or power loss. (default:\n                        False)\n  --skip-script-cleanup\n                        Don't delete wrapper scripts used for execution\n                        (default: False)\n  --unlock              Remove a lock on the working directory. (default:\n                        False)\n  --list-changes {input,params,code}, --lc {input,params,code}\n                        List all output files for which the given items (code,\n                        input, params) have changed since creation.\n  --list-input-changes, --li\n                        List all output files for which the defined input\n                        files have changed in the Snakefile (e.g. new input\n                        files were added in the rule definition or files were\n                        renamed). For listing input file modification in the\n                        filesystem, use --summary. (default: False)\n  --list-params-changes, --lp\n                        List all output files for which the defined params\n                        have changed in the Snakefile. (default: False)\n  --list-untracked, --lu\n                        List all files in the working directory that are not\n                        used in the workflow. This can be used e.g. for\n                        identifying leftover files. Hidden files and\n                        directories are ignored. (default: False)\n  --delete-all-output   Remove all files generated by the workflow. Use\n                        together with --dry-run to list files without actually\n                        deleting anything. Note that this will not recurse\n                        into subworkflows. Write-protected files are not\n                        removed. Nevertheless, use with care! (default: False)\n  --delete-temp-output  Remove all temporary files generated by the workflow.\n                        Use together with --dry-run to list files without\n                        actually deleting anything. Note that this will not\n                        recurse into subworkflows. (default: False)\n  --keep-incomplete     Do not remove incomplete output files by failed jobs.\n                        (default: False)\n  --drop-metadata       Drop metadata file tracking information after job\n                        finishes. Provenance-information based reports (e.g.\n                        --report and the --list_x_changes functions) will be\n                        empty or incomplete. (default: False)\n  --version, -v         show program's version number and exit\n\nOUTPUT:\n  --printshellcmds, -p  Print out the shell commands that will be executed.\n                        (default: False)\n  --debug-dag           Print candidate and selected jobs (including their\n                        wildcards) while inferring DAG. This can help to debug\n                        unexpected DAG topology or errors. (default: False)\n  --nocolor             Do not use a colored output. (default: False)\n  --quiet [{all,host,progress,rules} ...], -q [{all,host,progress,rules} ...]\n                        Do not output certain information. If used without\n                        arguments, do not output any progress or rule\n                        information. Defining 'all' results in no information\n                        being printed at all.\n  --print-compilation   Print the python representation of the workflow.\n                        (default: False)\n  --verbose             Print debugging output. (default: False)\n\nBEHAVIOR:\n  --force-use-threads   Force threads rather than processes. Helpful if shared\n                        memory (/dev/shm) is full or unavailable. (default:\n                        False)\n  --allow-ambiguity, -a\n                        Don't check for ambiguous rules and simply use the\n                        first if several can produce the same file. This\n                        allows the user to prioritize rules by their order in\n                        the snakefile. (default: False)\n  --nolock              Do not lock the working directory (default: False)\n  --ignore-incomplete, --ii\n                        Do not check for incomplete output files. (default:\n                        False)\n  --max-inventory-time SECONDS\n                        Spend at most SECONDS seconds to create a file\n                        inventory for the working directory. The inventory\n                        vastly speeds up file modification and existence\n                        checks when computing which jobs need to be executed.\n                        However, creating the inventory itself can be slow,\n                        e.g. on network file systems. Hence, we do not spend\n                        more than a given amount of time and fall back to\n                        individual checks for the rest. (default: 20)\n  --latency-wait SECONDS, --output-wait SECONDS, -w SECONDS\n                        Wait given seconds if an output file of a job is not\n                        present after the job finished. This helps if your\n                        filesystem suffers from latency (default 5). (default:\n                        5)\n  --wait-for-files [FILE ...]\n                        Wait --latency-wait seconds for these files to be\n                        present before executing the workflow. This option is\n                        used internally to handle filesystem latency in\n                        cluster environments.\n  --wait-for-files-file FILE\n                        Same behaviour as --wait-for-files, but file list is\n                        stored in file instead of being passed on the\n                        commandline. This is useful when the list of files is\n                        too long to be passed on the commandline.\n  --queue-input-wait-time SECONDS\n                        Set the interval in seconds to check for new input in\n                        rules that use from_queue to obtain input files.\n                        (default: 10)\n  --notemp, --nt        Ignore temp() declarations. This is useful when\n                        running only a part of the workflow, since temp()\n                        would lead to deletion of probably needed files by\n                        other parts of the workflow. (default: False)\n  --all-temp            Mark all output files as temp files. This can be\n                        useful for CI testing, in order to save space.\n                        (default: False)\n  --unneeded-temp-files FILE [FILE ...]\n                        Given files will not be uploaded to storage and\n                        immediately deleted after job or group job completion.\n  --keep-storage-local-copies\n                        Keep local copies of remote input files. (default:\n                        False)\n  --target-files-omit-workdir-adjustment\n                        Do not adjust the paths of given target files relative\n                        to the working directory. (default: False)\n  --allowed-rules ALLOWED_RULES [ALLOWED_RULES ...]\n                        Only consider given rules. If omitted, all rules in\n                        Snakefile are used. Note that this is intended\n                        primarily for internal use and may lead to unexpected\n                        results otherwise.\n  --max-jobs-per-timespan MAX_JOBS_PER_TIMESPAN\n                        Maximal number of job submissions/executions per\n                        timespan. Format: &lt;number&gt;&lt;timespan&gt;, e.g. 50/1m or\n                        0.5/1s.\n  --max-jobs-per-second MAX_JOBS_PER_SECOND\n                        Maximal number of job submissions/executions per\n                        second. Deprecated in favor of --max-jobs-per-\n                        timespan.\n  --max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND\n                        Maximal number of job status checks per second,\n                        default is 10, fractions allowed. (default: 10)\n  --seconds-between-status-checks SECONDS_BETWEEN_STATUS_CHECKS\n                        Number of seconds to wait between two rounds of status\n                        checks. (default: 10)\n  --retries RETRIES, --restart-times RETRIES, -T RETRIES\n                        Number of times to restart failing jobs (defaults to\n                        0). (default: 0)\n  --wrapper-prefix WRAPPER_PREFIX\n                        Prefix for URL created from wrapper directive\n                        (default: https://github.com/snakemake/snakemake-\n                        wrappers/raw/). Set this to a different URL to use\n                        your fork or a local clone of the repository, e.g.,\n                        use a git URL like\n                        'git+file://path/to/your/local/clone@'. (default:\n                        https://github.com/snakemake/snakemake-wrappers/raw/)\n  --default-storage-provider DEFAULT_STORAGE_PROVIDER\n                        Specify default storage provider to be used for all\n                        input and output files that don't yet specify one\n                        (e.g. 's3'). See\n                        https://snakemake.github.io/snakemake-plugin-catalog\n                        for available storage provider plugins. If not set or\n                        explicitly 'none', no default storage provider will be\n                        used.\n  --default-storage-prefix DEFAULT_STORAGE_PREFIX\n                        Specify prefix for default storage provider. E.g. a\n                        bucket name.\n  --local-storage-prefix LOCAL_STORAGE_PREFIX\n                        Specify prefix for storing local copies of storage\n                        files and folders. By default, this is a hidden\n                        subfolder in the workdir. It can however be freely\n                        chosen, e.g. in order to store those files on a local\n                        scratch disk. Environment variables will be expanded.\n                        (default: .snakemake/storage)\n  --remote-job-local-storage-prefix REMOTE_JOB_LOCAL_STORAGE_PREFIX\n                        Specify prefix for storing local copies of storage\n                        files and folders in case of remote jobs (e.g. cluster\n                        or cloud jobs). This may differ from --local-storage-\n                        prefix. If not set, uses value of --local-storage-\n                        prefix. By default, this is a hidden subfolder in the\n                        workdir. It can however be freely chosen, e.g. in\n                        order to store those files on a local scratch disk.\n                        Environment variables will be expanded within the\n                        remote job.\n  --shared-fs-usage {input-output,persistence,software-deployment,source-cache,sources,storage-local-copies,none} [{input-output,persistence,software-deployment,source-cache,sources,storage-local-copies,none} ...]\n                        Set assumptions on shared filesystem for non-local\n                        workflow execution. To disable any sharing via the\n                        filesystem, specify 'none'. Usually, the executor\n                        plugin sets this to a correct default. However,\n                        sometimes it is worth tuning this setting, e.g. for\n                        optimizing cluster performance. For example, when\n                        using '--default-storage-provider fs' together with a\n                        cluster executor like slurm, you might want to set '--\n                        shared-fs-usage persistence software-deployment\n                        sources source-cache', such that software deployment\n                        and data provenance will be handled by NFS but input\n                        and output files will be handled exclusively by the\n                        storage provider. (default: input-output persistence\n                        software-deployment source-cache sources storage-\n                        local-copies)\n  --scheduler-greediness SCHEDULER_GREEDINESS, --greediness SCHEDULER_GREEDINESS\n                        Set the greediness of scheduling. This value between 0\n                        and 1 determines how careful jobs are selected for\n                        execution. The default value (1.0) provides the best\n                        speed and still acceptable scheduling quality.\n  --scheduler-subsample SCHEDULER_SUBSAMPLE\n                        Set the number of jobs to be considered for\n                        scheduling. If number of ready jobs is greater than\n                        this value, this number of jobs is randomly chosen for\n                        scheduling; if number of ready jobs is lower, this\n                        option has no effect. This can be useful on very large\n                        DAGs, where the scheduler can take some time selecting\n                        which jobs to run.\n  --no-hooks            Do not invoke onstart, onsuccess or onerror hooks\n                        after execution. (default: False)\n  --debug               Allow to debug rules with e.g. PDB. This flag allows\n                        to set breakpoints in run blocks. (default: False)\n  --runtime-profile FILE\n                        Profile Snakemake and write the output to FILE. This\n                        requires yappi to be installed.\n  --local-groupid LOCAL_GROUPID\n                        Internal use only: Name for local groupid. (default:\n                        local)\n  --attempt ATTEMPT     Internal use only: define the initial value of the\n                        attempt parameter (default: 1). (default: 1)\n  --show-failed-logs    Automatically display logs of failed jobs. (default:\n                        False)\n  --log-handler-script FILE\n                        Provide a custom script containing a function 'def\n                        log_handler(msg):'. Snakemake will call this function\n                        for every logging output (given as a dictionary msg)\n                        allowing to e.g. send notifications in the form of\n                        e.g. slack messages or emails.\n  --log-service {none,slack,wms}\n                        Set a specific messaging service for logging output.\n                        Snakemake will notify the service on errors and\n                        completed execution. Currently slack and workflow\n                        management system (wms) are supported.\n  --job-deploy-sources  Whether the workflow sources shall be deployed before\n                        a remote job is started. Only applies if --no-shared-\n                        fs is set or executors are used that imply no shared\n                        FS (e.g. the kubernetes executor). (default: False)\n  --benchmark-extended  Write extended benchmarking metrics. (default: False)\n\nREMOTE EXECUTION:\n  --container-image IMAGE\n                        Docker image to use, e.g., when submitting jobs to\n                        kubernetes. Defaults to\n                        'https://hub.docker.com/r/snakemake/snakemake', tagged\n                        with the same version as the currently running\n                        Snakemake instance. Note that overwriting this value\n                        is up to your responsibility. Any used image has to\n                        contain a working snakemake installation that is\n                        compatible with (or ideally the same as) the currently\n                        running version. (default:\n                        snakemake/snakemake:v8.27.1)\n  --immediate-submit, --is\n                        Immediately submit all jobs to the cluster instead of\n                        waiting for present input files. This will fail,\n                        unless you make the cluster aware of job dependencies,\n                        e.g. via: $ snakemake --cluster 'sbatch --dependency\n                        {dependencies}. Assuming that your submit script (here\n                        sbatch) outputs the generated job id to the first\n                        stdout line, {dependencies} will be filled with space\n                        separated job ids this job depends on. Does not work\n                        for workflows that contain checkpoint rules. (default:\n                        False)\n  --jobscript SCRIPT, --js SCRIPT\n                        Provide a custom job script for submission to the\n                        cluster. The default script resides as 'jobscript.sh'\n                        in the installation directory.\n  --jobname NAME, --jn NAME\n                        Provide a custom name for the jobscript that is\n                        submitted to the cluster (see --cluster). NAME is\n                        \"snakejob.{name}.{jobid}.sh\" per default. The wildcard\n                        {jobid} has to be present in the name. (default:\n                        snakejob.{name}.{jobid}.sh)\n\nFLUX:\n  --flux                Execute your workflow on a flux cluster. Flux can work\n                        with both a shared network filesystem (like NFS) or\n                        without. If you don't have a shared filesystem,\n                        additionally specify --no-shared-fs. (default: False)\n\nSOFTWARE DEPLOYMENT:\n  --software-deployment-method {apptainer,conda,env-modules} [{apptainer,conda,env-modules} ...], --deployment-method {apptainer,conda,env-modules} [{apptainer,conda,env-modules} ...], --deployment {apptainer,conda,env-modules} [{apptainer,conda,env-modules} ...], --sdm {apptainer,conda,env-modules} [{apptainer,conda,env-modules} ...]\n                        Specify software environment deployment method.\n  --container-cleanup-images\n                        Remove unused containers (default: False)\n\nCONDA:\n  --use-conda           If defined in the rule, run job in a conda\n                        environment. If this flag is not set, the conda\n                        directive is ignored. (default: False)\n  --conda-not-block-search-path-envvars\n                        Do not block environment variables that modify the\n                        search path (R_LIBS, PYTHONPATH, PERL5LIB, PERLLIB)\n                        when using conda environments. (default: False)\n  --list-conda-envs     List all conda environments and their location on\n                        disk. (default: False)\n  --conda-prefix DIR    Specify a directory in which the 'conda' and 'conda-\n                        archive' directories are created. These are used to\n                        store conda environments and their archives,\n                        respectively. If not supplied, the value is set to the\n                        '.snakemake' directory relative to the invocation\n                        directory. If supplied, the `--use-conda` flag must\n                        also be set. The value may be given as a relative\n                        path, which will be extrapolated to the invocation\n                        directory, or as an absolute path. The value can also\n                        be provided via the environment variable\n                        $SNAKEMAKE_CONDA_PREFIX. In any case, the prefix may\n                        contain environment variables which will be properly\n                        expanded. Note that if you use remote execution e.g.\n                        on a cluster and you have node specific values for\n                        this, you should disable assuming shared fs for\n                        software-deployment (see --shared-fs-usage).\n  --conda-cleanup-envs  Cleanup unused conda environments. (default: False)\n  --conda-cleanup-pkgs [{tarballs,cache}]\n                        Cleanup conda packages after creating environments. In\n                        case of 'tarballs' mode, will clean up all downloaded\n                        package tarballs. In case of 'cache' mode, will\n                        additionally clean up unused package caches. If mode\n                        is omitted, will default to only cleaning up the\n                        tarballs.\n  --conda-create-envs-only\n                        If specified, only creates the job-specific conda\n                        environments then exits. The `--use-conda` flag must\n                        also be set. (default: False)\n  --conda-frontend {conda,mamba}\n                        Choose the conda frontend for installing environments.\n                        Mamba is much faster and highly recommended. (default:\n                        conda)\n\nAPPTAINER/SINGULARITY:\n  --use-apptainer, --use-singularity\n                        If defined in the rule, run job within a\n                        apptainer/singularity container. If this flag is not\n                        set, the singularity directive is ignored. (default:\n                        False)\n  --apptainer-prefix DIR, --singularity-prefix DIR\n                        Specify a directory in which apptainer/singularity\n                        images will be stored.If not supplied, the value is\n                        set to the '.snakemake' directory relative to the\n                        invocation directory. If supplied, the `--use-\n                        apptainer` flag must also be set. The value may be\n                        given as a relative path, which will be extrapolated\n                        to the invocation directory, or as an absolute path.\n                        If not supplied, APPTAINER_CACHEDIR is used. In any\n                        case, the prefix may contain environment variables\n                        which will be properly expanded. Note that if you use\n                        remote execution e.g. on a cluster and you have node\n                        specific values for this, you should disable assuming\n                        shared fs for software-deployment (see --shared-fs-\n                        usage).\n  --apptainer-args ARGS, --singularity-args ARGS\n                        Pass additional args to apptainer/singularity.\n\nENVIRONMENT MODULES:\n  --use-envmodules      If defined in the rule, run job within the given\n                        environment modules, loaded in the given order. This\n                        can be combined with --use-conda and --use-\n                        singularity, which will then be only used as a\n                        fallback for rules which don't define environment\n                        modules. (default: False)\n\nINTERNAL:\n  --scheduler-solver-path SCHEDULER_SOLVER_PATH\n                        Internal use only: Set the PATH to search for\n                        scheduler solver binaries.\n  --deploy-sources QUERY CHECKSUM\n                        Internal use only: Deploy sources archive from given\n                        storage provider query to the current working\n                        subdirectory and control for archive checksum to\n                        proceed.\n  --target-jobs TARGET_JOBS [TARGET_JOBS ...]\n                        Internal use only: Target particular jobs by\n                        RULE:WILDCARD1=VALUE,WILDCARD2=VALUE,...\n  --mode {default,remote,subprocess}\n                        Internal use only: Set execution mode of Snakemake.\n                        (default: default)\n\nhtml executor settings:\n  --report-html-path VALUE\n                        Path to the report file (either .html or .zip). Use\n                        zip if your report contains large results or\n                        directories with htmlindex as results.\n  --report-html-stylesheet-path VALUE\n                        Path to a custom stylesheet for the report.\n\n In general, command-line values override environment variables which override\ndefaults.\n</code></pre>"},{"location":"descriptors/snakemake_snakemake/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=snakemake\nARG PIP_SNAKEMAKE_VERSION=9.3.3\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>snakemake</li> </ul> </li> </ul>"},{"location":"descriptors/spell/","title":"SPELL linters in MegaLinter","text":""},{"location":"descriptors/spell/#spell","title":"SPELL","text":""},{"location":"descriptors/spell/#linters","title":"Linters","text":"Linter Additional cspellSPELL_CSPELL proselintSPELL_PROSELINT valeSPELL_VALE lycheeSPELL_LYCHEE"},{"location":"descriptors/spell/#linted-files","title":"Linted files","text":""},{"location":"descriptors/spell/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value SPELL_PRE_COMMANDS List of bash commands to run before the linters None SPELL_POST_COMMANDS List of bash commands to run after the linters None SPELL_FILTER_REGEX_INCLUDE Custom regex including filter SPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/spell_cspell/","title":"cspell configuration in MegaLinter","text":""},{"location":"descriptors/spell_cspell/#cspell","title":"cspell","text":"<p>MegaLinter generates content of a <code>.cspell.json</code> config file at the end of its TextReporter artifact</p> <p>Copy it at the root of your repository, read it, remove real spelling errors (after have corrected them in the source), and you're good to go !</p> <p>If you do not want cspell to analyze the files names, define <code>SPELL_CSPELL_ANALYZE_FILE_NAMES</code> to <code>false</code></p>"},{"location":"descriptors/spell_cspell/#cspell-documentation","title":"cspell documentation","text":"<ul> <li>Version in MegaLinter: 8.19.4</li> <li>Visit Official Web Site</li> <li>See How to configure cspell rules</li> <li>See How to disable cspell rules in files</li> </ul>"},{"location":"descriptors/spell_cspell/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable cspell by adding <code>SPELL_CSPELL</code> in ENABLE_LINTERS variable</li> <li>Disable cspell by adding <code>SPELL_CSPELL</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SPELL_CSPELL_ANALYZE_FILE_NAMES If set to <code>true</code>, MegaLinter will also send file names to cspell for analysis. Disable by defining <code>SPELL_CSPELL_ANALYZE_FILE_NAMES</code> to <code>false</code> <code>true</code> SPELL_CSPELL_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SPELL_CSPELL_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SPELL_CSPELL_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SPELL_CSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SPELL_CSPELL_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> SPELL_CSPELL_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> Exclude every file SPELL_CSPELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SPELL_CSPELL_PRE_COMMANDS List of bash commands to run before the linter None SPELL_CSPELL_POST_COMMANDS List of bash commands to run after the linter None SPELL_CSPELL_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SPELL_CSPELL and its pre/post commands None SPELL_CSPELL_CONFIG_FILE cspell configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.cspell.json</code> SPELL_CSPELL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_CSPELL_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SPELL_CSPELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SPELL_CSPELL_CLI_EXECUTABLE Override CLI executable <code>['cspell']</code>"},{"location":"descriptors/spell_cspell/#ide-integration","title":"IDE Integration","text":"<p>Use cspell in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code Code Spell Checker"},{"location":"descriptors/spell_cspell/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/spell_cspell/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/spell_cspell/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>If this linter is active, all files linted by all other active linters will be linted</li> </ul>"},{"location":"descriptors/spell_cspell/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>cspell is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/spell_cspell/#example-calls","title":"Example calls","text":"<pre><code>cspell myfile.any\n</code></pre> <pre><code>cspell -c cspell.json myfile.any\n</code></pre>"},{"location":"descriptors/spell_cspell/#help-content","title":"Help content","text":"<pre><code>Usage: cspell [options] [command]\n\nSpelling Checker for Code\n\nOptions:\n  -V, --version                         output the version number\n  -h, --help                            display help for command\n\nCommands:\n  lint [options] [globs...]             Check spelling\n  trace [options] [words...]            Trace words -- Search for words in the\n                                        configuration and dictionaries.\n  check [options] &lt;files...&gt;            Spell check file(s) and display the\n                                        result. The full file is displayed in\n                                        color.\n  suggestions|sug [options] [words...]  Spelling Suggestions for words.\n  link                                  Link dictionaries and other settings to\n                                        the cspell global config.\n  help [command]                        display help for command\n</code></pre>"},{"location":"descriptors/spell_cspell/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=cspell\nARG NPM_CSPELL_VERSION=8.19.4\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>cspell@8.19.4</li> </ul> </li> </ul>"},{"location":"descriptors/spell_lychee/","title":"lychee configuration in MegaLinter","text":"<p>A file .lycheeignore can be defined at the root of the repository to ignore some urls.</p> <p>Each line can contain Regular Expressions or glob format.</p> <p>Example with glob, regex and full url:</p> <pre><code>https://twitter.com/intent/tweet*\n(.*some_url_part)\nhttps://github.com/sgerrand/alpine-pkg-glibc/releases/download\n</code></pre>"},{"location":"descriptors/spell_lychee/#lychee-documentation","title":"lychee documentation","text":"<ul> <li>Version in MegaLinter: 0.18.0</li> <li>Visit Official Web Site</li> <li>See How to configure lychee rules</li> <li>See Index of problems detected by lychee</li> </ul>"},{"location":"descriptors/spell_lychee/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable lychee by adding <code>SPELL_LYCHEE</code> in ENABLE_LINTERS variable</li> <li>Disable lychee by adding <code>SPELL_LYCHEE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SPELL_LYCHEE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SPELL_LYCHEE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SPELL_LYCHEE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SPELL_LYCHEE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SPELL_LYCHEE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> SPELL_LYCHEE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\", \".mdx\", \".markdown\", \".html\", \".htm\", \".rst\", \".txt\", \".json\", \".jsonc\", \".json5\", \".yaml\", \".yml\"]</code> SPELL_LYCHEE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SPELL_LYCHEE_PRE_COMMANDS List of bash commands to run before the linter None SPELL_LYCHEE_POST_COMMANDS List of bash commands to run after the linter None SPELL_LYCHEE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SPELL_LYCHEE and its pre/post commands None SPELL_LYCHEE_CONFIG_FILE lychee configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>lychee.toml</code> SPELL_LYCHEE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_LYCHEE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SPELL_LYCHEE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SPELL_LYCHEE_CLI_EXECUTABLE Override CLI executable <code>['lychee']</code>"},{"location":"descriptors/spell_lychee/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/spell_lychee/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/spell_lychee/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.md</code>, <code>.mdx</code>, <code>.markdown</code>, <code>.html</code>, <code>.htm</code>, <code>.rst</code>, <code>.txt</code>, <code>.json</code>, <code>.jsonc</code>, <code>.json5</code>, <code>.yaml</code>, <code>.yml</code></li> </ul>"},{"location":"descriptors/spell_lychee/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>lychee is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/spell_lychee/#example-calls","title":"Example calls","text":"<pre><code>lychee --format detailed --no-progress README.md info.txt test.html\n</code></pre> <pre><code>lychee --format detailed --no-progress README.md\n</code></pre> <pre><code>lychee --format detailed --no-progress test.html info.txt\n</code></pre> <pre><code>lychee --format detailed --no-progress --offline path/to/directory\n</code></pre> <pre><code>lychee --format detailed --no-progress https://raw.githubusercontent.com/lycheeverse/lychee/master/README.md\n</code></pre> <pre><code>lychee --format detailed --no-progress \"~/projects/big_project/**/README.*\"\n</code></pre> <pre><code>lychee --format detailed --no-progress --glob-ignore-case --verbose \"~/projects/**/[r]eadme.*\"\n</code></pre>"},{"location":"descriptors/spell_lychee/#help-content","title":"Help content","text":"<pre><code>A fast, async link checker\n\nFinds broken URLs and mail addresses inside Markdown, HTML, `reStructuredText`, websites and more!\n\nUsage: lychee [OPTIONS] &lt;inputs&gt;...\n\nArguments:\n  &lt;inputs&gt;...\n          The inputs (where to get links to check from). These can be: files (e.g. `README.md`), file globs (e.g. `\"~/git/*/README.md\"`), remote URLs (e.g. `https://example.com/README.md`) or standard input (`-`). NOTE: Use `--` to separate inputs from options that allow multiple arguments\n\nOptions:\n  -c, --config &lt;CONFIG_FILE&gt;\n          Configuration file to use\n\n          [default: lychee.toml]\n\n  -v, --verbose...\n          Set verbosity level; more output per occurrence (e.g. `-v` or `-vv`)\n\n  -q, --quiet...\n          Less output per occurrence (e.g. `-q` or `-qq`)\n\n  -n, --no-progress\n          Do not show progress bar.\n          This is recommended for non-interactive shells (e.g. for continuous integration)\n\n      --cache\n          Use request cache stored on disk at `.lycheecache`\n\n      --max-cache-age &lt;MAX_CACHE_AGE&gt;\n          Discard all cached requests older than this duration\n\n          [default: 1d]\n\n      --cache-exclude-status &lt;CACHE_EXCLUDE_STATUS&gt;\n          A list of status codes that will be ignored from the cache\n\n          The following accept range syntax is supported: [start]..[=]end|code. Some valid\n          examples are:\n\n          - 429\n          - 500..=599\n          - 500..\n\n          Use \"lychee --cache-exclude-status '429, 500..502' &lt;inputs&gt;...\" to provide a comma- separated\n          list of excluded status codes. This example will not cache results with a status code of 429, 500,\n          501 and 502.\n\n          [default: ]\n\n      --dump\n          Don't perform any link checking. Instead, dump all the links extracted from inputs that would be checked\n\n      --dump-inputs\n          Don't perform any link extraction and checking. Instead, dump all input sources from which links would be collected\n\n      --archive &lt;ARCHIVE&gt;\n          Specify the use of a specific web archive. Can be used in combination with `--suggest`\n\n          [possible values: wayback]\n\n      --suggest\n          Suggest link replacements for broken links, using a web archive. The web archive can be specified with `--archive`\n\n  -m, --max-redirects &lt;MAX_REDIRECTS&gt;\n          Maximum number of allowed redirects\n\n          [default: 5]\n\n      --max-retries &lt;MAX_RETRIES&gt;\n          Maximum number of retries per request\n\n          [default: 3]\n\n      --max-concurrency &lt;MAX_CONCURRENCY&gt;\n          Maximum number of concurrent network requests\n\n          [default: 128]\n\n  -T, --threads &lt;THREADS&gt;\n          Number of threads to utilize. Defaults to number of cores available to the system\n\n  -u, --user-agent &lt;USER_AGENT&gt;\n          User agent\n\n          [default: lychee/0.18.0]\n\n  -i, --insecure\n          Proceed for server connections considered insecure (invalid TLS)\n\n  -s, --scheme &lt;SCHEME&gt;\n          Only test links with the given schemes (e.g. https). Omit to check links with any other scheme. At the moment, we support http, https, file, and mailto\n\n      --offline\n          Only check local files and block network requests\n\n      --include &lt;INCLUDE&gt;\n          URLs to check (supports regex). Has preference over all excludes\n\n      --exclude &lt;EXCLUDE&gt;\n          Exclude URLs and mail addresses from checking (supports regex)\n\n      --exclude-file &lt;EXCLUDE_FILE&gt;\n          Deprecated; use `--exclude-path` instead\n\n      --exclude-path &lt;EXCLUDE_PATH&gt;\n          Exclude file path from getting checked\n\n  -E, --exclude-all-private\n          Exclude all private IPs from checking.\n          Equivalent to `--exclude-private --exclude-link-local --exclude-loopback`\n\n      --exclude-private\n          Exclude private IP address ranges from checking\n\n      --exclude-link-local\n          Exclude link-local IP address range from checking\n\n      --exclude-loopback\n          Exclude loopback IP address range and localhost from checking\n\n      --exclude-mail\n          Exclude all mail addresses from checking (deprecated; excluded by default)\n\n      --include-mail\n          Also check email addresses\n\n      --remap &lt;REMAP&gt;\n          Remap URI matching pattern to different URI\n\n      --fallback-extensions &lt;FALLBACK_EXTENSIONS&gt;\n          Test the specified file extensions for URIs when checking files locally.\n          Multiple extensions can be separated by commas. Extensions will be checked in\n          order of appearance.\n\n          Example: --fallback-extensions html,htm,php,asp,aspx,jsp,cgi\n\n      --header &lt;HEADER&gt;\n          Custom request header\n\n  -a, --accept &lt;ACCEPT&gt;\n          A List of accepted status codes for valid links\n\n          The following accept range syntax is supported: [start]..[=]end|code. Some valid\n          examples are:\n\n          - 200..=204\n          - 200..204\n          - ..=204\n          - ..204\n          - 200\n\n          Use \"lychee --accept '200..=204, 429, 500' &lt;inputs&gt;...\" to provide a comma-\n          separated list of accepted status codes. This example will accept 200, 201,\n          202, 203, 204, 429, and 500 as valid status codes.\n\n          [default: 100..=103,200..=299]\n\n      --include-fragments\n          Enable the checking of fragments in links\n\n  -t, --timeout &lt;TIMEOUT&gt;\n          Website timeout in seconds from connect to response finished\n\n          [default: 20]\n\n  -r, --retry-wait-time &lt;RETRY_WAIT_TIME&gt;\n          Minimum wait time in seconds between retries of failed requests\n\n          [default: 1]\n\n  -X, --method &lt;METHOD&gt;\n          Request method\n\n          [default: get]\n\n  -b, --base &lt;BASE&gt;\n          Base URL or website root directory to check relative URLs e.g. &lt;https://example.com&gt; or `/path/to/public`\n\n      --root-dir &lt;ROOT_DIR&gt;\n          Root path to use when checking absolute local links, must be an absolute path\n\n      --basic-auth &lt;BASIC_AUTH&gt;\n          Basic authentication support. E.g. `http://example.com username:password`\n\n      --github-token &lt;GITHUB_TOKEN&gt;\n          GitHub API token to use when checking github.com links, to avoid rate limiting\n\n          [env: GITHUB_TOKEN]\n\n      --skip-missing\n          Skip missing input files (default is to error if they don't exist)\n\n      --no-ignore\n          Do not skip files that would otherwise be ignored by '.gitignore', '.ignore', or the global ignore file\n\n      --hidden\n          Do not skip hidden directories and files\n\n      --include-verbatim\n          Find links in verbatim sections like `pre`- and `code` blocks\n\n      --glob-ignore-case\n          Ignore case when expanding filesystem path glob inputs\n\n  -o, --output &lt;OUTPUT&gt;\n          Output file of status report\n\n      --mode &lt;MODE&gt;\n          Set the output display mode. Determines how results are presented in the terminal\n\n          [default: color]\n          [possible values: plain, color, emoji]\n\n  -f, --format &lt;FORMAT&gt;\n          Output format of final status report\n\n          [default: compact]\n          [possible values: compact, detailed, json, markdown, raw]\n\n      --require-https\n          When HTTPS is available, treat HTTP links as errors\n\n      --cookie-jar &lt;COOKIE_JAR&gt;\n          Tell lychee to read cookies from the given file. Cookies will be stored in the cookie jar and sent with requests. New cookies will be stored in the cookie jar and existing cookies will be updated\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n</code></pre>"},{"location":"descriptors/spell_lychee/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=lycheeverse/lychee\nARG SPELL_LYCHEE_VERSION=sha-7c4b132-alpine\nFROM lycheeverse/lychee:${SPELL_LYCHEE_VERSION} AS lychee\nCOPY --link --from=lychee /usr/local/bin/lychee /usr/bin/\n</code></pre>"},{"location":"descriptors/spell_proselint/","title":"proselint configuration in MegaLinter","text":"<p>a linter for prose</p>"},{"location":"descriptors/spell_proselint/#proselint-documentation","title":"proselint documentation","text":"<ul> <li>Version in MegaLinter: 0.14.0</li> <li>Visit Official Web Site</li> <li>See How to configure proselint rules</li> <li>See Index of problems detected by proselint</li> </ul>"},{"location":"descriptors/spell_proselint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable proselint by adding <code>SPELL_PROSELINT</code> in ENABLE_LINTERS variable</li> <li>Disable proselint by adding <code>SPELL_PROSELINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SPELL_PROSELINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SPELL_PROSELINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SPELL_PROSELINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SPELL_PROSELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SPELL_PROSELINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> SPELL_PROSELINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\", \".txt\"]</code> SPELL_PROSELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SPELL_PROSELINT_PRE_COMMANDS List of bash commands to run before the linter None SPELL_PROSELINT_POST_COMMANDS List of bash commands to run after the linter None SPELL_PROSELINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SPELL_PROSELINT and its pre/post commands None SPELL_PROSELINT_CONFIG_FILE proselint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.proselintrc</code> SPELL_PROSELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_PROSELINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SPELL_PROSELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SPELL_PROSELINT_CLI_EXECUTABLE Override CLI executable <code>['proselint']</code>"},{"location":"descriptors/spell_proselint/#ide-integration","title":"IDE Integration","text":"<p>Use proselint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-proselint Visit Web Site IDEA Proselint Sublime Text SublimeLinter-contrib-proselint Visit Web Site Visual Studio Code VSCode Proselint"},{"location":"descriptors/spell_proselint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/spell_proselint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/spell_proselint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.proselintrc, proselint/config.json</code></li> <li>File extensions: <code>.md</code>, <code>.txt</code></li> </ul>"},{"location":"descriptors/spell_proselint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>proselint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/spell_proselint/#example-calls","title":"Example calls","text":"<pre><code>proselint --config .proselintrc myfile.md myfile2.txt myfile3.rst\n</code></pre>"},{"location":"descriptors/spell_proselint/#help-content","title":"Help content","text":"<pre><code>Usage: proselint [OPTIONS] [PATHS]...\n\n  Create the CLI for proselint, a linter for prose.\n\nOptions:\n  -v, --version          Show the version and exit.\n  --config PATH          Path to configuration file.\n  -d, --debug            Give verbose output.\n  -c, --clean            Clear the cache.\n  -j, --json             Output as JSON.\n  -t, --time             Time on a corpus.\n  --demo                 Run over demo file.\n  --compact              Shorten output.\n  --dump-config          Prints current config.\n  --dump-default-config  Prints default config.\n  -h, --help             Show this message and exit.\n</code></pre>"},{"location":"descriptors/spell_proselint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=proselint\nARG PIP_PROSELINT_VERSION=0.14.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>proselint==0.14.0</li> </ul> </li> </ul>"},{"location":"descriptors/spell_vale/","title":"vale configuration in MegaLinter","text":""},{"location":"descriptors/spell_vale/#vale","title":"vale","text":"<p>Vale brings your editorial style to life !</p> <p>To be active within MegaLinter, you need to initialize a .vale.ini configuration file at the root of your repository.</p> <p>MegaLinter analyze markdown and restructuredText files by default, you can change that using SPELL_VALE_FILE_EXTENSIONS variable.</p>"},{"location":"descriptors/spell_vale/#vale-documentation","title":"vale documentation","text":"<ul> <li>Version in MegaLinter: 3.11.2</li> <li>Visit Official Web Site</li> <li>See How to configure vale rules</li> <li>See How to disable vale rules in files</li> <li>See Index of problems detected by vale</li> </ul>"},{"location":"descriptors/spell_vale/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable vale by adding <code>SPELL_VALE</code> in ENABLE_LINTERS variable</li> <li>Disable vale by adding <code>SPELL_VALE</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SPELL_VALE_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SPELL_VALE_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SPELL_VALE_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SPELL_VALE_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SPELL_VALE_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> SPELL_VALE_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".md\", \".rst\"]</code> SPELL_VALE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SPELL_VALE_PRE_COMMANDS List of bash commands to run before the linter None SPELL_VALE_POST_COMMANDS List of bash commands to run after the linter None SPELL_VALE_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SPELL_VALE and its pre/post commands None SPELL_VALE_CONFIG_FILE vale configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.vale.ini</code> SPELL_VALE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_VALE_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SPELL_VALE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SPELL_VALE_CLI_EXECUTABLE Override CLI executable <code>['vale']</code>"},{"location":"descriptors/spell_vale/#ide-integration","title":"IDE Integration","text":"<p>Use vale in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs flymake-vale Visit Web Site jetbrains Vale Visit Web Site Sublime Text SublimeLinter-contrib-vale Visit Web Site vim dense-analysis/vale Visit Web Site Visual Studio Code Vale"},{"location":"descriptors/spell_vale/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/spell_vale/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/spell_vale/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.vale.ini</code></li> <li>File extensions: <code>.md</code>, <code>.rst</code></li> </ul>"},{"location":"descriptors/spell_vale/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>vale is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/spell_vale/#example-calls","title":"Example calls","text":"<pre><code>vale README.md file1.md file2.md file3.md\n</code></pre> <pre><code>vale --config .vale.ini README.md file1.md file2.md file3.md\n</code></pre>"},{"location":"descriptors/spell_vale/#help-content","title":"Help content","text":"<pre><code>vale - A command-line linter for prose.\n\nUsage:  vale [options] [input...]\n  vale myfile.md myfile1.md mydir1\n  vale --output=JSON [input...]\n\nVale is a syntax-aware linter for prose built with speed and extensibility in\nmind. It supports Markdown, AsciiDoc, reStructuredText, HTML, and more.\n\nTo get started, you'll need a configuration file (.vale.ini):\n\nExample:\n\n  MinAlertLevel = suggestion\n\n  [*]\n  BasedOnStyles = Vale\n\nSee https://vale.sh for more setup information.\n\nFlags:\n\n --config         A file path (--config='some/file/path/.vale.ini').\n --ext            An extension to associate with stdin (--ext=.md).\n --filter         An expression to filter rules by.\n --glob           A glob pattern (--glob='*.{md,txt}.')\n -h, --help       Print this help message.\n --ignore-syntax  Lint all files line-by-line.\n --minAlertLevel  The minimum level to display (--minAlertLevel=error).\n --no-exit        Don't return a nonzero exit code on errors.\n --no-global      Don't load the global configuration.\n --no-wrap        Don't wrap CLI output.\n --output         An output style (\"line\", \"JSON\", or a template file).\n -v, --version    Print the current version.\n\nCommands:\n\n ls-config        Print the current configuration to stdout.\n ls-dirs          Print the default configuration directories to stdout.\n ls-metrics       Print the given file's internal metrics to stdout.\n ls-vars          Print the supported environment variables to stdout.\n sync             Download and install external configuration sources.\n\n</code></pre>"},{"location":"descriptors/spell_vale/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=jdkato/vale\nARG SPELL_VALE_VERSION=v3.11.2\nFROM jdkato/vale:${SPELL_VALE_VERSION} AS vale\nCOPY --link --from=vale /bin/vale /bin/vale\n</code></pre>"},{"location":"descriptors/sql/","title":"SQL linters in MegaLinter","text":""},{"location":"descriptors/sql/#sql","title":"SQL","text":""},{"location":"descriptors/sql/#linters","title":"Linters","text":"Linter Additional sqlfluffSQL_SQLFLUFF tsqllintSQL_TSQLLINT"},{"location":"descriptors/sql/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.sql</code></li> </ul> </li> </ul>"},{"location":"descriptors/sql/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value SQL_PRE_COMMANDS List of bash commands to run before the linters None SQL_POST_COMMANDS List of bash commands to run after the linters None SQL_FILTER_REGEX_INCLUDE Custom regex including filter SQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/sql_sqlfluff/","title":"sqlfluff configuration in MegaLinter","text":""},{"location":"descriptors/sql_sqlfluff/#sqlfluff-documentation","title":"sqlfluff documentation","text":"<ul> <li>Version in MegaLinter: 3.4.0</li> <li>Visit Official Web Site</li> <li>See How to configure sqlfluff rules<ul> <li>If custom <code>.sqlfluff</code> config file isn't found, .sqlfluff will be used</li> </ul> </li> <li>See Index of problems detected by sqlfluff</li> </ul>"},{"location":"descriptors/sql_sqlfluff/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable sqlfluff by adding <code>SQL_SQLFLUFF</code> in ENABLE_LINTERS variable</li> <li>Disable sqlfluff by adding <code>SQL_SQLFLUFF</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SQL_SQLFLUFF_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SQL_SQLFLUFF_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SQL_SQLFLUFF_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SQL_SQLFLUFF_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SQL_SQLFLUFF_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> SQL_SQLFLUFF_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".sql\"]</code> SQL_SQLFLUFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SQL_SQLFLUFF_PRE_COMMANDS List of bash commands to run before the linter None SQL_SQLFLUFF_POST_COMMANDS List of bash commands to run after the linter None SQL_SQLFLUFF_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SQL_SQLFLUFF and its pre/post commands None SQL_SQLFLUFF_CONFIG_FILE sqlfluff configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.sqlfluff</code> SQL_SQLFLUFF_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_SQLFLUFF_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SQL_SQLFLUFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SQL_SQLFLUFF_CLI_EXECUTABLE Override CLI executable <code>['sqlfluff']</code>"},{"location":"descriptors/sql_sqlfluff/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/sql_sqlfluff/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/sql_sqlfluff/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.sqlfluff</code></li> <li>File extensions: <code>.sql</code></li> </ul>"},{"location":"descriptors/sql_sqlfluff/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>sqlfluff is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/sql_sqlfluff/#example-calls","title":"Example calls","text":"<pre><code>sqlfluff myfile.sql\n</code></pre> <pre><code>sqlfluff --config .sqlfluff myfile.sql myfile2.sql\n</code></pre>"},{"location":"descriptors/sql_sqlfluff/#help-content","title":"Help content","text":"<pre><code>Usage: sqlfluff [OPTIONS] COMMAND [ARGS]...\n\n  SQLFluff is a modular SQL linter for humans.\n\nOptions:\n  --version   Show the version and exit.\n  -h, --help  Show this message and exit.\n\nCommands:\n  dialects  Show the current dialects available.\n  fix       Fix SQL files.\n  format    Autoformat SQL files.\n  lint      Lint SQL files via passing a list of files or using stdin.\n  parse     Parse SQL files and just spit out the result.\n  render    Render SQL files and just spit out the result.\n  rules     Show the current rules in use.\n  version   Show the version of sqlfluff.\n\n  Examples:\n\n  .. code-block:: sh\n\n     sqlfluff lint --dialect postgres .\n\n     sqlfluff lint --dialect mysql --rules ST05 my_query.sql\n\n     sqlfluff fix --dialect sqlite --rules LT10,ST05 src/queries\n\n     sqlfluff parse --dialect duckdb --templater jinja path/my_query.sql\n</code></pre>"},{"location":"descriptors/sql_sqlfluff/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=sqlfluff\nARG PIP_SQLFLUFF_VERSION=3.4.0\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>sqlfluff==3.4.0</li> </ul> </li> </ul>"},{"location":"descriptors/sql_tsqllint/","title":"tsqllint configuration in MegaLinter","text":""},{"location":"descriptors/sql_tsqllint/#tsqllint","title":"tsqllint","text":""},{"location":"descriptors/sql_tsqllint/#tsqllint-documentation","title":"tsqllint documentation","text":"<ul> <li>Version in MegaLinter: 1.16.0.0</li> <li>Visit Official Web Site</li> <li>See How to configure tsqllint rules</li> <li>See How to disable tsqllint rules in files</li> <li>See Index of problems detected by tsqllint</li> </ul>"},{"location":"descriptors/sql_tsqllint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable tsqllint by adding <code>SQL_TSQLLINT</code> in ENABLE_LINTERS variable</li> <li>Disable tsqllint by adding <code>SQL_TSQLLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value SQL_TSQLLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SQL_TSQLLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SQL_TSQLLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file SQL_TSQLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file SQL_TSQLLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> SQL_TSQLLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".sql\"]</code> SQL_TSQLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SQL_TSQLLINT_PRE_COMMANDS List of bash commands to run before the linter None SQL_TSQLLINT_POST_COMMANDS List of bash commands to run after the linter None SQL_TSQLLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SQL_TSQLLINT and its pre/post commands None SQL_TSQLLINT_CONFIG_FILE tsqllint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.tsqllintrc</code> SQL_TSQLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_TSQLLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SQL_TSQLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SQL_TSQLLINT_CLI_EXECUTABLE Override CLI executable <code>['tsqllint']</code>"},{"location":"descriptors/sql_tsqllint/#ide-integration","title":"IDE Integration","text":"<p>Use tsqllint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Visual Studio Code TSQL Lint"},{"location":"descriptors/sql_tsqllint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73"},{"location":"descriptors/sql_tsqllint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/sql_tsqllint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.sql</code></li> </ul>"},{"location":"descriptors/sql_tsqllint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>tsqllint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/sql_tsqllint/#example-calls","title":"Example calls","text":"<pre><code>tsqllint myfile.sql\n</code></pre> <pre><code>tsqllint myfile.sql myfile2.sql\n</code></pre>"},{"location":"descriptors/sql_tsqllint/#help-content","title":"Help content","text":"<pre><code>running tsqllint\n\ntsqllint [options] [file.sql] | [dir] | [file.sql | dir]\n\n  -c, --config          Used to specify a .tsqllintrc file path other than the\n                        default\n  -g, --ignorelist      Used to specify a .tsqllintignore file path other than\n                        the default\n  -f, --force           Used to force generation of default config file when\n                        one already exists\n  -x, --fix             Used to fix some of the common linting errors if\n                        possible\n  -i, --init            Generate default .tsqllintrc config file\n  -p, --print-config    Print path to config file\n  -l, --list-plugins    List the loaded plugins\n  -v, --version         Display tsqllint version\n  -h, --help            Display this help dialog\n\n</code></pre>"},{"location":"descriptors/sql_tsqllint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=nuget depName=TSQLLint\nARG SQL_TSQLLINT_VERSION=1.16.0\nRUN apk add --no-cache dotnet9-sdk\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\nRUN dotnet tool install --allow-roll-forward --global TSQLLint --version ${SQL_TSQLLINT_VERSION}\n</code></pre>"},{"location":"descriptors/swift/","title":"SWIFT linters in MegaLinter","text":""},{"location":"descriptors/swift/#swift","title":"SWIFT","text":""},{"location":"descriptors/swift/#linters","title":"Linters","text":"Linter Additional swiftlintSWIFT_SWIFTLINT"},{"location":"descriptors/swift/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.swift</code></li> </ul> </li> </ul>"},{"location":"descriptors/swift/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value SWIFT_PRE_COMMANDS List of bash commands to run before the linters None SWIFT_POST_COMMANDS List of bash commands to run after the linters None SWIFT_FILTER_REGEX_INCLUDE Custom regex including filter SWIFT_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/swift_swiftlint/","title":"swiftlint configuration in MegaLinter","text":""},{"location":"descriptors/swift_swiftlint/#swiftlint","title":"swiftlint","text":""},{"location":"descriptors/swift_swiftlint/#swiftlint-documentation","title":"swiftlint documentation","text":"<ul> <li>Version in MegaLinter: 0.59.1</li> <li>Visit Official Web Site</li> <li>Docker image: ghcr.io/realm/swiftlint:SWIFT_SWIFTLINT_VERSION<ul> <li>arguments: <code>-v {{WORKSPACE}}:/tmp/lint:rw -w /tmp/lint</code></li> </ul> </li> <li>See How to configure swiftlint rules</li> <li>See How to disable swiftlint rules in files</li> <li>See Index of problems detected by swiftlint</li> </ul>"},{"location":"descriptors/swift_swiftlint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable swiftlint by adding <code>SWIFT_SWIFTLINT</code> in ENABLE_LINTERS variable</li> <li>Disable swiftlint by adding <code>SWIFT_SWIFTLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>SWIFT_SWIFTLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value SWIFT_SWIFTLINT_DOCKER_IMAGE_VERSION Docker image version <code>SWIFT_SWIFTLINT_VERSION</code> SWIFT_SWIFTLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> SWIFT_SWIFTLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> SWIFT_SWIFTLINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> SWIFT_SWIFTLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".swift\"]</code> SWIFT_SWIFTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file SWIFT_SWIFTLINT_PRE_COMMANDS List of bash commands to run before the linter None SWIFT_SWIFTLINT_POST_COMMANDS List of bash commands to run after the linter None SWIFT_SWIFTLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling SWIFT_SWIFTLINT and its pre/post commands None SWIFT_SWIFTLINT_CONFIG_FILE swiftlint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.swiftlint.yml</code> SWIFT_SWIFTLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SWIFT_SWIFTLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> SWIFT_SWIFTLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> SWIFT_SWIFTLINT_CLI_EXECUTABLE Override CLI executable <code>['swiftlint']</code>"},{"location":"descriptors/swift_swiftlint/#ide-integration","title":"IDE Integration","text":"<p>Use swiftlint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-swiftlint Visit Web Site IDEA swiftlint xcode Configure manually Visit Web Site"},{"location":"descriptors/swift_swiftlint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 swift Optimized for SWIFT based projects 50"},{"location":"descriptors/swift_swiftlint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/swift_swiftlint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.swiftlint.yml</code></li> <li>File extensions: <code>.swift</code></li> </ul>"},{"location":"descriptors/swift_swiftlint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>swiftlint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using swiftlint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make swiftlint analyze only updated files</li> </ul>"},{"location":"descriptors/swift_swiftlint/#example-calls","title":"Example calls","text":"<pre><code>docker run -v /tmp/lint:/tmp/lint:rw ghcr.io/realm/swiftlint:latest swiftlint --strict\n</code></pre> <pre><code>docker run -v /tmp/lint:/tmp/lint:rw ghcr.io/realm/swiftlint:latest swiftlint --fix --strict\n</code></pre>"},{"location":"descriptors/swift_swiftlint/#help-content","title":"Help content","text":"<pre><code>OVERVIEW: A tool to enforce Swift style and conventions.\n\nUSAGE: swiftlint &lt;subcommand&gt;\n\nOPTIONS:\n  --version               Show the version.\n  -h, --help              Show help information.\n\nSUBCOMMANDS:\n  analyze                 Run analysis rules\n  docs                    Open SwiftLint documentation website in the default\n                          web browser\n  generate-docs           Generates markdown documentation for selected group\n                          of rules\n  lint (default)          Print lint warnings and errors\n  baseline                Operations on existing baselines\n  reporters               Display the list of reporters and their identifiers\n  rules                   Display the list of rules and their identifiers\n  version                 Display the current version of SwiftLint\n\n  See 'swiftlint help &lt;subcommand&gt;' for detailed help.\n</code></pre>"},{"location":"descriptors/swift_swiftlint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=ghcr.io/realm/swiftlint\nENV SWIFT_SWIFTLINT_VERSION=0.59.1\n</code></pre>"},{"location":"descriptors/tekton/","title":"TEKTON linters in MegaLinter","text":""},{"location":"descriptors/tekton/#tekton","title":"TEKTON","text":""},{"location":"descriptors/tekton/#linters","title":"Linters","text":"Linter Additional tekton-lintTEKTON_TEKTON_LINT"},{"location":"descriptors/tekton/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> </ul> </li> </ul> <ul> <li>Detected file content:<ul> <li><code>apiVersion: tekton</code></li> </ul> </li> </ul>"},{"location":"descriptors/tekton/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value TEKTON_PRE_COMMANDS List of bash commands to run before the linters None TEKTON_POST_COMMANDS List of bash commands to run after the linters None TEKTON_FILTER_REGEX_INCLUDE Custom regex including filter TEKTON_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/tekton_tekton_lint/","title":"tekton-lint configuration in MegaLinter","text":""},{"location":"descriptors/tekton_tekton_lint/#tekton-lint","title":"tekton-lint","text":""},{"location":"descriptors/tekton_tekton_lint/#tekton-lint-documentation","title":"tekton-lint documentation","text":"<ul> <li>Version in MegaLinter: 1.1.0</li> <li>Visit Official Web Site</li> <li>See How to configure tekton-lint rules</li> <li>See Index of problems detected by tekton-lint</li> </ul>"},{"location":"descriptors/tekton_tekton_lint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable tekton-lint by adding <code>TEKTON_TEKTON_LINT</code> in ENABLE_LINTERS variable</li> <li>Disable tekton-lint by adding <code>TEKTON_TEKTON_LINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value TEKTON_TEKTON_LINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TEKTON_TEKTON_LINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TEKTON_TEKTON_LINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> TEKTON_TEKTON_LINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\"]</code> TEKTON_TEKTON_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TEKTON_TEKTON_LINT_PRE_COMMANDS List of bash commands to run before the linter None TEKTON_TEKTON_LINT_POST_COMMANDS List of bash commands to run after the linter None TEKTON_TEKTON_LINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TEKTON_TEKTON_LINT and its pre/post commands None TEKTON_TEKTON_LINT_CONFIG_FILE tekton-lint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.tektonlintrc.yaml</code> TEKTON_TEKTON_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TEKTON_TEKTON_LINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TEKTON_TEKTON_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TEKTON_TEKTON_LINT_CLI_EXECUTABLE Override CLI executable <code>['tekton-lint']</code>"},{"location":"descriptors/tekton_tekton_lint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/tekton_tekton_lint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/tekton_tekton_lint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.yml</code>, <code>.yaml</code></li> <li>Detected file content (regex): <code>apiVersion: tekton</code></li> </ul>"},{"location":"descriptors/tekton_tekton_lint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>tekton-lint is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/tekton_tekton_lint/#example-calls","title":"Example calls","text":"<pre><code>tekton-lint myfile.yml\n</code></pre>"},{"location":"descriptors/tekton_tekton_lint/#help-content","title":"Help content","text":"<pre><code>tekton-lint [&lt;options&gt;]  &lt;glob-pattern-to-yaml-files&gt; ...\n\nOptions:\n  --watch           Run tekton-lint in watch mode     [boolean] [default: false]\n  --color          Forcefully enable/disable colored output\n                                                       [boolean] [default: true]\n  --format         Format output. Available formatters: vscode | stylish | json\n            [string] [choices: \"vscode\", \"stylish\", \"json\"] [default: \"stylish\"]\n  --quiet          Report errors only                 [boolean] [default: false]\n  --max-warnings   Number of warnings to trigger nonzero exit code\n                                                          [number] [default: -1]\n  --config         location of the .tektonlintrc.yaml, defaults to cwd\n                                                         [string] [default: \"/\"]\n  --refresh-cache  If true will delete the cache directory for external tasks\n                                                    [boolean] [default: \"false\"]\n  --version        Show version number                                 [boolean]\n  --help           Show help                                           [boolean]\n\nExamples:\n  tekton-lint \"**/*.yaml\"                   Globstar matching\n  tekton-lint path/to/my/pipeline.yaml      Multiple glob patterns\n  \"path/to/my/tasks/*.yaml\"\n  tekton-lint --watch \"**/*.yaml\"           Watch mode\n</code></pre>"},{"location":"descriptors/tekton_tekton_lint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=@ibm/tekton-lint\nARG NPM_IBM_TEKTON_LINT_VERSION=1.1.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>@ibm/tekton-lint@1.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/terraform/","title":"TERRAFORM linters in MegaLinter","text":""},{"location":"descriptors/terraform/#terraform","title":"TERRAFORM","text":""},{"location":"descriptors/terraform/#linters","title":"Linters","text":"Linter Additional tflintTERRAFORM_TFLINT terrascanTERRAFORM_TERRASCAN terragruntTERRAFORM_TERRAGRUNT terraform-fmtTERRAFORM_TERRAFORM_FMT"},{"location":"descriptors/terraform/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.tf</code></li> </ul> </li> </ul>"},{"location":"descriptors/terraform/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value TERRAFORM_PRE_COMMANDS List of bash commands to run before the linters None TERRAFORM_POST_COMMANDS List of bash commands to run after the linters None TERRAFORM_FILTER_REGEX_INCLUDE Custom regex including filter TERRAFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/terraform_kics/","title":"kics configuration in MegaLinter","text":""},{"location":"descriptors/terraform_kics/#kics-documentation","title":"kics documentation","text":"<ul> <li>Version in MegaLinter: 1.7.1</li> <li>Visit Official Web Site</li> <li>See How to disable kics rules in files</li> <li>See Index of problems detected by kics</li> </ul>"},{"location":"descriptors/terraform_kics/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable kics by adding <code>TERRAFORM_KICS</code> in ENABLE_LINTERS variable</li> <li>Disable kics by adding <code>TERRAFORM_KICS</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value TERRAFORM_KICS_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TERRAFORM_KICS_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TERRAFORM_KICS_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TERRAFORM_KICS_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> TERRAFORM_KICS_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".tf\"]</code> TERRAFORM_KICS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TERRAFORM_KICS_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_KICS_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_KICS_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TERRAFORM_KICS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TERRAFORM_KICS_CLI_EXECUTABLE Override CLI executable <code>['kics']</code>"},{"location":"descriptors/terraform_kics/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 113 cupcake MegaLinter for the most commonly used languages 81 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 51"},{"location":"descriptors/terraform_kics/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/terraform_kics/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.tf</code></li> </ul>"},{"location":"descriptors/terraform_kics/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>kics is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/terraform_kics/#example-calls","title":"Example calls","text":"<pre><code>kics scan --path myfile.tf\n</code></pre>"},{"location":"descriptors/terraform_kics/#help-content","title":"Help content","text":"<pre><code>Keeping Infrastructure as Code Secure\n\nUsage:\n  kics [command]\n\nAvailable Commands:\n  generate-id    Generates uuid for query\n  help           Help about any command\n  list-platforms List supported platforms\n  remediate      Auto remediates the project\n  scan           Executes a scan analysis\n  version        Displays the current version\n\nFlags:\n      --ci                  display only log messages to CLI output (mutually exclusive with silent)\n  -h, --help                help for kics\n  -f, --log-format string   determines log format (pretty,json) (default \"pretty\")\n      --log-level string    determines log level (TRACE,DEBUG,INFO,WARN,ERROR,FATAL) (default \"INFO\")\n      --log-path string     path to generate log file (info.log)\n      --no-color            disable CLI color output\n      --profiling string    enables performance profiler that prints resource consumption metrics in the logs during the execution (CPU, MEM)\n  -s, --silent              silence stdout messages (mutually exclusive with verbose and ci)\n  -v, --verbose             write logs to stdout too (mutually exclusive with silent)\n\nUse \"kics [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/terraform_kics/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>FROM checkmarx/kics:alpine as kics\nCOPY --link --from=kics /app/bin/kics /usr/bin/\nRUN mkdir -p /opt/kics/assets\nENV KICS_QUERIES_PATH=/opt/kics/assets/queries KICS_LIBRARIES_PATH=/opt/kics/assets/libraries\nCOPY --from=kics /app/bin/assets /opt/kics/assets/\n</code></pre>"},{"location":"descriptors/terraform_terraform_fmt/","title":"terraform-fmt configuration in MegaLinter","text":""},{"location":"descriptors/terraform_terraform_fmt/#terraform-fmt-documentation","title":"terraform-fmt documentation","text":"<ul> <li>Version in MegaLinter: 1.11.4</li> <li>Visit Official Web Site</li> </ul>"},{"location":"descriptors/terraform_terraform_fmt/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable terraform-fmt by adding <code>TERRAFORM_TERRAFORM_FMT</code> in ENABLE_LINTERS variable</li> <li>Disable terraform-fmt by adding <code>TERRAFORM_TERRAFORM_FMT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TERRAFORM_TERRAFORM_FMT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TERRAFORM_TERRAFORM_FMT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TERRAFORM_TERRAFORM_FMT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TERRAFORM_TERRAFORM_FMT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> TERRAFORM_TERRAFORM_FMT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".tf\"]</code> TERRAFORM_TERRAFORM_FMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TERRAFORM_TERRAFORM_FMT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRAFORM_FMT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRAFORM_FMT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TERRAFORM_TERRAFORM_FMT and its pre/post commands None TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TERRAFORM_TERRAFORM_FMT_CLI_EXECUTABLE Override CLI executable <code>['terraform']</code>"},{"location":"descriptors/terraform_terraform_fmt/#ide-integration","title":"IDE Integration","text":"<p>Use terraform-fmt in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom terraform-fmt Visit Web Site IDEA HashiCorp Terraform / HCL language support Sublime Text Terrafmt Visit Web Site Visual Studio Code HashiCorp Terraform"},{"location":"descriptors/terraform_terraform_fmt/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 formatters Contains only formatters 18 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/terraform_terraform_fmt/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/terraform_terraform_fmt/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.tf</code></li> </ul>"},{"location":"descriptors/terraform_terraform_fmt/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>terraform-fmt is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/terraform_terraform_fmt/#example-calls","title":"Example calls","text":"<pre><code>terraform fmt myfile.tf\n</code></pre>"},{"location":"descriptors/terraform_terraform_fmt/#help-content","title":"Help content","text":"<pre><code>Usage: terraform [global options] &lt;subcommand&gt; [args]\n\nThe available commands for execution are listed below.\nThe primary workflow commands are given first, followed by\nless common or more advanced commands.\n\nMain commands:\n  init          Prepare your working directory for other commands\n  validate      Check whether the configuration is valid\n  plan          Show changes required by the current configuration\n  apply         Create or update infrastructure\n  destroy       Destroy previously-created infrastructure\n\nAll other commands:\n  console       Try Terraform expressions at an interactive command prompt\n  fmt           Reformat your configuration in the standard style\n  force-unlock  Release a stuck lock on the current workspace\n  get           Install or upgrade remote Terraform modules\n  graph         Generate a Graphviz graph of the steps in an operation\n  import        Associate existing infrastructure with a Terraform resource\n  login         Obtain and save credentials for a remote host\n  logout        Remove locally-stored credentials for a remote host\n  metadata      Metadata related commands\n  modules       Show all declared modules in a working directory\n  output        Show output values from your root module\n  providers     Show the providers required for this configuration\n  refresh       Update the state to match remote systems\n  show          Show the current state or a saved plan\n  state         Advanced state management\n  taint         Mark a resource instance as not fully functional\n  test          Execute integration tests for Terraform modules\n  untaint       Remove the 'tainted' state from a resource instance\n  version       Show the current Terraform version\n  workspace     Workspace management\n\nGlobal options (use these before the subcommand, if any):\n  -chdir=DIR    Switch to a different working directory before executing the\n                given subcommand.\n  -help         Show this help output, or the help for a specified subcommand.\n  -version      An alias for the \"version\" subcommand.\n</code></pre>"},{"location":"descriptors/terraform_terraform_fmt/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=alpine/terragrunt\nARG TERRAFORM_TERRAGRUNT_VERSION=1.11.4\nFROM alpine/terragrunt:${TERRAFORM_TERRAGRUNT_VERSION} AS terragrunt\nCOPY --link --from=terragrunt /bin/terraform /usr/bin/\n</code></pre>"},{"location":"descriptors/terraform_terragrunt/","title":"terragrunt configuration in MegaLinter","text":""},{"location":"descriptors/terraform_terragrunt/#terragrunt","title":"terragrunt","text":""},{"location":"descriptors/terraform_terragrunt/#terragrunt-documentation","title":"terragrunt documentation","text":"<ul> <li>Version in MegaLinter: 0.78.0</li> <li>Visit Official Web Site</li> <li>See How to configure terragrunt rules</li> </ul>"},{"location":"descriptors/terraform_terragrunt/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable terragrunt by adding <code>TERRAFORM_TERRAGRUNT</code> in ENABLE_LINTERS variable</li> <li>Disable terragrunt by adding <code>TERRAFORM_TERRAGRUNT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TERRAFORM_TERRAGRUNT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TERRAFORM_TERRAGRUNT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TERRAFORM_TERRAGRUNT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TERRAFORM_TERRAGRUNT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>project</code>: Call the linter from the root of the project <code>file</code> TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".hcl\"]</code> TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TERRAFORM_TERRAGRUNT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRAGRUNT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRAGRUNT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TERRAFORM_TERRAGRUNT and its pre/post commands None TERRAFORM_TERRAGRUNT_CONFIG_FILE terragrunt configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>terragrunt.hcl</code> TERRAFORM_TERRAGRUNT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TERRAGRUNT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TERRAFORM_TERRAGRUNT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TERRAFORM_TERRAGRUNT_CLI_EXECUTABLE Override CLI executable <code>['terragrunt']</code>"},{"location":"descriptors/terraform_terragrunt/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 security Optimized for security 24 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/terraform_terragrunt/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/terraform_terragrunt/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.hcl</code></li> <li>File name don't ends with: <code>.tflint.hcl</code></li> </ul>"},{"location":"descriptors/terraform_terragrunt/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>terragrunt is called one time by identified file (<code>file</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/terraform_terragrunt/#example-calls","title":"Example calls","text":"<pre><code>terragrunt hclfmt --terragrunt-check --terragrunt-hclfmt-file myfile.hcl\n</code></pre> <pre><code>terragrunt hclfmt --terragrunt-check --terragrunt-config terragrunt.hcl --terragrunt-hclfmt-file myfile.hcl\n</code></pre>"},{"location":"descriptors/terraform_terragrunt/#help-content","title":"Help content","text":"<pre><code>Usage: terragrunt [global options] &lt;command&gt; [options]\n\n   Terragrunt is a flexible orchestration tool that allows Infrastructure as Code written in OpenTofu/Terraform to scale.\n   For documentation, see https://terragrunt.gruntwork.io/.\n\nMain commands:\n   backend        Interact with OpenTofu/Terraform backend infrastructure.\n   exec           Execute an arbitrary command.\n   run            Run an OpenTofu/Terraform command.\n   stack          Terragrunt stack commands.\n\nCatalog commands:\n   catalog        Launch the user interface for searching and managing your module catalog.\n   scaffold       Scaffold a new Terragrunt module.\n\nDiscovery commands:\n   find, fd       Find relevant Terragrunt configurations.\n   list, ls       List relevant Terragrunt configurations.\n\nConfiguration commands:\n   dag            Interact with the Directed Acyclic Graph (DAG).\n   hcl            Interact with HCL files.\n   info           List of commands to display Terragrunt settings.\n   render         Render the final terragrunt config, with all variables, includes, and functions resolved, in the specified format.\n\nOpenTofu shortcuts:\n   apply          Create or update infrastructure.\n   destroy        Destroy previously-created infrastructure.\n   force-unlock   Release a stuck lock on the current workspace.\n   import         Associate existing infrastructure with a OpenTofu/Terraform resource.\n   init           Prepare your working directory for other commands.\n   output         Show output values from your root module.\n   plan           Show changes required by the current configuration.\n   refresh        Update the state to match remote systems.\n   show           Show the current state or a saved plan.\n   state          Advanced state management.\n   test           Execute integration tests for OpenTofu/Terraform modules.\n   validate       Check whether the configuration is valid.\n\nGlobal Options:\n   --experiment value         Enables specific experiments. For a list of available experiments, see https://terragrunt.gruntwork.io/docs/reference/experiment-mode . [$TG_EXPERIMENT]\n   --experiment-mode          Enables experiment mode for Terragrunt. For more information, see https://terragrunt.gruntwork.io/docs/reference/experiment-mode . (default: false) [$TG_EXPERIMENT_MODE]\n   --log-custom-format value  Set the custom log formatting. [$TG_LOG_CUSTOM_FORMAT]\n   --log-disable              Disable logging. (default: false) [$TG_LOG_DISABLE]\n   --log-format value         Set the log format. [$TG_LOG_FORMAT]\n   --log-level value          Sets the logging level for Terragrunt. Supported levels: stderr, stdout, error, warn, info, debug, trace. (default: info) [$TG_LOG_LEVEL]\n   --log-show-abs-paths       Show absolute paths in logs. (default: false) [$TG_LOG_SHOW_ABS_PATHS]\n   --no-color                 Disable color output. (default: false) [$TG_NO_COLOR]\n   --non-interactive          Assume \"yes\" for all prompts. (default: false) [$TG_NON_INTERACTIVE]\n   --strict-control value     Enables specific strict controls. For a list of available controls, run 'terragrunt info strict'. [$TG_STRICT_CONTROL]\n   --strict-mode              Enables strict mode for Terragrunt. For more information, run 'terragrunt info strict'. (default: false) [$TG_STRICT_MODE]\n   --working-dir value        The path to the directory of Terragrunt configurations. Default is current directory. [$TG_WORKING_DIR]\n   --help, -h                 Show help. (default: false)\n   --version, -v              Show terragrunt version. (default: false)\n\nVersion: v0.78.0\n\nAuthor: Gruntwork &lt;www.gruntwork.io&gt;\n</code></pre>"},{"location":"descriptors/terraform_terragrunt/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=alpine/terragrunt\nARG TERRAFORM_TERRAGRUNT_VERSION=1.11.4\nFROM alpine/terragrunt:${TERRAFORM_TERRAGRUNT_VERSION} AS terragrunt\nCOPY --link --from=terragrunt /usr/local/bin/terragrunt /usr/bin/\n</code></pre>"},{"location":"descriptors/terraform_terrascan/","title":"terrascan configuration in MegaLinter","text":""},{"location":"descriptors/terraform_terrascan/#terrascan-documentation","title":"terrascan documentation","text":"<ul> <li>Version in MegaLinter: 1.19.9</li> <li>Visit Official Web Site</li> <li>See How to configure terrascan rules</li> <li>See Index of problems detected by terrascan</li> </ul>"},{"location":"descriptors/terraform_terrascan/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable terrascan by adding <code>TERRAFORM_TERRASCAN</code> in ENABLE_LINTERS variable</li> <li>Disable terrascan by adding <code>TERRAFORM_TERRASCAN</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value TERRAFORM_TERRASCAN_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TERRAFORM_TERRASCAN_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TERRAFORM_TERRASCAN_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> TERRAFORM_TERRASCAN_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".tf\"]</code> TERRAFORM_TERRASCAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TERRAFORM_TERRASCAN_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRASCAN_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRASCAN_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TERRAFORM_TERRASCAN and its pre/post commands None TERRAFORM_TERRASCAN_CONFIG_FILE terrascan configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>terrascan.toml</code> TERRAFORM_TERRASCAN_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TERRASCAN_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TERRAFORM_TERRASCAN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TERRAFORM_TERRASCAN_CLI_EXECUTABLE Override CLI executable <code>['terrascan']</code>"},{"location":"descriptors/terraform_terrascan/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 security Optimized for security 24 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/terraform_terrascan/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/terraform_terrascan/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.tf</code></li> </ul>"},{"location":"descriptors/terraform_terrascan/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>terrascan is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using terrascan configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make terrascan analyze only updated files</li> </ul>"},{"location":"descriptors/terraform_terrascan/#example-calls","title":"Example calls","text":"<pre><code>terrascan scan -i terraform -t all -f myfile.tf\n</code></pre>"},{"location":"descriptors/terraform_terrascan/#help-content","title":"Help content","text":"<pre><code>Terrascan\n\nDetect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure.\nFor more information, please visit https://runterrascan.io/\n\nUsage:\n  terrascan [command]\n\nAvailable Commands:\n  init        Initializes Terrascan and clones policies from the Terrascan GitHub repository.\n  scan        Detect compliance and security violations across Infrastructure as Code.\n  server      Run Terrascan as an API server\n  version     Terrascan version\n\nFlags:\n  -c, --config-path string      config file path\n  -l, --log-level string        log level (debug, info, warn, error, panic, fatal) (default \"info\")\n      --log-output-dir string   directory path to write the log and output files\n  -x, --log-type string         log output type (console, json) (default \"console\")\n  -o, --output string           output type (human, json, yaml, xml, junit-xml, sarif, github-sarif) (default \"human\")\n      --temp-dir string         temporary directory path to download remote repository,module and templates\n\nUse \"terrascan [command] --help\" for more information about a command.\n</code></pre>"},{"location":"descriptors/terraform_terrascan/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=tenable/terrascan\nARG TERRAFORM_TERRASCAN_VERSION=1.19.9\nFROM tenable/terrascan:${TERRAFORM_TERRASCAN_VERSION} AS terrascan\nCOPY --link --from=terrascan /go/bin/terrascan /usr/bin/\n</code></pre>"},{"location":"descriptors/terraform_tflint/","title":"tflint configuration in MegaLinter","text":""},{"location":"descriptors/terraform_tflint/#tflint","title":"tflint","text":"<p>If you are using the GitHub action please use the <code>TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES: GITHUB_TOKEN</code> to prevent plugin download issues</p> <p>If you have issues with tflint --init, create a GitHub Personal Access Token and set its value to PAT_GITHUB_COM variable.</p> <p>Note: It's recommended to create your own <code>.tflint.hcl</code> custom config file tailored to your project's specific needs. The default configuration enables all supported languages and rules, which may not be optimal for every project.</p>"},{"location":"descriptors/terraform_tflint/#tflint-documentation","title":"tflint documentation","text":"<ul> <li>Version in MegaLinter: 0.57.0</li> <li>Visit Official Web Site</li> <li>See How to configure tflint rules<ul> <li>If custom <code>.tflint.hcl</code> config file isn't found, .tflint.hcl will be used</li> </ul> </li> <li>See How to disable tflint rules in files</li> <li>See Index of problems detected by tflint</li> </ul>"},{"location":"descriptors/terraform_tflint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable tflint by adding <code>TERRAFORM_TFLINT</code> in ENABLE_LINTERS variable</li> <li>Disable tflint by adding <code>TERRAFORM_TFLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value TERRAFORM_TFLINT_SECURED_ENV Allows to send the full env to tflint --init. Initialized with default value <code>true</code>. Set to <code>false</code> to allow <code>tflint --init</code> to access your env vars. <code>True</code> PAT_GITHUB_COM If you have issues with tflint --init, create a GitHub Personal Access Token and set its value to PAT_GITHUB_COM variable. `` TERRAFORM_TFLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TERRAFORM_TFLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TERRAFORM_TFLINT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> TERRAFORM_TFLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".tf\"]</code> TERRAFORM_TFLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TERRAFORM_TFLINT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TFLINT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TFLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TERRAFORM_TFLINT and its pre/post commands None TERRAFORM_TFLINT_CONFIG_FILE tflint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.tflint.hcl</code> TERRAFORM_TFLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TFLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TERRAFORM_TFLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TERRAFORM_TFLINT_CLI_EXECUTABLE Override CLI executable <code>['tflint']</code>"},{"location":"descriptors/terraform_tflint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 security Optimized for security 24 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/terraform_tflint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/terraform_tflint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.tf</code></li> </ul>"},{"location":"descriptors/terraform_tflint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>tflint is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using tflint configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make tflint analyze only updated files</li> </ul>"},{"location":"descriptors/terraform_tflint/#example-calls","title":"Example calls","text":"<pre><code>tflint\n</code></pre> <pre><code>tflint -c .tflint.hcl\n</code></pre>"},{"location":"descriptors/terraform_tflint/#help-content","title":"Help content","text":"<pre><code>Usage:\n  tflint --chdir=DIR/--recursive [OPTIONS]\n\nApplication Options:\n  -v, --version                                                 Print TFLint\n                                                                version\n      --init                                                    Install plugins\n      --langserver                                              Start language\n                                                                server\n  -f, --format=[default|json|checkstyle|junit|compact|sarif]    Output format\n  -c, --config=FILE                                             Config file\n                                                                name (default:\n                                                                .tflint.hcl)\n      --ignore-module=SOURCE                                    Ignore module\n                                                                sources\n      --enable-rule=RULE_NAME                                   Enable rules\n                                                                from the\n                                                                command line\n      --disable-rule=RULE_NAME                                  Disable rules\n                                                                from the\n                                                                command line\n      --only=RULE_NAME                                          Enable only\n                                                                this rule,\n                                                                disabling all\n                                                                other defaults.\n                                                                Can be\n                                                                specified\n                                                                multiple times\n      --enable-plugin=PLUGIN_NAME                               Enable plugins\n                                                                from the\n                                                                command line\n      --var-file=FILE                                           Terraform\n                                                                variable file\n                                                                name\n      --var='foo=bar'                                           Set a Terraform\n                                                                variable\n      --call-module-type=[all|local|none]                       Types of module\n                                                                to call\n                                                                (default: local)\n      --chdir=DIR                                               Switch to a\n                                                                different\n                                                                working\n                                                                directory\n                                                                before\n                                                                executing the\n                                                                command\n      --recursive                                               Run command in\n                                                                each directory\n                                                                recursively\n      --filter=FILE                                             Filter issues\n                                                                by file names\n                                                                or globs\n      --force                                                   Return zero\n                                                                exit status\n                                                                even if issues\n                                                                found\n      --minimum-failure-severity=[error|warning|notice]         Sets minimum\n                                                                severity level\n                                                                for exiting\n                                                                with a non-zero\n                                                                error code\n      --color                                                   Enable\n                                                                colorized output\n      --no-color                                                Disable\n                                                                colorized output\n      --fix                                                     Fix issues\n                                                                automatically\n      --no-parallel-runners                                     Disable\n                                                                per-runner\n                                                                parallelism\n      --max-workers=N                                           Set maximum\n                                                                number of\n                                                                workers in\n                                                                recursive\n                                                                inspection\n                                                                (default:\n                                                                number of CPUs)\n\nHelp Options:\n  -h, --help                                                    Show this help\n                                                                message\n\n</code></pre>"},{"location":"descriptors/terraform_tflint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=docker depName=ghcr.io/terraform-linters/tflint\nARG TERRAFORM_TFLINT_VERSION=0.57.0\nFROM ghcr.io/terraform-linters/tflint:v${TERRAFORM_TFLINT_VERSION} AS tflint\nCOPY --link --from=tflint /usr/local/bin/tflint /usr/bin/\n</code></pre>"},{"location":"descriptors/tsx/","title":"TSX linters in MegaLinter","text":""},{"location":"descriptors/tsx/#tsx","title":"TSX","text":""},{"location":"descriptors/tsx/#linters","title":"Linters","text":"Linter Additional eslintTSX_ESLINT"},{"location":"descriptors/tsx/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.tsx</code></li> </ul> </li> </ul>"},{"location":"descriptors/tsx/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value TSX_PRE_COMMANDS List of bash commands to run before the linters None TSX_POST_COMMANDS List of bash commands to run after the linters None TSX_FILTER_REGEX_INCLUDE Custom regex including filter TSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/tsx_eslint/","title":"eslint configuration in MegaLinter","text":"<p>eslint requires a custom configuration file applicable to your project.</p> <p>You can create it by typing <code>npx eslint --init</code> in the root of your repository</p>"},{"location":"descriptors/tsx_eslint/#eslint-documentation","title":"eslint documentation","text":"<ul> <li>Version in MegaLinter: 8.57.1</li> <li>Visit Official Web Site</li> <li>See How to configure eslint rules</li> <li>See How to disable eslint rules in files</li> <li>See How to ignore files and directories with eslint<ul> <li>You can define a <code>.eslintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by eslint</li> </ul>"},{"location":"descriptors/tsx_eslint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable eslint by adding <code>TSX_ESLINT</code> in ENABLE_LINTERS variable</li> <li>Disable eslint by adding <code>TSX_ESLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TSX_ESLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TSX_ESLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TSX_ESLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> TSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".tsx\"]</code> TSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TSX_ESLINT_PRE_COMMANDS List of bash commands to run before the linter None TSX_ESLINT_POST_COMMANDS List of bash commands to run after the linter None TSX_ESLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TSX_ESLINT and its pre/post commands None TSX_ESLINT_CONFIG_FILE eslint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.eslintrc.json</code> TSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TSX_ESLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TSX_ESLINT_CLI_EXECUTABLE Override CLI executable <code>['eslint']</code>"},{"location":"descriptors/tsx_eslint/#ide-integration","title":"IDE Integration","text":"<p>Use eslint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint"},{"location":"descriptors/tsx_eslint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/tsx_eslint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/tsx_eslint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig</code></li> <li>File extensions: <code>.tsx</code></li> </ul>"},{"location":"descriptors/tsx_eslint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>eslint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/tsx_eslint/#example-calls","title":"Example calls","text":"<pre><code>eslint myfile.tsx\n</code></pre> <pre><code>eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx\n</code></pre> <pre><code>eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx\n</code></pre>"},{"location":"descriptors/tsx_eslint/#help-content","title":"Help content","text":"<pre><code>eslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-eslintrc                    Disable use of configuration from .eslintrc.*\n  -c, --config path::String        Use this configuration, overriding .eslintrc.* config options if present\n  --env [String]                   Specify environments\n  --ext [String]                   Specify JavaScript file extensions\n  --global [String]                Define global variables\n  --parser String                  Specify the parser to be used\n  --parser-options Object          Specify parser options\n  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\nSpecify Rules and Plugins:\n  --plugin [String]                Specify plugins\n  --rule Object                    Specify rules\n  --rulesdir [path::String]        Load additional rules from this directory. Deprecated: Use rules from plugins\n\nFix Problems:\n  --fix                            Automatically fix problems\n  --fix-dry-run                    Automatically fix problems without saving the changes to the file system\n  --fix-type Array                 Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --ignore-path path::String       Specify path of ignore file\n  --no-ignore                      Disable use of ignore files and patterns\n  --ignore-pattern [String]        Pattern of files to ignore (in addition to those in .eslintignore)\n\nUse stdin:\n  --stdin                          Lint code provided on &lt;STDIN&gt; - default: false\n  --stdin-filename String          Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                          Report errors only - default: false\n  --max-warnings Int               Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String   Specify file to write report to\n  -f, --format String              Use a specific output format - default: stylish\n  --color, --no-color              Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config               Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and eslint-enable directives - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                          Only check changed files - default: false\n  --cache-file path::String        Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String    Path to the cache file or directory\n  --cache-strategy String          Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata\n\nMiscellaneous:\n  --init                           Run config initialization wizard - default: false\n  --env-info                       Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error            Exit with exit code 2 in case of fatal error - default: false\n  --debug                          Output debugging information\n  -h, --help                       Show help\n  -v, --version                    Output the version number\n  --print-config path::String      Print the configuration for the given file\n</code></pre>"},{"location":"descriptors/tsx_eslint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=typescript\nARG NPM_TYPESCRIPT_VERSION=5.8.3\n# renovate: datasource=npm depName=eslint\nARG NPM_ESLINT_VERSION=8.57.1\n# renovate: datasource=npm depName=eslint-config-airbnb\nARG NPM_ESLINT_CONFIG_AIRBNB_VERSION=19.0.4\n# renovate: datasource=npm depName=eslint-config-prettier\nARG NPM_ESLINT_CONFIG_PRETTIER_VERSION=10.1.2\n# renovate: datasource=npm depName=eslint-plugin-jest\nARG NPM_ESLINT_PLUGIN_JEST_VERSION=28.11.0\n# renovate: datasource=npm depName=eslint-plugin-prettier\nARG NPM_ESLINT_PLUGIN_PRETTIER_VERSION=5.3.1\n# renovate: datasource=npm depName=eslint-plugin-react\nARG NPM_ESLINT_PLUGIN_REACT_VERSION=7.37.5\n# renovate: datasource=npm depName=@babel/eslint-parser\nARG NPM_BABEL_ESLINT_PARSER_VERSION=7.27.1\n# renovate: datasource=npm depName=prettier\nARG NPM_PRETTIER_VERSION=3.5.3\n# renovate: datasource=npm depName=prettyjson\nARG NPM_PRETTYJSON_VERSION=1.2.5\n# renovate: datasource=npm depName=@typescript-eslint/eslint-plugin\nARG NPM_TYPESCRIPT_ESLINT_ESLINT_PLUGIN_VERSION=8.31.1\n# renovate: datasource=npm depName=@typescript-eslint/parser\nARG NPM_TYPESCRIPT_ESLINT_PARSER_VERSION=8.31.1\n# renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif\nARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>typescript@5.8.3</li> <li>eslint@8.57.1</li> <li>eslint-config-airbnb@19.0.4</li> <li>eslint-config-prettier@10.1.2</li> <li>eslint-plugin-jest@28.11.0</li> <li>eslint-plugin-prettier@5.3.1</li> <li>eslint-plugin-react@7.37.5</li> <li>@babel/eslint-parser@7.27.1</li> <li>prettier@3.5.3</li> <li>prettyjson@1.2.5</li> <li>@typescript-eslint/eslint-plugin@8.31.1</li> <li>@typescript-eslint/parser@8.31.1</li> <li>@microsoft/eslint-formatter-sarif@3.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/typescript/","title":"TYPESCRIPT linters in MegaLinter","text":""},{"location":"descriptors/typescript/#typescript","title":"TYPESCRIPT","text":""},{"location":"descriptors/typescript/#linters","title":"Linters","text":"Linter Additional eslintTYPESCRIPT_ES ts-standardTYPESCRIPT_STANDARD prettierTYPESCRIPT_PRETTIER"},{"location":"descriptors/typescript/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.ts</code></li> </ul> </li> </ul>"},{"location":"descriptors/typescript/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value TYPESCRIPT_PRE_COMMANDS List of bash commands to run before the linters None TYPESCRIPT_POST_COMMANDS List of bash commands to run after the linters None TYPESCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter TYPESCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/typescript/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/typescript/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=typescript\nARG NPM_TYPESCRIPT_VERSION=5.8.3\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>typescript@5.8.3</li> </ul> </li> </ul>"},{"location":"descriptors/typescript_eslint/","title":"eslint configuration in MegaLinter","text":"<p>eslint requires a custom configuration file applicable to your project.</p> <p>You can create it by typing <code>npx eslint --init</code> in the root of your repository</p>"},{"location":"descriptors/typescript_eslint/#eslint-documentation","title":"eslint documentation","text":"<ul> <li>Version in MegaLinter: 8.57.1</li> <li>Visit Official Web Site</li> <li>See How to configure eslint rules</li> <li>See How to disable eslint rules in files</li> <li>See How to ignore files and directories with eslint<ul> <li>You can define a <code>.eslintignore</code> file to ignore files and folders</li> </ul> </li> <li>See Index of problems detected by eslint</li> </ul>"},{"location":"descriptors/typescript_eslint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable eslint by adding <code>TYPESCRIPT_ES</code> in ENABLE_LINTERS variable</li> <li>Disable eslint by adding <code>TYPESCRIPT_ES</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TYPESCRIPT_ES</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TYPESCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_ES_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TYPESCRIPT_ES_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> TYPESCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".ts\"]</code> TYPESCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TYPESCRIPT_ES_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_ES_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_ES_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TYPESCRIPT_ES and its pre/post commands None TYPESCRIPT_ES_CONFIG_FILE eslint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.eslintrc.json</code> TYPESCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TYPESCRIPT_ES_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TYPESCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TYPESCRIPT_ES_CLI_EXECUTABLE Override CLI executable <code>['eslint']</code>"},{"location":"descriptors/typescript_eslint/#ide-integration","title":"IDE Integration","text":"<p>Use eslint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint"},{"location":"descriptors/typescript_eslint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/typescript_eslint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/typescript_eslint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>Activated only if one of these files is found: <code>.eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig</code></li> <li>File extensions: <code>.ts</code></li> </ul>"},{"location":"descriptors/typescript_eslint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>eslint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/typescript_eslint/#example-calls","title":"Example calls","text":"<pre><code>eslint myfile.ts\n</code></pre> <pre><code>eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts\n</code></pre> <pre><code>eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts\n</code></pre>"},{"location":"descriptors/typescript_eslint/#help-content","title":"Help content","text":"<pre><code>eslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-eslintrc                    Disable use of configuration from .eslintrc.*\n  -c, --config path::String        Use this configuration, overriding .eslintrc.* config options if present\n  --env [String]                   Specify environments\n  --ext [String]                   Specify JavaScript file extensions\n  --global [String]                Define global variables\n  --parser String                  Specify the parser to be used\n  --parser-options Object          Specify parser options\n  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\nSpecify Rules and Plugins:\n  --plugin [String]                Specify plugins\n  --rule Object                    Specify rules\n  --rulesdir [path::String]        Load additional rules from this directory. Deprecated: Use rules from plugins\n\nFix Problems:\n  --fix                            Automatically fix problems\n  --fix-dry-run                    Automatically fix problems without saving the changes to the file system\n  --fix-type Array                 Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --ignore-path path::String       Specify path of ignore file\n  --no-ignore                      Disable use of ignore files and patterns\n  --ignore-pattern [String]        Pattern of files to ignore (in addition to those in .eslintignore)\n\nUse stdin:\n  --stdin                          Lint code provided on &lt;STDIN&gt; - default: false\n  --stdin-filename String          Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                          Report errors only - default: false\n  --max-warnings Int               Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String   Specify file to write report to\n  -f, --format String              Use a specific output format - default: stylish\n  --color, --no-color              Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config               Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and eslint-enable directives - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                          Only check changed files - default: false\n  --cache-file path::String        Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String    Path to the cache file or directory\n  --cache-strategy String          Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata\n\nMiscellaneous:\n  --init                           Run config initialization wizard - default: false\n  --env-info                       Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error            Exit with exit code 2 in case of fatal error - default: false\n  --debug                          Output debugging information\n  -h, --help                       Show help\n  -v, --version                    Output the version number\n  --print-config path::String      Print the configuration for the given file\n</code></pre>"},{"location":"descriptors/typescript_eslint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=typescript\nARG NPM_TYPESCRIPT_VERSION=5.8.3\n# Linter install\n# renovate: datasource=npm depName=eslint\nARG NPM_ESLINT_VERSION=8.57.1\n# renovate: datasource=npm depName=eslint-config-airbnb\nARG NPM_ESLINT_CONFIG_AIRBNB_VERSION=19.0.4\n# renovate: datasource=npm depName=eslint-config-prettier\nARG NPM_ESLINT_CONFIG_PRETTIER_VERSION=10.1.2\n# renovate: datasource=npm depName=eslint-config-standard\nARG NPM_ESLINT_CONFIG_STANDARD_VERSION=17.1.0\n# renovate: datasource=npm depName=eslint-plugin-import\nARG NPM_ESLINT_PLUGIN_IMPORT_VERSION=2.31.0\n# renovate: datasource=npm depName=eslint-plugin-jest\nARG NPM_ESLINT_PLUGIN_JEST_VERSION=28.11.0\n# renovate: datasource=npm depName=eslint-plugin-n\nARG NPM_ESLINT_PLUGIN_N_VERSION=16.6.2\n# renovate: datasource=npm depName=eslint-plugin-prettier\nARG NPM_ESLINT_PLUGIN_PRETTIER_VERSION=5.3.1\n# renovate: datasource=npm depName=eslint-plugin-promise\nARG NPM_ESLINT_PLUGIN_PROMISE_VERSION=6.6.0\n# renovate: datasource=npm depName=@babel/eslint-parser\nARG NPM_BABEL_ESLINT_PARSER_VERSION=7.27.1\n# renovate: datasource=npm depName=prettier\nARG NPM_PRETTIER_VERSION=3.5.3\n# renovate: datasource=npm depName=prettyjson\nARG NPM_PRETTYJSON_VERSION=1.2.5\n# renovate: datasource=npm depName=@typescript-eslint/eslint-plugin\nARG NPM_TYPESCRIPT_ESLINT_ESLINT_PLUGIN_VERSION=8.31.1\n# renovate: datasource=npm depName=@typescript-eslint/parser\nARG NPM_TYPESCRIPT_ESLINT_PARSER_VERSION=8.31.1\n# renovate: datasource=npm depName=@microsoft/eslint-formatter-sarif\nARG NPM_MICROSOFT_ESLINT_FORMATTER_SARIF_VERSION=3.1.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>typescript@5.8.3</li> <li>eslint@8.57.1</li> <li>eslint-config-airbnb@19.0.4</li> <li>eslint-config-prettier@10.1.2</li> <li>eslint-config-standard@17.1.0</li> <li>eslint-plugin-import@2.31.0</li> <li>eslint-plugin-jest@28.11.0</li> <li>eslint-plugin-n@16.6.2</li> <li>eslint-plugin-prettier@5.3.1</li> <li>eslint-plugin-promise@6.6.0</li> <li>@babel/eslint-parser@7.27.1</li> <li>prettier@3.5.3</li> <li>prettyjson@1.2.5</li> <li>@typescript-eslint/eslint-plugin@8.31.1</li> <li>@typescript-eslint/parser@8.31.1</li> <li>@microsoft/eslint-formatter-sarif@3.1.0</li> </ul> </li> </ul>"},{"location":"descriptors/typescript_prettier/","title":"prettier configuration in MegaLinter","text":""},{"location":"descriptors/typescript_prettier/#prettier-documentation","title":"prettier documentation","text":"<ul> <li>Version in MegaLinter: 3.5.3</li> <li>Visit Official Web Site</li> <li>See How to configure prettier rules</li> <li>See How to disable prettier rules in files</li> <li>See Index of problems detected by prettier</li> </ul>"},{"location":"descriptors/typescript_prettier/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable prettier by adding <code>TYPESCRIPT_PRETTIER</code> in ENABLE_LINTERS variable</li> <li>Disable prettier by adding <code>TYPESCRIPT_PRETTIER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TYPESCRIPT_PRETTIER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TYPESCRIPT_DEFAULT_STYLE For prettier to be active, TYPESCRIPT_DEFAULT_STYLE must be <code>prettier</code> <code>standard</code> TYPESCRIPT_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_PRETTIER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TYPESCRIPT_PRETTIER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> TYPESCRIPT_PRETTIER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".ts\"]</code> TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TYPESCRIPT_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_PRETTIER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TYPESCRIPT_PRETTIER and its pre/post commands None TYPESCRIPT_PRETTIER_CONFIG_FILE prettier configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.prettierrc.json</code> TYPESCRIPT_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TYPESCRIPT_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> TYPESCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TYPESCRIPT_PRETTIER_CLI_EXECUTABLE Override CLI executable <code>['prettier']</code>"},{"location":"descriptors/typescript_prettier/#ide-integration","title":"IDE Integration","text":"<p>Use prettier in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA Prettier Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode"},{"location":"descriptors/typescript_prettier/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/typescript_prettier/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/typescript_prettier/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.ts</code></li> </ul>"},{"location":"descriptors/typescript_prettier/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>prettier is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/typescript_prettier/#example-calls","title":"Example calls","text":"<pre><code>prettier --check myfile.ts\n</code></pre> <pre><code>prettier --config .prettierrc.json --check myfile.ts\n</code></pre> <pre><code>prettier --config .prettierrc.json --write myfile.ts\n</code></pre>"},{"location":"descriptors/typescript_prettier/#help-content","title":"Help content","text":"<pre><code>Usage: prettier [options] [file/dir/glob ...]\n\nBy default, output is written to stdout.\nStdin is read if it is piped to Prettier and no files are given.\n\nOutput options:\n\n  -c, --check              Check if the given files are formatted, print a human-friendly summary\n                           message and paths to unformatted files (see also --list-different).\n  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).\n  -w, --write              Edit files in-place. (Beware!)\n\nFormat options:\n\n  --arrow-parens &lt;always|avoid&gt;\n                           Include parentheses around a sole arrow function parameter.\n                           Defaults to always.\n  --bracket-same-line      Put &gt; of opening tags on the last line instead of on a new line.\n                           Defaults to false.\n  --no-bracket-spacing     Do not print spaces between brackets.\n  --embedded-language-formatting &lt;auto|off&gt;\n                           Control how Prettier formats quoted code embedded in the file.\n                           Defaults to auto.\n  --end-of-line &lt;lf|crlf|cr|auto&gt;\n                           Which end of line characters to apply.\n                           Defaults to lf.\n  --experimental-operator-position &lt;start|end&gt;\n                           Where to print operators when binary expressions wrap lines.\n                           Defaults to end.\n  --no-experimental-ternaries\n                           Default behavior of ternaries; keep question marks on the same line as the consequent.\n  --html-whitespace-sensitivity &lt;css|strict|ignore&gt;\n                           How to handle whitespaces in HTML.\n                           Defaults to css.\n  --jsx-single-quote       Use single quotes in JSX.\n                           Defaults to false.\n  --object-wrap &lt;preserve|collapse&gt;\n                           How to wrap object literals.\n                           Defaults to preserve.\n  --parser &lt;flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|jsonc|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc&gt;\n                           Which parser to use.\n  --print-width &lt;int&gt;      The line length where Prettier will try wrap.\n                           Defaults to 80.\n  --prose-wrap &lt;always|never|preserve&gt;\n                           How to wrap prose.\n                           Defaults to preserve.\n  --quote-props &lt;as-needed|consistent|preserve&gt;\n                           Change when properties in objects are quoted.\n                           Defaults to as-needed.\n  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.\n  --single-attribute-per-line\n                           Enforce single attribute per line in HTML, Vue and JSX.\n                           Defaults to false.\n  --single-quote           Use single quotes instead of double quotes.\n                           Defaults to false.\n  --tab-width &lt;int&gt;        Number of spaces per indentation level.\n                           Defaults to 2.\n  --trailing-comma &lt;all|es5|none&gt;\n                           Print trailing commas wherever possible when multi-line.\n                           Defaults to all.\n  --use-tabs               Indent with tabs instead of spaces.\n                           Defaults to false.\n  --vue-indent-script-and-style\n                           Indent script and style tags in Vue files.\n                           Defaults to false.\n\nConfig options:\n\n  --config &lt;path&gt;          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).\n  --no-config              Do not look for a configuration file.\n  --config-precedence &lt;cli-override|file-override|prefer-file&gt;\n                           Define in which order config files and CLI options should be evaluated.\n                           Defaults to cli-override.\n  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.\n  --find-config-path &lt;path&gt;\n                           Find and print the path to a configuration file for the given input file.\n  --ignore-path &lt;path&gt;     Path to a file with patterns describing files to ignore.\n                           Multiple values are accepted.\n                           Defaults to [.gitignore, .prettierignore].\n  --plugin &lt;path&gt;          Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\n                           Defaults to [].\n  --with-node-modules      Process files inside 'node_modules' directory.\n\nEditor options:\n\n  --cursor-offset &lt;int&gt;    Print (to stderr) where a cursor at the given position would move to after formatting.\n                           Defaults to -1.\n  --range-end &lt;int&gt;        Format code ending at a given character offset (exclusive).\n                           The range will extend forwards to the end of the selected statement.\n                           Defaults to Infinity.\n  --range-start &lt;int&gt;      Format code starting at a given character offset.\n                           The range will extend backwards to the start of the first line containing the selected statement.\n                           Defaults to 0.\n\nOther options:\n\n  --cache                  Only format changed files. Cannot use with --stdin-filepath.\n                           Defaults to false.\n  --cache-location &lt;path&gt;  Path to the cache file.\n  --cache-strategy &lt;metadata|content&gt;\n                           Strategy for the cache to use for detecting changed files.\n  --no-color               Do not colorize error messages.\n  --no-error-on-unmatched-pattern\n                           Prevent errors when pattern is unmatched.\n  --file-info &lt;path&gt;       Extract the following info (as JSON) for a given file path. Reported fields:\n                           * ignored (boolean) - true if file path is filtered by --ignore-path\n                           * inferredParser (string | null) - name of parser inferred from file path\n  -h, --help &lt;flag&gt;        Show CLI usage, or details about the given flag.\n                           Example: --help write\n  -u, --ignore-unknown     Ignore unknown files.\n  --insert-pragma          Insert @format pragma into file's first docblock comment.\n                           Defaults to false.\n  --log-level &lt;silent|error|warn|log|debug&gt;\n                           What level of logs to report.\n                           Defaults to log.\n  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment\n                           in order for it to be formatted.\n                           Defaults to false.\n  --stdin-filepath &lt;path&gt;  Path to the file to pretend that stdin comes from.\n  --support-info           Print support information as JSON.\n  -v, --version            Print Prettier version.\n\n\n</code></pre>"},{"location":"descriptors/typescript_prettier/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=typescript\nARG NPM_TYPESCRIPT_VERSION=5.8.3\n# Linter install\n# renovate: datasource=npm depName=prettier\nARG NPM_PRETTIER_VERSION=3.5.3\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>typescript@5.8.3</li> <li>prettier@3.5.3</li> </ul> </li> </ul>"},{"location":"descriptors/typescript_standard/","title":"ts-standard configuration in MegaLinter","text":""},{"location":"descriptors/typescript_standard/#ts-standard-documentation","title":"ts-standard documentation","text":"<ul> <li>Version in MegaLinter: 12.0.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by ts-standard</li> </ul>"},{"location":"descriptors/typescript_standard/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ts-standard by adding <code>TYPESCRIPT_STANDARD</code> in ENABLE_LINTERS variable</li> <li>Disable ts-standard by adding <code>TYPESCRIPT_STANDARD</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TYPESCRIPT_STANDARD</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TYPESCRIPT_STANDARD For ts-standard to be active, TYPESCRIPT_STANDARD must be <code>ts-standard</code> <code>ts-standard</code> TYPESCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TYPESCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> TYPESCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".ts\"]</code> TYPESCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TYPESCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_STANDARD_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TYPESCRIPT_STANDARD and its pre/post commands None TYPESCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TYPESCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TYPESCRIPT_STANDARD_CLI_EXECUTABLE Override CLI executable <code>['ts-standard']</code>"},{"location":"descriptors/typescript_standard/#ide-integration","title":"IDE Integration","text":"<p>Use ts-standard in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard Visit Web Site"},{"location":"descriptors/typescript_standard/#megalinter-flavours","title":"MegaLinter Flavours","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 114 cupcake MegaLinter for the most commonly used languages 82 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 57"},{"location":"descriptors/typescript_standard/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/typescript_standard/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.ts</code></li> </ul>"},{"location":"descriptors/typescript_standard/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>ts-standard is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/typescript_standard/#example-calls","title":"Example calls","text":"<pre><code>ts-standard myfile.ts\n</code></pre> <pre><code>ts-standard --fix myfile.ts\n</code></pre>"},{"location":"descriptors/typescript_standard/#help-content","title":"Help content","text":"<pre><code>ts-standard - Standard for TypeScript! (https://github.com/standard/ts-standard)\n\nUsage:\n  ts-standard &lt;flags&gt; [FILES...]\n\n  If FILES is omitted, all JavaScript/TypeScript source files (*.js, *.jsx, *.mjs, *.cjs, *.ts, *.tsx)\n  in the current working directory are checked, recursively.\n\n  Certain paths (node_modules/, coverage/, vendor/, *.min.js, and\n  files/folders that begin with '.' like .git/) are automatically ignored.\n\n  Paths in a project's root .gitignore file are also automatically ignored.\n\nFlags:\n      --fix       Automatically fix problems\n  -p, --project   Specify ts-config location (default: ./tsconfig.eslint.json or ./tsconfig.json)\n      --version   Show current version\n  -h, --help      Show usage information\n\nFlags (advanced):\n      --stdin     Read file text from stdin\n      --ext       Specify JavaScript/TypeScript file extensions\n      --global    Declare global variable\n      --plugin    Use custom eslint plugin\n      --env       Use custom eslint environment\n      --parser    Use custom ts/js parser (default: @typescript-eslint/parser)\n\n</code></pre>"},{"location":"descriptors/typescript_standard/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>NPM packages (node.js):<ul> <li>typescript</li> <li>ts-standard</li> </ul> </li> </ul>"},{"location":"descriptors/typescript_ts_standard/","title":"ts-standard configuration in MegaLinter","text":""},{"location":"descriptors/typescript_ts_standard/#ts-standard-documentation","title":"ts-standard documentation","text":"<ul> <li>Version in MegaLinter: 12.0.2</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by ts-standard</li> </ul>"},{"location":"descriptors/typescript_ts_standard/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable ts-standard by adding <code>TYPESCRIPT_STANDARD</code> in ENABLE_LINTERS variable</li> <li>Disable ts-standard by adding <code>TYPESCRIPT_STANDARD</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>TYPESCRIPT_STANDARD</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value TYPESCRIPT_STANDARD For ts-standard to be active, TYPESCRIPT_STANDARD must be <code>ts-standard</code> <code>ts-standard</code> TYPESCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_STANDARD_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file TYPESCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> TYPESCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".ts\"]</code> TYPESCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file TYPESCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_STANDARD_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling TYPESCRIPT_STANDARD and its pre/post commands None TYPESCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> TYPESCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> TYPESCRIPT_STANDARD_CLI_EXECUTABLE Override CLI executable <code>['ts-standard']</code>"},{"location":"descriptors/typescript_ts_standard/#ide-integration","title":"IDE Integration","text":"<p>Use ts-standard in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard Visit Web Site"},{"location":"descriptors/typescript_ts_standard/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 cupcake MegaLinter for the most commonly used languages 88 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59"},{"location":"descriptors/typescript_ts_standard/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/typescript_ts_standard/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.ts</code></li> </ul>"},{"location":"descriptors/typescript_ts_standard/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>ts-standard is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/typescript_ts_standard/#example-calls","title":"Example calls","text":"<pre><code>ts-standard myfile.ts\n</code></pre> <pre><code>ts-standard --fix myfile.ts\n</code></pre>"},{"location":"descriptors/typescript_ts_standard/#help-content","title":"Help content","text":"<pre><code>ts-standard - Standard for TypeScript! (https://github.com/standard/ts-standard)\n\nUsage:\n  ts-standard &lt;flags&gt; [FILES...]\n\n  If FILES is omitted, all JavaScript/TypeScript source files (*.js, *.jsx, *.mjs, *.cjs, *.ts, *.tsx)\n  in the current working directory are checked, recursively.\n\n  Certain paths (node_modules/, coverage/, vendor/, *.min.js, and\n  files/folders that begin with '.' like .git/) are automatically ignored.\n\n  Paths in a project's root .gitignore file are also automatically ignored.\n\nFlags:\n      --fix       Automatically fix problems\n  -p, --project   Specify ts-config location (default: ./tsconfig.eslint.json or ./tsconfig.json)\n      --version   Show current version\n  -h, --help      Show usage information\n\nFlags (advanced):\n      --stdin     Read file text from stdin\n      --ext       Specify JavaScript/TypeScript file extensions\n      --global    Declare global variable\n      --plugin    Use custom eslint plugin\n      --env       Use custom eslint environment\n      --parser    Use custom ts/js parser (default: @typescript-eslint/parser)\n\n</code></pre>"},{"location":"descriptors/typescript_ts_standard/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># Parent descriptor install\n# renovate: datasource=npm depName=typescript\nARG NPM_TYPESCRIPT_VERSION=5.8.3\n# Linter install\n# renovate: datasource=npm depName=ts-standard\nARG NPM_TS_STANDARD_VERSION=12.0.2\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>typescript@5.8.3</li> <li>ts-standard@12.0.2</li> </ul> </li> </ul>"},{"location":"descriptors/vbdotnet/","title":"VBDOTNET linters in MegaLinter","text":""},{"location":"descriptors/vbdotnet/#visual-basic-net","title":"Visual Basic .NET","text":""},{"location":"descriptors/vbdotnet/#linters","title":"Linters","text":"Linter Additional dotnet-formatVBDOTNET_DOTNET_FORMAT"},{"location":"descriptors/vbdotnet/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.vb</code></li> </ul> </li> </ul>"},{"location":"descriptors/vbdotnet/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value VBDOTNET_PRE_COMMANDS List of bash commands to run before the linters None VBDOTNET_POST_COMMANDS List of bash commands to run after the linters None VBDOTNET_FILTER_REGEX_INCLUDE Custom regex including filter VBDOTNET_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/vbdotnet/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/vbdotnet/#installation","title":"Installation","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code>RUN apk add --no-cache dotnet9-sdk\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\n</code></pre>"},{"location":"descriptors/vbdotnet_dotnet_format/","title":"dotnet-format configuration in MegaLinter","text":""},{"location":"descriptors/vbdotnet_dotnet_format/#dotnet-format","title":"dotnet-format","text":"<p>dotnet-format requires a <code>.sln</code> or <code>.vbproj</code> file to run correctly.</p>"},{"location":"descriptors/vbdotnet_dotnet_format/#dotnet-format-documentation","title":"dotnet-format documentation","text":"<ul> <li>Version in MegaLinter: 9.0.105</li> <li>Visit Official Web Site</li> <li>See How to configure dotnet-format rules</li> </ul>"},{"location":"descriptors/vbdotnet_dotnet_format/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable dotnet-format by adding <code>VBDOTNET_DOTNET_FORMAT</code> in ENABLE_LINTERS variable</li> <li>Disable dotnet-format by adding <code>VBDOTNET_DOTNET_FORMAT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>VBDOTNET_DOTNET_FORMAT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value VBDOTNET_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> VBDOTNET_DOTNET_FORMAT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> VBDOTNET_DOTNET_FORMAT_CLI_LINT_MODE Override default CLI lint mode\u26a0\ufe0f As default value is project, overriding might not work- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>project</code> VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".vb\"]</code> VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file VBDOTNET_DOTNET_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None VBDOTNET_DOTNET_FORMAT_POST_COMMANDS List of bash commands to run after the linter None VBDOTNET_DOTNET_FORMAT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling VBDOTNET_DOTNET_FORMAT and its pre/post commands None VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> VBDOTNET_DOTNET_FORMAT_CLI_EXECUTABLE Override CLI executable <code>['dotnet']</code>"},{"location":"descriptors/vbdotnet_dotnet_format/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18"},{"location":"descriptors/vbdotnet_dotnet_format/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/vbdotnet_dotnet_format/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.vb</code></li> </ul>"},{"location":"descriptors/vbdotnet_dotnet_format/#how-the-linting-is-performed","title":"How the linting is performed","text":"<p>dotnet-format is called once on the whole project directory (<code>project</code> CLI lint mode)</p> <ul> <li>filtering can not be done using MegaLinter configuration variables,it must be done using dotnet-format configuration or ignore file (if existing)</li> <li><code>VALIDATE_ALL_CODEBASE: false</code> doesn't make dotnet-format analyze only updated files</li> </ul>"},{"location":"descriptors/vbdotnet_dotnet_format/#example-calls","title":"Example calls","text":"<pre><code>dotnet format --verify-no-changes\n</code></pre> <pre><code>dotnet format Solution.sln --verify-no-changes\n</code></pre> <pre><code>dotnet format Folder/Solution.sln --verify-no-changes\n</code></pre> <pre><code>dotnet format Project.vbproj --verify-no-changes\n</code></pre> <pre><code>dotnet format\n</code></pre>"},{"location":"descriptors/vbdotnet_dotnet_format/#help-content","title":"Help content","text":"<pre><code>Description:\n  Formats code to match editorconfig settings.\n\nUsage:\n  dotnet-format [&lt;PROJECT | SOLUTION&gt;] [command] [options]\n\nArguments:\n  &lt;PROJECT | SOLUTION&gt;  The project or solution file to operate on. If a file is not specified, the command will search the current directory for one. [default: /]\n\nOptions:\n  -?, -h, --help                                                           Show help and usage information\n  --version                                                                Show version information\n  --diagnostics                                                            A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. []\n  --exclude-diagnostics                                                    A space separated list of diagnostic ids to ignore when fixing code style or 3rd party issues. []\n  --severity &lt;error|info|warn&gt;                                             The severity of diagnostics to fix. Allowed values are info, warn, and error.\n  --no-restore                                                             Doesn't execute an implicit restore before formatting.\n  --verify-no-changes                                                      Verify no formatting changes would be performed. Terminates with a non-zero exit code if any files would have been formatted.\n  --include                                                                A list of relative file or folder paths to include in formatting. All files are formatted if empty. []\n  --exclude                                                                A list of relative file or folder paths to exclude from formatting. []\n  --include-generated                                                      Format files generated by the SDK.\n  -v, --verbosity &lt;d|detailed|diag|diagnostic|m|minimal|n|normal|q|quiet&gt;  Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]\n  --binarylog &lt;binary-log-path&gt;                                            Log all project or solution load information to a binary log file.\n  --report &lt;report-path&gt;                                                   Accepts a file path which if provided will produce a json report in the given directory.\n\nCommands:\n  whitespace &lt;PROJECT | SOLUTION&gt;  Run whitespace formatting. [default: /]\n  style &lt;PROJECT | SOLUTION&gt;       Run code style analyzers and apply fixes. [default: /]\n  analyzers &lt;PROJECT | SOLUTION&gt;   Run 3rd party analyzers and apply fixes. [default: /]\n\n</code></pre>"},{"location":"descriptors/vbdotnet_dotnet_format/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":""},{"location":"descriptors/xml/","title":"XML linters in MegaLinter","text":""},{"location":"descriptors/xml/#xml","title":"XML","text":""},{"location":"descriptors/xml/#linters","title":"Linters","text":"Linter Additional xmllintXML_XMLLINT"},{"location":"descriptors/xml/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.xml</code></li> <li><code>.xsd</code></li> </ul> </li> </ul>"},{"location":"descriptors/xml/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value XML_PRE_COMMANDS List of bash commands to run before the linters None XML_POST_COMMANDS List of bash commands to run after the linters None XML_FILTER_REGEX_INCLUDE Custom regex including filter XML_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/xml_xmllint/","title":"xmllint configuration in MegaLinter","text":""},{"location":"descriptors/xml_xmllint/#xmllint","title":"xmllint","text":"<p>To apply file formatting you must set <code>XML_XMLLINT_CLI_LINT_MODE: file</code> and <code>XML_XMLLINT_AUTOFORMAT: true</code>.</p>"},{"location":"descriptors/xml_xmllint/#xmllint-documentation","title":"xmllint documentation","text":"<ul> <li>Version in MegaLinter: 21304</li> <li>Visit Official Web Site</li> <li>See How to configure xmllint rules</li> </ul>"},{"location":"descriptors/xml_xmllint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable xmllint by adding <code>XML_XMLLINT</code> in ENABLE_LINTERS variable</li> <li>Disable xmllint by adding <code>XML_XMLLINT</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>XML_XMLLINT</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value XML_XMLLINT_AUTOFORMAT If set to <code>true</code>, it will reformat and reindent the output <code>false</code> XML_XMLLINT_INDENT The number of indentation spaces when <code>XML_XMLLINT_AUTOFORMAT</code> is <code>true</code> <code></code> XML_XMLLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> XML_XMLLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> XML_XMLLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file XML_XMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file XML_XMLLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> XML_XMLLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".xml\", \".xsd\"]</code> XML_XMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file XML_XMLLINT_PRE_COMMANDS List of bash commands to run before the linter None XML_XMLLINT_POST_COMMANDS List of bash commands to run after the linter None XML_XMLLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling XML_XMLLINT and its pre/post commands None XML_XMLLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> XML_XMLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> XML_XMLLINT_CLI_EXECUTABLE Override CLI executable <code>['xmllint']</code>"},{"location":"descriptors/xml_xmllint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/xml_xmllint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/xml_xmllint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.xml</code>, <code>.xsd</code></li> </ul>"},{"location":"descriptors/xml_xmllint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>xmllint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/xml_xmllint/#example-calls","title":"Example calls","text":"<pre><code>xmllint myXMLfile.xml\n</code></pre> <pre><code>xmllint myXSDfile.xsd\n</code></pre> <pre><code>xmllint --format myXMLfile.xml --output myXMLfile.xml\n</code></pre>"},{"location":"descriptors/xml_xmllint/#help-content","title":"Help content","text":"<pre><code>Unknown option --help\nUsage : xmllint [options] XMLfiles ...\n  Parse the XML files and output the result of the parsing\n  --version : display the version of the XML library used\n  --debug : dump a debug tree of the in-memory document\n  --shell : run a navigating shell\n  --debugent : debug the entities defined in the document\n  --copy : used to test the internal copy implementation\n  --recover : output what was parsable on broken XML documents\n  --huge : remove any internal arbitrary parser limits\n  --noent : substitute entity references by their value\n  --noenc : ignore any encoding specified inside the document\n  --noout : don't output the result tree\n  --path 'paths': provide a set of paths for resources\n  --load-trace : print trace of all external entities loaded\n  --nonet : refuse to fetch DTDs or entities over network\n  --nocompact : do not generate compact text nodes\n  --htmlout : output results as HTML\n  --nowrap : do not put HTML doc wrapper\n  --valid : validate the document in addition to std well-formed check\n  --postvalid : do a posteriori validation, i.e after parsing\n  --dtdvalid URL : do a posteriori validation against a given DTD\n  --dtdvalidfpi FPI : same but name the DTD with a Public Identifier\n  --insert : ad-hoc test for valid insertions\n  --quiet : be quiet when succeeded\n  --timing : print some timings\n  --repeat : repeat 100 times, for timing or profiling\n  --dropdtd : remove the DOCTYPE of the input docs\n  --html : use the HTML parser\n  --xmlout : force to use the XML serializer when using --html\n  --nodefdtd : do not default HTML doctype\n  --push : use the push mode of the parser\n  --pushsmall : use the push mode of the parser using tiny increments\n  --memory : parse from memory\n  --maxmem nbbytes : limits memory allocation to nbbytes bytes\n  --nowarning : do not emit warnings from parser/validator\n  --noblanks : drop (ignorable?) blanks spaces\n  --nocdata : replace cdata section with text nodes\n  --output file or -o file: save to a given file\n  --format : reformat/reindent the output\n  --encode encoding : output in the given encoding\n  --pretty STYLE : pretty-print in a particular style\n                   0 Do not pretty print\n                   1 Format the XML content, as --format\n                   2 Add whitespace inside tags, preserving content\n  --compress : turn on gzip compression of output\n  --c14n : save in W3C canonical format v1.0 (with comments)\n  --c14n11 : save in W3C canonical format v1.1 (with comments)\n  --exc-c14n : save in W3C exclusive canonical format (with comments)\n  --nsclean : remove redundant namespace declarations\n  --testIO : test user I/O support\n  --catalogs : use SGML catalogs from $SGML_CATALOG_FILES\n               otherwise XML Catalogs starting from\n           file:///etc/xml/catalog are activated by default\n  --nocatalogs: deactivate all catalogs\n  --auto : generate a small doc on the fly\n  --xinclude : do XInclude processing\n  --noxincludenode : same but do not generate XInclude nodes\n  --nofixup-base-uris : do not fixup xml:base uris\n  --loaddtd : fetch external DTD\n  --dtdattr : loaddtd + populate the tree with inherited attributes\n  --stream : use the streaming interface to process very large files\n  --walker : create a reader and walk though the resulting doc\n  --pattern pattern_value : test the pattern support\n  --relaxng schema : do RelaxNG validation against the schema\n  --schema schema : do validation against the WXS schema\n  --schematron schema : do validation against a schematron\n  --sax1: use the old SAX1 interfaces for processing\n  --sax: do not build a tree but work just at the SAX level\n  --oldxml10: use XML-1.0 parsing rules before the 5th edition\n  --xpath expr: evaluate the XPath expression, imply --noout\n  --max-ampl value: set maximum amplification factor\n\nLibxml project home page: https://gitlab.gnome.org/GNOME/libxml2\n</code></pre>"},{"location":"descriptors/xml_xmllint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>APK packages (Linux):<ul> <li>libxml2-dev</li> <li>libxml2-utils</li> <li>libgcc</li> </ul> </li> </ul>"},{"location":"descriptors/yaml/","title":"YAML linters in MegaLinter","text":""},{"location":"descriptors/yaml/#yaml","title":"YAML","text":""},{"location":"descriptors/yaml/#linters","title":"Linters","text":"Linter Additional prettierYAML_PRETTIER yamllintYAML_YAMLLINT v8rYAML_V8R"},{"location":"descriptors/yaml/#linted-files","title":"Linted files","text":"<ul> <li>File extensions:<ul> <li><code>.yml</code></li> <li><code>.yaml</code></li> </ul> </li> </ul>"},{"location":"descriptors/yaml/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"Variable Description Default value YAML_PRE_COMMANDS List of bash commands to run before the linters None YAML_POST_COMMANDS List of bash commands to run after the linters None YAML_FILTER_REGEX_INCLUDE Custom regex including filter YAML_FILTER_REGEX_EXCLUDE Custom regex excluding filter"},{"location":"descriptors/yaml_prettier/","title":"prettier configuration in MegaLinter","text":""},{"location":"descriptors/yaml_prettier/#prettier-documentation","title":"prettier documentation","text":"<ul> <li>Version in MegaLinter: 3.5.3</li> <li>Visit Official Web Site</li> <li>See How to configure prettier rules</li> <li>See How to disable prettier rules in files</li> <li>See Index of problems detected by prettier</li> </ul>"},{"location":"descriptors/yaml_prettier/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable prettier by adding <code>YAML_PRETTIER</code> in ENABLE_LINTERS variable</li> <li>Disable prettier by adding <code>YAML_PRETTIER</code> in DISABLE_LINTERS variable</li> </ul> <ul> <li>Enable autofixes by adding <code>YAML_PRETTIER</code> in APPLY_FIXES variable</li> </ul> Variable Description Default value YAML_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> YAML_PRETTIER_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> YAML_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file YAML_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file YAML_PRETTIER_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> YAML_PRETTIER_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\"]</code> YAML_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file YAML_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None YAML_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None YAML_PRETTIER_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling YAML_PRETTIER and its pre/post commands None YAML_PRETTIER_CONFIG_FILE prettier configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.prettierrc.json</code> YAML_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings <code>true</code> YAML_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> YAML_PRETTIER_CLI_EXECUTABLE Override CLI executable <code>['prettier']</code>"},{"location":"descriptors/yaml_prettier/#ide-integration","title":"IDE Integration","text":"<p>Use prettier in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA Prettier Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode"},{"location":"descriptors/yaml_prettier/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 formatters Contains only formatters 18 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/yaml_prettier/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/yaml_prettier/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.yml</code>, <code>.yaml</code></li> </ul>"},{"location":"descriptors/yaml_prettier/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>prettier is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/yaml_prettier/#example-calls","title":"Example calls","text":"<pre><code>prettier --check myfile.yml\n</code></pre> <pre><code>prettier --config .prettierrc.json --check myfile.yml\n</code></pre> <pre><code>prettier --config .prettierrc.json --write myfile.yml\n</code></pre>"},{"location":"descriptors/yaml_prettier/#help-content","title":"Help content","text":"<pre><code>Usage: prettier [options] [file/dir/glob ...]\n\nBy default, output is written to stdout.\nStdin is read if it is piped to Prettier and no files are given.\n\nOutput options:\n\n  -c, --check              Check if the given files are formatted, print a human-friendly summary\n                           message and paths to unformatted files (see also --list-different).\n  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).\n  -w, --write              Edit files in-place. (Beware!)\n\nFormat options:\n\n  --arrow-parens &lt;always|avoid&gt;\n                           Include parentheses around a sole arrow function parameter.\n                           Defaults to always.\n  --bracket-same-line      Put &gt; of opening tags on the last line instead of on a new line.\n                           Defaults to false.\n  --no-bracket-spacing     Do not print spaces between brackets.\n  --embedded-language-formatting &lt;auto|off&gt;\n                           Control how Prettier formats quoted code embedded in the file.\n                           Defaults to auto.\n  --end-of-line &lt;lf|crlf|cr|auto&gt;\n                           Which end of line characters to apply.\n                           Defaults to lf.\n  --experimental-operator-position &lt;start|end&gt;\n                           Where to print operators when binary expressions wrap lines.\n                           Defaults to end.\n  --no-experimental-ternaries\n                           Default behavior of ternaries; keep question marks on the same line as the consequent.\n  --html-whitespace-sensitivity &lt;css|strict|ignore&gt;\n                           How to handle whitespaces in HTML.\n                           Defaults to css.\n  --jsx-single-quote       Use single quotes in JSX.\n                           Defaults to false.\n  --object-wrap &lt;preserve|collapse&gt;\n                           How to wrap object literals.\n                           Defaults to preserve.\n  --parser &lt;flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|jsonc|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc&gt;\n                           Which parser to use.\n  --print-width &lt;int&gt;      The line length where Prettier will try wrap.\n                           Defaults to 80.\n  --prose-wrap &lt;always|never|preserve&gt;\n                           How to wrap prose.\n                           Defaults to preserve.\n  --quote-props &lt;as-needed|consistent|preserve&gt;\n                           Change when properties in objects are quoted.\n                           Defaults to as-needed.\n  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.\n  --single-attribute-per-line\n                           Enforce single attribute per line in HTML, Vue and JSX.\n                           Defaults to false.\n  --single-quote           Use single quotes instead of double quotes.\n                           Defaults to false.\n  --tab-width &lt;int&gt;        Number of spaces per indentation level.\n                           Defaults to 2.\n  --trailing-comma &lt;all|es5|none&gt;\n                           Print trailing commas wherever possible when multi-line.\n                           Defaults to all.\n  --use-tabs               Indent with tabs instead of spaces.\n                           Defaults to false.\n  --vue-indent-script-and-style\n                           Indent script and style tags in Vue files.\n                           Defaults to false.\n\nConfig options:\n\n  --config &lt;path&gt;          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).\n  --no-config              Do not look for a configuration file.\n  --config-precedence &lt;cli-override|file-override|prefer-file&gt;\n                           Define in which order config files and CLI options should be evaluated.\n                           Defaults to cli-override.\n  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.\n  --find-config-path &lt;path&gt;\n                           Find and print the path to a configuration file for the given input file.\n  --ignore-path &lt;path&gt;     Path to a file with patterns describing files to ignore.\n                           Multiple values are accepted.\n                           Defaults to [.gitignore, .prettierignore].\n  --plugin &lt;path&gt;          Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\n                           Defaults to [].\n  --with-node-modules      Process files inside 'node_modules' directory.\n\nEditor options:\n\n  --cursor-offset &lt;int&gt;    Print (to stderr) where a cursor at the given position would move to after formatting.\n                           Defaults to -1.\n  --range-end &lt;int&gt;        Format code ending at a given character offset (exclusive).\n                           The range will extend forwards to the end of the selected statement.\n                           Defaults to Infinity.\n  --range-start &lt;int&gt;      Format code starting at a given character offset.\n                           The range will extend backwards to the start of the first line containing the selected statement.\n                           Defaults to 0.\n\nOther options:\n\n  --cache                  Only format changed files. Cannot use with --stdin-filepath.\n                           Defaults to false.\n  --cache-location &lt;path&gt;  Path to the cache file.\n  --cache-strategy &lt;metadata|content&gt;\n                           Strategy for the cache to use for detecting changed files.\n  --no-color               Do not colorize error messages.\n  --no-error-on-unmatched-pattern\n                           Prevent errors when pattern is unmatched.\n  --file-info &lt;path&gt;       Extract the following info (as JSON) for a given file path. Reported fields:\n                           * ignored (boolean) - true if file path is filtered by --ignore-path\n                           * inferredParser (string | null) - name of parser inferred from file path\n  -h, --help &lt;flag&gt;        Show CLI usage, or details about the given flag.\n                           Example: --help write\n  -u, --ignore-unknown     Ignore unknown files.\n  --insert-pragma          Insert @format pragma into file's first docblock comment.\n                           Defaults to false.\n  --log-level &lt;silent|error|warn|log|debug&gt;\n                           What level of logs to report.\n                           Defaults to log.\n  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment\n                           in order for it to be formatted.\n                           Defaults to false.\n  --stdin-filepath &lt;path&gt;  Path to the file to pretend that stdin comes from.\n  --support-info           Print support information as JSON.\n  -v, --version            Print Prettier version.\n\n\n</code></pre>"},{"location":"descriptors/yaml_prettier/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=prettier\nARG NPM_PRETTIER_VERSION=3.5.3\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>prettier@3.5.3</li> </ul> </li> </ul>"},{"location":"descriptors/yaml_v8r/","title":"v8r configuration in MegaLinter","text":""},{"location":"descriptors/yaml_v8r/#v8r","title":"v8r","text":"<p>v8r checks the validity of JSON/YAML files if they have a matching schema defined on schemastore.org</p>"},{"location":"descriptors/yaml_v8r/#v8r-documentation","title":"v8r documentation","text":"<ul> <li>Version in MegaLinter: 4.4.0</li> <li>Visit Official Web Site</li> <li>See Index of problems detected by v8r</li> </ul>"},{"location":"descriptors/yaml_v8r/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable v8r by adding <code>YAML_V8R</code> in ENABLE_LINTERS variable</li> <li>Disable v8r by adding <code>YAML_V8R</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value YAML_V8R_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> YAML_V8R_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> YAML_V8R_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file YAML_V8R_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file YAML_V8R_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> YAML_V8R_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\"]</code> YAML_V8R_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file YAML_V8R_PRE_COMMANDS List of bash commands to run before the linter None YAML_V8R_POST_COMMANDS List of bash commands to run after the linter None YAML_V8R_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling YAML_V8R and its pre/post commands None YAML_V8R_CONFIG_FILE v8r configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.v8rrc.yml</code> YAML_V8R_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_V8R_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> YAML_V8R_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> YAML_V8R_CLI_EXECUTABLE Override CLI executable <code>['v8r']</code>"},{"location":"descriptors/yaml_v8r/#ide-integration","title":"IDE Integration","text":"<p>Use v8r in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Eclipse native support Visit Web Site IDEA native support Visit Web Site vim vison Visit Web Site Visual Studio Code native support Visit Web Site"},{"location":"descriptors/yaml_v8r/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/yaml_v8r/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/yaml_v8r/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.yml</code>, <code>.yaml</code></li> </ul>"},{"location":"descriptors/yaml_v8r/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>v8r is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/yaml_v8r/#example-calls","title":"Example calls","text":"<pre><code>v8r --ignore-errors myfile.yml\n</code></pre> <pre><code>v8r --ignore-errors myfile.yaml\n</code></pre>"},{"location":"descriptors/yaml_v8r/#help-content","title":"Help content","text":"<pre><code>\u2139 No config file found\nv8r &lt;patterns..&gt;\n\nValidate local json/json5/toml/yaml files against schema(s)\n\nPositionals:\n  patterns  One or more filenames or glob patterns describing local file or file\n            s to validate\n\nOptions:\n      --help                     Show help                             [boolean]\n      --version                  Show version number                   [boolean]\n  -v, --verbose                  Run with verbose logging. Can be stacked e.g: -\n                                 vv -vvv                                 [count]\n  -s, --schema                   Local path or URL of a schema to validate again\n                                 st. If not supplied, we will attempt to find an\n                                  appropriate schema on schemastore.org using th\n                                 e filename. If passed with glob pattern(s) matc\n                                 hing multiple files, all matching files will be\n                                  validated against this schema         [string]\n  -c, --catalogs                 A list of local paths or URLs of custom catalog\n                                 s to use prior to schemastore.org       [array]\n      --ignore-errors            Exit with code 0 even if an error was encounter\n                                 ed. Passing this flag means a non-zero exit cod\n                                 e is only issued if validation could be complet\n                                 ed successfully and one or more files were inva\n                                 lid                  [boolean] [default: false]\n      --ignore-pattern-files     A list of files containing glob patterns to ign\n                                 ore           [array] [default: [\".v8rignore\"]]\n      --no-ignore                Disable all ignore files              [boolean]\n      --cache-ttl                Remove cached HTTP responses older than &lt;cache-\n                                 ttl&gt; seconds old. Passing 0 clears and disables\n                                  cache completely       [number] [default: 600]\n      --output-format, --format  Output format for validation results. The '--fo\n                                 rmat' alias is deprecated.\n                            [string] [choices: \"text\", \"json\"] [default: \"text\"]\n\nExamples:\n  v8r file.json                 Validate a single file\n  v8r file1.json file2.json     Validate multiple files\n  v8r 'dir/*.yml' 'dir/*.yaml'  Specify files to validate with glob patterns\n</code></pre>"},{"location":"descriptors/yaml_v8r/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=npm depName=v8r\nARG NPM_V8R_VERSION=4.4.0\n</code></pre> <ul> <li>NPM packages (node.js):<ul> <li>v8r@4.4.0</li> </ul> </li> </ul>"},{"location":"descriptors/yaml_yamllint/","title":"yamllint configuration in MegaLinter","text":""},{"location":"descriptors/yaml_yamllint/#yamllint","title":"yamllint","text":""},{"location":"descriptors/yaml_yamllint/#yamllint-documentation","title":"yamllint documentation","text":"<ul> <li>Version in MegaLinter: 1.37.1</li> <li>Visit Official Web Site</li> <li>See How to configure yamllint rules<ul> <li>If custom <code>.yamllint.yml</code> config file isn't found, .yamllint.yml will be used</li> </ul> </li> <li>See Index of problems detected by yamllint</li> </ul>"},{"location":"descriptors/yaml_yamllint/#configuration-in-megalinter","title":"Configuration in MegaLinter","text":"<ul> <li>Enable yamllint by adding <code>YAML_YAMLLINT</code> in ENABLE_LINTERS variable</li> <li>Disable yamllint by adding <code>YAML_YAMLLINT</code> in DISABLE_LINTERS variable</li> </ul> Variable Description Default value YAML_YAMLLINT_ARGUMENTS User custom arguments to add in linter CLI callEx: <code>-s --foo \"bar\"</code> YAML_YAMLLINT_COMMAND_REMOVE_ARGUMENTS User custom arguments to remove from command line before calling the linterEx: <code>-s --foo \"bar\"</code> YAML_YAMLLINT_FILTER_REGEX_INCLUDE Custom regex including filterEx: <code>(src\\|lib)</code> Include every file YAML_YAMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filterEx: <code>(test\\|examples)</code> Exclude no file YAML_YAMLLINT_CLI_LINT_MODE Override default CLI lint mode- <code>file</code>: Calls the linter for each file- <code>list_of_files</code>: Call the linter with the list of files as argument- <code>project</code>: Call the linter from the root of the project <code>list_of_files</code> YAML_YAMLLINT_FILE_EXTENSIONS Allowed file extensions. <code>\"*\"</code> matches any extension, <code>\"\"</code> matches empty extension. Empty list excludes all filesEx: <code>[\".py\", \"\"]</code> <code>[\".yml\", \".yaml\"]</code> YAML_YAMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all filesEx: <code>[\"Dockerfile(-.+)?\", \"Jenkinsfile\"]</code> Include every file YAML_YAMLLINT_PRE_COMMANDS List of bash commands to run before the linter None YAML_YAMLLINT_POST_COMMANDS List of bash commands to run after the linter None YAML_YAMLLINT_UNSECURED_ENV_VARIABLES List of env variables explicitly not filtered before calling YAML_YAMLLINT and its pre/post commands None YAML_YAMLLINT_CONFIG_FILE yamllint configuration file nameUse <code>LINTER_DEFAULT</code> to let the linter find it <code>.yamllint.yml</code> YAML_YAMLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_YAMLLINT_DISABLE_ERRORS Run linter but consider errors as warnings <code>false</code> YAML_YAMLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed <code>0</code> YAML_YAMLLINT_CLI_EXECUTABLE Override CLI executable <code>['yamllint']</code>"},{"location":"descriptors/yaml_yamllint/#ide-integration","title":"IDE Integration","text":"<p>Use yamllint in your favorite IDE to catch errors before MegaLinter !</p> IDE Extension Name Install Emacs flycheck Visit Web Site vim ale Visit Web Site"},{"location":"descriptors/yaml_yamllint/#megalinter-flavors","title":"MegaLinter Flavors","text":"<p>This linter is available in the following flavors</p> Flavor Description Embedded linters Info all Default MegaLinter Flavor 127 c_cpp Optimized for pure C/C++ projects 56 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 22 cupcake MegaLinter for the most commonly used languages 88 documentation MegaLinter for documentation projects 49 dotnet Optimized for C, C++, C# or VB based projects 64 dotnetweb Optimized for C, C++, C# or VB based projects with JS/TS 73 go Optimized for GO based projects 51 java Optimized for JAVA based projects 53 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 59 php Optimized for PHP based projects 54 python Optimized for PYTHON based projects 65 ruby Optimized for RUBY based projects 50 rust Optimized for RUST based projects 50 salesforce Optimized for Salesforce based projects 54 swift Optimized for SWIFT based projects 50 terraform Optimized for TERRAFORM based projects 54"},{"location":"descriptors/yaml_yamllint/#behind-the-scenes","title":"Behind the scenes","text":""},{"location":"descriptors/yaml_yamllint/#how-are-identified-applicable-files","title":"How are identified applicable files","text":"<ul> <li>File extensions: <code>.yml</code>, <code>.yaml</code></li> </ul>"},{"location":"descriptors/yaml_yamllint/#how-the-linting-is-performed","title":"How the linting is performed","text":"<ul> <li>yamllint is called once with the list of files as arguments (<code>list_of_files</code> CLI lint mode)</li> </ul>"},{"location":"descriptors/yaml_yamllint/#example-calls","title":"Example calls","text":"<pre><code>yamllint myfile.yaml\n</code></pre> <pre><code>yamllint -c .yamllint.yml myfile.yaml\n</code></pre> <pre><code>yamllint --strict\n</code></pre> <pre><code>yamllint --no-warnings\n</code></pre>"},{"location":"descriptors/yaml_yamllint/#help-content","title":"Help content","text":"<pre><code>usage: yamllint [-h] [-] [-c CONFIG_FILE | -d CONFIG_DATA] [--list-files]\n                [-f {parsable,standard,colored,github,auto}] [-s]\n                [--no-warnings] [-v]\n                [FILE_OR_DIR ...]\n\nA linter for YAML files. yamllint does not only check for syntax validity, but\nfor weirdnesses like key repetition and cosmetic problems such as lines\nlength, trailing spaces, indentation, etc.\n\npositional arguments:\n  FILE_OR_DIR           files to check\n\noptions:\n  -h, --help            show this help message and exit\n  -                     read from standard input\n  -c CONFIG_FILE, --config-file CONFIG_FILE\n                        path to a custom configuration\n  -d CONFIG_DATA, --config-data CONFIG_DATA\n                        custom configuration (as YAML source)\n  --list-files          list files to lint and exit\n  -f {parsable,standard,colored,github,auto}, --format {parsable,standard,colored,github,auto}\n                        format for parsing output\n  -s, --strict          return non-zero exit code on warnings as well as\n                        errors\n  --no-warnings         output only error level problems\n  -v, --version         show program's version number and exit\n</code></pre>"},{"location":"descriptors/yaml_yamllint/#installation-on-mega-linter-docker-image","title":"Installation on mega-linter Docker image","text":"<ul> <li>Dockerfile commands :</li> </ul> <pre><code># renovate: datasource=pypi depName=yamllint\nARG PIP_YAMLLINT_VERSION=1.37.1\n</code></pre> <ul> <li>PIP packages (Python):<ul> <li>yamllint==1.37.1</li> </ul> </li> </ul>"},{"location":"flavors/c_cpp/","title":"c_cpp MegaLinter Flavor","text":""},{"location":"flavors/c_cpp/#description","title":"Description","text":"<p>Optimized for pure C/C++ projects</p>"},{"location":"flavors/c_cpp/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/c_cpp@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-c_cpp:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor c_cpp</code></li> </ul>"},{"location":"flavors/c_cpp/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/c_cpp/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT C clang-formatC_CLANG_FORMAT C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT C++ (CPP) clang-formatCPP_CLANG_FORMAT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/c_cpp/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/c_cpp/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lintGHERKIN_GHERKIN_LINT KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/c_cpp/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/ci_light/","title":"ci_light MegaLinter Flavor","text":""},{"location":"flavors/ci_light/#description","title":"Description","text":"<p>Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML</p>"},{"location":"flavors/ci_light/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/ci_light@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-ci_light:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor ci_light</code></li> </ul>"},{"location":"flavors/ci_light/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/ci_light/#languages","title":"Languages","text":"Language Linter Additional BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT"},{"location":"flavors/ci_light/#formats","title":"Formats","text":"Format Linter Additional ENV dotenv-linterENV_DOTENV_LINTER JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/ci_light/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional DOCKERFILE hadolintDOCKERFILE_HADOLINT"},{"location":"flavors/ci_light/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG"},{"location":"flavors/cupcake/","title":"cupcake MegaLinter Flavor","text":""},{"location":"flavors/cupcake/#description","title":"Description","text":"<p>MegaLinter for the most commonly used languages</p>"},{"location":"flavors/cupcake/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/cupcake@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-cupcake:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor cupcake</code></li> </ul>"},{"location":"flavors/cupcake/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/cupcake/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT CLOJURE clj-kondoCLOJURE_CLJ_KONDO CLOJURE cljstyleCLOJURE_CLJSTYLE C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT GO golangci-lintGO_GOLANGCI_LINT GO reviveGO_REVIVE GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT JAVA checkstyleJAVA_CHECKSTYLE JAVA pmdJAVA_PMD JAVASCRIPT eslintJAVASCRIPT_ES JAVASCRIPT standardJAVASCRIPT_STANDARD JAVASCRIPT prettierJAVASCRIPT_PRETTIER JSX eslintJSX_ESLINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT PHP phpcsPHP_PHPCS PHP phpstanPHP_PHPSTAN PHP psalmPHP_PSALM PHP phplintPHP_PHPLINT PHP php-cs-fixerPHP_PHPCSFIXER PYTHON pylintPYTHON_PYLINT PYTHON blackPYTHON_BLACK PYTHON flake8PYTHON_FLAKE8 PYTHON isortPYTHON_ISORT PYTHON mypyPYTHON_MYPY PYTHON pyrightPYTHON_PYRIGHT PYTHON ruffPYTHON_RUFF PYTHON ruff-formatPYTHON_RUFF_FORMAT RUBY rubocopRUBY_RUBOCOP RUST clippyRUST_CLIPPY SQL sqlfluffSQL_SQLFLUFF SWIFT swiftlintSWIFT_SWIFTLINT TSX eslintTSX_ESLINT TYPESCRIPT eslintTYPESCRIPT_ES TYPESCRIPT ts-standardTYPESCRIPT_STANDARD TYPESCRIPT prettierTYPESCRIPT_PRETTIER"},{"location":"flavors/cupcake/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER RST rst-lintRST_RST_LINT RST rstcheckRST_RSTCHECK RST rstfmtRST_RSTFMT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/cupcake/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT CLOUDFORMATION cfn-lintCLOUDFORMATION_CFN_LINT DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE TERRAFORM tflintTERRAFORM_TFLINT TERRAFORM terrascanTERRAFORM_TERRASCAN TERRAFORM terragruntTERRAFORM_TERRAGRUNT TERRAFORM terraform-fmtTERRAFORM_TERRAFORM_FMT"},{"location":"flavors/cupcake/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY kicsREPOSITORY_KICS REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/documentation/","title":"documentation MegaLinter Flavor","text":""},{"location":"flavors/documentation/#description","title":"Description","text":"<p>MegaLinter for documentation projects</p>"},{"location":"flavors/documentation/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/documentation@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-documentation:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor documentation</code></li> </ul>"},{"location":"flavors/documentation/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/documentation/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/documentation/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/documentation/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/documentation/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/dotnet/","title":"dotnet MegaLinter Flavor","text":""},{"location":"flavors/dotnet/#description","title":"Description","text":"<p>Optimized for C, C++, C# or VB based projects</p>"},{"location":"flavors/dotnet/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/dotnet@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-dotnet:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor dotnet</code></li> </ul>"},{"location":"flavors/dotnet/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/dotnet/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT C# (CSHARP) dotnet-formatCSHARP_DOTNET_FORMAT C# (CSHARP) csharpierCSHARP_CSHARPIER C# (CSHARP) roslynatorCSHARP_ROSLYNATOR GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT POWERSHELL powershellPOWERSHELL_POWERSHELL POWERSHELL powershell_formatterPOWERSHELL_POWERSHELL_FORMATTER SQL sqlfluffSQL_SQLFLUFF SQL tsqllintSQL_TSQLLINT Visual Basic .NET (VBDOTNET) dotnet-formatVBDOTNET_DOTNET_FORMAT"},{"location":"flavors/dotnet/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/dotnet/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL ARM arm-ttkARM_ARM_TTK BICEP bicep_linterBICEP_BICEP_LINTER DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lintGHERKIN_GHERKIN_LINT KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/dotnet/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/dotnetweb/","title":"dotnetweb MegaLinter Flavor","text":""},{"location":"flavors/dotnetweb/#description","title":"Description","text":"<p>Optimized for C, C++, C# or VB based projects with JS/TS</p>"},{"location":"flavors/dotnetweb/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/dotnetweb@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-dotnetweb:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor dotnetweb</code></li> </ul>"},{"location":"flavors/dotnetweb/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/dotnetweb/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT COFFEE coffeelintCOFFEE_COFFEELINT C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT C# (CSHARP) dotnet-formatCSHARP_DOTNET_FORMAT C# (CSHARP) csharpierCSHARP_CSHARPIER C# (CSHARP) roslynatorCSHARP_ROSLYNATOR GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT JAVASCRIPT eslintJAVASCRIPT_ES JAVASCRIPT standardJAVASCRIPT_STANDARD JAVASCRIPT prettierJAVASCRIPT_PRETTIER JSX eslintJSX_ESLINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT POWERSHELL powershellPOWERSHELL_POWERSHELL POWERSHELL powershell_formatterPOWERSHELL_POWERSHELL_FORMATTER SQL sqlfluffSQL_SQLFLUFF SQL tsqllintSQL_TSQLLINT TSX eslintTSX_ESLINT TYPESCRIPT eslintTYPESCRIPT_ES TYPESCRIPT ts-standardTYPESCRIPT_STANDARD TYPESCRIPT prettierTYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-formatVBDOTNET_DOTNET_FORMAT"},{"location":"flavors/dotnetweb/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/dotnetweb/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL ARM arm-ttkARM_ARM_TTK BICEP bicep_linterBICEP_BICEP_LINTER DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lintGHERKIN_GHERKIN_LINT KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/dotnetweb/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/formatters/","title":"formatters MegaLinter Flavor","text":""},{"location":"flavors/formatters/#description","title":"Description","text":"<p>Contains only formatters</p>"},{"location":"flavors/formatters/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/formatters@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-formatters:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor formatters</code></li> </ul>"},{"location":"flavors/formatters/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/formatters/#languages","title":"Languages","text":"Language Linter Additional BASH shfmtBASH_SHFMT C# (CSHARP) dotnet-formatCSHARP_DOTNET_FORMAT C# (CSHARP) csharpierCSHARP_CSHARPIER C# (CSHARP) roslynatorCSHARP_ROSLYNATOR JAVASCRIPT prettierJAVASCRIPT_PRETTIER POWERSHELL powershell_formatterPOWERSHELL_POWERSHELL_FORMATTER PYTHON blackPYTHON_BLACK PYTHON isortPYTHON_ISORT PYTHON ruff-formatPYTHON_RUFF_FORMAT TYPESCRIPT prettierTYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-formatVBDOTNET_DOTNET_FORMAT"},{"location":"flavors/formatters/#formats","title":"Formats","text":"Format Linter Additional JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER RST rstfmtRST_RSTFMT YAML prettierYAML_PRETTIER"},{"location":"flavors/formatters/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TERRAFORM terraform-fmtTERRAFORM_TERRAFORM_FMT"},{"location":"flavors/formatters/#other","title":"Other","text":"Code quality checker Linter Additional"},{"location":"flavors/go/","title":"go MegaLinter Flavor","text":""},{"location":"flavors/go/#description","title":"Description","text":"<p>Optimized for GO based projects</p>"},{"location":"flavors/go/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/go@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-go:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor go</code></li> </ul>"},{"location":"flavors/go/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/go/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GO golangci-lintGO_GOLANGCI_LINT GO reviveGO_REVIVE GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/go/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/go/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/go/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/java/","title":"java MegaLinter Flavor","text":""},{"location":"flavors/java/#description","title":"Description","text":"<p>Optimized for JAVA based projects</p>"},{"location":"flavors/java/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/java@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-java:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor java</code></li> </ul>"},{"location":"flavors/java/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/java/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT CLOJURE clj-kondoCLOJURE_CLJ_KONDO CLOJURE cljstyleCLOJURE_CLJSTYLE GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT JAVA checkstyleJAVA_CHECKSTYLE JAVA pmdJAVA_PMD KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/java/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/java/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/java/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/javascript/","title":"javascript MegaLinter Flavor","text":""},{"location":"flavors/javascript/#description","title":"Description","text":"<p>Optimized for JAVASCRIPT or TYPESCRIPT based projects</p>"},{"location":"flavors/javascript/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/javascript@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-javascript:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor javascript</code></li> </ul>"},{"location":"flavors/javascript/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/javascript/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT COFFEE coffeelintCOFFEE_COFFEELINT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT JAVASCRIPT eslintJAVASCRIPT_ES JAVASCRIPT standardJAVASCRIPT_STANDARD JAVASCRIPT prettierJAVASCRIPT_PRETTIER JSX eslintJSX_ESLINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF TSX eslintTSX_ESLINT TYPESCRIPT eslintTYPESCRIPT_ES TYPESCRIPT ts-standardTYPESCRIPT_STANDARD TYPESCRIPT prettierTYPESCRIPT_PRETTIER"},{"location":"flavors/javascript/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/javascript/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/javascript/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/php/","title":"php MegaLinter Flavor","text":""},{"location":"flavors/php/#description","title":"Description","text":"<p>Optimized for PHP based projects</p>"},{"location":"flavors/php/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/php@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-php:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor php</code></li> </ul>"},{"location":"flavors/php/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/php/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT PHP phpcsPHP_PHPCS PHP phpstanPHP_PHPSTAN PHP psalmPHP_PSALM PHP phplintPHP_PHPLINT PHP php-cs-fixerPHP_PHPCSFIXER SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/php/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/php/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/php/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/python/","title":"python MegaLinter Flavor","text":""},{"location":"flavors/python/#description","title":"Description","text":"<p>Optimized for PYTHON based projects</p>"},{"location":"flavors/python/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/python@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-python:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor python</code></li> </ul>"},{"location":"flavors/python/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/python/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT C cppcheckC_CPPCHECK C cpplintC_CPPLINT C++ (CPP) cppcheckCPP_CPPCHECK C++ (CPP) cpplintCPP_CPPLINT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT PYTHON pylintPYTHON_PYLINT PYTHON blackPYTHON_BLACK PYTHON flake8PYTHON_FLAKE8 PYTHON isortPYTHON_ISORT PYTHON banditPYTHON_BANDIT PYTHON mypyPYTHON_MYPY PYTHON pyrightPYTHON_PYRIGHT PYTHON ruffPYTHON_RUFF PYTHON ruff-formatPYTHON_RUFF_FORMAT SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/python/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT RST rst-lintRST_RST_LINT RST rstcheckRST_RSTCHECK RST rstfmtRST_RSTFMT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/python/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/python/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/ruby/","title":"ruby MegaLinter Flavor","text":""},{"location":"flavors/ruby/#description","title":"Description","text":"<p>Optimized for RUBY based projects</p>"},{"location":"flavors/ruby/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/ruby@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-ruby:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor ruby</code></li> </ul>"},{"location":"flavors/ruby/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/ruby/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT RUBY rubocopRUBY_RUBOCOP SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/ruby/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/ruby/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/ruby/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/rust/","title":"rust MegaLinter Flavor","text":""},{"location":"flavors/rust/#description","title":"Description","text":"<p>Optimized for RUST based projects</p>"},{"location":"flavors/rust/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/rust@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-rust:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor rust</code></li> </ul>"},{"location":"flavors/rust/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/rust/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT RUST clippyRUST_CLIPPY SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/rust/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/rust/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/rust/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/salesforce/","title":"salesforce MegaLinter Flavor","text":""},{"location":"flavors/salesforce/#description","title":"Description","text":"<p>Optimized for Salesforce based projects</p>"},{"location":"flavors/salesforce/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/salesforce@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-salesforce:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor salesforce</code></li> </ul>"},{"location":"flavors/salesforce/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/salesforce/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SALESFORCE sfdx-scanner-apexSALESFORCE_SFDX_SCANNER_APEX SALESFORCE sfdx-scanner-auraSALESFORCE_SFDX_SCANNER_AURA SALESFORCE sfdx-scanner-lwcSALESFORCE_SFDX_SCANNER_LWC SALESFORCE lightning-flow-scannerSALESFORCE_LIGHTNING_FLOW_SCANNER SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/salesforce/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER JSON npm-package-json-lintJSON_NPM_PACKAGE_JSON_LINT MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/salesforce/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/salesforce/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/security/","title":"security MegaLinter Flavor","text":""},{"location":"flavors/security/#description","title":"Description","text":"<p>Optimized for security</p>"},{"location":"flavors/security/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/security@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-security:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor security</code></li> </ul>"},{"location":"flavors/security/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/security/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK PYTHON banditPYTHON_BANDIT"},{"location":"flavors/security/#formats","title":"Formats","text":"Format Linter Additional"},{"location":"flavors/security/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT CLOUDFORMATION cfn-lintCLOUDFORMATION_CFN_LINT DOCKERFILE hadolintDOCKERFILE_HADOLINT KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE TERRAFORM tflintTERRAFORM_TFLINT TERRAFORM terrascanTERRAFORM_TERRASCAN TERRAFORM terragruntTERRAFORM_TERRAGRUNT"},{"location":"flavors/security/#other","title":"Other","text":"Code quality checker Linter Additional REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY devskimREPOSITORY_DEVSKIM REPOSITORY dustilockREPOSITORY_DUSTILOCK REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY kicsREPOSITORY_KICS REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG"},{"location":"flavors/swift/","title":"swift MegaLinter Flavor","text":""},{"location":"flavors/swift/#description","title":"Description","text":"<p>Optimized for SWIFT based projects</p>"},{"location":"flavors/swift/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/swift@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-swift:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor swift</code></li> </ul>"},{"location":"flavors/swift/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/swift/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF SWIFT swiftlintSWIFT_SWIFTLINT"},{"location":"flavors/swift/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/swift/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT"},{"location":"flavors/swift/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"flavors/terraform/","title":"terraform MegaLinter Flavor","text":""},{"location":"flavors/terraform/#description","title":"Description","text":"<p>Optimized for TERRAFORM based projects</p>"},{"location":"flavors/terraform/#usage","title":"Usage","text":"<ul> <li>GitHub Action: oxsecurity/megalinter/flavors/terraform@v8.7.0</li> <li>Docker image: oxsecurity/megalinter-terraform:v8.7.0</li> <li>mega-linter-runner: <code>mega-linter-runner --flavor terraform</code></li> </ul>"},{"location":"flavors/terraform/#embedded-linters","title":"Embedded linters","text":""},{"location":"flavors/terraform/#languages","title":"Languages","text":"Language Linter Additional BASH bash-execBASH_EXEC BASH shellcheckBASH_SHELLCHECK BASH shfmtBASH_SHFMT GROOVY npm-groovy-lintGROOVY_NPM_GROOVY_LINT KOTLIN ktlintKOTLIN_KTLINT KOTLIN detektKOTLIN_DETEKT SQL sqlfluffSQL_SQLFLUFF"},{"location":"flavors/terraform/#formats","title":"Formats","text":"Format Linter Additional CSS stylelintCSS_STYLELINT ENV dotenv-linterENV_DOTENV_LINTER GRAPHQL graphql-schema-linterGRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlintHTML_DJLINT HTML htmlhintHTML_HTMLHINT JSON jsonlintJSON_JSONLINT JSON v8rJSON_V8R JSON prettierJSON_PRETTIER MARKDOWN markdownlintMARKDOWN_MARKDOWNLINT MARKDOWN markdown-link-checkMARKDOWN_MARKDOWN_LINK_CHECK MARKDOWN markdown-table-formatterMARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolintPROTOBUF_PROTOLINT XML xmllintXML_XMLLINT YAML prettierYAML_PRETTIER YAML yamllintYAML_YAMLLINT YAML v8rYAML_V8R"},{"location":"flavors/terraform/#tooling-formats","title":"Tooling formats","text":"Tooling format Linter Additional ACTION actionlintACTION_ACTIONLINT ANSIBLE ansible-lintANSIBLE_ANSIBLE_LINT API spectralAPI_SPECTRAL DOCKERFILE hadolintDOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checkerEDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeconformKUBERNETES_KUBECONFORM KUBERNETES helmKUBERNETES_HELM KUBERNETES kubescapeKUBERNETES_KUBESCAPE SNAKEMAKE snakefmtSNAKEMAKE_SNAKEFMT TEKTON tekton-lintTEKTON_TEKTON_LINT TERRAFORM tflintTERRAFORM_TFLINT TERRAFORM terrascanTERRAFORM_TERRASCAN TERRAFORM terragruntTERRAFORM_TERRAGRUNT TERRAFORM terraform-fmtTERRAFORM_TERRAFORM_FMT"},{"location":"flavors/terraform/#other","title":"Other","text":"Code quality checker Linter Additional COPYPASTE jscpdCOPYPASTE_JSCPD REPOSITORY checkovREPOSITORY_CHECKOV REPOSITORY git_diffREPOSITORY_GIT_DIFF REPOSITORY gitleaksREPOSITORY_GITLEAKS REPOSITORY grypeREPOSITORY_GRYPE REPOSITORY kicsREPOSITORY_KICS REPOSITORY ls-lintREPOSITORY_LS_LINT REPOSITORY secretlintREPOSITORY_SECRETLINT REPOSITORY semgrepREPOSITORY_SEMGREP REPOSITORY syftREPOSITORY_SYFT REPOSITORY trivyREPOSITORY_TRIVY REPOSITORY trivy-sbomREPOSITORY_TRIVY_SBOM REPOSITORY trufflehogREPOSITORY_TRUFFLEHOG SPELL cspellSPELL_CSPELL SPELL proselintSPELL_PROSELINT SPELL valeSPELL_VALE SPELL lycheeSPELL_LYCHEE"},{"location":"reporters/ApiReporter/","title":"Api / Grafana Reporter for MegaLinter","text":""},{"location":"reporters/ApiReporter/#api-reporter-beta","title":"API Reporter (beta)","text":"<p>Send results as logs and metrics to observability tools, like Grafana.</p>"},{"location":"reporters/ApiReporter/#usage","title":"Usage","text":"<p>Use Grafana default MegaLinter dashboards, and build new ones to monitor everything you need from MegaLinter logs and metrics.</p> <p></p> <p></p> <p>If you create new useful dashboards, please share them with the MegaLinter community by exporting them then create a pull request :)</p>"},{"location":"reporters/ApiReporter/#logs-configuration","title":"Logs Configuration","text":"<p>Define the following CI/CD variables:</p> <ul> <li>API_REPORTER_URL : API endpoint</li> <li>API_REPORTER_BASIC_AUTH_USERNAME : Basic auth username (if using Basic Auth)</li> <li>API_REPORTER_BASIC_AUTH_PASSWORD : Basic auth password/token (if using Basic Auth)</li> <li>API_REPORTER_BEARER_TOKEN : Bearer token (if using bearer auth)</li> </ul> <p>Examples of configuration:</p> <pre><code>API_REPORTER_URL=https://logs-prod-012.grafana.net/loki/api/v1/push\nAPI_REPORTER_BASIC_AUTH_USERNAME=3435645645\nAPI_REPORTER_BASIC_AUTH_PASSWORD=GHTRGDHDHdhghg23345DFG^sfg!ss\n</code></pre> <pre><code>API_REPORTER_URL=https://my.custom.endpoint.net\nAPI_REPORTER_BEARER_TOKEN=DDHGHfgfgjfhQESRDTHFKGKHFswgFHDHGDH\n</code></pre> <p>Example of logs sent to Loki:</p> <pre><code>{ \n  \"streams\": [\n   {\n    \"stream\": {\n     \"source\": \"MegaLinter\",\n     \"gitRepoName\": \"megalinter\",\n     \"gitBranchName\": \"tmpX\",\n     \"gitIdentifier\": \"megalinter/tmpX\",\n     \"orgIdentifier\": \"tmpX\",\n     \"descriptor\": \"REPOSITORY\",\n     \"linter\": \"trufflehog\",\n     \"linterKey\": \"REPOSITORY_TRUFFLEHOG\"\n    },\n    \"values\": [\n     [\n      \"1724005973602212834\",\n      \"{\\\"linterDocUrl\\\": \\\"https://megalinter.io/beta/descriptors/repository_trufflehog\\\", \\\"jobUrl\\\": \\\"https://github.com/oxsecurity/megalinter/actions/runs/10442830998\\\", \\\"severity\\\": \\\"warning\\\", \\\"severityIcon\\\": \\\"\\\\u26a0\\\\ufe0f\\\", \\\"output\\\": [\\\"\\\\ud83d\\\\udc37\\\\ud83d\\\\udd11\\\\ud83d\\\\udc37  TruffleHog. Unearth your secrets. \\\\etc...\\\"], \\\"cliLintMode\\\": \\\"project\\\", \\\"numberErrorsFound\\\": 1, \\\"elapsedTime\\\": 13.1}\"\n     ]\n    ]\n   },\n   {\n    \"stream\": {\n     \"source\": \"MegaLinter\",\n     \"gitRepoName\": \"megalinter\",\n     \"gitBranchName\": \"tmpX\",\n     \"gitIdentifier\": \"megalinter/tmpX\",\n     \"orgIdentifier\": \"tmpX\",\n     \"descriptor\": \"SPELL\",\n     \"linter\": \"cspell\",\n     \"linterKey\": \"SPELL_CSPELL\"\n    },\n    \"values\": [\n     [\n      \"1724005973602212834\",\n      \"{\\\"linterDocUrl\\\": \\\"https://megalinter.io/beta/descriptors/spell_cspell\\\", \\\"jobUrl\\\": \\\"https://github.com/oxsecurity/megalinter/actions/runs/10442830998\\\", \\\"severity\\\": \\\"success\\\", \\\"severityIcon\\\": \\\"\\\\u2705\\\", \\\"output\\\": [\\\"  1/680 .automation/build_schemas_doc.sh 1762.38ms\\\", \\\"  etc...\\\", \\\"CSpell: Files checked: 680, Issues found: 0 in 0 files.\\\"], \\\"cliLintMode\\\": \\\"list_of_files\\\", \\\"numberFilesFound\\\": 687, \\\"numberErrorsFound\\\": 0, \\\"elapsedTime\\\": 11.7}\"\n     ]\n    ]\n   },\n   {\n    \"stream\": {\n     \"source\": \"MegaLinter\",\n     \"gitRepoName\": \"megalinter\",\n     \"gitBranchName\": \"tmpX\",\n     \"gitIdentifier\": \"megalinter/tmpX\",\n     \"orgIdentifier\": \"tmpX\",\n     \"descriptor\": \"SPELL\",\n     \"linter\": \"lychee\",\n     \"linterKey\": \"SPELL_LYCHEE\"\n    },\n    \"values\": [\n     [\n      \"1724005973602212834\",\n      \"{\\\"linterDocUrl\\\": \\\"https://megalinter.io/beta/descriptors/spell_lychee\\\", \\\"jobUrl\\\": \\\"https://github.com/oxsecurity/megalinter/actions/runs/10442830998\\\", \\\"severity\\\": \\\"warning\\\", \\\"severityIcon\\\": \\\"\\\\u26a0\\\\ufe0f\\\", \\\"output\\\": [\\\"\\\\u2717 [404] https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository | Failed: Network error: Not Found\\\", \\\"\\\\u2717 [404] https://rabobank.jobs/en/techblog/coding-architecture/gijs-reijn-writing-documentation-as-a-champ-in-engineering-teams/ | Failed: Network error: Not Found\\\", \\\"\\\\ud83d\\\\udcdd Summary\\\", \\\"---------------------\\\", \\\"\\\\ud83d\\\\udd0d Total.........2322\\\", \\\"\\\\u2705 Successful....1889\\\", \\\"\\\\u23f3 Timeouts.........0\\\", \\\"\\\\ud83d\\\\udd00 Redirected.......0\\\", \\\"\\\\ud83d\\\\udc7b Excluded.......431\\\", \\\"\\\\u2753 Unknown..........0\\\", \\\"\\\\ud83d\\\\udeab Errors...........2\\\", \\\"\\\", \\\"Errors in README.md\\\", \\\"\\\\u2717 [404] https://rabobank.jobs/en/techblog/coding-architecture/gijs-reijn-writing-documentation-as-a-champ-in-engineering-teams/ | Failed: Network error: Not Found\\\", \\\"\\\\u2717 [404] https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository | Failed: Network error: Not Found\\\"], \\\"cliLintMode\\\": \\\"list_of_files\\\", \\\"numberFilesFound\\\": 346, \\\"numberErrorsFound\\\": 2, \\\"elapsedTime\\\": 6.17}\"\n     ]\n    ]\n   },\n  ]\n}\n</code></pre>"},{"location":"reporters/ApiReporter/#metrics-configuration","title":"Metrics Configuration","text":"<p>Additionally, you can send metrics in Prometheus format to a secondary API endpoint.</p> <p>The configuration is the same than for logs, but with different variable names.</p> <ul> <li>API_REPORTER_METRICS_URL</li> <li>API_REPORTER_METRICS_BASIC_AUTH_USERNAME</li> <li>API_REPORTER_METRICS_BASIC_AUTH_PASSWORD</li> <li>API_REPORTER_METRICS_BEARER_TOKEN</li> </ul> <p>Example of configuration:</p> <pre><code>API_REPORTER_METRICS_URL=https://influx-prod-72-prod-eu-west-2.grafana.net/api/v1/push/influx/write\nAPI_REPORTER_METRICS_BASIC_AUTH_USERNAME=345673\nAPI_REPORTER_METRICS_BASIC_AUTH_PASSWORD=GHTRGDHDHdhghg23345DFG^sfg!ss\n</code></pre> <p>Example of metrics sent to Prometheus</p> <pre><code>linter_run,source=MegaLinter,orgIdentifier=tmpX,gitIdentifier=megalinter/tmpX,gitRepoName=megalinter,gitBranchName=tmpX,descriptor=REPOSITORY,linter=trufflehog,linterKey=REPOSITORY_TRUFFLEHOG numberErrorsFound=1,elapsedTime=13.1\nlinter_run,source=MegaLinter,orgIdentifier=tmpX,gitIdentifier=megalinter/tmpX,gitRepoName=megalinter,gitBranchName=tmpX,descriptor=SPELL,linter=cspell,linterKey=SPELL_CSPELL numberErrorsFound=0,numberFilesFound=687,elapsedTime=11.7\nlinter_run,source=MegaLinter,orgIdentifier=tmpX,gitIdentifier=megalinter/tmpX,gitRepoName=megalinter,gitBranchName=tmpX,descriptor=SPELL,linter=lychee,linterKey=SPELL_LYCHEE numberErrorsFound=2,numberFilesFound=346,elapsedTime=6.17\n</code></pre>"},{"location":"reporters/ApiReporter/#troubleshooting","title":"Troubleshooting","text":"<p>If you want to see the content of the API notifications in execution logs, you can define <code>API_REPORTER_DEBUG=true</code></p>"},{"location":"reporters/ApiReporter/#all-configuration-variables","title":"All Configuration variables","text":"<p>The following variables must be sent to the docker run command</p> Variable Description Default value API_REPORTER Activates/deactivates API reporter <code>false</code> API_REPORTER_URL Logs endpoint URL API_REPORTER_BASIC_AUTH_USERNAME Logs endpoint auth username API_REPORTER_BASIC_AUTH_PASSWORD Logs endpoint auth password API_REPORTER_BEARER_TOKEN Logs endpoint auth token API_REPORTER_METRICS_URL Metrics endpoint URL API_REPORTER_METRICS_BASIC_AUTH_USERNAME Metrics endpoint auth username API_REPORTER_METRICS_BASIC_AUTH_PASSWORD Metrics endpoint auth password API_REPORTER_METRICS_BEARER_TOKEN Logs endpoint auth token API_REPORTER_DEBUG Activate to see notif content in MegaLinter console logs <code>false</code>"},{"location":"reporters/ApiReporter/#grafana-setup","title":"Grafana Setup","text":"<p>If you don't have a Grafana server, you can use Grafana Cloud Free Tier (14 days of logs &amp; metrics retention + 3 users, no credit card required, free forever)</p>"},{"location":"reporters/ApiReporter/#create-grafana-account","title":"Create Grafana Account","text":"<p>Create a Grafana Cloud Free account at this url</p> <p></p> <p>Input a Grafana Cloud org name (megalinter in the example)</p> <p></p> <p>Next screen, you can skip setup</p> <p></p>"},{"location":"reporters/ApiReporter/#gather-urls-auth-info","title":"Gather URLs &amp; auth info","text":"<p>Create a notepad when you copy paste the following text</p> <pre><code>API_REPORTER_URL=\nAPI_REPORTER_BASIC_AUTH_USERNAME=\nAPI_REPORTER_BASIC_AUTH_PASSWORD=\nAPI_REPORTER_METRICS_URL=\nAPI_REPORTER_METRICS_BASIC_AUTH_USERNAME=\nAPI_REPORTER_METRICS_BASIC_AUTH_PASSWORD=\n</code></pre>"},{"location":"reporters/ApiReporter/#get-loki-configuration","title":"Get Loki configuration","text":"<p>Go to Connections -&gt; Data Sources and click on grafanacloud-YOURORGNAME-logs (Loki)</p> <p></p> <p>Build Logs push url</p> <ul> <li>Copy value of Connection URL (something like <code>https://logs-prod-012.grafana.net/</code>)</li> <li>Add <code>/loki/api/v1/push</code> at the end</li> <li>Copy value to variables <code>API_REPORTER_URL</code></li> </ul> <p>Example: <code>API_REPORTER_URL=https://logs-prod-012.grafana.net/loki/api/v1/push</code></p> <p>Copy value of Authentication -&gt; User and paste it with variable <code>API_REPORTER_BASIC_AUTH_USERNAME</code></p> <p>Example: <code>API_REPORTER_BASIC_AUTH_USERNAME=898189</code></p> <p>Leave <code>API_REPORTER_BASIC_AUTH_PASSWORD</code> empty for now, you can't get it here</p> <p></p> <p>See Grafana documentation for more info</p>"},{"location":"reporters/ApiReporter/#get-prometheus-configuration","title":"Get Prometheus configuration","text":"<p>Go to Connections -&gt; Data Sources and click on grafanacloud-YOURORGNAME-prom (Prometheus)</p> <p></p> <p>Build Metrics push url</p> <ul> <li>Copy value of Connection URL (something like <code>https://prometheus-prod-24-prod-eu-west-2.grafana.net/api/prom</code>)</li> <li>Replace <code>prometheus</code> by <code>influx</code></li> <li>Replace <code>api/prom</code> by <code>api/v1/push/influx/write</code></li> <li>Then copy value to variables <code>API_REPORTER_METRICS_URL</code></li> </ul> <p>Example: <code>API_REPORTER_METRICS_URL=https://influx-prod-24-prod-eu-west-2.grafana.net/api/v1/push/influx/write</code></p> <p>Copy value of Authentication -&gt; User and paste it with variable <code>API_REPORTER_METRICS_BASIC_AUTH_USERNAME</code></p> <p>Example: <code>API_REPORTER_METRICS_BASIC_AUTH_USERNAME=1596503</code></p> <p>Leave <code>API_REPORTER_METRICS_BASIC_AUTH_PASSWORD</code> empty for now, you can't get it here</p> <p></p> <p>See Grafana documentation for more info</p>"},{"location":"reporters/ApiReporter/#create-service-account","title":"Create Service Account","text":"<p>Go to Administration -&gt; Users and Access -&gt; Cloud Access Policies, then click on Create Access Policy</p> <p></p> <p>Create the access policy</p> <ul> <li>Define MegaLinter as name and display name</li> <li>Select write for items metrics, logs, traces, profiles, alerts (only metrics and logs are used today, but who knows hat new features we'll release in the future !)</li> <li>Click on Create</li> </ul> <p></p> <p>On the new Access Policy <code>MegaLinter</code>, click on Add Token at the bottom right</p> <p></p> <p>Name it megalinter-token, let <code>No expiration</code> then click Create</p> <p></p> <p>On the next screen, click on Copy to clipboard then paste in your notepad in front of variables API_REPORTER_BASIC_AUTH_PASSWORD and API_REPORTER_METRICS_BASIC_AUTH_PASSWORD</p> <p></p> <p>Example:</p> <pre><code>API_REPORTER_BASIC_AUTH_PASSWORD=glc_eyJvIjoiMTEzMjI4OCIsIm4iOiJzZmR4arZW4iLCJrIjoiN0x6Mz1IM041IiwibSI6eyJyXN0LTIifX0=\nAPI_REPORTER_METRICS_BASIC_AUTH_PASSWORD=glc_eyJvIjoiMTEzMjI4OCIsIm4iOiJzZmR4arZW4iLCJrIjoiN0x6Mz1IM041IiwibSI6eyJyXN0LTIifX0=\n</code></pre>"},{"location":"reporters/ApiReporter/#configure-ci-variables-on-repository","title":"Configure CI variables on repository","text":"<p>Now configure all of the 6 variables on the repository running MegaLinter.</p> <p></p> <p>There value must be accessible from MegaLinter Docker image, so you might need to redeclare them in YML workflows depending on your git provider.</p> <p>Example with GitHub Workflow:</p> <p></p> <pre><code>          API_REPORTER: true\n          API_REPORTER_URL: ${{ secrets.API_REPORTER_URL }}\n          API_REPORTER_BASIC_AUTH_USERNAME: ${{ secrets.API_REPORTER_BASIC_AUTH_USERNAME }}\n          API_REPORTER_BASIC_AUTH_PASSWORD: ${{ secrets.API_REPORTER_BASIC_AUTH_PASSWORD }}\n          API_REPORTER_METRICS_URL: ${{ secrets.API_REPORTER_METRICS_URL }}\n          API_REPORTER_METRICS_BASIC_AUTH_USERNAME: ${{ secrets.API_REPORTER_METRICS_BASIC_AUTH_USERNAME }}\n          API_REPORTER_METRICS_BASIC_AUTH_PASSWORD: ${{ secrets.API_REPORTER_METRICS_BASIC_AUTH_PASSWORD }}\n          API_REPORTER_DEBUG: false\n</code></pre>"},{"location":"reporters/ApiReporter/#download-megalinter-dashboards","title":"Download MegaLinter dashboards","text":"<p>Download all MegaLinter Dashboard JSON files from this MegaLinter repo folder</p> <p></p>"},{"location":"reporters/ApiReporter/#create-dashboard-folder","title":"Create Dashboard folder","text":"<p>Go in menu Dashboards then click on New then New folder</p> <p></p> <p>Create folder <code>MegaLinter Dashboards</code></p> <p></p>"},{"location":"reporters/ApiReporter/#import-default-megalinter-grafana-dashboards","title":"Import default MegaLinter Grafana Dashboards","text":"<p>For each downloaded Dashboard JSON file, process the following actions.</p> <p>Click New then Import</p> <p></p> <p>Click on Upload Dashboard JSON File and select one of the Dashboards JSON files you downloaded on your computer.</p> <p></p> <ul> <li>Let Name, Folder and UID default values</li> <li>Select your Loki or Prometheus source. They can be:<ul> <li>grafanacloud-YOURORGNAME-logs (Loki)</li> <li>grafanacloud-YOURORGNAME-prom (Prometheus)</li> </ul> </li> <li>Click import</li> </ul> <p></p> <p>__</p> <p>Repeat the operation for all Dashboard JSON files, and you're all set !</p> <p></p>"},{"location":"reporters/AzureCommentReporter/","title":"Azure Pipelines Reporter for MegaLinter","text":""},{"location":"reporters/AzureCommentReporter/#azure-comment-reporter","title":"Azure Comment Reporter","text":"<p>Posts Mega-Linter results summary in the comments of the related Azure Pipelines pull request (if existing)</p>"},{"location":"reporters/AzureCommentReporter/#usage","title":"Usage","text":"<p>Click on MegaLinter-reports artifact from the main job log to view or download results.</p> <p></p>"},{"location":"reporters/AzureCommentReporter/#configuration","title":"Configuration","text":"<ul> <li>The following variables must be sent to the docker run command</li> </ul> <p>Example:</p> <pre><code>      - script: |\n          docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\\n            --env-file &lt;(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \\\n            -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\\n            -e SYSTEM_COLLECTIONURI=$(System.CollectionUri) \\\n            -e SYSTEM_PULLREQUEST_PULLREQUESTID=$(System.PullRequest.PullRequestId) \\\n            -e SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI=$(System.PullRequest.SourceRepositoryURI) \\\n            -e SYSTEM_TEAMPROJECT=\"$(System.TeamProject)\" \\\n            -e BUILD_BUILD_ID=$(Build.BuildId) \\\n            -e BUILD_REPOSITORY_ID=$(Build.Repository.ID) \\\n            -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\\n            oxsecurity/megalinter:v8\n        displayName: Run MegaLinter\n</code></pre> <ul> <li> <p>A build policy must be defined</p> <ul> <li>See https://docs.microsoft.com/en-US/azure/devops/repos/git/branch-policies?view=azure-devops&amp;tabs=browser#build-validation</li> </ul> </li> </ul> <ul> <li>You must allow Contribute and Contribute to Pull Requests on your Build Service (Settings -&gt; Repositories -&gt; Select your build service)</li> </ul> <p></p> Variable Description Default value AZURE_COMMENT_REPORTER Activates/deactivates reporter <code>true</code> AZURE_COMMENT_REPORTER_LINKS_TYPE Set to <code>build</code> if you want comments linking to target Build and not artifacts page <code>artifacts</code> AZURE_COMMENT_REPORTER_REPLACE_WITH_SPACES Do not replaces %20 by spaces in repo name if set to false <code>true</code> REPORTERS_MARKDOWN_TYPE Set to <code>simple</code> to avoid external images in generated markdown <code>advanced</code> JOB_SUMMARY_ADDITIONAL_MARKDOWN Custom markdown to add at the end of the summary message"},{"location":"reporters/BitbucketCommentReporter/","title":"Bitbucket Pull Request Comments Reporter for MegaLinter","text":""},{"location":"reporters/BitbucketCommentReporter/#bitbucket-comment-reporter","title":"Bitbucket Comment Reporter","text":"<p>Posts MegaLinter results summary in the comments of the related Bitbucket pull request (if existing)</p>"},{"location":"reporters/BitbucketCommentReporter/#usage","title":"Usage","text":"<p>Click on hyperlinks to access detailed logs (click on Download in Artifacts section at the left of a CI job page)</p> <p></p> <p>After a first MegaLinter run, a comment is posted on the PR. To avoid multiplicating MegaLinter PR comments, future MegaLinter runs will update the existing PR comment instead of posting a new one.</p> <p>If you really want a new PR comment for each MegaLinter run, define variable <code>BITBUCKET_COMMENT_REPORTER_OVERWRITE_COMMENT</code> to <code>false</code>.</p>"},{"location":"reporters/BitbucketCommentReporter/#configuration","title":"Configuration","text":"<ul> <li>Create a Repository Access Token with scope Pull-requests: Write</li> <li>Paste the access token in a masked CI/CD variable named BITBUCKET_REPO_ACCESS_TOKEN in your project (repository)</li> </ul> Variable Description Default value BITBUCKET_COMMENT_REPORTER Activates/deactivates reporter <code>true</code> BITBUCKET_REPO_ACCESS_TOKEN Must contain a Bitbucket repository access token defined with api access BITBUCKET_COMMENT_REPORTER_OVERWRITE_COMMENT Set to false to not overwrite existing comments in case of new runs on the same Pull Request <code>true</code> JOB_SUMMARY_ADDITIONAL_MARKDOWN Custom markdown to add at the end of the summary message"},{"location":"reporters/ConfigReporter/","title":"IDE Configuration Reporter","text":"<p>Generates a folder IDE-config located in report folder.</p> <p>It contains:</p> <ul> <li>All default MegaLinter configuration files used during the linting</li> <li>Updated <code>.vscode/extensions.json</code> containing VsCode extensions corresponding to the linters used during MegaLinter run</li> <li>Updated <code>.idea/externalDependencies.xml</code> containing IntelliJ extensions corresponding to the linters used during MegaLinter run</li> </ul> <p>This reporter activated by default.</p> <p></p> <p></p> <p></p>"},{"location":"reporters/ConfigReporter/#usage","title":"Usage","text":"<ul> <li>Copy the content of <code>report/IDE-config</code> at the root of your repository<ul> <li>You can copy all IDE_Config folder, or select config files and IDE extensions recommendations that you are interested into</li> </ul> </li> <li>Restart your IDE</li> </ul>"},{"location":"reporters/ConfigReporter/#configuration","title":"Configuration","text":"Variable Description Default value CONFIG_REPORTER Activates/deactivates reporter true CONFIG_REPORTER_SUB_FOLDER Output folder for IDE configuration files within report folder <code>IDE-config</code>"},{"location":"reporters/ConsoleReporter/","title":"Console Reporter","text":"<p>Posts MegaLinter results execution logs in the console</p>"},{"location":"reporters/ConsoleReporter/#usage","title":"Usage","text":"<p>Open GitHub action (or other CI tool) logs and look in MegaLinter step</p> <p></p>"},{"location":"reporters/ConsoleReporter/#configuration","title":"Configuration","text":"Variable Description Default value CONSOLE_REPORTER Activates/deactivates reporter true CONSOLE_REPORTER_SECTIONS Activates/deactivates sections for console logs true OUTPUT_DETAIL <code>simple</code> for only error files, <code>detailed</code> for all files <code>simple</code>"},{"location":"reporters/EmailReporter/","title":"E-mail Reporter","text":"<p>If you don't use artifacts upload to read MegaLinter reports, you can receive them by e-mail</p>"},{"location":"reporters/EmailReporter/#usage","title":"Usage","text":"<p>Define related variables below allowing to send e-mails.</p> <p>To use with a gmail account, you have to previously follow these steps</p> <p>Reports are sent to the defined e-mail address at the end of each MegaLinter run</p> <p></p>"},{"location":"reporters/EmailReporter/#configuration","title":"Configuration","text":"Variable Description Default value EMAIL_REPORTER Activates/deactivates reporter true EMAIL_REPORTER_EMAIL Comma-separated list of recipient emails, that will receive reports EMAIL_REPORTER_SEND_SUCCESS Define to <code>true</code> if you want to receive reports by mail even when there is no errors or updated sources <code>false</code> EMAIL_REPORTER_SENDER Sender of emails megalinter@gmail.com EMAIL_REPORTER_SMTP_HOST SMTP server host smtp.gmail.com EMAIL_REPORTER_SMTP_PORT SMTP server port 465 EMAIL_REPORTER_SMTP_USERNAME SMTP server username megalinter@gmail.com EMAIL_REPORTER_SMTP_PASSWORD SMTP server password. Never hardcode it in a config variable, use secrets and context variables"},{"location":"reporters/FileIoReporter/","title":"File.io Reporter","text":"<p>If you don't use artifacts upload to read MegaLinter reports, you can access them with an hyperlink to file.io</p> <p>important: MegaLinter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically)</p> <p>This reporter is deactivated by default.</p>"},{"location":"reporters/FileIoReporter/#usage","title":"Usage","text":"<p>Activate the reporter (<code>FILEIO_REPORTER: true</code>) to see link to reports zip on file.io</p> <ul> <li>Get the file.io hyperlink at the end of Mega-linter console output</li> </ul> <p></p> <ul> <li>Download file on file.io: it's immediately deleted on the server so it can be downloaded only once</li> </ul> <p></p> <ul> <li>Browse reports</li> </ul> <p></p>"},{"location":"reporters/FileIoReporter/#configuration","title":"Configuration","text":"Variable Description Default value FILEIO_REPORTER Activates/deactivates reporter <code>false</code> FILEIO_REPORTER_SEND_SUCCESS Skip sending report to file.io if the lint is in success <code>false</code>"},{"location":"reporters/GitHubCommentReporter/","title":"GitHub Pull Request Comments Reporter for MegaLinter","text":""},{"location":"reporters/GitHubCommentReporter/#github-comment-reporter","title":"GitHub Comment Reporter","text":"<p>Posts MegaLinter results summary in the comments of the related pull request (if existing)</p>"},{"location":"reporters/GitHubCommentReporter/#usage","title":"Usage","text":"<p>Click on hyperlinks to access detailed logs</p> <p></p>"},{"location":"reporters/GitHubCommentReporter/#configuration","title":"Configuration","text":"Variable Description Default value Notes GITHUB_COMMENT_REPORTER Activates/deactivates reporter true GITHUB_API_URL URL where the github API can be reachedMust be overridden if using GitHub Enterprise <code>https://api.github.com</code> For GHE, use <code>https://my.company.com/api/v3</code> GITHUB_SERVER_URL URL of the GitHub instanceMust be overridden if using GitHub Enterprise <code>https://github.com</code> CI_ACTION_RUN_URL URL of the CI job visualization page url (if using Github but not GitHub Actions) REPORTERS_MARKDOWN_TYPE Set to <code>simple</code> to avoid external images in generated markdown <code>advanced</code> JOB_SUMMARY_ADDITIONAL_MARKDOWN Custom markdown to add at the end of the summary message"},{"location":"reporters/GitHubStatusReporter/","title":"GitHub Pull Request Status Reporter for MegaLinter","text":""},{"location":"reporters/GitHubStatusReporter/#github-status-reporter","title":"GitHub Status Reporter","text":"<p>Posts a status on the pull request for each processed linter</p>"},{"location":"reporters/GitHubStatusReporter/#usage","title":"Usage","text":"<p>Click on Details to access detailed logs</p> <p></p>"},{"location":"reporters/GitHubStatusReporter/#configuration","title":"Configuration","text":"Variable Description Default value GITHUB_STATUS_REPORTER Activates/deactivates reporter false GITHUB_API_URL URL where the github API can be reachedMust be overridden if using GitHub Enterprise <code>https://api.github.com</code> GITHUB_SERVER_URL URL of the GitHub instanceMust be overridden if using GitHub Enterprise <code>https://github.com</code>"},{"location":"reporters/GitlabCommentReporter/","title":"Gitlab Merge Request Comments Reporter for MegaLinter","text":""},{"location":"reporters/GitlabCommentReporter/#gitlab-comment-reporter","title":"Gitlab Comment Reporter","text":"<p>Posts MegaLinter results summary in the comments of the related Gitlab merge request (if existing)</p>"},{"location":"reporters/GitlabCommentReporter/#usage","title":"Usage","text":"<p>Click on hyperlinks to access detailed logs (click on Download in Artifacts section at the left of a CI job page)</p> <p></p> <p>After a first MegaLinter run, a comment is posted on the MR. To avoid multiplicating MegaLinter MR comments, future MegaLinter runs will update the existing MR comment instead of posting a new one.</p> <p>If you really want a new MR comment for each MegaLinter run, define variable <code>GITLAB_COMMENT_REPORTER_OVERWRITE_COMMENT</code> to <code>false</code>.</p>"},{"location":"reporters/GitlabCommentReporter/#configuration","title":"Configuration","text":"<ul> <li>Create an access token with scope api</li> <li>Paste the access token in a masked CI/CD variable named GITLAB_ACCESS_TOKEN_MEGALINTER in your project (repository)</li> </ul> Variable Description Default value GITLAB_COMMENT_REPORTER Activates/deactivates reporter <code>true</code> GITLAB_ACCESS_TOKEN_MEGALINTER Must contain a Gitlab private access token defined with api access GITLAB_COMMENT_REPORTER_OVERWRITE_COMMENT Set to false to not overwrite existing comments in case of new runs on the same Merge Request <code>true</code> GITLAB_CUSTOM_CERTIFICATE SSL certificate value to connect to Gitlab GITLAB_CERTIFICATE_PATH Path to SSL certificate to connect to Gitlab (if SSL cert has been manually defined with PRE_COMMANDS) REPORTERS_MARKDOWN_TYPE Set to <code>simple</code> to avoid external images in generated markdown <code>advanced</code> JOB_SUMMARY_ADDITIONAL_MARKDOWN Custom markdown to add at the end of the summary message"},{"location":"reporters/GitlabCommentReporter/#special-thanks","title":"Special Thanks","text":"<ul> <li>Special thanks to John Berkers for his assistance in making Gitlab reporter work with self-hosted gitlab instances secured by certificates :)</li> </ul>"},{"location":"reporters/JsonReporter/","title":"JSON Reporter","text":"<p>Generates a full execution log in JSON format within a file named mega-linter-report.json , located in report folder</p> <p>This reporter is deactivated by default.</p> <p></p>"},{"location":"reporters/JsonReporter/#usage","title":"Usage","text":"<p>Activate the reporter (<code>JSON_REPORTER: true</code>) to generate JSON report file</p>"},{"location":"reporters/JsonReporter/#configuration","title":"Configuration","text":"Variable Description Default value JSON_REPORTER Activates/deactivates reporter false JSON_REPORTER_OUTPUT_DETAIL \"simple\" or \"detailed\" simple JSON_REPORTER_FILE_NAME File name for JSON report output file mega-linter-report.json"},{"location":"reporters/MarkdownSummaryReporter/","title":"Markdown Summary Reporter","text":"<p>Generates a summary of SAST results in Markdown within a file named megalinter-report.md, located in the report folder.</p> <p>This reporter is deactivated by default.</p> <p></p> <p></p>"},{"location":"reporters/MarkdownSummaryReporter/#usage","title":"Usage","text":"<p>Activate the reporter (<code>MARKDOWN_SUMMARY_REPORTER: true</code>) to generate markdown summary report file.</p>"},{"location":"reporters/MarkdownSummaryReporter/#configuration","title":"Configuration","text":"Variable Description Default value MARKDOWN_SUMMARY_REPORTER Activates/deactivates reporter <code>false</code> MARKDOWN_SUMMARY_REPORTER_FILE_NAME File name for MARKDOWN_SUMMARY report output file <code>megalinter-report.md</code> JOB_SUMMARY_ADDITIONAL_MARKDOWN Custom markdown to add at the end of the summary message"},{"location":"reporters/SarifReporter/","title":"SARIF Reporter (beta)","text":"<p>Generates a full execution log in SARIF format within a file named mega-linter-report.sarif , located in report folder.</p> <p>Note: Only linters able to handle SARIF will provide output in the aggregated SARIF file.</p> <p>This reporter is deactivated by default.</p> <p></p> <p></p>"},{"location":"reporters/SarifReporter/#usage","title":"Usage","text":"<p>Activate the reporter (<code>SARIF_REPORTER: true</code>) to generate JSON report file.</p> <p>If you want GitHub to handle the SARIF file to display it in its UI, add the following step in your GitHub Action Workflow.</p> <pre><code>- name: Upload MegaLinter scan results to GitHub Security tab\nif: success() || failure()\nuses: github/codeql-action/upload-sarif@v2\nwith:\n    sarif_file: 'megalinter-reports/megalinter-report.sarif'\n</code></pre>"},{"location":"reporters/SarifReporter/#configuration","title":"Configuration","text":"Variable Description Default value SARIF_REPORTER Activates/deactivates reporter <code>false</code> SARIF_REPORTER_NORMALIZE_LINTERS_OUTPUT Remove DEFAULT_WORKSPACE prefix in SARIF-files, for example 'DEFAULT_WORKSPACE/src/main' would be 'src/main' etc. <code>true</code> SARIF_REPORTER_FILE_NAME File name for SARIF report output file <code>megalinter-report.sarif</code> SARIF_REPORTER_LINTERS List of linter keys that will output SARIF (if not set, all SARIF compliant linters will output SARIF) <code>[]</code>"},{"location":"reporters/TapReporter/","title":"TAP Reporter","text":"<p>Posts a pack of TAP logs , zipped as a GitHub Action artifact</p> <ul> <li>A separate TAP file for each processed linter</li> </ul> <p>Warning: When TAP_REPORTER is <code>true</code>:</p> <ul> <li>Performances: all linters with CLI lint mode <code>list_of_files</code> are switched to <code>file</code> mode, so linter is called ont time per file to analyze</li> <li>Scope: all linters with CLI lint mode <code>project</code> are deactivated</li> </ul> <p>For those reasons\u2026 why not having a look at SARIF reporter, that doesn't have those issues ?</p>"},{"location":"reporters/TapReporter/#usage","title":"Usage","text":"<p>Access GitHub action run</p> <p></p> <p>Click on Artifacts then click on MegaLinter reports</p> <p></p> <p>Open the downloaded zip file and browse linters TAP reports</p>"},{"location":"reporters/TapReporter/#other-ci-tools","title":"Other CI tools","text":"<p>If you aren't using GitHub Actions, you can export <code>mega-linter.log</code> and folder <code>&lt;WORKSPACE&gt;/megalinter-reports</code></p>"},{"location":"reporters/TapReporter/#configuration","title":"Configuration","text":"Variable Description Default value TAP_REPORTER Activates/deactivates reporter <code>false</code> TAP_REPORTER_OUTPUT_DETAIL If <code>detailed</code>, all files will be in TAP output, else only files with issues will be present <code>simple</code> TAP_REPORTER_SUB_FOLDER Sub-folder of reports folder containing tap logs <code>tap</code>"},{"location":"reporters/TextReporter/","title":"Text Reporter","text":"<p>Generate text logs for each linter</p> <ul> <li>General execution log <code>mega-linter.log</code> (same as ConsoleReporter log)</li> <li>A separate log file for each processed linter</li> </ul>"},{"location":"reporters/TextReporter/#usage","title":"Usage","text":""},{"location":"reporters/TextReporter/#get-artifacts-on-github-actions","title":"Get Artifacts on GitHub Actions","text":"<ul> <li>Access GitHub action run</li> </ul> <ul> <li>Click on Artifacts then click on MegaLinter reports</li> </ul>"},{"location":"reporters/TextReporter/#get-artifacts-on-gitlab-ci","title":"Get Artifacts on GitLab CI","text":"<ul> <li>Access GitLab CI job page</li> </ul> <ul> <li>In Job Artifacts section, click on Download</li> </ul>"},{"location":"reporters/TextReporter/#other-ci-tools","title":"Other CI tools","text":"<ul> <li>You can export <code>mega-linter.log</code> and folder <code>&lt;WORKSPACE&gt;/report</code> as external artifacts</li> </ul> <ul> <li>You can also use File.io Reporter or E-mail Reporter</li> </ul>"},{"location":"reporters/TextReporter/#report-folder-structure","title":"Report folder structure","text":"<ul> <li>Open the downloaded zip file and browse linters_logs folder for reports</li> </ul>"},{"location":"reporters/TextReporter/#configuration","title":"Configuration","text":"Variable Description Default value TEXT_REPORTER Activates/deactivates reporter <code>true</code> TEXT_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs <code>linters_logs</code>"},{"location":"reporters/UpdatedSourcesReporter/","title":"Updated Sources Reporter","text":"<p>Posts a pack of files containing only the source files fixed by linters</p> <p>This folder can be unpacked to currently repository to apply automated fixes on the repository</p>"},{"location":"reporters/UpdatedSourcesReporter/#usage","title":"Usage","text":"<p>Access GitHub action run</p> <p></p> <p>Click on Artifacts then click on MegaLinter reports</p> <p></p> <p>Open the downloaded zip file and copy the content of folder updated_sources</p> <p></p> <p></p> <p>Paste the result in your repository</p>"},{"location":"reporters/UpdatedSourcesReporter/#other-ci-tools","title":"Other CI tools","text":"<p>If you aren't using GitHub Actions, you can:</p> <ul> <li>use File.io Reporter: Updated sources folder will be in the downloadable reports zip</li> <li>use Email Reporter: Updated source folder will be in the email attachment reports zip</li> <li>publish folder <code>&lt;WORKSPACE&gt;/report/updated_sources</code> as artifact with your CI tool</li> </ul>"},{"location":"reporters/UpdatedSourcesReporter/#configuration","title":"Configuration","text":"Variable Description Default value UPDATED_SOURCES_REPORTER Activates/deactivates reporter true UPDATED_SOURCES_REPORTER_DIR Sub-folder of reports folder containing updated sources updated_sources"}]}