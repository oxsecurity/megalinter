# syntax=docker/dockerfile:1
# MEGALINTER FLAVOR [formatters]: Contains only formatters
###########################################
###########################################
## Dockerfile to run MegaLinter ##
###########################################
###########################################

# @not-generated

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARGTOP__START
# renovate: datasource=docker depName=mvdan/shfmt
ARG BASH_SHFMT_VERSION=v3.12.0-alpine
# renovate: datasource=docker depName=alpine/terragrunt
ARG TERRAFORM_TERRAGRUNT_VERSION=1.13.3
#ARGTOP__END

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#FROM__START
FROM mvdan/shfmt:${BASH_SHFMT_VERSION} AS shfmt
FROM alpine/terragrunt:${TERRAFORM_TERRAGRUNT_VERSION} AS terragrunt
#FROM__END

##################
# Build wheel for megalinter python package
##################
FROM ghcr.io/astral-sh/uv:0.8.17 AS uv
# Steps specific to linux/amd64 needed before build-ml-core stage
FROM python:3.13-alpine3.22 AS build-ml-core-linux-amd64--x
# Steps specific to linux/arm64 needed before build-ml-core stage
FROM python:3.13-alpine3.22 AS build-ml-core-linux-arm64--x
ARG RUST_RUST_VERSION
# https://github.com/oxsecurity/megalinter/pull/2273#issuecomment-3316202297
RUN apk -U --no-cache upgrade \
    && apk add --no-cache \
                curl \
                build-base \
                libgcc \
                musl-dev \
    && curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain ${RUST_RUST_VERSION} \
    && export PATH="/root/.cargo/bin:/root/.cargo/env:${PATH}" \
    && rustup default \
    && rustup default stable \
    && rm -rf /root/.cargo/registry /root/.cargo/git /root/.cache/sccache
ENV PATH="/root/.cargo/bin:/root/.cargo/env:${PATH}" 1Code has comments. Press enter to view.

FROM build-ml-core-${TARGETOS}-${TARGETARCH}-${TARGETVARIANT}-x AS build-ml-core
ENV UV_LINK_MODE=copy
# Disable Python downloads, because we want to use the system interpreter
# across images. If using a managed Python version, it needs to be
# copied from the build image into the final image
ENV UV_PYTHON_DOWNLOADS=0
WORKDIR /
COPY --from=uv /uv /uvx /bin/
# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv,sharing=locked \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-dev
# Copy the project into the image
COPY . .
# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv,sharing=locked \
    uv sync --locked --no-dev

##################
# Get base image #
##################

FROM python:3.13-alpine3.22 AS final

# Disable Python downloads, because we want to use the system interpreter
# across images. If using a managed Python version, it needs to be
# copied from the build image into the final image
ENV UV_PYTHON_DOWNLOADS=0

# https://github.com/oxsecurity/megalinter/pull/2273#issuecomment-3316202297
RUN apk -U --no-cache upgrade \
    && apk add --no-cache curl \
    && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARG__START
# renovate: datasource=crate depName=sarif-fmt
ARG CARGO_SARIF_FMT_VERSION=0.8.0
ARG TARGETPLATFORM
# renovate: datasource=github-tags depName=PowerShell/PowerShell
ARG POWERSHELL_VERSION=7.5.3

# renovate: datasource=npm depName=typescript
ARG NPM_TYPESCRIPT_VERSION=5.9.2
# renovate: datasource=nuget depName=csharpier
ARG CSHARP_CSHARPIER_VERSION=1.1.2
# renovate: datasource=nuget depName=roslynator.dotnet.cli
ARG CSHARP_ROSLYNATOR_VERSION=0.10.2
# renovate: datasource=npm depName=prettier
ARG NPM_PRETTIER_VERSION=3.6.2
# renovate: datasource=npm depName=markdownlint-cli
ARG NPM_MARKDOWNLINT_CLI_VERSION=0.45.0
# renovate: datasource=npm depName=markdown-table-formatter
ARG NPM_MARKDOWN_TABLE_FORMATTER_VERSION=1.6.1
# renovate: datasource=nuget depName=PSScriptAnalyzer registryUrl=https://www.powershellgallery.com/api/v2/
ARG PSSA_VERSION='1.24.0'

# renovate: datasource=pypi depName=black
ARG PIP_BLACK_VERSION=25.9.0
# renovate: datasource=pypi depName=isort
ARG PIP_ISORT_VERSION=6.0.1
# renovate: datasource=pypi depName=ruff
ARG PIP_RUFF_VERSION=0.13.2
# renovate: datasource=pypi depName=rstfmt
ARG PIP_RSTFMT_VERSION=0.0.14
# renovate: datasource=pypi depName=snakefmt
ARG PIP_SNAKEFMT_VERSION=0.11.2
# renovate: datasource=pypi depName=pip
ARG PIP_PIP_VERSION=25.2
# renovate: datasource=pypi depName=virtualenv
ARG PIP_VIRTUALENV_VERSION=20.34.0
# renovate: datasource=github-tags depName=rust-lang/rust
ARG RUST_RUST_VERSION=1.90.0

ARG BASH_SHFMT_VERSION
ARG TERRAFORM_TERRAGRUNT_VERSION
#ARG__END

####################
# Run APK installs #
####################

WORKDIR /
COPY --from=uv /uv /uvx /bin/

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#APK__START
RUN apk -U --no-cache upgrade \
    && apk add --no-cache \
                bash \
                ca-certificates \
                curl \
                gcc \
                git \
                git-lfs \
                libffi-dev \
                make \
                musl-dev \
                openssh \
                icu-libs \
                npm \
                nodejs-current \
                yarn \
    && git config --global core.autocrlf true
#APK__END

# PATH for golang & python
ENV GOROOT=/usr/lib/go \
    GOPATH=/go
    # PYTHONPYCACHEPREFIX="$HOME/.cache/cpython/" NV: not working for all packages :/
# hadolint ignore=DL3044
ENV PATH="$PATH":"$GOROOT"/bin:"$GOPATH"/bin
RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \
    # Ignore npm package issues
    yarn config set ignore-engines true || true

##############################
# Installs rust dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#CARGO__START
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain ${RUST_RUST_VERSION} \
    && export PATH="/root/.cargo/bin:/root/.cargo/env:${PATH}" \
    && rustup default stable \
    && cargo install --force --locked sarif-fmt@${CARGO_SARIF_FMT_VERSION} \
    && rm -rf /root/.cargo/registry /root/.cargo/git /root/.cache/sccache /root/.rustup
ENV PATH="/root/.cargo/bin:/root/.cargo/env:${PATH}"
#CARGO__END

################################
# Installs python dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV__START
RUN uv pip install --system --no-cache pip==${PIP_PIP_VERSION} virtualenv==${PIP_VIRTUALENV_VERSION} \
    && uv venv --seed --no-project --no-managed-python --no-cache "/venvs/black" && VIRTUAL_ENV="/venvs/black" uv pip install --no-cache black[jupyter]==${PIP_BLACK_VERSION} \
    && uv venv --seed --no-project --no-managed-python --no-cache "/venvs/isort" && VIRTUAL_ENV="/venvs/isort" uv pip install --no-cache black==${PIP_BLACK_VERSION} isort==${PIP_ISORT_VERSION} \
    && uv venv --seed --no-project --no-managed-python --no-cache "/venvs/ruff-format" && VIRTUAL_ENV="/venvs/ruff-format" uv pip install --no-cache ruff==${PIP_RUFF_VERSION} \
    && uv venv --seed --no-project --no-managed-python --no-cache "/venvs/rstfmt" && VIRTUAL_ENV="/venvs/rstfmt" uv pip install --no-cache rstfmt==${PIP_RSTFMT_VERSION} \
    && uv venv --seed --no-project --no-managed-python --no-cache "/venvs/snakefmt" && VIRTUAL_ENV="/venvs/snakefmt" uv pip install --no-cache snakefmt==${PIP_SNAKEFMT_VERSION}  \
    && find /venvs \( -type f \( -iname \*.pyc -o -iname \*.pyo \) -o -type d -iname __pycache__ \) -delete \
    && rm -rf /root/.cache
ENV PATH="${PATH}":/venvs/black/bin:/venvs/isort/bin:/venvs/ruff-format/bin:/venvs/rstfmt/bin:/venvs/snakefmt/bin
#PIPVENV__END

############################
# Install NPM dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

ENV NODE_OPTIONS="--max-old-space-size=8192" \
    NODE_ENV=production
#NPM__START
WORKDIR /node-deps
RUN npm --no-cache install --ignore-scripts --omit=dev \
                typescript@${NPM_TYPESCRIPT_VERSION} \
                prettier@${NPM_PRETTIER_VERSION} \
                markdownlint-cli@${NPM_MARKDOWNLINT_CLI_VERSION} \
                markdown-table-formatter@${NPM_MARKDOWN_TABLE_FORMATTER_VERSION} && \
    echo "Cleaning npm cache…" \
    && (npm cache clean --force || true) \
    && echo "Changing owner of node_modules files…" \
    && chown -R "$(id -u)":"$(id -g)" node_modules # fix for https://github.com/npm/cli/issues/5900 \
    && echo "Removing extra node_module files…" \
    && find . \( -not -path "/proc" \) -and \( -type f \( -iname "*.d.ts" -o -iname "*.map" -o -iname "*.npmignore" -o -iname "*.travis.yml" -o -iname "CHANGELOG.md" -o -iname "README.md" -o -iname ".package-lock.json" -o -iname "package-lock.json" \) -o -type d -name /root/.npm/_cacache \) -delete
WORKDIR /

#NPM__END

# Add node packages to path #
ENV PATH="/node-deps/node_modules/.bin:${PATH}" \
    NODE_PATH="/node-deps/node_modules"

##############################
# Installs ruby dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#GEM__START

#GEM__END

##############################
# COPY instructions #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#COPY__START
COPY --link --from=shfmt /bin/shfmt /usr/bin/
COPY --link --from=terragrunt /bin/terraform /usr/bin/
#COPY__END

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#OTHER__START
# CSHARP installation
RUN apk add --no-cache dotnet9-sdk
ENV PATH="${PATH}:/root/.dotnet/tools"
#
# POWERSHELL installation
RUN case ${TARGETPLATFORM} in \
  "linux/amd64")  POWERSHELL_ARCH=musl-x64 ;; \
  "linux/arm64")  POWERSHELL_ARCH=arm64    ;; \
esac \
    && curl -L https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-${POWERSHELL_ARCH}.tar.gz -o /tmp/powershell.tar.gz \
    && mkdir -p /opt/microsoft/powershell/7 \
    && tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 \
    && chmod +x /opt/microsoft/powershell/7/pwsh \
    && ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh \
#
# TYPESCRIPT installation
#
# VBDOTNET installation
# Next line commented because already managed by another linter
# RUN apk add --no-cache dotnet9-sdk
# Next line commented because already managed by another linter
# ENV PATH="${PATH}:/root/.dotnet/tools"
#
# shfmt installation
# Managed with COPY --link --from=shfmt /bin/shfmt /usr/bin/
#
# csharpier installation
    && dotnet tool install --allow-roll-forward --global csharpier --version "${CSHARP_CSHARPIER_VERSION}" \
#
# roslynator installation
    && dotnet tool install --allow-roll-forward --global roslynator.dotnet.cli --version "${CSHARP_ROSLYNATOR_VERSION}" \
#
# prettier installation
#
# prettier installation
#
# markdownlint installation
#
# markdown-table-formatter installation
#
# powershell_formatter installation
    && pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'
#
# black installation
#
# isort installation
#
# ruff-format installation
#
# rstfmt installation
#
# snakefmt installation
#
# terraform-fmt installation
# Managed with COPY --link --from=terragrunt /bin/terraform /usr/bin/
#
# prettier installation
#
# prettier installation
#
#OTHER__END

################################
# Installs python dependencies #
################################
COPY --from=build-ml-core pyproject.toml README.md ./
COPY --from=build-ml-core megalinter /megalinter/
ENV UV_LINK_MODE=copy
# TODO: technically, our builds should be working without the cache mount being available
# Since we only install the rust toolchain in the linux/arm64 branch of build-ml-core to 
# build wheels that aren't available for musl linux/arm64, this final stage will fail if
# the pre-build wheels aren't available anymore in between the two stages.
RUN --mount=type=cache,target=/root/.cache/uv,sharing=locked \\
    --mount=from=uv,source=/uv,target=/bin/uv \
    uv pip install --system -e .

#######################################
# Copy scripts and rules to container #
#######################################
COPY megalinter/descriptors /megalinter-descriptors
COPY TEMPLATES /action/lib/.automation

# Copy server scripts
COPY server /server

###########################
# Get the build arguments #
###########################
ARG BUILD_DATE
ARG BUILD_REVISION
ARG BUILD_VERSION

#################################################
# Set ENV values used for debugging the version #
#################################################
ENV BUILD_DATE=$BUILD_DATE \
    BUILD_REVISION=$BUILD_REVISION \
    BUILD_VERSION=$BUILD_VERSION

#FLAVOR__START
ENV MEGALINTER_FLAVOR=formatters
#FLAVOR__END

#########################################
# Label the instance and set maintainer #
#########################################
LABEL com.github.actions.name="MegaLinter" \
      com.github.actions.description="The ultimate linters aggregator to make sure your projects are clean" \
      com.github.actions.icon="code" \
      com.github.actions.color="red" \
      maintainer="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$BUILD_REVISION \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.authors="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.url="https://megalinter.io" \
      org.opencontainers.image.source="https://github.com/oxsecurity/megalinter" \
      org.opencontainers.image.documentation="https://megalinter.io" \
      org.opencontainers.image.vendor="Nicolas Vuillamy" \
      org.opencontainers.image.description="Lint your code base with GitHub Actions"

#EXTRA_DOCKERFILE_LINES__START
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x entrypoint.sh
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
#EXTRA_DOCKERFILE_LINES__END
